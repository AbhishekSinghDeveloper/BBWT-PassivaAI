//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ./MySqlParser.g4 by ANTLR 4.13.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using BBF.Reporting.QueryBuilder.Generated;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.2")]
[System.CLSCompliant(false)]
public partial class MySqlParser : MySqlParserBase {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		NOT2_SYMBOL=1, CONCAT_PIPES_SYMBOL=2, INT_NUMBER=3, LONG_NUMBER=4, ULONGLONG_NUMBER=5,
		EQUAL_OPERATOR=6, ASSIGN_OPERATOR=7, NULL_SAFE_EQUAL_OPERATOR=8, GREATER_OR_EQUAL_OPERATOR=9,
		GREATER_THAN_OPERATOR=10, LESS_OR_EQUAL_OPERATOR=11, LESS_THAN_OPERATOR=12,
		NOT_EQUAL_OPERATOR=13, PLUS_OPERATOR=14, MINUS_OPERATOR=15, MULT_OPERATOR=16,
		DIV_OPERATOR=17, MOD_OPERATOR=18, LOGICAL_NOT_OPERATOR=19, BITWISE_NOT_OPERATOR=20,
		SHIFT_LEFT_OPERATOR=21, SHIFT_RIGHT_OPERATOR=22, LOGICAL_AND_OPERATOR=23,
		BITWISE_AND_OPERATOR=24, BITWISE_XOR_OPERATOR=25, LOGICAL_OR_OPERATOR=26,
		BITWISE_OR_OPERATOR=27, DOT_SYMBOL=28, COMMA_SYMBOL=29, SEMICOLON_SYMBOL=30,
		COLON_SYMBOL=31, OPEN_PAR_SYMBOL=32, CLOSE_PAR_SYMBOL=33, OPEN_CURLY_SYMBOL=34,
		CLOSE_CURLY_SYMBOL=35, UNDERLINE_SYMBOL=36, JSON_SEPARATOR_SYMBOL=37,
		JSON_UNQUOTED_SEPARATOR_SYMBOL=38, AT_SIGN_SYMBOL=39, AT_TEXT_SUFFIX=40,
		NUMBER_SIGN_SYMBOL=41, NUMBER_TEXT_SUFFIX=42, NULL2_SYMBOL=43, PARAM_MARKER=44,
		HEX_NUMBER=45, BIN_NUMBER=46, DECIMAL_NUMBER=47, FLOAT_NUMBER=48, ACCESSIBLE_SYMBOL=49,
		ACCOUNT_SYMBOL=50, ACTION_SYMBOL=51, ADD_SYMBOL=52, ADDDATE_SYMBOL=53,
		AFTER_SYMBOL=54, AGAINST_SYMBOL=55, AGGREGATE_SYMBOL=56, ALGORITHM_SYMBOL=57,
		ALL_SYMBOL=58, ALTER_SYMBOL=59, ALWAYS_SYMBOL=60, ANALYZE_SYMBOL=61, AND_SYMBOL=62,
		ANY_SYMBOL=63, AS_SYMBOL=64, ASC_SYMBOL=65, ASCII_SYMBOL=66, ASENSITIVE_SYMBOL=67,
		AT_SYMBOL=68, AUTOEXTEND_SIZE_SYMBOL=69, AUTO_INCREMENT_SYMBOL=70, AVG_ROW_LENGTH_SYMBOL=71,
		AVG_SYMBOL=72, BACKUP_SYMBOL=73, BEFORE_SYMBOL=74, BEGIN_SYMBOL=75, BETWEEN_SYMBOL=76,
		BIGINT_SYMBOL=77, BINARY_SYMBOL=78, BINLOG_SYMBOL=79, BIT_AND_SYMBOL=80,
		BIT_OR_SYMBOL=81, BIT_SYMBOL=82, BIT_XOR_SYMBOL=83, BLOB_SYMBOL=84, BLOCK_SYMBOL=85,
		BOOLEAN_SYMBOL=86, BOOL_SYMBOL=87, BOTH_SYMBOL=88, BTREE_SYMBOL=89, BY_SYMBOL=90,
		BYTE_SYMBOL=91, CACHE_SYMBOL=92, CALL_SYMBOL=93, CASCADE_SYMBOL=94, CASCADED_SYMBOL=95,
		CASE_SYMBOL=96, CAST_SYMBOL=97, CATALOG_NAME_SYMBOL=98, CHAIN_SYMBOL=99,
		CHANGE_SYMBOL=100, CHANGED_SYMBOL=101, CHANNEL_SYMBOL=102, CHARSET_SYMBOL=103,
		CHAR_SYMBOL=104, CHECKSUM_SYMBOL=105, CHECK_SYMBOL=106, CIPHER_SYMBOL=107,
		CLASS_ORIGIN_SYMBOL=108, CLIENT_SYMBOL=109, CLOSE_SYMBOL=110, COALESCE_SYMBOL=111,
		CODE_SYMBOL=112, COLLATE_SYMBOL=113, COLLATION_SYMBOL=114, COLUMNS_SYMBOL=115,
		COLUMN_SYMBOL=116, COLUMN_NAME_SYMBOL=117, COLUMN_FORMAT_SYMBOL=118, COMMENT_SYMBOL=119,
		COMMITTED_SYMBOL=120, COMMIT_SYMBOL=121, COMPACT_SYMBOL=122, COMPLETION_SYMBOL=123,
		COMPRESSED_SYMBOL=124, COMPRESSION_SYMBOL=125, CONCURRENT_SYMBOL=126,
		CONDITION_SYMBOL=127, CONNECTION_SYMBOL=128, CONSISTENT_SYMBOL=129, CONSTRAINT_SYMBOL=130,
		CONSTRAINT_CATALOG_SYMBOL=131, CONSTRAINT_NAME_SYMBOL=132, CONSTRAINT_SCHEMA_SYMBOL=133,
		CONTAINS_SYMBOL=134, CONTEXT_SYMBOL=135, CONTINUE_SYMBOL=136, CONVERT_SYMBOL=137,
		COUNT_SYMBOL=138, CPU_SYMBOL=139, CREATE_SYMBOL=140, CROSS_SYMBOL=141,
		CUBE_SYMBOL=142, CURDATE_SYMBOL=143, CURRENT_SYMBOL=144, CURRENT_DATE_SYMBOL=145,
		CURRENT_TIME_SYMBOL=146, CURRENT_USER_SYMBOL=147, CURSOR_SYMBOL=148, CURSOR_NAME_SYMBOL=149,
		CURTIME_SYMBOL=150, DATABASE_SYMBOL=151, DATABASES_SYMBOL=152, DATAFILE_SYMBOL=153,
		DATA_SYMBOL=154, DATETIME_SYMBOL=155, DATE_ADD_SYMBOL=156, DATE_SUB_SYMBOL=157,
		DATE_SYMBOL=158, DAY_HOUR_SYMBOL=159, DAY_MICROSECOND_SYMBOL=160, DAY_MINUTE_SYMBOL=161,
		DAY_SECOND_SYMBOL=162, DAY_SYMBOL=163, DEALLOCATE_SYMBOL=164, DECIMAL_SYMBOL=165,
		DECLARE_SYMBOL=166, DEFAULT_SYMBOL=167, DEFAULT_AUTH_SYMBOL=168, DEFINER_SYMBOL=169,
		DELAYED_SYMBOL=170, DELAY_KEY_WRITE_SYMBOL=171, DELETE_SYMBOL=172, DESC_SYMBOL=173,
		DESCRIBE_SYMBOL=174, DETERMINISTIC_SYMBOL=175, DIAGNOSTICS_SYMBOL=176,
		DIRECTORY_SYMBOL=177, DISABLE_SYMBOL=178, DISCARD_SYMBOL=179, DISK_SYMBOL=180,
		DISTINCT_SYMBOL=181, DIV_SYMBOL=182, DOUBLE_SYMBOL=183, DO_SYMBOL=184,
		DROP_SYMBOL=185, DUAL_SYMBOL=186, DUMPFILE_SYMBOL=187, DUPLICATE_SYMBOL=188,
		DYNAMIC_SYMBOL=189, EACH_SYMBOL=190, ELSE_SYMBOL=191, ELSEIF_SYMBOL=192,
		ENABLE_SYMBOL=193, ENCLOSED_SYMBOL=194, ENCRYPTION_SYMBOL=195, END_SYMBOL=196,
		ENDS_SYMBOL=197, ENGINES_SYMBOL=198, ENGINE_SYMBOL=199, ENUM_SYMBOL=200,
		ERROR_SYMBOL=201, ERRORS_SYMBOL=202, ESCAPED_SYMBOL=203, ESCAPE_SYMBOL=204,
		EVENTS_SYMBOL=205, EVENT_SYMBOL=206, EVERY_SYMBOL=207, EXCHANGE_SYMBOL=208,
		EXECUTE_SYMBOL=209, EXISTS_SYMBOL=210, EXIT_SYMBOL=211, EXPANSION_SYMBOL=212,
		EXPIRE_SYMBOL=213, EXPLAIN_SYMBOL=214, EXPORT_SYMBOL=215, EXTENDED_SYMBOL=216,
		EXTENT_SIZE_SYMBOL=217, EXTRACT_SYMBOL=218, FALSE_SYMBOL=219, FAST_SYMBOL=220,
		FAULTS_SYMBOL=221, FETCH_SYMBOL=222, FILE_SYMBOL=223, FILE_BLOCK_SIZE_SYMBOL=224,
		FILTER_SYMBOL=225, FIRST_SYMBOL=226, FIXED_SYMBOL=227, FLOAT_SYMBOL=228,
		FLUSH_SYMBOL=229, FOLLOWS_SYMBOL=230, FORCE_SYMBOL=231, FOREIGN_SYMBOL=232,
		FOR_SYMBOL=233, FORMAT_SYMBOL=234, FOUND_SYMBOL=235, FROM_SYMBOL=236,
		FULL_SYMBOL=237, FULLTEXT_SYMBOL=238, FUNCTION_SYMBOL=239, GET_SYMBOL=240,
		GENERAL_SYMBOL=241, GENERATED_SYMBOL=242, GROUP_REPLICATION_SYMBOL=243,
		GEOMETRYCOLLECTION_SYMBOL=244, GEOMETRY_SYMBOL=245, GET_FORMAT_SYMBOL=246,
		GLOBAL_SYMBOL=247, GRANT_SYMBOL=248, GRANTS_SYMBOL=249, GROUP_SYMBOL=250,
		GROUP_CONCAT_SYMBOL=251, HANDLER_SYMBOL=252, HASH_SYMBOL=253, HAVING_SYMBOL=254,
		HELP_SYMBOL=255, HIGH_PRIORITY_SYMBOL=256, HOST_SYMBOL=257, HOSTS_SYMBOL=258,
		HOUR_MICROSECOND_SYMBOL=259, HOUR_MINUTE_SYMBOL=260, HOUR_SECOND_SYMBOL=261,
		HOUR_SYMBOL=262, IDENTIFIED_SYMBOL=263, IF_SYMBOL=264, IGNORE_SYMBOL=265,
		IGNORE_SERVER_IDS_SYMBOL=266, IMPORT_SYMBOL=267, INDEXES_SYMBOL=268, INDEX_SYMBOL=269,
		INFILE_SYMBOL=270, INITIAL_SIZE_SYMBOL=271, INNER_SYMBOL=272, INOUT_SYMBOL=273,
		INSENSITIVE_SYMBOL=274, INSERT_SYMBOL=275, INSERT_METHOD_SYMBOL=276, INSTANCE_SYMBOL=277,
		INSTALL_SYMBOL=278, INTERVAL_SYMBOL=279, INTO_SYMBOL=280, INT_SYMBOL=281,
		INVOKER_SYMBOL=282, IN_SYMBOL=283, IO_AFTER_GTIDS_SYMBOL=284, IO_BEFORE_GTIDS_SYMBOL=285,
		IO_SYMBOL=286, IPC_SYMBOL=287, IS_SYMBOL=288, ISOLATION_SYMBOL=289, ISSUER_SYMBOL=290,
		ITERATE_SYMBOL=291, JOIN_SYMBOL=292, JSON_SYMBOL=293, KEYS_SYMBOL=294,
		KEY_BLOCK_SIZE_SYMBOL=295, KEY_SYMBOL=296, KILL_SYMBOL=297, LANGUAGE_SYMBOL=298,
		LAST_SYMBOL=299, LEADING_SYMBOL=300, LEAVES_SYMBOL=301, LEAVE_SYMBOL=302,
		LEFT_SYMBOL=303, LESS_SYMBOL=304, LEVEL_SYMBOL=305, LIKE_SYMBOL=306, LIMIT_SYMBOL=307,
		LINEAR_SYMBOL=308, LINES_SYMBOL=309, LINESTRING_SYMBOL=310, LIST_SYMBOL=311,
		LOAD_SYMBOL=312, LOCAL_SYMBOL=313, LOCKS_SYMBOL=314, LOCK_SYMBOL=315,
		LOGFILE_SYMBOL=316, LOGS_SYMBOL=317, LONGBLOB_SYMBOL=318, LONGTEXT_SYMBOL=319,
		LONG_SYMBOL=320, LOOP_SYMBOL=321, LOW_PRIORITY_SYMBOL=322, MASTER_AUTO_POSITION_SYMBOL=323,
		MASTER_BIND_SYMBOL=324, MASTER_CONNECT_RETRY_SYMBOL=325, MASTER_DELAY_SYMBOL=326,
		MASTER_HOST_SYMBOL=327, MASTER_LOG_FILE_SYMBOL=328, MASTER_LOG_POS_SYMBOL=329,
		MASTER_PASSWORD_SYMBOL=330, MASTER_PORT_SYMBOL=331, MASTER_RETRY_COUNT_SYMBOL=332,
		MASTER_SSL_CAPATH_SYMBOL=333, MASTER_SSL_CA_SYMBOL=334, MASTER_SSL_CERT_SYMBOL=335,
		MASTER_SSL_CIPHER_SYMBOL=336, MASTER_SSL_CRL_SYMBOL=337, MASTER_SSL_CRLPATH_SYMBOL=338,
		MASTER_SSL_KEY_SYMBOL=339, MASTER_SSL_SYMBOL=340, MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL=341,
		MASTER_SYMBOL=342, MASTER_TLS_VERSION_SYMBOL=343, MASTER_USER_SYMBOL=344,
		MASTER_HEARTBEAT_PERIOD_SYMBOL=345, MATCH_SYMBOL=346, MAX_CONNECTIONS_PER_HOUR_SYMBOL=347,
		MAX_QUERIES_PER_HOUR_SYMBOL=348, MAX_ROWS_SYMBOL=349, MAX_SIZE_SYMBOL=350,
		MAX_SYMBOL=351, MAX_UPDATES_PER_HOUR_SYMBOL=352, MAX_USER_CONNECTIONS_SYMBOL=353,
		MAXVALUE_SYMBOL=354, MEDIUMBLOB_SYMBOL=355, MEDIUMINT_SYMBOL=356, MEDIUMTEXT_SYMBOL=357,
		MEDIUM_SYMBOL=358, MEMORY_SYMBOL=359, MERGE_SYMBOL=360, MESSAGE_TEXT_SYMBOL=361,
		MICROSECOND_SYMBOL=362, MID_SYMBOL=363, MIGRATE_SYMBOL=364, MINUTE_MICROSECOND_SYMBOL=365,
		MINUTE_SECOND_SYMBOL=366, MINUTE_SYMBOL=367, MIN_ROWS_SYMBOL=368, MIN_SYMBOL=369,
		MODE_SYMBOL=370, MODIFIES_SYMBOL=371, MODIFY_SYMBOL=372, MOD_SYMBOL=373,
		MONTH_SYMBOL=374, MULTILINESTRING_SYMBOL=375, MULTIPOINT_SYMBOL=376, MULTIPOLYGON_SYMBOL=377,
		MUTEX_SYMBOL=378, MYSQL_ERRNO_SYMBOL=379, NAMES_SYMBOL=380, NAME_SYMBOL=381,
		NATIONAL_SYMBOL=382, NATURAL_SYMBOL=383, NCHAR_SYMBOL=384, NDBCLUSTER_SYMBOL=385,
		NEVER_SYMBOL=386, NEW_SYMBOL=387, NEXT_SYMBOL=388, NODEGROUP_SYMBOL=389,
		NONE_SYMBOL=390, NOT_SYMBOL=391, NOW_SYMBOL=392, NO_SYMBOL=393, NO_WAIT_SYMBOL=394,
		NO_WRITE_TO_BINLOG_SYMBOL=395, NULL_SYMBOL=396, NUMBER_SYMBOL=397, NUMERIC_SYMBOL=398,
		NVARCHAR_SYMBOL=399, OFFLINE_SYMBOL=400, OFFSET_SYMBOL=401, ON_SYMBOL=402,
		ONE_SYMBOL=403, ONLINE_SYMBOL=404, ONLY_SYMBOL=405, OPEN_SYMBOL=406, OPTIMIZE_SYMBOL=407,
		OPTIMIZER_COSTS_SYMBOL=408, OPTIONS_SYMBOL=409, OPTION_SYMBOL=410, OPTIONALLY_SYMBOL=411,
		ORDER_SYMBOL=412, OR_SYMBOL=413, OUTER_SYMBOL=414, OUTFILE_SYMBOL=415,
		OUT_SYMBOL=416, OWNER_SYMBOL=417, PACK_KEYS_SYMBOL=418, PAGE_SYMBOL=419,
		PARSER_SYMBOL=420, PARTIAL_SYMBOL=421, PARTITIONING_SYMBOL=422, PARTITIONS_SYMBOL=423,
		PARTITION_SYMBOL=424, PASSWORD_SYMBOL=425, PHASE_SYMBOL=426, PLUGINS_SYMBOL=427,
		PLUGIN_DIR_SYMBOL=428, PLUGIN_SYMBOL=429, POINT_SYMBOL=430, POLYGON_SYMBOL=431,
		PORT_SYMBOL=432, POSITION_SYMBOL=433, PRECEDES_SYMBOL=434, PRECISION_SYMBOL=435,
		PREPARE_SYMBOL=436, PRESERVE_SYMBOL=437, PREV_SYMBOL=438, PRIMARY_SYMBOL=439,
		PRIVILEGES_SYMBOL=440, PROCEDURE_SYMBOL=441, PROCESS_SYMBOL=442, PROCESSLIST_SYMBOL=443,
		PROFILE_SYMBOL=444, PROFILES_SYMBOL=445, PROXY_SYMBOL=446, PURGE_SYMBOL=447,
		QUARTER_SYMBOL=448, QUERY_SYMBOL=449, QUICK_SYMBOL=450, RANGE_SYMBOL=451,
		READS_SYMBOL=452, READ_ONLY_SYMBOL=453, READ_SYMBOL=454, READ_WRITE_SYMBOL=455,
		REAL_SYMBOL=456, REBUILD_SYMBOL=457, RECOVER_SYMBOL=458, REDO_BUFFER_SIZE_SYMBOL=459,
		REDUNDANT_SYMBOL=460, REFERENCES_SYMBOL=461, REGEXP_SYMBOL=462, RELAY_SYMBOL=463,
		RELAYLOG_SYMBOL=464, RELAY_LOG_FILE_SYMBOL=465, RELAY_LOG_POS_SYMBOL=466,
		RELAY_THREAD_SYMBOL=467, RELEASE_SYMBOL=468, RELOAD_SYMBOL=469, REMOVE_SYMBOL=470,
		RENAME_SYMBOL=471, REORGANIZE_SYMBOL=472, REPAIR_SYMBOL=473, REPEATABLE_SYMBOL=474,
		REPEAT_SYMBOL=475, REPLACE_SYMBOL=476, REPLICATION_SYMBOL=477, REPLICATE_DO_DB_SYMBOL=478,
		REPLICATE_IGNORE_DB_SYMBOL=479, REPLICATE_DO_TABLE_SYMBOL=480, REPLICATE_IGNORE_TABLE_SYMBOL=481,
		REPLICATE_WILD_DO_TABLE_SYMBOL=482, REPLICATE_WILD_IGNORE_TABLE_SYMBOL=483,
		REPLICATE_REWRITE_DB_SYMBOL=484, REQUIRE_SYMBOL=485, RESET_SYMBOL=486,
		RESIGNAL_SYMBOL=487, RESTORE_SYMBOL=488, RESTRICT_SYMBOL=489, RESUME_SYMBOL=490,
		RETURNED_SQLSTATE_SYMBOL=491, RETURNS_SYMBOL=492, RETURN_SYMBOL=493, REVERSE_SYMBOL=494,
		REVOKE_SYMBOL=495, RIGHT_SYMBOL=496, ROLLBACK_SYMBOL=497, ROLLUP_SYMBOL=498,
		ROTATE_SYMBOL=499, ROUTINE_SYMBOL=500, ROWS_SYMBOL=501, ROW_COUNT_SYMBOL=502,
		ROW_FORMAT_SYMBOL=503, ROW_SYMBOL=504, RTREE_SYMBOL=505, SAVEPOINT_SYMBOL=506,
		SCHEDULE_SYMBOL=507, SCHEMA_NAME_SYMBOL=508, SECOND_MICROSECOND_SYMBOL=509,
		SECOND_SYMBOL=510, SECURITY_SYMBOL=511, SELECT_SYMBOL=512, SENSITIVE_SYMBOL=513,
		SEPARATOR_SYMBOL=514, SERIALIZABLE_SYMBOL=515, SERIAL_SYMBOL=516, SESSION_SYMBOL=517,
		SERVER_SYMBOL=518, SESSION_USER_SYMBOL=519, SET_SYMBOL=520, SHARE_SYMBOL=521,
		SHOW_SYMBOL=522, SHUTDOWN_SYMBOL=523, SIGNAL_SYMBOL=524, SIGNED_SYMBOL=525,
		SIMPLE_SYMBOL=526, SLAVE_SYMBOL=527, SLOW_SYMBOL=528, SMALLINT_SYMBOL=529,
		SNAPSHOT_SYMBOL=530, SOCKET_SYMBOL=531, SONAME_SYMBOL=532, SOUNDS_SYMBOL=533,
		SOURCE_SYMBOL=534, SPATIAL_SYMBOL=535, SPECIFIC_SYMBOL=536, SQLEXCEPTION_SYMBOL=537,
		SQLSTATE_SYMBOL=538, SQLWARNING_SYMBOL=539, SQL_AFTER_GTIDS_SYMBOL=540,
		SQL_AFTER_MTS_GAPS_SYMBOL=541, SQL_BEFORE_GTIDS_SYMBOL=542, SQL_BIG_RESULT_SYMBOL=543,
		SQL_BUFFER_RESULT_SYMBOL=544, SQL_CALC_FOUND_ROWS_SYMBOL=545, SQL_NO_CACHE_SYMBOL=546,
		SQL_SMALL_RESULT_SYMBOL=547, SQL_SYMBOL=548, SQL_THREAD_SYMBOL=549, SSL_SYMBOL=550,
		STACKED_SYMBOL=551, STARTING_SYMBOL=552, STARTS_SYMBOL=553, START_SYMBOL=554,
		STATS_AUTO_RECALC_SYMBOL=555, STATS_PERSISTENT_SYMBOL=556, STATS_SAMPLE_PAGES_SYMBOL=557,
		STATUS_SYMBOL=558, STDDEV_SAMP_SYMBOL=559, STDDEV_SYMBOL=560, STDDEV_POP_SYMBOL=561,
		STD_SYMBOL=562, STOP_SYMBOL=563, STORAGE_SYMBOL=564, STORED_SYMBOL=565,
		STRAIGHT_JOIN_SYMBOL=566, STRING_SYMBOL=567, SUBCLASS_ORIGIN_SYMBOL=568,
		SUBDATE_SYMBOL=569, SUBJECT_SYMBOL=570, SUBPARTITIONS_SYMBOL=571, SUBPARTITION_SYMBOL=572,
		SUBSTR_SYMBOL=573, SUBSTRING_SYMBOL=574, SUM_SYMBOL=575, SUPER_SYMBOL=576,
		SUSPEND_SYMBOL=577, SWAPS_SYMBOL=578, SWITCHES_SYMBOL=579, SYSDATE_SYMBOL=580,
		SYSTEM_USER_SYMBOL=581, TABLES_SYMBOL=582, TABLESPACE_SYMBOL=583, TABLE_SYMBOL=584,
		TABLE_CHECKSUM_SYMBOL=585, TABLE_NAME_SYMBOL=586, TEMPORARY_SYMBOL=587,
		TEMPTABLE_SYMBOL=588, TERMINATED_SYMBOL=589, TEXT_SYMBOL=590, THAN_SYMBOL=591,
		THEN_SYMBOL=592, TIMESTAMP_SYMBOL=593, TIMESTAMPADD_SYMBOL=594, TIMESTAMPDIFF_SYMBOL=595,
		TIME_SYMBOL=596, TINYBLOB_SYMBOL=597, TINYINT_SYMBOL=598, TINYTEXT_SYMBOL=599,
		TO_SYMBOL=600, TRAILING_SYMBOL=601, TRANSACTION_SYMBOL=602, TRIGGERS_SYMBOL=603,
		TRIGGER_SYMBOL=604, TRIM_SYMBOL=605, TRUE_SYMBOL=606, TRUNCATE_SYMBOL=607,
		TYPES_SYMBOL=608, TYPE_SYMBOL=609, UDF_RETURNS_SYMBOL=610, UNCOMMITTED_SYMBOL=611,
		UNDEFINED_SYMBOL=612, UNDOFILE_SYMBOL=613, UNDO_BUFFER_SIZE_SYMBOL=614,
		UNDO_SYMBOL=615, UNICODE_SYMBOL=616, UNINSTALL_SYMBOL=617, UNION_SYMBOL=618,
		UNIQUE_SYMBOL=619, UNKNOWN_SYMBOL=620, UNLOCK_SYMBOL=621, UNSIGNED_SYMBOL=622,
		UNTIL_SYMBOL=623, UPDATE_SYMBOL=624, UPGRADE_SYMBOL=625, USAGE_SYMBOL=626,
		USER_RESOURCES_SYMBOL=627, USER_SYMBOL=628, USE_FRM_SYMBOL=629, USE_SYMBOL=630,
		USING_SYMBOL=631, UTC_DATE_SYMBOL=632, UTC_TIMESTAMP_SYMBOL=633, UTC_TIME_SYMBOL=634,
		VALIDATION_SYMBOL=635, VALUES_SYMBOL=636, VALUE_SYMBOL=637, VARBINARY_SYMBOL=638,
		VARCHAR_SYMBOL=639, VARIABLES_SYMBOL=640, VARIANCE_SYMBOL=641, VARYING_SYMBOL=642,
		VAR_POP_SYMBOL=643, VAR_SAMP_SYMBOL=644, VIEW_SYMBOL=645, VIRTUAL_SYMBOL=646,
		WAIT_SYMBOL=647, WARNINGS_SYMBOL=648, WEEK_SYMBOL=649, WEIGHT_STRING_SYMBOL=650,
		WHEN_SYMBOL=651, WHERE_SYMBOL=652, WHILE_SYMBOL=653, WITH_SYMBOL=654,
		WITHOUT_SYMBOL=655, WORK_SYMBOL=656, WRAPPER_SYMBOL=657, WRITE_SYMBOL=658,
		X509_SYMBOL=659, XA_SYMBOL=660, XID_SYMBOL=661, XML_SYMBOL=662, XOR_SYMBOL=663,
		YEAR_MONTH_SYMBOL=664, YEAR_SYMBOL=665, ZEROFILL_SYMBOL=666, PERSIST_SYMBOL=667,
		ROLE_SYMBOL=668, ADMIN_SYMBOL=669, INVISIBLE_SYMBOL=670, VISIBLE_SYMBOL=671,
		EXCEPT_SYMBOL=672, COMPONENT_SYMBOL=673, RECURSIVE_SYMBOL=674, JSON_OBJECTAGG_SYMBOL=675,
		JSON_ARRAYAGG_SYMBOL=676, OF_SYMBOL=677, SKIP_SYMBOL=678, LOCKED_SYMBOL=679,
		NOWAIT_SYMBOL=680, GROUPING_SYMBOL=681, PERSIST_ONLY_SYMBOL=682, HISTOGRAM_SYMBOL=683,
		BUCKETS_SYMBOL=684, REMOTE_SYMBOL=685, CLONE_SYMBOL=686, CUME_DIST_SYMBOL=687,
		DENSE_RANK_SYMBOL=688, EXCLUDE_SYMBOL=689, FIRST_VALUE_SYMBOL=690, FOLLOWING_SYMBOL=691,
		GROUPS_SYMBOL=692, LAG_SYMBOL=693, LAST_VALUE_SYMBOL=694, LEAD_SYMBOL=695,
		NTH_VALUE_SYMBOL=696, NTILE_SYMBOL=697, NULLS_SYMBOL=698, OTHERS_SYMBOL=699,
		OVER_SYMBOL=700, PERCENT_RANK_SYMBOL=701, PRECEDING_SYMBOL=702, RANK_SYMBOL=703,
		RESPECT_SYMBOL=704, ROW_NUMBER_SYMBOL=705, TIES_SYMBOL=706, UNBOUNDED_SYMBOL=707,
		WINDOW_SYMBOL=708, EMPTY_SYMBOL=709, JSON_TABLE_SYMBOL=710, NESTED_SYMBOL=711,
		ORDINALITY_SYMBOL=712, PATH_SYMBOL=713, HISTORY_SYMBOL=714, REUSE_SYMBOL=715,
		SRID_SYMBOL=716, THREAD_PRIORITY_SYMBOL=717, RESOURCE_SYMBOL=718, SYSTEM_SYMBOL=719,
		VCPU_SYMBOL=720, MASTER_PUBLIC_KEY_PATH_SYMBOL=721, GET_MASTER_PUBLIC_KEY_SYMBOL=722,
		RESTART_SYMBOL=723, DEFINITION_SYMBOL=724, DESCRIPTION_SYMBOL=725, ORGANIZATION_SYMBOL=726,
		REFERENCE_SYMBOL=727, OPTIONAL_SYMBOL=728, SECONDARY_SYMBOL=729, SECONDARY_ENGINE_SYMBOL=730,
		SECONDARY_LOAD_SYMBOL=731, SECONDARY_UNLOAD_SYMBOL=732, ACTIVE_SYMBOL=733,
		INACTIVE_SYMBOL=734, LATERAL_SYMBOL=735, RETAIN_SYMBOL=736, OLD_SYMBOL=737,
		NETWORK_NAMESPACE_SYMBOL=738, ENFORCED_SYMBOL=739, ARRAY_SYMBOL=740, OJ_SYMBOL=741,
		MEMBER_SYMBOL=742, RANDOM_SYMBOL=743, MASTER_COMPRESSION_ALGORITHM_SYMBOL=744,
		MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL=745, PRIVILEGE_CHECKS_USER_SYMBOL=746,
		MASTER_TLS_CIPHERSUITES_SYMBOL=747, REQUIRE_ROW_FORMAT_SYMBOL=748, PASSWORD_LOCK_TIME_SYMBOL=749,
		FAILED_LOGIN_ATTEMPTS_SYMBOL=750, REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL=751,
		STREAM_SYMBOL=752, OFF_SYMBOL=753, RETURNING_SYMBOL=754, JSON_VALUE_SYMBOL=755,
		TLS_SYMBOL=756, ATTRIBUTE_SYMBOL=757, ENGINE_ATTRIBUTE_SYMBOL=758, SECONDARY_ENGINE_ATTRIBUTE_SYMBOL=759,
		SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL=760, ZONE_SYMBOL=761, GRAMMAR_SELECTOR_DERIVED_EXPR=762,
		REPLICA_SYMBOL=763, REPLICAS_SYMBOL=764, ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL=765,
		GET_SOURCE_PUBLIC_KEY_SYMBOL=766, SOURCE_AUTO_POSITION_SYMBOL=767, SOURCE_BIND_SYMBOL=768,
		SOURCE_COMPRESSION_ALGORITHM_SYMBOL=769, SOURCE_CONNECT_RETRY_SYMBOL=770,
		SOURCE_DELAY_SYMBOL=771, SOURCE_HEARTBEAT_PERIOD_SYMBOL=772, SOURCE_HOST_SYMBOL=773,
		SOURCE_LOG_FILE_SYMBOL=774, SOURCE_LOG_POS_SYMBOL=775, SOURCE_PASSWORD_SYMBOL=776,
		SOURCE_PORT_SYMBOL=777, SOURCE_PUBLIC_KEY_PATH_SYMBOL=778, SOURCE_RETRY_COUNT_SYMBOL=779,
		SOURCE_SSL_SYMBOL=780, SOURCE_SSL_CA_SYMBOL=781, SOURCE_SSL_CAPATH_SYMBOL=782,
		SOURCE_SSL_CERT_SYMBOL=783, SOURCE_SSL_CIPHER_SYMBOL=784, SOURCE_SSL_CRL_SYMBOL=785,
		SOURCE_SSL_CRLPATH_SYMBOL=786, SOURCE_SSL_KEY_SYMBOL=787, SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL=788,
		SOURCE_TLS_CIPHERSUITES_SYMBOL=789, SOURCE_TLS_VERSION_SYMBOL=790, SOURCE_USER_SYMBOL=791,
		SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL=792, ST_COLLECT_SYMBOL=793, KEYRING_SYMBOL=794,
		AUTHENTICATION_SYMBOL=795, FACTOR_SYMBOL=796, FINISH_SYMBOL=797, INITIATE_SYMBOL=798,
		REGISTRATION_SYMBOL=799, UNREGISTER_SYMBOL=800, INITIAL_SYMBOL=801, CHALLENGE_RESPONSE_SYMBOL=802,
		GTID_ONLY_SYMBOL=803, INTERSECT_SYMBOL=804, BULK_SYMBOL=805, URL_SYMBOL=806,
		GENERATE_SYMBOL=807, PARSE_TREE_SYMBOL=808, LOG_SYMBOL=809, GTIDS_SYMBOL=810,
		PARALLEL_SYMBOL=811, S3_SYMBOL=812, QUALIFY_SYMBOL=813, AUTO_SYMBOL=814,
		MANUAL_SYMBOL=815, BERNOULLI_SYMBOL=816, TABLESAMPLE_SYMBOL=817, WHITESPACE=818,
		INVALID_INPUT=819, UNDERSCORE_CHARSET=820, IDENTIFIER=821, NCHAR_TEXT=822,
		BACK_TICK_QUOTED_ID=823, DOUBLE_QUOTED_TEXT=824, SINGLE_QUOTED_TEXT=825,
		DOLLAR_QUOTED_STRING_TEXT=826, VERSION_COMMENT_START=827, MYSQL_COMMENT_START=828,
		VERSION_COMMENT_END=829, BLOCK_COMMENT=830, INVALID_BLOCK_COMMENT=831,
		DASHDASH_COMMENT=832, NOT_EQUAL2_OPERATOR=833;
	public const int
		RULE_queries = 0, RULE_query = 1, RULE_simpleStatement = 2, RULE_alterStatement = 3,
		RULE_alterDatabase = 4, RULE_alterDatabaseOption = 5, RULE_alterEvent = 6,
		RULE_alterLogfileGroup = 7, RULE_alterLogfileGroupOptions = 8, RULE_alterLogfileGroupOption = 9,
		RULE_alterServer = 10, RULE_alterTable = 11, RULE_alterTableActions = 12,
		RULE_alterCommandList = 13, RULE_alterCommandsModifierList = 14, RULE_standaloneAlterCommands = 15,
		RULE_alterPartition = 16, RULE_alterList = 17, RULE_alterCommandsModifier = 18,
		RULE_alterListItem = 19, RULE_place = 20, RULE_restrict = 21, RULE_alterOrderList = 22,
		RULE_alterAlgorithmOption = 23, RULE_alterLockOption = 24, RULE_indexLockAndAlgorithm = 25,
		RULE_withValidation = 26, RULE_removePartitioning = 27, RULE_allOrPartitionNameList = 28,
		RULE_alterTablespace = 29, RULE_alterUndoTablespace = 30, RULE_undoTableSpaceOptions = 31,
		RULE_undoTableSpaceOption = 32, RULE_alterTablespaceOptions = 33, RULE_alterTablespaceOption = 34,
		RULE_changeTablespaceOption = 35, RULE_alterView = 36, RULE_viewTail = 37,
		RULE_viewQueryBlock = 38, RULE_viewCheckOption = 39, RULE_alterInstanceStatement = 40,
		RULE_createStatement = 41, RULE_createDatabase = 42, RULE_createDatabaseOption = 43,
		RULE_createTable = 44, RULE_tableElementList = 45, RULE_tableElement = 46,
		RULE_duplicateAsQe = 47, RULE_asCreateQueryExpression = 48, RULE_queryExpressionOrParens = 49,
		RULE_queryExpressionWithOptLockingClauses = 50, RULE_createRoutine = 51,
		RULE_createProcedure = 52, RULE_routineString = 53, RULE_storedRoutineBody = 54,
		RULE_createFunction = 55, RULE_createUdf = 56, RULE_routineCreateOption = 57,
		RULE_routineAlterOptions = 58, RULE_routineOption = 59, RULE_createIndex = 60,
		RULE_indexNameAndType = 61, RULE_createIndexTarget = 62, RULE_createLogfileGroup = 63,
		RULE_logfileGroupOptions = 64, RULE_logfileGroupOption = 65, RULE_createServer = 66,
		RULE_serverOptions = 67, RULE_serverOption = 68, RULE_createTablespace = 69,
		RULE_createUndoTablespace = 70, RULE_tsDataFileName = 71, RULE_tsDataFile = 72,
		RULE_tablespaceOptions = 73, RULE_tablespaceOption = 74, RULE_tsOptionInitialSize = 75,
		RULE_tsOptionUndoRedoBufferSize = 76, RULE_tsOptionAutoextendSize = 77,
		RULE_tsOptionMaxSize = 78, RULE_tsOptionExtentSize = 79, RULE_tsOptionNodegroup = 80,
		RULE_tsOptionEngine = 81, RULE_tsOptionWait = 82, RULE_tsOptionComment = 83,
		RULE_tsOptionFileblockSize = 84, RULE_tsOptionEncryption = 85, RULE_tsOptionEngineAttribute = 86,
		RULE_createView = 87, RULE_viewReplaceOrAlgorithm = 88, RULE_viewAlgorithm = 89,
		RULE_viewSuid = 90, RULE_createTrigger = 91, RULE_triggerFollowsPrecedesClause = 92,
		RULE_createEvent = 93, RULE_createRole = 94, RULE_createSpatialReference = 95,
		RULE_srsAttribute = 96, RULE_dropStatement = 97, RULE_dropDatabase = 98,
		RULE_dropEvent = 99, RULE_dropFunction = 100, RULE_dropProcedure = 101,
		RULE_dropIndex = 102, RULE_dropLogfileGroup = 103, RULE_dropLogfileGroupOption = 104,
		RULE_dropServer = 105, RULE_dropTable = 106, RULE_dropTableSpace = 107,
		RULE_dropTrigger = 108, RULE_dropView = 109, RULE_dropRole = 110, RULE_dropSpatialReference = 111,
		RULE_dropUndoTablespace = 112, RULE_renameTableStatement = 113, RULE_renamePair = 114,
		RULE_truncateTableStatement = 115, RULE_importStatement = 116, RULE_callStatement = 117,
		RULE_deleteStatement = 118, RULE_partitionDelete = 119, RULE_deleteStatementOption = 120,
		RULE_doStatement = 121, RULE_handlerStatement = 122, RULE_handlerReadOrScan = 123,
		RULE_insertStatement = 124, RULE_insertLockOption = 125, RULE_insertFromConstructor = 126,
		RULE_fields = 127, RULE_insertValues = 128, RULE_insertQueryExpression = 129,
		RULE_valueList = 130, RULE_values = 131, RULE_valuesReference = 132, RULE_insertUpdateList = 133,
		RULE_loadStatement = 134, RULE_dataOrXml = 135, RULE_loadDataLock = 136,
		RULE_loadFrom = 137, RULE_loadSourceType = 138, RULE_sourceCount = 139,
		RULE_sourceOrder = 140, RULE_xmlRowsIdentifiedBy = 141, RULE_loadDataFileTail = 142,
		RULE_loadDataFileTargetList = 143, RULE_fieldOrVariableList = 144, RULE_loadAlgorithm = 145,
		RULE_loadParallel = 146, RULE_loadMemory = 147, RULE_replaceStatement = 148,
		RULE_selectStatement = 149, RULE_selectStatementWithInto = 150, RULE_queryExpression = 151,
		RULE_queryExpressionBody = 152, RULE_queryExpressionParens = 153, RULE_queryPrimary = 154,
		RULE_querySpecification = 155, RULE_subquery = 156, RULE_querySpecOption = 157,
		RULE_limitClause = 158, RULE_simpleLimitClause = 159, RULE_limitOptions = 160,
		RULE_limitOption = 161, RULE_intoClause = 162, RULE_procedureAnalyseClause = 163,
		RULE_havingClause = 164, RULE_qualifyClause = 165, RULE_windowClause = 166,
		RULE_windowDefinition = 167, RULE_windowSpec = 168, RULE_windowSpecDetails = 169,
		RULE_windowFrameClause = 170, RULE_windowFrameUnits = 171, RULE_windowFrameExtent = 172,
		RULE_windowFrameStart = 173, RULE_windowFrameBetween = 174, RULE_windowFrameBound = 175,
		RULE_windowFrameExclusion = 176, RULE_withClause = 177, RULE_commonTableExpression = 178,
		RULE_groupByClause = 179, RULE_olapOption = 180, RULE_orderClause = 181,
		RULE_direction = 182, RULE_fromClause = 183, RULE_tableReferenceList = 184,
		RULE_tableValueConstructor = 185, RULE_explicitTable = 186, RULE_rowValueExplicit = 187,
		RULE_selectOption = 188, RULE_lockingClauseList = 189, RULE_lockingClause = 190,
		RULE_lockStrengh = 191, RULE_lockedRowAction = 192, RULE_selectItemList = 193,
		RULE_selectItem = 194, RULE_selectAlias = 195, RULE_whereClause = 196,
		RULE_tableReference = 197, RULE_escapedTableReference = 198, RULE_joinedTable = 199,
		RULE_naturalJoinType = 200, RULE_innerJoinType = 201, RULE_outerJoinType = 202,
		RULE_tableFactor = 203, RULE_singleTable = 204, RULE_singleTableParens = 205,
		RULE_derivedTable = 206, RULE_tableReferenceListParens = 207, RULE_tableFunction = 208,
		RULE_columnsClause = 209, RULE_jtColumn = 210, RULE_onEmptyOrError = 211,
		RULE_onEmptyOrErrorJsonTable = 212, RULE_onEmpty = 213, RULE_onError = 214,
		RULE_jsonOnResponse = 215, RULE_unionOption = 216, RULE_tableAlias = 217,
		RULE_indexHintList = 218, RULE_indexHint = 219, RULE_indexHintType = 220,
		RULE_keyOrIndex = 221, RULE_constraintKeyType = 222, RULE_indexHintClause = 223,
		RULE_indexList = 224, RULE_indexListElement = 225, RULE_updateStatement = 226,
		RULE_transactionOrLockingStatement = 227, RULE_transactionStatement = 228,
		RULE_beginWork = 229, RULE_startTransactionOptionList = 230, RULE_savepointStatement = 231,
		RULE_lockStatement = 232, RULE_lockItem = 233, RULE_lockOption = 234,
		RULE_xaStatement = 235, RULE_xaConvert = 236, RULE_xid = 237, RULE_replicationStatement = 238,
		RULE_purgeOptions = 239, RULE_resetOption = 240, RULE_masterOrBinaryLogsAndGtids = 241,
		RULE_sourceResetOptions = 242, RULE_replicationLoad = 243, RULE_changeReplicationSource = 244,
		RULE_changeSource = 245, RULE_sourceDefinitions = 246, RULE_sourceDefinition = 247,
		RULE_changeReplicationSourceAutoPosition = 248, RULE_changeReplicationSourceHost = 249,
		RULE_changeReplicationSourceBind = 250, RULE_changeReplicationSourceUser = 251,
		RULE_changeReplicationSourcePassword = 252, RULE_changeReplicationSourcePort = 253,
		RULE_changeReplicationSourceConnectRetry = 254, RULE_changeReplicationSourceRetryCount = 255,
		RULE_changeReplicationSourceDelay = 256, RULE_changeReplicationSourceSSL = 257,
		RULE_changeReplicationSourceSSLCA = 258, RULE_changeReplicationSourceSSLCApath = 259,
		RULE_changeReplicationSourceSSLCipher = 260, RULE_changeReplicationSourceSSLCLR = 261,
		RULE_changeReplicationSourceSSLCLRpath = 262, RULE_changeReplicationSourceSSLKey = 263,
		RULE_changeReplicationSourceSSLVerifyServerCert = 264, RULE_changeReplicationSourceTLSVersion = 265,
		RULE_changeReplicationSourceTLSCiphersuites = 266, RULE_changeReplicationSourceSSLCert = 267,
		RULE_changeReplicationSourcePublicKey = 268, RULE_changeReplicationSourceGetSourcePublicKey = 269,
		RULE_changeReplicationSourceHeartbeatPeriod = 270, RULE_changeReplicationSourceCompressionAlgorithm = 271,
		RULE_changeReplicationSourceZstdCompressionLevel = 272, RULE_privilegeCheckDef = 273,
		RULE_tablePrimaryKeyCheckDef = 274, RULE_assignGtidsToAnonymousTransactionsDefinition = 275,
		RULE_sourceTlsCiphersuitesDef = 276, RULE_sourceFileDef = 277, RULE_sourceLogFile = 278,
		RULE_sourceLogPos = 279, RULE_serverIdList = 280, RULE_changeReplication = 281,
		RULE_filterDefinition = 282, RULE_filterDbList = 283, RULE_filterTableList = 284,
		RULE_filterStringList = 285, RULE_filterWildDbTableString = 286, RULE_filterDbPairList = 287,
		RULE_startReplicaStatement = 288, RULE_stopReplicaStatement = 289, RULE_replicaUntil = 290,
		RULE_userOption = 291, RULE_passwordOption = 292, RULE_defaultAuthOption = 293,
		RULE_pluginDirOption = 294, RULE_replicaThreadOptions = 295, RULE_replicaThreadOption = 296,
		RULE_groupReplication = 297, RULE_groupReplicationStartOptions = 298,
		RULE_groupReplicationStartOption = 299, RULE_groupReplicationUser = 300,
		RULE_groupReplicationPassword = 301, RULE_groupReplicationPluginAuth = 302,
		RULE_replica = 303, RULE_preparedStatement = 304, RULE_executeStatement = 305,
		RULE_executeVarList = 306, RULE_cloneStatement = 307, RULE_dataDirSSL = 308,
		RULE_ssl = 309, RULE_accountManagementStatement = 310, RULE_alterUserStatement = 311,
		RULE_alterUserList = 312, RULE_alterUser = 313, RULE_oldAlterUser = 314,
		RULE_userFunction = 315, RULE_createUserStatement = 316, RULE_createUserTail = 317,
		RULE_userAttributes = 318, RULE_defaultRoleClause = 319, RULE_requireClause = 320,
		RULE_connectOptions = 321, RULE_accountLockPasswordExpireOptions = 322,
		RULE_userAttribute = 323, RULE_dropUserStatement = 324, RULE_grantStatement = 325,
		RULE_grantTargetList = 326, RULE_grantOptions = 327, RULE_exceptRoleList = 328,
		RULE_withRoles = 329, RULE_grantAs = 330, RULE_versionedRequireClause = 331,
		RULE_renameUserStatement = 332, RULE_revokeStatement = 333, RULE_aclType = 334,
		RULE_roleOrPrivilegesList = 335, RULE_roleOrPrivilege = 336, RULE_grantIdentifier = 337,
		RULE_requireList = 338, RULE_requireListElement = 339, RULE_grantOption = 340,
		RULE_setRoleStatement = 341, RULE_roleList = 342, RULE_role = 343, RULE_tableAdministrationStatement = 344,
		RULE_histogramAutoUpdate = 345, RULE_histogramUpdateParam = 346, RULE_histogramNumBuckets = 347,
		RULE_histogram = 348, RULE_checkOption = 349, RULE_repairType = 350, RULE_uninstallStatement = 351,
		RULE_installStatement = 352, RULE_installOptionType = 353, RULE_installSetRvalue = 354,
		RULE_installSetValue = 355, RULE_installSetValueList = 356, RULE_setStatement = 357,
		RULE_startOptionValueList = 358, RULE_transactionCharacteristics = 359,
		RULE_transactionAccessMode = 360, RULE_isolationLevel = 361, RULE_optionValueListContinued = 362,
		RULE_optionValueNoOptionType = 363, RULE_optionValue = 364, RULE_startOptionValueListFollowingOptionType = 365,
		RULE_optionValueFollowingOptionType = 366, RULE_setExprOrDefault = 367,
		RULE_showDatabasesStatement = 368, RULE_showTablesStatement = 369, RULE_showTriggersStatement = 370,
		RULE_showEventsStatement = 371, RULE_showTableStatusStatement = 372, RULE_showOpenTablesStatement = 373,
		RULE_showParseTreeStatement = 374, RULE_showPluginsStatement = 375, RULE_showEngineLogsStatement = 376,
		RULE_showEngineMutexStatement = 377, RULE_showEngineStatusStatement = 378,
		RULE_showColumnsStatement = 379, RULE_showBinaryLogsStatement = 380, RULE_showBinaryLogStatusStatement = 381,
		RULE_showReplicasStatement = 382, RULE_showBinlogEventsStatement = 383,
		RULE_showRelaylogEventsStatement = 384, RULE_showKeysStatement = 385,
		RULE_showEnginesStatement = 386, RULE_showCountWarningsStatement = 387,
		RULE_showCountErrorsStatement = 388, RULE_showWarningsStatement = 389,
		RULE_showErrorsStatement = 390, RULE_showProfilesStatement = 391, RULE_showProfileStatement = 392,
		RULE_showStatusStatement = 393, RULE_showProcessListStatement = 394, RULE_showVariablesStatement = 395,
		RULE_showCharacterSetStatement = 396, RULE_showCollationStatement = 397,
		RULE_showPrivilegesStatement = 398, RULE_showGrantsStatement = 399, RULE_showCreateDatabaseStatement = 400,
		RULE_showCreateTableStatement = 401, RULE_showCreateViewStatement = 402,
		RULE_showMasterStatusStatement = 403, RULE_showReplicaStatusStatement = 404,
		RULE_showCreateProcedureStatement = 405, RULE_showCreateFunctionStatement = 406,
		RULE_showCreateTriggerStatement = 407, RULE_showCreateProcedureStatusStatement = 408,
		RULE_showCreateFunctionStatusStatement = 409, RULE_showCreateProcedureCodeStatement = 410,
		RULE_showCreateFunctionCodeStatement = 411, RULE_showCreateEventStatement = 412,
		RULE_showCreateUserStatement = 413, RULE_showCommandType = 414, RULE_engineOrAll = 415,
		RULE_fromOrIn = 416, RULE_inDb = 417, RULE_profileDefinitions = 418, RULE_profileDefinition = 419,
		RULE_otherAdministrativeStatement = 420, RULE_keyCacheListOrParts = 421,
		RULE_keyCacheList = 422, RULE_assignToKeycache = 423, RULE_assignToKeycachePartition = 424,
		RULE_cacheKeyList = 425, RULE_keyUsageElement = 426, RULE_keyUsageList = 427,
		RULE_flushOption = 428, RULE_logType = 429, RULE_flushTables = 430, RULE_flushTablesOptions = 431,
		RULE_preloadTail = 432, RULE_preloadList = 433, RULE_preloadKeys = 434,
		RULE_adminPartition = 435, RULE_resourceGroupManagement = 436, RULE_createResourceGroup = 437,
		RULE_resourceGroupVcpuList = 438, RULE_vcpuNumOrRange = 439, RULE_resourceGroupPriority = 440,
		RULE_resourceGroupEnableDisable = 441, RULE_alterResourceGroup = 442,
		RULE_setResourceGroup = 443, RULE_threadIdList = 444, RULE_dropResourceGroup = 445,
		RULE_utilityStatement = 446, RULE_describeStatement = 447, RULE_explainStatement = 448,
		RULE_explainOptions = 449, RULE_explainableStatement = 450, RULE_explainInto = 451,
		RULE_helpCommand = 452, RULE_useCommand = 453, RULE_restartServer = 454,
		RULE_expr = 455, RULE_boolPri = 456, RULE_compOp = 457, RULE_predicate = 458,
		RULE_predicateOperations = 459, RULE_bitExpr = 460, RULE_simpleExpr = 461,
		RULE_arrayCast = 462, RULE_jsonOperator = 463, RULE_sumExpr = 464, RULE_groupingOperation = 465,
		RULE_windowFunctionCall = 466, RULE_samplingMethod = 467, RULE_samplingPercentage = 468,
		RULE_tablesampleClause = 469, RULE_windowingClause = 470, RULE_leadLagInfo = 471,
		RULE_stableInteger = 472, RULE_paramOrVar = 473, RULE_nullTreatment = 474,
		RULE_jsonFunction = 475, RULE_inSumExpr = 476, RULE_identListArg = 477,
		RULE_identList = 478, RULE_fulltextOptions = 479, RULE_runtimeFunctionCall = 480,
		RULE_returningType = 481, RULE_geometryFunction = 482, RULE_timeFunctionParameters = 483,
		RULE_fractionalPrecision = 484, RULE_weightStringLevels = 485, RULE_weightStringLevelListItem = 486,
		RULE_dateTimeTtype = 487, RULE_trimFunction = 488, RULE_substringFunction = 489,
		RULE_functionCall = 490, RULE_udfExprList = 491, RULE_udfExpr = 492, RULE_userVariable = 493,
		RULE_contextVariable = 494, RULE_emittedVariable = 495, RULE_inExpressionUserVariableAssignment = 496,
		RULE_rvalueSystemOrUserVariable = 497, RULE_lvalueVariable = 498, RULE_rvalueSystemVariable = 499,
		RULE_whenExpression = 500, RULE_thenExpression = 501, RULE_elseExpression = 502,
		RULE_castType = 503, RULE_exprList = 504, RULE_charset = 505, RULE_notRule = 506,
		RULE_not2Rule = 507, RULE_interval = 508, RULE_intervalTimeStamp = 509,
		RULE_exprListWithParentheses = 510, RULE_exprWithParentheses = 511, RULE_simpleExprWithParentheses = 512,
		RULE_orderList = 513, RULE_orderExpression = 514, RULE_groupList = 515,
		RULE_groupingExpression = 516, RULE_channel = 517, RULE_compoundStatement = 518,
		RULE_returnStatement = 519, RULE_ifStatement = 520, RULE_ifBody = 521,
		RULE_thenStatement = 522, RULE_compoundStatementList = 523, RULE_caseStatement = 524,
		RULE_elseStatement = 525, RULE_labeledBlock = 526, RULE_unlabeledBlock = 527,
		RULE_label = 528, RULE_beginEndBlock = 529, RULE_labeledControl = 530,
		RULE_unlabeledControl = 531, RULE_loopBlock = 532, RULE_whileDoBlock = 533,
		RULE_repeatUntilBlock = 534, RULE_spDeclarations = 535, RULE_spDeclaration = 536,
		RULE_variableDeclaration = 537, RULE_conditionDeclaration = 538, RULE_spCondition = 539,
		RULE_sqlstate = 540, RULE_handlerDeclaration = 541, RULE_handlerCondition = 542,
		RULE_cursorDeclaration = 543, RULE_iterateStatement = 544, RULE_leaveStatement = 545,
		RULE_getDiagnosticsStatement = 546, RULE_signalAllowedExpr = 547, RULE_statementInformationItem = 548,
		RULE_conditionInformationItem = 549, RULE_signalInformationItemName = 550,
		RULE_signalStatement = 551, RULE_resignalStatement = 552, RULE_signalInformationItem = 553,
		RULE_cursorOpen = 554, RULE_cursorClose = 555, RULE_cursorFetch = 556,
		RULE_schedule = 557, RULE_columnDefinition = 558, RULE_checkOrReferences = 559,
		RULE_checkConstraint = 560, RULE_constraintEnforcement = 561, RULE_tableConstraintDef = 562,
		RULE_constraintName = 563, RULE_fieldDefinition = 564, RULE_columnAttribute = 565,
		RULE_columnFormat = 566, RULE_storageMedia = 567, RULE_now = 568, RULE_nowOrSignedLiteral = 569,
		RULE_gcolAttribute = 570, RULE_references = 571, RULE_deleteOption = 572,
		RULE_keyList = 573, RULE_keyPart = 574, RULE_keyListWithExpression = 575,
		RULE_keyPartOrExpression = 576, RULE_indexType = 577, RULE_indexOption = 578,
		RULE_commonIndexOption = 579, RULE_visibility = 580, RULE_indexTypeClause = 581,
		RULE_fulltextIndexOption = 582, RULE_spatialIndexOption = 583, RULE_dataTypeDefinition = 584,
		RULE_dataType = 585, RULE_nchar = 586, RULE_realType = 587, RULE_fieldLength = 588,
		RULE_fieldOptions = 589, RULE_charsetWithOptBinary = 590, RULE_ascii = 591,
		RULE_unicode = 592, RULE_wsNumCodepoints = 593, RULE_typeDatetimePrecision = 594,
		RULE_functionDatetimePrecision = 595, RULE_charsetName = 596, RULE_collationName = 597,
		RULE_createTableOptions = 598, RULE_createTableOptionsEtc = 599, RULE_createPartitioningEtc = 600,
		RULE_createTableOptionsSpaceSeparated = 601, RULE_createTableOption = 602,
		RULE_ternaryOption = 603, RULE_defaultCollation = 604, RULE_defaultEncryption = 605,
		RULE_defaultCharset = 606, RULE_partitionClause = 607, RULE_partitionTypeDef = 608,
		RULE_subPartitions = 609, RULE_partitionKeyAlgorithm = 610, RULE_partitionDefinitions = 611,
		RULE_partitionDefinition = 612, RULE_partitionValuesIn = 613, RULE_partitionOption = 614,
		RULE_subpartitionDefinition = 615, RULE_partitionValueItemListParen = 616,
		RULE_partitionValueItem = 617, RULE_definerClause = 618, RULE_ifExists = 619,
		RULE_ifExistsIdentifier = 620, RULE_persistedVariableIdentifier = 621,
		RULE_ifNotExists = 622, RULE_ignoreUnknownUser = 623, RULE_procedureParameter = 624,
		RULE_functionParameter = 625, RULE_collate = 626, RULE_typeWithOptCollate = 627,
		RULE_schemaIdentifierPair = 628, RULE_viewRefList = 629, RULE_updateList = 630,
		RULE_updateElement = 631, RULE_charsetClause = 632, RULE_fieldsClause = 633,
		RULE_fieldTerm = 634, RULE_linesClause = 635, RULE_lineTerm = 636, RULE_userList = 637,
		RULE_createUserList = 638, RULE_createUser = 639, RULE_createUserWithMfa = 640,
		RULE_identification = 641, RULE_identifiedByPassword = 642, RULE_identifiedByRandomPassword = 643,
		RULE_identifiedWithPlugin = 644, RULE_identifiedWithPluginAsAuth = 645,
		RULE_identifiedWithPluginByPassword = 646, RULE_identifiedWithPluginByRandomPassword = 647,
		RULE_initialAuth = 648, RULE_retainCurrentPassword = 649, RULE_discardOldPassword = 650,
		RULE_userRegistration = 651, RULE_factor = 652, RULE_replacePassword = 653,
		RULE_userIdentifierOrText = 654, RULE_user = 655, RULE_likeClause = 656,
		RULE_likeOrWhere = 657, RULE_onlineOption = 658, RULE_noWriteToBinLog = 659,
		RULE_usePartition = 660, RULE_fieldIdentifier = 661, RULE_columnName = 662,
		RULE_columnInternalRef = 663, RULE_columnInternalRefList = 664, RULE_columnRef = 665,
		RULE_insertIdentifier = 666, RULE_indexName = 667, RULE_indexRef = 668,
		RULE_tableWild = 669, RULE_schemaName = 670, RULE_schemaRef = 671, RULE_procedureName = 672,
		RULE_procedureRef = 673, RULE_functionName = 674, RULE_functionRef = 675,
		RULE_triggerName = 676, RULE_triggerRef = 677, RULE_viewName = 678, RULE_viewRef = 679,
		RULE_tablespaceName = 680, RULE_tablespaceRef = 681, RULE_logfileGroupName = 682,
		RULE_logfileGroupRef = 683, RULE_eventName = 684, RULE_eventRef = 685,
		RULE_udfName = 686, RULE_serverName = 687, RULE_serverRef = 688, RULE_engineRef = 689,
		RULE_tableName = 690, RULE_filterTableRef = 691, RULE_tableRefWithWildcard = 692,
		RULE_tableRef = 693, RULE_tableRefList = 694, RULE_tableAliasRefList = 695,
		RULE_parameterName = 696, RULE_labelIdentifier = 697, RULE_labelRef = 698,
		RULE_roleIdentifier = 699, RULE_pluginRef = 700, RULE_componentRef = 701,
		RULE_resourceGroupRef = 702, RULE_windowName = 703, RULE_pureIdentifier = 704,
		RULE_identifier = 705, RULE_identifierList = 706, RULE_identifierListWithParentheses = 707,
		RULE_qualifiedIdentifier = 708, RULE_simpleIdentifier = 709, RULE_dotIdentifier = 710,
		RULE_ulong_number = 711, RULE_real_ulong_number = 712, RULE_ulonglongNumber = 713,
		RULE_real_ulonglong_number = 714, RULE_signedLiteral = 715, RULE_signedLiteralOrNull = 716,
		RULE_literal = 717, RULE_literalOrNull = 718, RULE_nullAsLiteral = 719,
		RULE_stringList = 720, RULE_textStringLiteral = 721, RULE_textString = 722,
		RULE_textStringHash = 723, RULE_textLiteral = 724, RULE_textStringNoLinebreak = 725,
		RULE_textStringLiteralList = 726, RULE_numLiteral = 727, RULE_boolLiteral = 728,
		RULE_nullLiteral = 729, RULE_int64Literal = 730, RULE_temporalLiteral = 731,
		RULE_floatOptions = 732, RULE_standardFloatOptions = 733, RULE_precision = 734,
		RULE_textOrIdentifier = 735, RULE_lValueIdentifier = 736, RULE_roleIdentifierOrText = 737,
		RULE_sizeNumber = 738, RULE_parentheses = 739, RULE_equal = 740, RULE_optionType = 741,
		RULE_rvalueSystemVariableType = 742, RULE_setVarIdentType = 743, RULE_jsonAttribute = 744,
		RULE_identifierKeyword = 745, RULE_identifierKeywordsAmbiguous1RolesAndLabels = 746,
		RULE_identifierKeywordsAmbiguous2Labels = 747, RULE_labelKeyword = 748,
		RULE_identifierKeywordsAmbiguous3Roles = 749, RULE_identifierKeywordsUnambiguous = 750,
		RULE_roleKeyword = 751, RULE_lValueKeyword = 752, RULE_identifierKeywordsAmbiguous4SystemVariables = 753,
		RULE_roleOrIdentifierKeyword = 754, RULE_roleOrLabelKeyword = 755;
	public static readonly string[] ruleNames = {
		"queries", "query", "simpleStatement", "alterStatement", "alterDatabase",
		"alterDatabaseOption", "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions",
		"alterLogfileGroupOption", "alterServer", "alterTable", "alterTableActions",
		"alterCommandList", "alterCommandsModifierList", "standaloneAlterCommands",
		"alterPartition", "alterList", "alterCommandsModifier", "alterListItem",
		"place", "restrict", "alterOrderList", "alterAlgorithmOption", "alterLockOption",
		"indexLockAndAlgorithm", "withValidation", "removePartitioning", "allOrPartitionNameList",
		"alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", "undoTableSpaceOption",
		"alterTablespaceOptions", "alterTablespaceOption", "changeTablespaceOption",
		"alterView", "viewTail", "viewQueryBlock", "viewCheckOption", "alterInstanceStatement",
		"createStatement", "createDatabase", "createDatabaseOption", "createTable",
		"tableElementList", "tableElement", "duplicateAsQe", "asCreateQueryExpression",
		"queryExpressionOrParens", "queryExpressionWithOptLockingClauses", "createRoutine",
		"createProcedure", "routineString", "storedRoutineBody", "createFunction",
		"createUdf", "routineCreateOption", "routineAlterOptions", "routineOption",
		"createIndex", "indexNameAndType", "createIndexTarget", "createLogfileGroup",
		"logfileGroupOptions", "logfileGroupOption", "createServer", "serverOptions",
		"serverOption", "createTablespace", "createUndoTablespace", "tsDataFileName",
		"tsDataFile", "tablespaceOptions", "tablespaceOption", "tsOptionInitialSize",
		"tsOptionUndoRedoBufferSize", "tsOptionAutoextendSize", "tsOptionMaxSize",
		"tsOptionExtentSize", "tsOptionNodegroup", "tsOptionEngine", "tsOptionWait",
		"tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", "tsOptionEngineAttribute",
		"createView", "viewReplaceOrAlgorithm", "viewAlgorithm", "viewSuid", "createTrigger",
		"triggerFollowsPrecedesClause", "createEvent", "createRole", "createSpatialReference",
		"srsAttribute", "dropStatement", "dropDatabase", "dropEvent", "dropFunction",
		"dropProcedure", "dropIndex", "dropLogfileGroup", "dropLogfileGroupOption",
		"dropServer", "dropTable", "dropTableSpace", "dropTrigger", "dropView",
		"dropRole", "dropSpatialReference", "dropUndoTablespace", "renameTableStatement",
		"renamePair", "truncateTableStatement", "importStatement", "callStatement",
		"deleteStatement", "partitionDelete", "deleteStatementOption", "doStatement",
		"handlerStatement", "handlerReadOrScan", "insertStatement", "insertLockOption",
		"insertFromConstructor", "fields", "insertValues", "insertQueryExpression",
		"valueList", "values", "valuesReference", "insertUpdateList", "loadStatement",
		"dataOrXml", "loadDataLock", "loadFrom", "loadSourceType", "sourceCount",
		"sourceOrder", "xmlRowsIdentifiedBy", "loadDataFileTail", "loadDataFileTargetList",
		"fieldOrVariableList", "loadAlgorithm", "loadParallel", "loadMemory",
		"replaceStatement", "selectStatement", "selectStatementWithInto", "queryExpression",
		"queryExpressionBody", "queryExpressionParens", "queryPrimary", "querySpecification",
		"subquery", "querySpecOption", "limitClause", "simpleLimitClause", "limitOptions",
		"limitOption", "intoClause", "procedureAnalyseClause", "havingClause",
		"qualifyClause", "windowClause", "windowDefinition", "windowSpec", "windowSpecDetails",
		"windowFrameClause", "windowFrameUnits", "windowFrameExtent", "windowFrameStart",
		"windowFrameBetween", "windowFrameBound", "windowFrameExclusion", "withClause",
		"commonTableExpression", "groupByClause", "olapOption", "orderClause",
		"direction", "fromClause", "tableReferenceList", "tableValueConstructor",
		"explicitTable", "rowValueExplicit", "selectOption", "lockingClauseList",
		"lockingClause", "lockStrengh", "lockedRowAction", "selectItemList", "selectItem",
		"selectAlias", "whereClause", "tableReference", "escapedTableReference",
		"joinedTable", "naturalJoinType", "innerJoinType", "outerJoinType", "tableFactor",
		"singleTable", "singleTableParens", "derivedTable", "tableReferenceListParens",
		"tableFunction", "columnsClause", "jtColumn", "onEmptyOrError", "onEmptyOrErrorJsonTable",
		"onEmpty", "onError", "jsonOnResponse", "unionOption", "tableAlias", "indexHintList",
		"indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", "indexHintClause",
		"indexList", "indexListElement", "updateStatement", "transactionOrLockingStatement",
		"transactionStatement", "beginWork", "startTransactionOptionList", "savepointStatement",
		"lockStatement", "lockItem", "lockOption", "xaStatement", "xaConvert",
		"xid", "replicationStatement", "purgeOptions", "resetOption", "masterOrBinaryLogsAndGtids",
		"sourceResetOptions", "replicationLoad", "changeReplicationSource", "changeSource",
		"sourceDefinitions", "sourceDefinition", "changeReplicationSourceAutoPosition",
		"changeReplicationSourceHost", "changeReplicationSourceBind", "changeReplicationSourceUser",
		"changeReplicationSourcePassword", "changeReplicationSourcePort", "changeReplicationSourceConnectRetry",
		"changeReplicationSourceRetryCount", "changeReplicationSourceDelay", "changeReplicationSourceSSL",
		"changeReplicationSourceSSLCA", "changeReplicationSourceSSLCApath", "changeReplicationSourceSSLCipher",
		"changeReplicationSourceSSLCLR", "changeReplicationSourceSSLCLRpath",
		"changeReplicationSourceSSLKey", "changeReplicationSourceSSLVerifyServerCert",
		"changeReplicationSourceTLSVersion", "changeReplicationSourceTLSCiphersuites",
		"changeReplicationSourceSSLCert", "changeReplicationSourcePublicKey",
		"changeReplicationSourceGetSourcePublicKey", "changeReplicationSourceHeartbeatPeriod",
		"changeReplicationSourceCompressionAlgorithm", "changeReplicationSourceZstdCompressionLevel",
		"privilegeCheckDef", "tablePrimaryKeyCheckDef", "assignGtidsToAnonymousTransactionsDefinition",
		"sourceTlsCiphersuitesDef", "sourceFileDef", "sourceLogFile", "sourceLogPos",
		"serverIdList", "changeReplication", "filterDefinition", "filterDbList",
		"filterTableList", "filterStringList", "filterWildDbTableString", "filterDbPairList",
		"startReplicaStatement", "stopReplicaStatement", "replicaUntil", "userOption",
		"passwordOption", "defaultAuthOption", "pluginDirOption", "replicaThreadOptions",
		"replicaThreadOption", "groupReplication", "groupReplicationStartOptions",
		"groupReplicationStartOption", "groupReplicationUser", "groupReplicationPassword",
		"groupReplicationPluginAuth", "replica", "preparedStatement", "executeStatement",
		"executeVarList", "cloneStatement", "dataDirSSL", "ssl", "accountManagementStatement",
		"alterUserStatement", "alterUserList", "alterUser", "oldAlterUser", "userFunction",
		"createUserStatement", "createUserTail", "userAttributes", "defaultRoleClause",
		"requireClause", "connectOptions", "accountLockPasswordExpireOptions",
		"userAttribute", "dropUserStatement", "grantStatement", "grantTargetList",
		"grantOptions", "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause",
		"renameUserStatement", "revokeStatement", "aclType", "roleOrPrivilegesList",
		"roleOrPrivilege", "grantIdentifier", "requireList", "requireListElement",
		"grantOption", "setRoleStatement", "roleList", "role", "tableAdministrationStatement",
		"histogramAutoUpdate", "histogramUpdateParam", "histogramNumBuckets",
		"histogram", "checkOption", "repairType", "uninstallStatement", "installStatement",
		"installOptionType", "installSetRvalue", "installSetValue", "installSetValueList",
		"setStatement", "startOptionValueList", "transactionCharacteristics",
		"transactionAccessMode", "isolationLevel", "optionValueListContinued",
		"optionValueNoOptionType", "optionValue", "startOptionValueListFollowingOptionType",
		"optionValueFollowingOptionType", "setExprOrDefault", "showDatabasesStatement",
		"showTablesStatement", "showTriggersStatement", "showEventsStatement",
		"showTableStatusStatement", "showOpenTablesStatement", "showParseTreeStatement",
		"showPluginsStatement", "showEngineLogsStatement", "showEngineMutexStatement",
		"showEngineStatusStatement", "showColumnsStatement", "showBinaryLogsStatement",
		"showBinaryLogStatusStatement", "showReplicasStatement", "showBinlogEventsStatement",
		"showRelaylogEventsStatement", "showKeysStatement", "showEnginesStatement",
		"showCountWarningsStatement", "showCountErrorsStatement", "showWarningsStatement",
		"showErrorsStatement", "showProfilesStatement", "showProfileStatement",
		"showStatusStatement", "showProcessListStatement", "showVariablesStatement",
		"showCharacterSetStatement", "showCollationStatement", "showPrivilegesStatement",
		"showGrantsStatement", "showCreateDatabaseStatement", "showCreateTableStatement",
		"showCreateViewStatement", "showMasterStatusStatement", "showReplicaStatusStatement",
		"showCreateProcedureStatement", "showCreateFunctionStatement", "showCreateTriggerStatement",
		"showCreateProcedureStatusStatement", "showCreateFunctionStatusStatement",
		"showCreateProcedureCodeStatement", "showCreateFunctionCodeStatement",
		"showCreateEventStatement", "showCreateUserStatement", "showCommandType",
		"engineOrAll", "fromOrIn", "inDb", "profileDefinitions", "profileDefinition",
		"otherAdministrativeStatement", "keyCacheListOrParts", "keyCacheList",
		"assignToKeycache", "assignToKeycachePartition", "cacheKeyList", "keyUsageElement",
		"keyUsageList", "flushOption", "logType", "flushTables", "flushTablesOptions",
		"preloadTail", "preloadList", "preloadKeys", "adminPartition", "resourceGroupManagement",
		"createResourceGroup", "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority",
		"resourceGroupEnableDisable", "alterResourceGroup", "setResourceGroup",
		"threadIdList", "dropResourceGroup", "utilityStatement", "describeStatement",
		"explainStatement", "explainOptions", "explainableStatement", "explainInto",
		"helpCommand", "useCommand", "restartServer", "expr", "boolPri", "compOp",
		"predicate", "predicateOperations", "bitExpr", "simpleExpr", "arrayCast",
		"jsonOperator", "sumExpr", "groupingOperation", "windowFunctionCall",
		"samplingMethod", "samplingPercentage", "tablesampleClause", "windowingClause",
		"leadLagInfo", "stableInteger", "paramOrVar", "nullTreatment", "jsonFunction",
		"inSumExpr", "identListArg", "identList", "fulltextOptions", "runtimeFunctionCall",
		"returningType", "geometryFunction", "timeFunctionParameters", "fractionalPrecision",
		"weightStringLevels", "weightStringLevelListItem", "dateTimeTtype", "trimFunction",
		"substringFunction", "functionCall", "udfExprList", "udfExpr", "userVariable",
		"contextVariable", "emittedVariable", "inExpressionUserVariableAssignment",
		"rvalueSystemOrUserVariable", "lvalueVariable", "rvalueSystemVariable",
		"whenExpression", "thenExpression", "elseExpression", "castType", "exprList",
		"charset", "notRule", "not2Rule", "interval", "intervalTimeStamp", "exprListWithParentheses",
		"exprWithParentheses", "simpleExprWithParentheses", "orderList", "orderExpression",
		"groupList", "groupingExpression", "channel", "compoundStatement", "returnStatement",
		"ifStatement", "ifBody", "thenStatement", "compoundStatementList", "caseStatement",
		"elseStatement", "labeledBlock", "unlabeledBlock", "label", "beginEndBlock",
		"labeledControl", "unlabeledControl", "loopBlock", "whileDoBlock", "repeatUntilBlock",
		"spDeclarations", "spDeclaration", "variableDeclaration", "conditionDeclaration",
		"spCondition", "sqlstate", "handlerDeclaration", "handlerCondition", "cursorDeclaration",
		"iterateStatement", "leaveStatement", "getDiagnosticsStatement", "signalAllowedExpr",
		"statementInformationItem", "conditionInformationItem", "signalInformationItemName",
		"signalStatement", "resignalStatement", "signalInformationItem", "cursorOpen",
		"cursorClose", "cursorFetch", "schedule", "columnDefinition", "checkOrReferences",
		"checkConstraint", "constraintEnforcement", "tableConstraintDef", "constraintName",
		"fieldDefinition", "columnAttribute", "columnFormat", "storageMedia",
		"now", "nowOrSignedLiteral", "gcolAttribute", "references", "deleteOption",
		"keyList", "keyPart", "keyListWithExpression", "keyPartOrExpression",
		"indexType", "indexOption", "commonIndexOption", "visibility", "indexTypeClause",
		"fulltextIndexOption", "spatialIndexOption", "dataTypeDefinition", "dataType",
		"nchar", "realType", "fieldLength", "fieldOptions", "charsetWithOptBinary",
		"ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", "functionDatetimePrecision",
		"charsetName", "collationName", "createTableOptions", "createTableOptionsEtc",
		"createPartitioningEtc", "createTableOptionsSpaceSeparated", "createTableOption",
		"ternaryOption", "defaultCollation", "defaultEncryption", "defaultCharset",
		"partitionClause", "partitionTypeDef", "subPartitions", "partitionKeyAlgorithm",
		"partitionDefinitions", "partitionDefinition", "partitionValuesIn", "partitionOption",
		"subpartitionDefinition", "partitionValueItemListParen", "partitionValueItem",
		"definerClause", "ifExists", "ifExistsIdentifier", "persistedVariableIdentifier",
		"ifNotExists", "ignoreUnknownUser", "procedureParameter", "functionParameter",
		"collate", "typeWithOptCollate", "schemaIdentifierPair", "viewRefList",
		"updateList", "updateElement", "charsetClause", "fieldsClause", "fieldTerm",
		"linesClause", "lineTerm", "userList", "createUserList", "createUser",
		"createUserWithMfa", "identification", "identifiedByPassword", "identifiedByRandomPassword",
		"identifiedWithPlugin", "identifiedWithPluginAsAuth", "identifiedWithPluginByPassword",
		"identifiedWithPluginByRandomPassword", "initialAuth", "retainCurrentPassword",
		"discardOldPassword", "userRegistration", "factor", "replacePassword",
		"userIdentifierOrText", "user", "likeClause", "likeOrWhere", "onlineOption",
		"noWriteToBinLog", "usePartition", "fieldIdentifier", "columnName", "columnInternalRef",
		"columnInternalRefList", "columnRef", "insertIdentifier", "indexName",
		"indexRef", "tableWild", "schemaName", "schemaRef", "procedureName", "procedureRef",
		"functionName", "functionRef", "triggerName", "triggerRef", "viewName",
		"viewRef", "tablespaceName", "tablespaceRef", "logfileGroupName", "logfileGroupRef",
		"eventName", "eventRef", "udfName", "serverName", "serverRef", "engineRef",
		"tableName", "filterTableRef", "tableRefWithWildcard", "tableRef", "tableRefList",
		"tableAliasRefList", "parameterName", "labelIdentifier", "labelRef", "roleIdentifier",
		"pluginRef", "componentRef", "resourceGroupRef", "windowName", "pureIdentifier",
		"identifier", "identifierList", "identifierListWithParentheses", "qualifiedIdentifier",
		"simpleIdentifier", "dotIdentifier", "ulong_number", "real_ulong_number",
		"ulonglongNumber", "real_ulonglong_number", "signedLiteral", "signedLiteralOrNull",
		"literal", "literalOrNull", "nullAsLiteral", "stringList", "textStringLiteral",
		"textString", "textStringHash", "textLiteral", "textStringNoLinebreak",
		"textStringLiteralList", "numLiteral", "boolLiteral", "nullLiteral", "int64Literal",
		"temporalLiteral", "floatOptions", "standardFloatOptions", "precision",
		"textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", "sizeNumber",
		"parentheses", "equal", "optionType", "rvalueSystemVariableType", "setVarIdentType",
		"jsonAttribute", "identifierKeyword", "identifierKeywordsAmbiguous1RolesAndLabels",
		"identifierKeywordsAmbiguous2Labels", "labelKeyword", "identifierKeywordsAmbiguous3Roles",
		"identifierKeywordsUnambiguous", "roleKeyword", "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables",
		"roleOrIdentifierKeyword", "roleOrLabelKeyword"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, null, null, null, "'='", "':='", "'<=>'", "'>='", "'>'",
		"'<='", "'<'", "'!='", "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'",
		"'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", "'|'", "'.'", "','", "';'",
		"':'", "'('", "')'", "'{'", "'}'", "'_'", "'->'", "'->>'", "'@'", null,
		"'#'", null, "'\\N'", "'?'", null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, null, null, null, null, null, null, null, null, null, null, null,
		null, "'<>'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", "INT_NUMBER", "LONG_NUMBER",
		"ULONGLONG_NUMBER", "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR",
		"GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", "LESS_OR_EQUAL_OPERATOR",
		"LESS_THAN_OPERATOR", "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR",
		"MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", "LOGICAL_NOT_OPERATOR",
		"BITWISE_NOT_OPERATOR", "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR",
		"LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", "BITWISE_XOR_OPERATOR",
		"LOGICAL_OR_OPERATOR", "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL",
		"SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", "CLOSE_PAR_SYMBOL",
		"OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL",
		"JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", "AT_TEXT_SUFFIX",
		"NUMBER_SIGN_SYMBOL", "NUMBER_TEXT_SUFFIX", "NULL2_SYMBOL", "PARAM_MARKER",
		"HEX_NUMBER", "BIN_NUMBER", "DECIMAL_NUMBER", "FLOAT_NUMBER", "ACCESSIBLE_SYMBOL",
		"ACCOUNT_SYMBOL", "ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", "AFTER_SYMBOL",
		"AGAINST_SYMBOL", "AGGREGATE_SYMBOL", "ALGORITHM_SYMBOL", "ALL_SYMBOL",
		"ALTER_SYMBOL", "ALWAYS_SYMBOL", "ANALYZE_SYMBOL", "AND_SYMBOL", "ANY_SYMBOL",
		"AS_SYMBOL", "ASC_SYMBOL", "ASCII_SYMBOL", "ASENSITIVE_SYMBOL", "AT_SYMBOL",
		"AUTOEXTEND_SIZE_SYMBOL", "AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL",
		"AVG_SYMBOL", "BACKUP_SYMBOL", "BEFORE_SYMBOL", "BEGIN_SYMBOL", "BETWEEN_SYMBOL",
		"BIGINT_SYMBOL", "BINARY_SYMBOL", "BINLOG_SYMBOL", "BIT_AND_SYMBOL", "BIT_OR_SYMBOL",
		"BIT_SYMBOL", "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BLOCK_SYMBOL", "BOOLEAN_SYMBOL",
		"BOOL_SYMBOL", "BOTH_SYMBOL", "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL",
		"CACHE_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", "CASCADED_SYMBOL", "CASE_SYMBOL",
		"CAST_SYMBOL", "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", "CHANGE_SYMBOL",
		"CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", "CHAR_SYMBOL", "CHECKSUM_SYMBOL",
		"CHECK_SYMBOL", "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", "CLIENT_SYMBOL",
		"CLOSE_SYMBOL", "COALESCE_SYMBOL", "CODE_SYMBOL", "COLLATE_SYMBOL", "COLLATION_SYMBOL",
		"COLUMNS_SYMBOL", "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", "COLUMN_FORMAT_SYMBOL",
		"COMMENT_SYMBOL", "COMMITTED_SYMBOL", "COMMIT_SYMBOL", "COMPACT_SYMBOL",
		"COMPLETION_SYMBOL", "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", "CONCURRENT_SYMBOL",
		"CONDITION_SYMBOL", "CONNECTION_SYMBOL", "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL",
		"CONSTRAINT_CATALOG_SYMBOL", "CONSTRAINT_NAME_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL",
		"CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", "CONVERT_SYMBOL",
		"COUNT_SYMBOL", "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", "CUBE_SYMBOL",
		"CURDATE_SYMBOL", "CURRENT_SYMBOL", "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL",
		"CURRENT_USER_SYMBOL", "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL",
		"DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATAFILE_SYMBOL", "DATA_SYMBOL",
		"DATETIME_SYMBOL", "DATE_ADD_SYMBOL", "DATE_SUB_SYMBOL", "DATE_SYMBOL",
		"DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL",
		"DAY_SYMBOL", "DEALLOCATE_SYMBOL", "DECIMAL_SYMBOL", "DECLARE_SYMBOL",
		"DEFAULT_SYMBOL", "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL",
		"DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", "DESC_SYMBOL", "DESCRIBE_SYMBOL",
		"DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", "DIRECTORY_SYMBOL", "DISABLE_SYMBOL",
		"DISCARD_SYMBOL", "DISK_SYMBOL", "DISTINCT_SYMBOL", "DIV_SYMBOL", "DOUBLE_SYMBOL",
		"DO_SYMBOL", "DROP_SYMBOL", "DUAL_SYMBOL", "DUMPFILE_SYMBOL", "DUPLICATE_SYMBOL",
		"DYNAMIC_SYMBOL", "EACH_SYMBOL", "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL",
		"ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", "END_SYMBOL", "ENDS_SYMBOL", "ENGINES_SYMBOL",
		"ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", "ERRORS_SYMBOL", "ESCAPED_SYMBOL",
		"ESCAPE_SYMBOL", "EVENTS_SYMBOL", "EVENT_SYMBOL", "EVERY_SYMBOL", "EXCHANGE_SYMBOL",
		"EXECUTE_SYMBOL", "EXISTS_SYMBOL", "EXIT_SYMBOL", "EXPANSION_SYMBOL",
		"EXPIRE_SYMBOL", "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", "EXTENDED_SYMBOL",
		"EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL", "FAST_SYMBOL",
		"FAULTS_SYMBOL", "FETCH_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL",
		"FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", "FLOAT_SYMBOL", "FLUSH_SYMBOL",
		"FOLLOWS_SYMBOL", "FORCE_SYMBOL", "FOREIGN_SYMBOL", "FOR_SYMBOL", "FORMAT_SYMBOL",
		"FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", "FULLTEXT_SYMBOL", "FUNCTION_SYMBOL",
		"GET_SYMBOL", "GENERAL_SYMBOL", "GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL",
		"GEOMETRYCOLLECTION_SYMBOL", "GEOMETRY_SYMBOL", "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL",
		"GRANT_SYMBOL", "GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL",
		"HANDLER_SYMBOL", "HASH_SYMBOL", "HAVING_SYMBOL", "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL",
		"HOST_SYMBOL", "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", "HOUR_MINUTE_SYMBOL",
		"HOUR_SECOND_SYMBOL", "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL",
		"IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", "IMPORT_SYMBOL", "INDEXES_SYMBOL",
		"INDEX_SYMBOL", "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL",
		"INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", "INSERT_METHOD_SYMBOL",
		"INSTANCE_SYMBOL", "INSTALL_SYMBOL", "INTERVAL_SYMBOL", "INTO_SYMBOL",
		"INT_SYMBOL", "INVOKER_SYMBOL", "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL",
		"IO_BEFORE_GTIDS_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", "IS_SYMBOL", "ISOLATION_SYMBOL",
		"ISSUER_SYMBOL", "ITERATE_SYMBOL", "JOIN_SYMBOL", "JSON_SYMBOL", "KEYS_SYMBOL",
		"KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", "KILL_SYMBOL", "LANGUAGE_SYMBOL",
		"LAST_SYMBOL", "LEADING_SYMBOL", "LEAVES_SYMBOL", "LEAVE_SYMBOL", "LEFT_SYMBOL",
		"LESS_SYMBOL", "LEVEL_SYMBOL", "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL",
		"LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", "LOAD_SYMBOL", "LOCAL_SYMBOL",
		"LOCKS_SYMBOL", "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", "LONGBLOB_SYMBOL",
		"LONGTEXT_SYMBOL", "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL",
		"MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", "MASTER_CONNECT_RETRY_SYMBOL",
		"MASTER_DELAY_SYMBOL", "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL",
		"MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", "MASTER_PORT_SYMBOL",
		"MASTER_RETRY_COUNT_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", "MASTER_SSL_CA_SYMBOL",
		"MASTER_SSL_CERT_SYMBOL", "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL",
		"MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", "MASTER_SSL_SYMBOL",
		"MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL",
		"MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", "MATCH_SYMBOL",
		"MAX_CONNECTIONS_PER_HOUR_SYMBOL", "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_ROWS_SYMBOL",
		"MAX_SIZE_SYMBOL", "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", "MAX_USER_CONNECTIONS_SYMBOL",
		"MAXVALUE_SYMBOL", "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL",
		"MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", "MESSAGE_TEXT_SYMBOL",
		"MICROSECOND_SYMBOL", "MID_SYMBOL", "MIGRATE_SYMBOL", "MINUTE_MICROSECOND_SYMBOL",
		"MINUTE_SECOND_SYMBOL", "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL",
		"MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", "MOD_SYMBOL", "MONTH_SYMBOL",
		"MULTILINESTRING_SYMBOL", "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL",
		"MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", "NAME_SYMBOL", "NATIONAL_SYMBOL",
		"NATURAL_SYMBOL", "NCHAR_SYMBOL", "NDBCLUSTER_SYMBOL", "NEVER_SYMBOL",
		"NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", "NONE_SYMBOL", "NOT_SYMBOL",
		"NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", "NO_WRITE_TO_BINLOG_SYMBOL",
		"NULL_SYMBOL", "NUMBER_SYMBOL", "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", "OFFLINE_SYMBOL",
		"OFFSET_SYMBOL", "ON_SYMBOL", "ONE_SYMBOL", "ONLINE_SYMBOL", "ONLY_SYMBOL",
		"OPEN_SYMBOL", "OPTIMIZE_SYMBOL", "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL",
		"OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", "OR_SYMBOL", "OUTER_SYMBOL",
		"OUTFILE_SYMBOL", "OUT_SYMBOL", "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", "PAGE_SYMBOL",
		"PARSER_SYMBOL", "PARTIAL_SYMBOL", "PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL",
		"PARTITION_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", "PLUGINS_SYMBOL",
		"PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", "POINT_SYMBOL", "POLYGON_SYMBOL",
		"PORT_SYMBOL", "POSITION_SYMBOL", "PRECEDES_SYMBOL", "PRECISION_SYMBOL",
		"PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", "PRIMARY_SYMBOL",
		"PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL",
		"PROFILE_SYMBOL", "PROFILES_SYMBOL", "PROXY_SYMBOL", "PURGE_SYMBOL", "QUARTER_SYMBOL",
		"QUERY_SYMBOL", "QUICK_SYMBOL", "RANGE_SYMBOL", "READS_SYMBOL", "READ_ONLY_SYMBOL",
		"READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", "REBUILD_SYMBOL", "RECOVER_SYMBOL",
		"REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", "REFERENCES_SYMBOL", "REGEXP_SYMBOL",
		"RELAY_SYMBOL", "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", "RELAY_LOG_POS_SYMBOL",
		"RELAY_THREAD_SYMBOL", "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL",
		"RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", "REPEATABLE_SYMBOL",
		"REPEAT_SYMBOL", "REPLACE_SYMBOL", "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL",
		"REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", "REPLICATE_IGNORE_TABLE_SYMBOL",
		"REPLICATE_WILD_DO_TABLE_SYMBOL", "REPLICATE_WILD_IGNORE_TABLE_SYMBOL",
		"REPLICATE_REWRITE_DB_SYMBOL", "REQUIRE_SYMBOL", "RESET_SYMBOL", "RESIGNAL_SYMBOL",
		"RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", "RETURNED_SQLSTATE_SYMBOL",
		"RETURNS_SYMBOL", "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL",
		"RIGHT_SYMBOL", "ROLLBACK_SYMBOL", "ROLLUP_SYMBOL", "ROTATE_SYMBOL", "ROUTINE_SYMBOL",
		"ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", "ROW_SYMBOL",
		"RTREE_SYMBOL", "SAVEPOINT_SYMBOL", "SCHEDULE_SYMBOL", "SCHEMA_NAME_SYMBOL",
		"SECOND_MICROSECOND_SYMBOL", "SECOND_SYMBOL", "SECURITY_SYMBOL", "SELECT_SYMBOL",
		"SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", "SERIAL_SYMBOL",
		"SESSION_SYMBOL", "SERVER_SYMBOL", "SESSION_USER_SYMBOL", "SET_SYMBOL",
		"SHARE_SYMBOL", "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", "SIGNED_SYMBOL",
		"SIMPLE_SYMBOL", "SLAVE_SYMBOL", "SLOW_SYMBOL", "SMALLINT_SYMBOL", "SNAPSHOT_SYMBOL",
		"SOCKET_SYMBOL", "SONAME_SYMBOL", "SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SPATIAL_SYMBOL",
		"SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", "SQLWARNING_SYMBOL",
		"SQL_AFTER_GTIDS_SYMBOL", "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL",
		"SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL",
		"SQL_NO_CACHE_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", "SQL_SYMBOL", "SQL_THREAD_SYMBOL",
		"SSL_SYMBOL", "STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", "START_SYMBOL",
		"STATS_AUTO_RECALC_SYMBOL", "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL",
		"STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", "STDDEV_POP_SYMBOL",
		"STD_SYMBOL", "STOP_SYMBOL", "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL",
		"STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", "SUBDATE_SYMBOL", "SUBJECT_SYMBOL",
		"SUBPARTITIONS_SYMBOL", "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL",
		"SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", "SWAPS_SYMBOL", "SWITCHES_SYMBOL",
		"SYSDATE_SYMBOL", "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL",
		"TABLE_SYMBOL", "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", "TEMPORARY_SYMBOL",
		"TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", "TEXT_SYMBOL", "THAN_SYMBOL",
		"THEN_SYMBOL", "TIMESTAMP_SYMBOL", "TIMESTAMPADD_SYMBOL", "TIMESTAMPDIFF_SYMBOL",
		"TIME_SYMBOL", "TINYBLOB_SYMBOL", "TINYINT_SYMBOL", "TINYTEXT_SYMBOL",
		"TO_SYMBOL", "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL",
		"TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", "TRUNCATE_SYMBOL", "TYPES_SYMBOL",
		"TYPE_SYMBOL", "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", "UNDEFINED_SYMBOL",
		"UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", "UNDO_SYMBOL", "UNICODE_SYMBOL",
		"UNINSTALL_SYMBOL", "UNION_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL",
		"UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", "UPDATE_SYMBOL", "UPGRADE_SYMBOL",
		"USAGE_SYMBOL", "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL",
		"USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", "UTC_TIMESTAMP_SYMBOL",
		"UTC_TIME_SYMBOL", "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VALUE_SYMBOL",
		"VARBINARY_SYMBOL", "VARCHAR_SYMBOL", "VARIABLES_SYMBOL", "VARIANCE_SYMBOL",
		"VARYING_SYMBOL", "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", "VIEW_SYMBOL",
		"VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL",
		"WHEN_SYMBOL", "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", "WITHOUT_SYMBOL",
		"WORK_SYMBOL", "WRAPPER_SYMBOL", "WRITE_SYMBOL", "X509_SYMBOL", "XA_SYMBOL",
		"XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", "YEAR_SYMBOL",
		"ZEROFILL_SYMBOL", "PERSIST_SYMBOL", "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL",
		"VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", "RECURSIVE_SYMBOL",
		"JSON_OBJECTAGG_SYMBOL", "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL",
		"LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", "PERSIST_ONLY_SYMBOL",
		"HISTOGRAM_SYMBOL", "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL",
		"CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", "FIRST_VALUE_SYMBOL",
		"FOLLOWING_SYMBOL", "GROUPS_SYMBOL", "LAG_SYMBOL", "LAST_VALUE_SYMBOL",
		"LEAD_SYMBOL", "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", "OTHERS_SYMBOL",
		"OVER_SYMBOL", "PERCENT_RANK_SYMBOL", "PRECEDING_SYMBOL", "RANK_SYMBOL",
		"RESPECT_SYMBOL", "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL",
		"WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", "NESTED_SYMBOL",
		"ORDINALITY_SYMBOL", "PATH_SYMBOL", "HISTORY_SYMBOL", "REUSE_SYMBOL",
		"SRID_SYMBOL", "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", "SYSTEM_SYMBOL",
		"VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", "GET_MASTER_PUBLIC_KEY_SYMBOL",
		"RESTART_SYMBOL", "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", "ORGANIZATION_SYMBOL",
		"REFERENCE_SYMBOL", "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL",
		"SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", "ACTIVE_SYMBOL", "INACTIVE_SYMBOL",
		"LATERAL_SYMBOL", "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL",
		"ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", "MEMBER_SYMBOL", "RANDOM_SYMBOL",
		"MASTER_COMPRESSION_ALGORITHM_SYMBOL", "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL",
		"PRIVILEGE_CHECKS_USER_SYMBOL", "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL",
		"PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL",
		"STREAM_SYMBOL", "OFF_SYMBOL", "RETURNING_SYMBOL", "JSON_VALUE_SYMBOL",
		"TLS_SYMBOL", "ATTRIBUTE_SYMBOL", "ENGINE_ATTRIBUTE_SYMBOL", "SECONDARY_ENGINE_ATTRIBUTE_SYMBOL",
		"SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL", "ZONE_SYMBOL", "GRAMMAR_SELECTOR_DERIVED_EXPR",
		"REPLICA_SYMBOL", "REPLICAS_SYMBOL", "ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL",
		"GET_SOURCE_PUBLIC_KEY_SYMBOL", "SOURCE_AUTO_POSITION_SYMBOL", "SOURCE_BIND_SYMBOL",
		"SOURCE_COMPRESSION_ALGORITHM_SYMBOL", "SOURCE_CONNECT_RETRY_SYMBOL",
		"SOURCE_DELAY_SYMBOL", "SOURCE_HEARTBEAT_PERIOD_SYMBOL", "SOURCE_HOST_SYMBOL",
		"SOURCE_LOG_FILE_SYMBOL", "SOURCE_LOG_POS_SYMBOL", "SOURCE_PASSWORD_SYMBOL",
		"SOURCE_PORT_SYMBOL", "SOURCE_PUBLIC_KEY_PATH_SYMBOL", "SOURCE_RETRY_COUNT_SYMBOL",
		"SOURCE_SSL_SYMBOL", "SOURCE_SSL_CA_SYMBOL", "SOURCE_SSL_CAPATH_SYMBOL",
		"SOURCE_SSL_CERT_SYMBOL", "SOURCE_SSL_CIPHER_SYMBOL", "SOURCE_SSL_CRL_SYMBOL",
		"SOURCE_SSL_CRLPATH_SYMBOL", "SOURCE_SSL_KEY_SYMBOL", "SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL",
		"SOURCE_TLS_CIPHERSUITES_SYMBOL", "SOURCE_TLS_VERSION_SYMBOL", "SOURCE_USER_SYMBOL",
		"SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL", "ST_COLLECT_SYMBOL", "KEYRING_SYMBOL",
		"AUTHENTICATION_SYMBOL", "FACTOR_SYMBOL", "FINISH_SYMBOL", "INITIATE_SYMBOL",
		"REGISTRATION_SYMBOL", "UNREGISTER_SYMBOL", "INITIAL_SYMBOL", "CHALLENGE_RESPONSE_SYMBOL",
		"GTID_ONLY_SYMBOL", "INTERSECT_SYMBOL", "BULK_SYMBOL", "URL_SYMBOL", "GENERATE_SYMBOL",
		"PARSE_TREE_SYMBOL", "LOG_SYMBOL", "GTIDS_SYMBOL", "PARALLEL_SYMBOL",
		"S3_SYMBOL", "QUALIFY_SYMBOL", "AUTO_SYMBOL", "MANUAL_SYMBOL", "BERNOULLI_SYMBOL",
		"TABLESAMPLE_SYMBOL", "WHITESPACE", "INVALID_INPUT", "UNDERSCORE_CHARSET",
		"IDENTIFIER", "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT",
		"SINGLE_QUOTED_TEXT", "DOLLAR_QUOTED_STRING_TEXT", "VERSION_COMMENT_START",
		"MYSQL_COMMENT_START", "VERSION_COMMENT_END", "BLOCK_COMMENT", "INVALID_BLOCK_COMMENT",
		"DASHDASH_COMMENT", "NOT_EQUAL2_OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MySqlParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MySqlParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MySqlParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MySqlParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class QueriesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext[] query() {
			return GetRuleContexts<QueryContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryContext query(int i) {
			return GetRuleContext<QueryContext>(i);
		}
		public QueriesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queries; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueries(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueries(this);
		}
	}

	[RuleVersion(0)]
	public QueriesContext queries() {
		QueriesContext _localctx = new QueriesContext(Context, State);
		EnterRule(_localctx, 0, RULE_queries);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1515;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1512;
					query();
					}
					}
				}
				State = 1517;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			State = 1518;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySqlParser.SEMICOLON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginWorkContext beginWork() {
			return GetRuleContext<BeginWorkContext>(0);
		}
		public QueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_query; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuery(this);
		}
	}

	[RuleVersion(0)]
	public QueryContext query() {
		QueryContext _localctx = new QueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_query);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1522;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				{
				State = 1520;
				simpleStatement();
				}
				break;
			case 2:
				{
				State = 1521;
				beginWork();
				}
				break;
			}
			State = 1524;
			Match(SEMICOLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterStatementContext alterStatement() {
			return GetRuleContext<AlterStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateStatementContext createStatement() {
			return GetRuleContext<CreateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropStatementContext dropStatement() {
			return GetRuleContext<DropStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameTableStatementContext renameTableStatement() {
			return GetRuleContext<RenameTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TruncateTableStatementContext truncateTableStatement() {
			return GetRuleContext<TruncateTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ImportStatementContext importStatement() {
			return GetRuleContext<ImportStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallStatementContext callStatement() {
			return GetRuleContext<CallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DoStatementContext doStatement() {
			return GetRuleContext<DoStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerStatementContext handlerStatement() {
			return GetRuleContext<HandlerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadStatementContext loadStatement() {
			return GetRuleContext<LoadStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TransactionOrLockingStatementContext transactionOrLockingStatement() {
			return GetRuleContext<TransactionOrLockingStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationStatementContext replicationStatement() {
			return GetRuleContext<ReplicationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreparedStatementContext preparedStatement() {
			return GetRuleContext<PreparedStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CloneStatementContext cloneStatement() {
			return GetRuleContext<CloneStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountManagementStatementContext accountManagementStatement() {
			return GetRuleContext<AccountManagementStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAdministrationStatementContext tableAdministrationStatement() {
			return GetRuleContext<TableAdministrationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UninstallStatementContext uninstallStatement() {
			return GetRuleContext<UninstallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallStatementContext installStatement() {
			return GetRuleContext<InstallStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetStatementContext setStatement() {
			return GetRuleContext<SetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowDatabasesStatementContext showDatabasesStatement() {
			return GetRuleContext<ShowDatabasesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowTablesStatementContext showTablesStatement() {
			return GetRuleContext<ShowTablesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowTriggersStatementContext showTriggersStatement() {
			return GetRuleContext<ShowTriggersStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEventsStatementContext showEventsStatement() {
			return GetRuleContext<ShowEventsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowTableStatusStatementContext showTableStatusStatement() {
			return GetRuleContext<ShowTableStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowOpenTablesStatementContext showOpenTablesStatement() {
			return GetRuleContext<ShowOpenTablesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowParseTreeStatementContext showParseTreeStatement() {
			return GetRuleContext<ShowParseTreeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowPluginsStatementContext showPluginsStatement() {
			return GetRuleContext<ShowPluginsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEngineLogsStatementContext showEngineLogsStatement() {
			return GetRuleContext<ShowEngineLogsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEngineMutexStatementContext showEngineMutexStatement() {
			return GetRuleContext<ShowEngineMutexStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEngineStatusStatementContext showEngineStatusStatement() {
			return GetRuleContext<ShowEngineStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowColumnsStatementContext showColumnsStatement() {
			return GetRuleContext<ShowColumnsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowBinaryLogsStatementContext showBinaryLogsStatement() {
			return GetRuleContext<ShowBinaryLogsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowBinaryLogStatusStatementContext showBinaryLogStatusStatement() {
			return GetRuleContext<ShowBinaryLogStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowReplicasStatementContext showReplicasStatement() {
			return GetRuleContext<ShowReplicasStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowBinlogEventsStatementContext showBinlogEventsStatement() {
			return GetRuleContext<ShowBinlogEventsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowRelaylogEventsStatementContext showRelaylogEventsStatement() {
			return GetRuleContext<ShowRelaylogEventsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowKeysStatementContext showKeysStatement() {
			return GetRuleContext<ShowKeysStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowEnginesStatementContext showEnginesStatement() {
			return GetRuleContext<ShowEnginesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCountWarningsStatementContext showCountWarningsStatement() {
			return GetRuleContext<ShowCountWarningsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCountErrorsStatementContext showCountErrorsStatement() {
			return GetRuleContext<ShowCountErrorsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowWarningsStatementContext showWarningsStatement() {
			return GetRuleContext<ShowWarningsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowErrorsStatementContext showErrorsStatement() {
			return GetRuleContext<ShowErrorsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfilesStatementContext showProfilesStatement() {
			return GetRuleContext<ShowProfilesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProfileStatementContext showProfileStatement() {
			return GetRuleContext<ShowProfileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowStatusStatementContext showStatusStatement() {
			return GetRuleContext<ShowStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowProcessListStatementContext showProcessListStatement() {
			return GetRuleContext<ShowProcessListStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowVariablesStatementContext showVariablesStatement() {
			return GetRuleContext<ShowVariablesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCharacterSetStatementContext showCharacterSetStatement() {
			return GetRuleContext<ShowCharacterSetStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCollationStatementContext showCollationStatement() {
			return GetRuleContext<ShowCollationStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowPrivilegesStatementContext showPrivilegesStatement() {
			return GetRuleContext<ShowPrivilegesStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowGrantsStatementContext showGrantsStatement() {
			return GetRuleContext<ShowGrantsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateDatabaseStatementContext showCreateDatabaseStatement() {
			return GetRuleContext<ShowCreateDatabaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateTableStatementContext showCreateTableStatement() {
			return GetRuleContext<ShowCreateTableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateViewStatementContext showCreateViewStatement() {
			return GetRuleContext<ShowCreateViewStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowMasterStatusStatementContext showMasterStatusStatement() {
			return GetRuleContext<ShowMasterStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowReplicaStatusStatementContext showReplicaStatusStatement() {
			return GetRuleContext<ShowReplicaStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateProcedureStatementContext showCreateProcedureStatement() {
			return GetRuleContext<ShowCreateProcedureStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateFunctionStatementContext showCreateFunctionStatement() {
			return GetRuleContext<ShowCreateFunctionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateTriggerStatementContext showCreateTriggerStatement() {
			return GetRuleContext<ShowCreateTriggerStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateProcedureStatusStatementContext showCreateProcedureStatusStatement() {
			return GetRuleContext<ShowCreateProcedureStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateFunctionStatusStatementContext showCreateFunctionStatusStatement() {
			return GetRuleContext<ShowCreateFunctionStatusStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateProcedureCodeStatementContext showCreateProcedureCodeStatement() {
			return GetRuleContext<ShowCreateProcedureCodeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateFunctionCodeStatementContext showCreateFunctionCodeStatement() {
			return GetRuleContext<ShowCreateFunctionCodeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateEventStatementContext showCreateEventStatement() {
			return GetRuleContext<ShowCreateEventStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowCreateUserStatementContext showCreateUserStatement() {
			return GetRuleContext<ShowCreateUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupManagementContext resourceGroupManagement() {
			return GetRuleContext<ResourceGroupManagementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OtherAdministrativeStatementContext otherAdministrativeStatement() {
			return GetRuleContext<OtherAdministrativeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UtilityStatementContext utilityStatement() {
			return GetRuleContext<UtilityStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GetDiagnosticsStatementContext getDiagnosticsStatement() {
			return GetRuleContext<GetDiagnosticsStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalStatementContext signalStatement() {
			return GetRuleContext<SignalStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResignalStatementContext resignalStatement() {
			return GetRuleContext<ResignalStatementContext>(0);
		}
		public SimpleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SimpleStatementContext simpleStatement() {
		SimpleStatementContext _localctx = new SimpleStatementContext(Context, State);
		EnterRule(_localctx, 4, RULE_simpleStatement);
		try {
			State = 1602;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1526;
				alterStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1527;
				createStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1528;
				dropStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1529;
				renameTableStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1530;
				truncateTableStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1531;
				importStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1532;
				callStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1533;
				deleteStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1534;
				doStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1535;
				handlerStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1536;
				insertStatement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1537;
				loadStatement();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1538;
				replaceStatement();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1539;
				selectStatement();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1540;
				updateStatement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 1541;
				transactionOrLockingStatement();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 1542;
				replicationStatement();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 1543;
				preparedStatement();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 1544;
				cloneStatement();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 1545;
				accountManagementStatement();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 1546;
				tableAdministrationStatement();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 1547;
				uninstallStatement();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 1548;
				installStatement();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 1549;
				setStatement();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 1550;
				showDatabasesStatement();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 1551;
				showTablesStatement();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 1552;
				showTriggersStatement();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 1553;
				showEventsStatement();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 1554;
				showTableStatusStatement();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 1555;
				showOpenTablesStatement();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 1556;
				showParseTreeStatement();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 1557;
				showPluginsStatement();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 1558;
				showEngineLogsStatement();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 1559;
				showEngineMutexStatement();
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 1560;
				showEngineStatusStatement();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 1561;
				showColumnsStatement();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 1562;
				showBinaryLogsStatement();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 1563;
				showBinaryLogStatusStatement();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 1564;
				showReplicasStatement();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 1565;
				showBinlogEventsStatement();
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 1566;
				showRelaylogEventsStatement();
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 1567;
				showKeysStatement();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 1568;
				showEnginesStatement();
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 1569;
				showCountWarningsStatement();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 1570;
				showCountErrorsStatement();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 1571;
				showWarningsStatement();
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 1572;
				showErrorsStatement();
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 1573;
				showProfilesStatement();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 1574;
				showProfileStatement();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 1575;
				showStatusStatement();
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 1576;
				showProcessListStatement();
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 1577;
				showVariablesStatement();
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 1578;
				showCharacterSetStatement();
				}
				break;
			case 54:
				EnterOuterAlt(_localctx, 54);
				{
				State = 1579;
				showCollationStatement();
				}
				break;
			case 55:
				EnterOuterAlt(_localctx, 55);
				{
				State = 1580;
				showPrivilegesStatement();
				}
				break;
			case 56:
				EnterOuterAlt(_localctx, 56);
				{
				State = 1581;
				showGrantsStatement();
				}
				break;
			case 57:
				EnterOuterAlt(_localctx, 57);
				{
				State = 1582;
				showCreateDatabaseStatement();
				}
				break;
			case 58:
				EnterOuterAlt(_localctx, 58);
				{
				State = 1583;
				showCreateTableStatement();
				}
				break;
			case 59:
				EnterOuterAlt(_localctx, 59);
				{
				State = 1584;
				showCreateViewStatement();
				}
				break;
			case 60:
				EnterOuterAlt(_localctx, 60);
				{
				State = 1585;
				showMasterStatusStatement();
				}
				break;
			case 61:
				EnterOuterAlt(_localctx, 61);
				{
				State = 1586;
				showReplicaStatusStatement();
				}
				break;
			case 62:
				EnterOuterAlt(_localctx, 62);
				{
				State = 1587;
				showCreateProcedureStatement();
				}
				break;
			case 63:
				EnterOuterAlt(_localctx, 63);
				{
				State = 1588;
				showCreateFunctionStatement();
				}
				break;
			case 64:
				EnterOuterAlt(_localctx, 64);
				{
				State = 1589;
				showCreateTriggerStatement();
				}
				break;
			case 65:
				EnterOuterAlt(_localctx, 65);
				{
				State = 1590;
				showCreateProcedureStatusStatement();
				}
				break;
			case 66:
				EnterOuterAlt(_localctx, 66);
				{
				State = 1591;
				showCreateFunctionStatusStatement();
				}
				break;
			case 67:
				EnterOuterAlt(_localctx, 67);
				{
				State = 1592;
				showCreateProcedureCodeStatement();
				}
				break;
			case 68:
				EnterOuterAlt(_localctx, 68);
				{
				State = 1593;
				showCreateFunctionCodeStatement();
				}
				break;
			case 69:
				EnterOuterAlt(_localctx, 69);
				{
				State = 1594;
				showCreateEventStatement();
				}
				break;
			case 70:
				EnterOuterAlt(_localctx, 70);
				{
				State = 1595;
				showCreateUserStatement();
				}
				break;
			case 71:
				EnterOuterAlt(_localctx, 71);
				{
				State = 1596;
				resourceGroupManagement();
				}
				break;
			case 72:
				EnterOuterAlt(_localctx, 72);
				{
				State = 1597;
				otherAdministrativeStatement();
				}
				break;
			case 73:
				EnterOuterAlt(_localctx, 73);
				{
				State = 1598;
				utilityStatement();
				}
				break;
			case 74:
				EnterOuterAlt(_localctx, 74);
				{
				State = 1599;
				getDiagnosticsStatement();
				}
				break;
			case 75:
				EnterOuterAlt(_localctx, 75);
				{
				State = 1600;
				signalStatement();
				}
				break;
			case 76:
				EnterOuterAlt(_localctx, 76);
				{
				State = 1601;
				resignalStatement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableContext alterTable() {
			return GetRuleContext<AlterTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseContext alterDatabase() {
			return GetRuleContext<AlterDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterViewContext alterView() {
			return GetRuleContext<AlterViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterEventContext alterEvent() {
			return GetRuleContext<AlterEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceContext alterTablespace() {
			return GetRuleContext<AlterTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUndoTablespaceContext alterUndoTablespace() {
			return GetRuleContext<AlterUndoTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupContext alterLogfileGroup() {
			return GetRuleContext<AlterLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterServerContext alterServer() {
			return GetRuleContext<AlterServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterInstanceStatementContext alterInstanceStatement() {
			return GetRuleContext<AlterInstanceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineAlterOptionsContext routineAlterOptions() {
			return GetRuleContext<RoutineAlterOptionsContext>(0);
		}
		public AlterStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterStatement(this);
		}
	}

	[RuleVersion(0)]
	public AlterStatementContext alterStatement() {
		AlterStatementContext _localctx = new AlterStatementContext(Context, State);
		EnterRule(_localctx, 6, RULE_alterStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1604;
			Match(ALTER_SYMBOL);
			State = 1625;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 1605;
				alterTable();
				}
				break;
			case 2:
				{
				State = 1606;
				alterDatabase();
				}
				break;
			case 3:
				{
				State = 1607;
				Match(PROCEDURE_SYMBOL);
				State = 1608;
				procedureRef();
				State = 1610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					State = 1609;
					routineAlterOptions();
					}
				}

				}
				break;
			case 4:
				{
				State = 1612;
				Match(FUNCTION_SYMBOL);
				State = 1613;
				functionRef();
				State = 1615;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL) {
					{
					State = 1614;
					routineAlterOptions();
					}
				}

				}
				break;
			case 5:
				{
				State = 1617;
				alterView();
				}
				break;
			case 6:
				{
				State = 1618;
				alterEvent();
				}
				break;
			case 7:
				{
				State = 1619;
				alterTablespace();
				}
				break;
			case 8:
				{
				State = 1620;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 1621;
				alterUndoTablespace();
				}
				break;
			case 9:
				{
				State = 1622;
				alterLogfileGroup();
				}
				break;
			case 10:
				{
				State = 1623;
				alterServer();
				}
				break;
			case 11:
				{
				State = 1624;
				alterInstanceStatement();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseOptionContext[] alterDatabaseOption() {
			return GetRuleContexts<AlterDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterDatabaseOptionContext alterDatabaseOption(int i) {
			return GetRuleContext<AlterDatabaseOptionContext>(i);
		}
		public AlterDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabase(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseContext alterDatabase() {
		AlterDatabaseContext _localctx = new AlterDatabaseContext(Context, State);
		EnterRule(_localctx, 8, RULE_alterDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1627;
			Match(DATABASE_SYMBOL);
			State = 1628;
			schemaRef();
			State = 1630;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 1629;
					alterDatabaseOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 1632;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption() {
			return GetRuleContext<CreateDatabaseOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySqlParser.ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TernaryOptionContext ternaryOption() {
			return GetRuleContext<TernaryOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public AlterDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterDatabaseOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterDatabaseOptionContext alterDatabaseOption() {
		AlterDatabaseOptionContext _localctx = new AlterDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 10, RULE_alterDatabaseOption);
		int _la;
		try {
			State = 1641;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1634;
				createDatabaseOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1635;
				Match(READ_SYMBOL);
				State = 1636;
				Match(ONLY_SYMBOL);
				State = 1638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 1637;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 1640;
				ternaryOption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySqlParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySqlParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySqlParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySqlParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySqlParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		public AlterEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterEvent(this);
		}
	}

	[RuleVersion(0)]
	public AlterEventContext alterEvent() {
		AlterEventContext _localctx = new AlterEventContext(Context, State);
		EnterRule(_localctx, 12, RULE_alterEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1644;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 1643;
				definerClause();
				}
			}

			State = 1646;
			Match(EVENT_SYMBOL);
			State = 1647;
			eventRef();
			State = 1651;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
			case 1:
				{
				State = 1648;
				Match(ON_SYMBOL);
				State = 1649;
				Match(SCHEDULE_SYMBOL);
				State = 1650;
				schedule();
				}
				break;
			}
			State = 1659;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 1653;
				Match(ON_SYMBOL);
				State = 1654;
				Match(COMPLETION_SYMBOL);
				State = 1656;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 1655;
					Match(NOT_SYMBOL);
					}
				}

				State = 1658;
				Match(PRESERVE_SYMBOL);
				}
			}

			State = 1664;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RENAME_SYMBOL) {
				{
				State = 1661;
				Match(RENAME_SYMBOL);
				State = 1662;
				Match(TO_SYMBOL);
				State = 1663;
				identifier();
				}
			}

			State = 1672;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 1666;
				Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 1667;
				Match(DISABLE_SYMBOL);
				State = 1670;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 1668;
					Match(ON_SYMBOL);
					State = 1669;
					replica();
					}
				}

				}
				break;
			case Eof:
			case SEMICOLON_SYMBOL:
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			State = 1676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 1674;
				Match(COMMENT_SYMBOL);
				State = 1675;
				textLiteral();
				}
			}

			State = 1680;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DO_SYMBOL) {
				{
				State = 1678;
				Match(DO_SYMBOL);
				State = 1679;
				compoundStatement();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySqlParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
			return GetRuleContext<AlterLogfileGroupOptionsContext>(0);
		}
		public AlterLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupContext alterLogfileGroup() {
		AlterLogfileGroupContext _localctx = new AlterLogfileGroupContext(Context, State);
		EnterRule(_localctx, 14, RULE_alterLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1682;
			Match(LOGFILE_SYMBOL);
			State = 1683;
			Match(GROUP_SYMBOL);
			State = 1684;
			logfileGroupRef();
			State = 1685;
			Match(ADD_SYMBOL);
			State = 1686;
			Match(UNDOFILE_SYMBOL);
			State = 1687;
			textLiteral();
			State = 1689;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 1688;
				alterLogfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionContext[] alterLogfileGroupOption() {
			return GetRuleContexts<AlterLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLogfileGroupOptionContext alterLogfileGroupOption(int i) {
			return GetRuleContext<AlterLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterLogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOptions(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionsContext alterLogfileGroupOptions() {
		AlterLogfileGroupOptionsContext _localctx = new AlterLogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 16, RULE_alterLogfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1691;
			alterLogfileGroupOption();
			State = 1698;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				{
				State = 1693;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 1692;
					Match(COMMA_SYMBOL);
					}
				}

				State = 1695;
				alterLogfileGroupOption();
				}
				}
				State = 1700;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		public AlterLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLogfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterLogfileGroupOptionContext alterLogfileGroupOption() {
		AlterLogfileGroupOptionContext _localctx = new AlterLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 18, RULE_alterLogfileGroupOption);
		try {
			State = 1704;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1701;
				tsOptionInitialSize();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1702;
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1703;
				tsOptionWait();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public AlterServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterServer(this);
		}
	}

	[RuleVersion(0)]
	public AlterServerContext alterServer() {
		AlterServerContext _localctx = new AlterServerContext(Context, State);
		EnterRule(_localctx, 20, RULE_alterServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1706;
			Match(SERVER_SYMBOL);
			State = 1707;
			serverRef();
			State = 1708;
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTableActionsContext alterTableActions() {
			return GetRuleContext<AlterTableActionsContext>(0);
		}
		public AlterTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTable(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableContext alterTable() {
		AlterTableContext _localctx = new AlterTableContext(Context, State);
		EnterRule(_localctx, 22, RULE_alterTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1711;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 1710;
				onlineOption();
				}
			}

			State = 1713;
			Match(TABLE_SYMBOL);
			State = 1714;
			tableRef();
			State = 1716;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,23,Context) ) {
			case 1:
				{
				State = 1715;
				alterTableActions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTableActionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandListContext alterCommandList() {
			return GetRuleContext<AlterCommandListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RemovePartitioningContext removePartitioning() {
			return GetRuleContext<RemovePartitioningContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StandaloneAlterCommandsContext standaloneAlterCommands() {
			return GetRuleContext<StandaloneAlterCommandsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public AlterTableActionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTableActions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTableActions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTableActions(this);
		}
	}

	[RuleVersion(0)]
	public AlterTableActionsContext alterTableActions() {
		AlterTableActionsContext _localctx = new AlterTableActionsContext(Context, State);
		EnterRule(_localctx, 24, RULE_alterTableActions);
		try {
			State = 1731;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1718;
				alterCommandList();
				State = 1721;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PARTITION_SYMBOL:
					{
					State = 1719;
					partitionClause();
					}
					break;
				case REMOVE_SYMBOL:
					{
					State = 1720;
					removePartitioning();
					}
					break;
				case Eof:
				case SEMICOLON_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1723;
				partitionClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1724;
				removePartitioning();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1728;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
				case 1:
					{
					State = 1725;
					alterCommandsModifierList();
					State = 1726;
					Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1730;
				standaloneAlterCommands();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierListContext alterCommandsModifierList() {
			return GetRuleContext<AlterCommandsModifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterListContext alterList() {
			return GetRuleContext<AlterListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public AlterCommandListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandList(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandListContext alterCommandList() {
		AlterCommandListContext _localctx = new AlterCommandListContext(Context, State);
		EnterRule(_localctx, 26, RULE_alterCommandList);
		try {
			State = 1740;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,28,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1733;
				alterCommandsModifierList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1737;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,27,Context) ) {
				case 1:
					{
					State = 1734;
					alterCommandsModifierList();
					State = 1735;
					Match(COMMA_SYMBOL);
					}
					break;
				}
				State = 1739;
				alterList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterCommandsModifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifierList(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierListContext alterCommandsModifierList() {
		AlterCommandsModifierListContext _localctx = new AlterCommandsModifierListContext(Context, State);
		EnterRule(_localctx, 28, RULE_alterCommandsModifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1742;
			alterCommandsModifier();
			State = 1747;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1743;
					Match(COMMA_SYMBOL);
					State = 1744;
					alterCommandsModifier();
					}
					}
				}
				State = 1749;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,29,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandaloneAlterCommandsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterPartitionContext alterPartition() {
			return GetRuleContext<AlterPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		public StandaloneAlterCommandsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standaloneAlterCommands; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStandaloneAlterCommands(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStandaloneAlterCommands(this);
		}
	}

	[RuleVersion(0)]
	public StandaloneAlterCommandsContext standaloneAlterCommands() {
		StandaloneAlterCommandsContext _localctx = new StandaloneAlterCommandsContext(Context, State);
		EnterRule(_localctx, 30, RULE_standaloneAlterCommands);
		int _la;
		try {
			State = 1757;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1750;
				Match(DISCARD_SYMBOL);
				State = 1751;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1752;
				Match(IMPORT_SYMBOL);
				State = 1753;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1754;
				alterPartition();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1755;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 1756;
				_la = TokenStream.LA(1);
				if ( !(_la==SECONDARY_LOAD_SYMBOL || _la==SECONDARY_UNLOAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterPartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext[] noWriteToBinLog() {
			return GetRuleContexts<NoWriteToBinLogContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog(int i) {
			return GetRuleContext<NoWriteToBinLogContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySqlParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySqlParser.OPTIMIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySqlParser.ANALYZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySqlParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySqlParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySqlParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySqlParser.EXCHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		public AlterPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterPartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterPartition(this);
		}
	}

	[RuleVersion(0)]
	public AlterPartitionContext alterPartition() {
		AlterPartitionContext _localctx = new AlterPartitionContext(Context, State);
		EnterRule(_localctx, 32, RULE_alterPartition);
		int _la;
		try {
			State = 1853;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADD_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1759;
				Match(ADD_SYMBOL);
				State = 1760;
				Match(PARTITION_SYMBOL);
				State = 1762;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1761;
					noWriteToBinLog();
					}
				}

				State = 1767;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 1764;
					partitionDefinitions();
					}
					break;
				case PARTITIONS_SYMBOL:
					{
					State = 1765;
					Match(PARTITIONS_SYMBOL);
					State = 1766;
					real_ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1769;
				Match(DROP_SYMBOL);
				State = 1770;
				Match(PARTITION_SYMBOL);
				State = 1771;
				identifierList();
				}
				break;
			case REBUILD_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1772;
				Match(REBUILD_SYMBOL);
				State = 1773;
				Match(PARTITION_SYMBOL);
				State = 1775;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,33,Context) ) {
				case 1:
					{
					State = 1774;
					noWriteToBinLog();
					}
					break;
				}
				State = 1777;
				allOrPartitionNameList();
				}
				break;
			case OPTIMIZE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1778;
				Match(OPTIMIZE_SYMBOL);
				State = 1779;
				Match(PARTITION_SYMBOL);
				State = 1781;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
				case 1:
					{
					State = 1780;
					noWriteToBinLog();
					}
					break;
				}
				State = 1783;
				allOrPartitionNameList();
				State = 1785;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1784;
					noWriteToBinLog();
					}
				}

				}
				break;
			case ANALYZE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1787;
				Match(ANALYZE_SYMBOL);
				State = 1788;
				Match(PARTITION_SYMBOL);
				State = 1790;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,36,Context) ) {
				case 1:
					{
					State = 1789;
					noWriteToBinLog();
					}
					break;
				}
				State = 1792;
				allOrPartitionNameList();
				}
				break;
			case CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1793;
				Match(CHECK_SYMBOL);
				State = 1794;
				Match(PARTITION_SYMBOL);
				State = 1795;
				allOrPartitionNameList();
				State = 1799;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 131089L) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					State = 1796;
					checkOption();
					}
					}
					State = 1801;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case REPAIR_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1802;
				Match(REPAIR_SYMBOL);
				State = 1803;
				Match(PARTITION_SYMBOL);
				State = 1805;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,38,Context) ) {
				case 1:
					{
					State = 1804;
					noWriteToBinLog();
					}
					break;
				}
				State = 1807;
				allOrPartitionNameList();
				State = 1811;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 1808;
					repairType();
					}
					}
					State = 1813;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case COALESCE_SYMBOL:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1814;
				Match(COALESCE_SYMBOL);
				State = 1815;
				Match(PARTITION_SYMBOL);
				State = 1817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 1816;
					noWriteToBinLog();
					}
				}

				State = 1819;
				real_ulong_number();
				}
				break;
			case TRUNCATE_SYMBOL:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1820;
				Match(TRUNCATE_SYMBOL);
				State = 1821;
				Match(PARTITION_SYMBOL);
				State = 1822;
				allOrPartitionNameList();
				}
				break;
			case REORGANIZE_SYMBOL:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1823;
				Match(REORGANIZE_SYMBOL);
				State = 1824;
				Match(PARTITION_SYMBOL);
				State = 1826;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,41,Context) ) {
				case 1:
					{
					State = 1825;
					noWriteToBinLog();
					}
					break;
				}
				State = 1832;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,42,Context) ) {
				case 1:
					{
					State = 1828;
					identifierList();
					State = 1829;
					Match(INTO_SYMBOL);
					State = 1830;
					partitionDefinitions();
					}
					break;
				}
				}
				break;
			case EXCHANGE_SYMBOL:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1834;
				Match(EXCHANGE_SYMBOL);
				State = 1835;
				Match(PARTITION_SYMBOL);
				State = 1836;
				identifier();
				State = 1837;
				Match(WITH_SYMBOL);
				State = 1838;
				Match(TABLE_SYMBOL);
				State = 1839;
				tableRef();
				State = 1841;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) {
					{
					State = 1840;
					withValidation();
					}
				}

				}
				break;
			case DISCARD_SYMBOL:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1843;
				Match(DISCARD_SYMBOL);
				State = 1844;
				Match(PARTITION_SYMBOL);
				State = 1845;
				allOrPartitionNameList();
				State = 1846;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			case IMPORT_SYMBOL:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1848;
				Match(IMPORT_SYMBOL);
				State = 1849;
				Match(PARTITION_SYMBOL);
				State = 1850;
				allOrPartitionNameList();
				State = 1851;
				Match(TABLESPACE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterListItemContext[] alterListItem() {
			return GetRuleContexts<AlterListItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterListItemContext alterListItem(int i) {
			return GetRuleContext<AlterListItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsSpaceSeparatedContext[] createTableOptionsSpaceSeparated() {
			return GetRuleContexts<CreateTableOptionsSpaceSeparatedContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated(int i) {
			return GetRuleContext<CreateTableOptionsSpaceSeparatedContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext[] alterCommandsModifier() {
			return GetRuleContexts<AlterCommandsModifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterCommandsModifierContext alterCommandsModifier(int i) {
			return GetRuleContext<AlterCommandsModifierContext>(i);
		}
		public AlterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterList(this);
		}
	}

	[RuleVersion(0)]
	public AlterListContext alterList() {
		AlterListContext _localctx = new AlterListContext(Context, State);
		EnterRule(_localctx, 34, RULE_alterList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1857;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,45,Context) ) {
			case 1:
				{
				State = 1855;
				alterListItem();
				}
				break;
			case 2:
				{
				State = 1856;
				createTableOptionsSpaceSeparated();
				}
				break;
			}
			State = 1867;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 1859;
				Match(COMMA_SYMBOL);
				State = 1863;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,46,Context) ) {
				case 1:
					{
					State = 1860;
					alterListItem();
					}
					break;
				case 2:
					{
					State = 1861;
					alterCommandsModifier();
					}
					break;
				case 3:
					{
					State = 1862;
					createTableOptionsSpaceSeparated();
					}
					break;
				}
				}
				}
				State = 1869;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterCommandsModifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithValidationContext withValidation() {
			return GetRuleContext<WithValidationContext>(0);
		}
		public AlterCommandsModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterCommandsModifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterCommandsModifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterCommandsModifier(this);
		}
	}

	[RuleVersion(0)]
	public AlterCommandsModifierContext alterCommandsModifier() {
		AlterCommandsModifierContext _localctx = new AlterCommandsModifierContext(Context, State);
		EnterRule(_localctx, 36, RULE_alterCommandsModifier);
		try {
			State = 1873;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1870;
				alterAlgorithmOption();
				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1871;
				alterLockOption();
				}
				break;
			case WITH_SYMBOL:
			case WITHOUT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1872;
				withValidation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterListItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_SYMBOL() { return GetToken(MySqlParser.COLUMN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PlaceContext place() {
			return GetRuleContext<PlaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySqlParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext columnInternalRef() {
			return GetRuleContext<ColumnInternalRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySqlParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySqlParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RestrictContext restrict() {
			return GetRuleContext<RestrictContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS_SYMBOL() { return GetToken(MySqlParser.KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLiteralOrNullContext signedLiteralOrNull() {
			return GetRuleContext<SignedLiteralOrNullContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySqlParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySqlParser.FORCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySqlParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AlterOrderListContext alterOrderList() {
			return GetRuleContext<AlterOrderListContext>(0);
		}
		public AlterListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterListItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterListItem(this);
		}
	}

	[RuleVersion(0)]
	public AlterListItemContext alterListItem() {
		AlterListItemContext _localctx = new AlterListItemContext(Context, State);
		EnterRule(_localctx, 38, RULE_alterListItem);
		int _la;
		try {
			State = 2010;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,66,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1875;
				Match(ADD_SYMBOL);
				State = 1877;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,49,Context) ) {
				case 1:
					{
					State = 1876;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1891;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,52,Context) ) {
				case 1:
					{
					State = 1879;
					identifier();
					State = 1880;
					fieldDefinition();
					State = 1882;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,50,Context) ) {
					case 1:
						{
						State = 1881;
						checkOrReferences();
						}
						break;
					}
					State = 1885;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
						{
						State = 1884;
						place();
						}
					}

					}
					break;
				case 2:
					{
					State = 1887;
					Match(OPEN_PAR_SYMBOL);
					State = 1888;
					tableElementList();
					State = 1889;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1893;
				Match(ADD_SYMBOL);
				State = 1894;
				tableConstraintDef();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1895;
				Match(CHANGE_SYMBOL);
				State = 1897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,53,Context) ) {
				case 1:
					{
					State = 1896;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1899;
				columnInternalRef();
				State = 1900;
				identifier();
				State = 1901;
				fieldDefinition();
				State = 1903;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1902;
					place();
					}
				}

				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1905;
				Match(MODIFY_SYMBOL);
				State = 1907;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,55,Context) ) {
				case 1:
					{
					State = 1906;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1909;
				columnInternalRef();
				State = 1910;
				fieldDefinition();
				State = 1912;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AFTER_SYMBOL || _la==FIRST_SYMBOL) {
					{
					State = 1911;
					place();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1914;
				Match(DROP_SYMBOL);
				State = 1936;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
				case 1:
					{
					State = 1916;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,57,Context) ) {
					case 1:
						{
						State = 1915;
						Match(COLUMN_SYMBOL);
						}
						break;
					}
					State = 1918;
					columnInternalRef();
					State = 1920;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
						{
						State = 1919;
						restrict();
						}
					}

					}
					break;
				case 2:
					{
					State = 1922;
					Match(FOREIGN_SYMBOL);
					State = 1923;
					Match(KEY_SYMBOL);
					State = 1924;
					columnInternalRef();
					}
					break;
				case 3:
					{
					State = 1925;
					Match(PRIMARY_SYMBOL);
					State = 1926;
					Match(KEY_SYMBOL);
					}
					break;
				case 4:
					{
					State = 1927;
					keyOrIndex();
					State = 1928;
					indexRef();
					}
					break;
				case 5:
					{
					State = 1930;
					if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
					State = 1931;
					Match(CHECK_SYMBOL);
					State = 1932;
					identifier();
					}
					break;
				case 6:
					{
					State = 1933;
					if (!(this.ServerVersion >= 80019)) throw new FailedPredicateException(this, "this.ServerVersion >= 80019");
					State = 1934;
					Match(CONSTRAINT_SYMBOL);
					State = 1935;
					identifier();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1938;
				Match(DISABLE_SYMBOL);
				State = 1939;
				Match(KEYS_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1940;
				Match(ENABLE_SYMBOL);
				State = 1941;
				Match(KEYS_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 1942;
				Match(ALTER_SYMBOL);
				State = 1944;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
				case 1:
					{
					State = 1943;
					Match(COLUMN_SYMBOL);
					}
					break;
				}
				State = 1946;
				columnInternalRef();
				State = 1959;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,62,Context) ) {
				case 1:
					{
					State = 1947;
					Match(SET_SYMBOL);
					State = 1948;
					Match(DEFAULT_SYMBOL);
					State = 1952;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,61,Context) ) {
					case 1:
						{
						State = 1949;
						if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
						State = 1950;
						exprWithParentheses();
						}
						break;
					case 2:
						{
						State = 1951;
						signedLiteralOrNull();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 1954;
					Match(DROP_SYMBOL);
					State = 1955;
					Match(DEFAULT_SYMBOL);
					}
					break;
				case 3:
					{
					State = 1956;
					if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
					State = 1957;
					Match(SET_SYMBOL);
					State = 1958;
					visibility();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 1961;
				Match(ALTER_SYMBOL);
				State = 1962;
				Match(INDEX_SYMBOL);
				State = 1963;
				indexRef();
				State = 1964;
				visibility();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 1966;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 1967;
				Match(ALTER_SYMBOL);
				State = 1968;
				Match(CHECK_SYMBOL);
				State = 1969;
				identifier();
				State = 1970;
				constraintEnforcement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 1972;
				if (!(this.ServerVersion >= 80019)) throw new FailedPredicateException(this, "this.ServerVersion >= 80019");
				State = 1973;
				Match(ALTER_SYMBOL);
				State = 1974;
				Match(CONSTRAINT_SYMBOL);
				State = 1975;
				identifier();
				State = 1976;
				constraintEnforcement();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 1978;
				Match(RENAME_SYMBOL);
				State = 1979;
				Match(COLUMN_SYMBOL);
				State = 1980;
				columnInternalRef();
				State = 1981;
				Match(TO_SYMBOL);
				State = 1982;
				identifier();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 1984;
				Match(RENAME_SYMBOL);
				State = 1986;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,63,Context) ) {
				case 1:
					{
					State = 1985;
					_la = TokenStream.LA(1);
					if ( !(_la==AS_SYMBOL || _la==TO_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 1988;
				tableName();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 1989;
				Match(RENAME_SYMBOL);
				State = 1990;
				keyOrIndex();
				State = 1991;
				indexRef();
				State = 1992;
				Match(TO_SYMBOL);
				State = 1993;
				indexName();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 1995;
				Match(CONVERT_SYMBOL);
				State = 1996;
				Match(TO_SYMBOL);
				State = 1997;
				charset();
				State = 2001;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,64,Context) ) {
				case 1:
					{
					State = 1998;
					if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
					State = 1999;
					Match(DEFAULT_SYMBOL);
					}
					break;
				case 2:
					{
					State = 2000;
					charsetName();
					}
					break;
				}
				State = 2004;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 2003;
					collate();
					}
				}

				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 2006;
				Match(FORCE_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 2007;
				Match(ORDER_SYMBOL);
				State = 2008;
				Match(BY_SYMBOL);
				State = 2009;
				alterOrderList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PlaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySqlParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		public PlaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_place; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPlace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPlace(this);
		}
	}

	[RuleVersion(0)]
	public PlaceContext place() {
		PlaceContext _localctx = new PlaceContext(Context, State);
		EnterRule(_localctx, 40, RULE_place);
		try {
			State = 2015;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AFTER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2012;
				Match(AFTER_SYMBOL);
				State = 2013;
				identifier();
				}
				break;
			case FIRST_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2014;
				Match(FIRST_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestrictContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySqlParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySqlParser.CASCADE_SYMBOL, 0); }
		public RestrictContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restrict; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRestrict(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRestrict(this);
		}
	}

	[RuleVersion(0)]
	public RestrictContext restrict() {
		RestrictContext _localctx = new RestrictContext(Context, State);
		EnterRule(_localctx, 42, RULE_restrict);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2017;
			_la = TokenStream.LA(1);
			if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterOrderListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext[] direction() {
			return GetRuleContexts<DirectionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction(int i) {
			return GetRuleContext<DirectionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterOrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterOrderList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterOrderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterOrderList(this);
		}
	}

	[RuleVersion(0)]
	public AlterOrderListContext alterOrderList() {
		AlterOrderListContext _localctx = new AlterOrderListContext(Context, State);
		EnterRule(_localctx, 44, RULE_alterOrderList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2019;
			identifier();
			State = 2021;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 2020;
				direction();
				}
			}

			State = 2030;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2023;
					Match(COMMA_SYMBOL);
					State = 2024;
					identifier();
					State = 2026;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
						{
						State = 2025;
						direction();
						}
					}

					}
					}
				}
				State = 2032;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterAlgorithmOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public AlterAlgorithmOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterAlgorithmOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterAlgorithmOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterAlgorithmOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterAlgorithmOptionContext alterAlgorithmOption() {
		AlterAlgorithmOptionContext _localctx = new AlterAlgorithmOptionContext(Context, State);
		EnterRule(_localctx, 46, RULE_alterAlgorithmOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2033;
			Match(ALGORITHM_SYMBOL);
			State = 2035;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,71,Context) ) {
			case 1:
				{
				State = 2034;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2039;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,72,Context) ) {
			case 1:
				{
				State = 2037;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 2038;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterLockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public AlterLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterLockOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterLockOptionContext alterLockOption() {
		AlterLockOptionContext _localctx = new AlterLockOptionContext(Context, State);
		EnterRule(_localctx, 48, RULE_alterLockOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2041;
			Match(LOCK_SYMBOL);
			State = 2043;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
			case 1:
				{
				State = 2042;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2047;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,74,Context) ) {
			case 1:
				{
				State = 2045;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 2:
				{
				State = 2046;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexLockAndAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterAlgorithmOptionContext alterAlgorithmOption() {
			return GetRuleContext<AlterAlgorithmOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterLockOptionContext alterLockOption() {
			return GetRuleContext<AlterLockOptionContext>(0);
		}
		public IndexLockAndAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexLockAndAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexLockAndAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexLockAndAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
		IndexLockAndAlgorithmContext _localctx = new IndexLockAndAlgorithmContext(Context, State);
		EnterRule(_localctx, 50, RULE_indexLockAndAlgorithm);
		int _la;
		try {
			State = 2057;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2049;
				alterAlgorithmOption();
				State = 2051;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCK_SYMBOL) {
					{
					State = 2050;
					alterLockOption();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2053;
				alterLockOption();
				State = 2055;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 2054;
					alterAlgorithmOption();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithValidationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySqlParser.VALIDATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySqlParser.WITHOUT_SYMBOL, 0); }
		public WithValidationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withValidation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWithValidation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWithValidation(this);
		}
	}

	[RuleVersion(0)]
	public WithValidationContext withValidation() {
		WithValidationContext _localctx = new WithValidationContext(Context, State);
		EnterRule(_localctx, 52, RULE_withValidation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2059;
			_la = TokenStream.LA(1);
			if ( !(_la==WITH_SYMBOL || _la==WITHOUT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2060;
			Match(VALIDATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RemovePartitioningContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySqlParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySqlParser.PARTITIONING_SYMBOL, 0); }
		public RemovePartitioningContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_removePartitioning; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRemovePartitioning(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRemovePartitioning(this);
		}
	}

	[RuleVersion(0)]
	public RemovePartitioningContext removePartitioning() {
		RemovePartitioningContext _localctx = new RemovePartitioningContext(Context, State);
		EnterRule(_localctx, 54, RULE_removePartitioning);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2062;
			Match(REMOVE_SYMBOL);
			State = 2063;
			Match(PARTITIONING_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AllOrPartitionNameListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public AllOrPartitionNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_allOrPartitionNameList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAllOrPartitionNameList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAllOrPartitionNameList(this);
		}
	}

	[RuleVersion(0)]
	public AllOrPartitionNameListContext allOrPartitionNameList() {
		AllOrPartitionNameListContext _localctx = new AllOrPartitionNameListContext(Context, State);
		EnterRule(_localctx, 56, RULE_allOrPartitionNameList);
		try {
			State = 2067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,78,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2065;
				Match(ALL_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2066;
				identifierList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySqlParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionsContext alterTablespaceOptions() {
			return GetRuleContext<AlterTablespaceOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		public AlterTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespace(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceContext alterTablespace() {
		AlterTablespaceContext _localctx = new AlterTablespaceContext(Context, State);
		EnterRule(_localctx, 58, RULE_alterTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2069;
			Match(TABLESPACE_SYMBOL);
			State = 2070;
			tablespaceRef();
			State = 2082;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,80,Context) ) {
			case 1:
				{
				State = 2071;
				_la = TokenStream.LA(1);
				if ( !(_la==ADD_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 2072;
				Match(DATAFILE_SYMBOL);
				State = 2073;
				textLiteral();
				State = 2075;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,79,Context) ) {
				case 1:
					{
					State = 2074;
					alterTablespaceOptions();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2077;
				Match(RENAME_SYMBOL);
				State = 2078;
				Match(TO_SYMBOL);
				State = 2079;
				identifier();
				}
				break;
			case 3:
				{
				State = 2080;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 2081;
				alterTablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySqlParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySqlParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySqlParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public AlterUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public AlterUndoTablespaceContext alterUndoTablespace() {
		AlterUndoTablespaceContext _localctx = new AlterUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 60, RULE_alterUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2084;
			Match(UNDO_SYMBOL);
			State = 2085;
			Match(TABLESPACE_SYMBOL);
			State = 2086;
			tablespaceRef();
			State = 2087;
			Match(SET_SYMBOL);
			State = 2088;
			_la = TokenStream.LA(1);
			if ( !(_la==ACTIVE_SYMBOL || _la==INACTIVE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2090;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2089;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionContext[] undoTableSpaceOption() {
			return GetRuleContexts<UndoTableSpaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionContext undoTableSpaceOption(int i) {
			return GetRuleContext<UndoTableSpaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UndoTableSpaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
		UndoTableSpaceOptionsContext _localctx = new UndoTableSpaceOptionsContext(Context, State);
		EnterRule(_localctx, 62, RULE_undoTableSpaceOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2092;
			undoTableSpaceOption();
			State = 2099;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				{
				State = 2094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 2093;
					Match(COMMA_SYMBOL);
					}
				}

				State = 2096;
				undoTableSpaceOption();
				}
				}
				State = 2101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UndoTableSpaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public UndoTableSpaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_undoTableSpaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUndoTableSpaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUndoTableSpaceOption(this);
		}
	}

	[RuleVersion(0)]
	public UndoTableSpaceOptionContext undoTableSpaceOption() {
		UndoTableSpaceOptionContext _localctx = new UndoTableSpaceOptionContext(Context, State);
		EnterRule(_localctx, 64, RULE_undoTableSpaceOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2102;
			tsOptionEngine();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionContext[] alterTablespaceOption() {
			return GetRuleContexts<AlterTablespaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterTablespaceOptionContext alterTablespaceOption(int i) {
			return GetRuleContext<AlterTablespaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterTablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionsContext alterTablespaceOptions() {
		AlterTablespaceOptionsContext _localctx = new AlterTablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 66, RULE_alterTablespaceOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2104;
			alterTablespaceOption();
			State = 2111;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2106;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
					case 1:
						{
						State = 2105;
						Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 2108;
					alterTablespaceOption();
					}
					}
				}
				State = 2113;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,85,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterTablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineAttributeContext tsOptionEngineAttribute() {
			return GetRuleContext<TsOptionEngineAttributeContext>(0);
		}
		public AlterTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterTablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public AlterTablespaceOptionContext alterTablespaceOption() {
		AlterTablespaceOptionContext _localctx = new AlterTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 68, RULE_alterTablespaceOption);
		try {
			State = 2126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2114;
				Match(INITIAL_SIZE_SYMBOL);
				State = 2116;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 2115;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 2118;
				sizeNumber();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2119;
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2120;
				tsOptionMaxSize();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2121;
				tsOptionEngine();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2122;
				tsOptionWait();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2123;
				tsOptionEncryption();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2124;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 2125;
				tsOptionEngineAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeTablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		public ChangeTablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeTablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public ChangeTablespaceOptionContext changeTablespaceOption() {
		ChangeTablespaceOptionContext _localctx = new ChangeTablespaceOptionContext(Context, State);
		EnterRule(_localctx, 70, RULE_changeTablespaceOption);
		try {
			State = 2135;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2128;
				Match(INITIAL_SIZE_SYMBOL);
				State = 2130;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
				case 1:
					{
					State = 2129;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 2132;
				sizeNumber();
				}
				break;
			case AUTOEXTEND_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2133;
				tsOptionAutoextendSize();
				}
				break;
			case MAX_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2134;
				tsOptionMaxSize();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public AlterViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterView(this);
		}
	}

	[RuleVersion(0)]
	public AlterViewContext alterView() {
		AlterViewContext _localctx = new AlterViewContext(Context, State);
		EnterRule(_localctx, 72, RULE_alterView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL) {
				{
				State = 2137;
				viewAlgorithm();
				}
			}

			State = 2141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2140;
				definerClause();
				}
			}

			State = 2144;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 2143;
				viewSuid();
				}
			}

			State = 2146;
			Match(VIEW_SYMBOL);
			State = 2147;
			viewRef();
			State = 2148;
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewQueryBlockContext viewQueryBlock() {
			return GetRuleContext<ViewQueryBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ViewTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewTail(this);
		}
	}

	[RuleVersion(0)]
	public ViewTailContext viewTail() {
		ViewTailContext _localctx = new ViewTailContext(Context, State);
		EnterRule(_localctx, 74, RULE_viewTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2151;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2150;
				columnInternalRefList();
				}
			}

			State = 2153;
			Match(AS_SYMBOL);
			State = 2154;
			viewQueryBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewQueryBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return GetRuleContext<QueryExpressionWithOptLockingClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewCheckOptionContext viewCheckOption() {
			return GetRuleContext<ViewCheckOptionContext>(0);
		}
		public ViewQueryBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewQueryBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewQueryBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewQueryBlock(this);
		}
	}

	[RuleVersion(0)]
	public ViewQueryBlockContext viewQueryBlock() {
		ViewQueryBlockContext _localctx = new ViewQueryBlockContext(Context, State);
		EnterRule(_localctx, 76, RULE_viewQueryBlock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2156;
			queryExpressionWithOptLockingClauses();
			State = 2158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 2157;
				viewCheckOption();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewCheckOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySqlParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		public ViewCheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewCheckOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewCheckOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewCheckOption(this);
		}
	}

	[RuleVersion(0)]
	public ViewCheckOptionContext viewCheckOption() {
		ViewCheckOptionContext _localctx = new ViewCheckOptionContext(Context, State);
		EnterRule(_localctx, 78, RULE_viewCheckOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2160;
			Match(WITH_SYMBOL);
			State = 2162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) {
				{
				State = 2161;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADED_SYMBOL || _la==LOCAL_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 2164;
			Match(CHECK_SYMBOL);
			State = 2165;
			Match(OPTION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterInstanceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySqlParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySqlParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLS_SYMBOL() { return GetToken(MySqlParser.TLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYRING_SYMBOL() { return GetToken(MySqlParser.KEYRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySqlParser.CHANNEL_SYMBOL, 0); }
		public AlterInstanceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterInstanceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterInstanceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterInstanceStatement(this);
		}
	}

	[RuleVersion(0)]
	public AlterInstanceStatementContext alterInstanceStatement() {
		AlterInstanceStatementContext _localctx = new AlterInstanceStatementContext(Context, State);
		EnterRule(_localctx, 80, RULE_alterInstanceStatement);
		int _la;
		try {
			State = 2199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,99,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2167;
				Match(INSTANCE_SYMBOL);
				State = 2168;
				Match(ROTATE_SYMBOL);
				State = 2169;
				textOrIdentifier();
				State = 2170;
				Match(MASTER_SYMBOL);
				State = 2171;
				Match(KEY_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2173;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 2197;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,98,Context) ) {
				case 1:
					{
					State = 2174;
					Match(RELOAD_SYMBOL);
					State = 2175;
					Match(TLS_SYMBOL);
					State = 2189;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case NO_SYMBOL:
						{
						State = 2176;
						Match(NO_SYMBOL);
						State = 2177;
						Match(ROLLBACK_SYMBOL);
						State = 2178;
						Match(ON_SYMBOL);
						State = 2179;
						Match(ERROR_SYMBOL);
						}
						break;
					case FOR_SYMBOL:
						{
						State = 2180;
						Match(FOR_SYMBOL);
						State = 2181;
						Match(CHANNEL_SYMBOL);
						State = 2182;
						identifier();
						State = 2187;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 2183;
							Match(NO_SYMBOL);
							State = 2184;
							Match(ROLLBACK_SYMBOL);
							State = 2185;
							Match(ON_SYMBOL);
							State = 2186;
							Match(ERROR_SYMBOL);
							}
						}

						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 2:
					{
					State = 2191;
					_la = TokenStream.LA(1);
					if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 2192;
					identifier();
					State = 2193;
					identifier();
					}
					break;
				case 3:
					{
					State = 2195;
					Match(RELOAD_SYMBOL);
					State = 2196;
					Match(KEYRING_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseContext createDatabase() {
			return GetRuleContext<CreateDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableContext createTable() {
			return GetRuleContext<CreateTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateLogfileGroupContext createLogfileGroup() {
			return GetRuleContext<CreateLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateViewContext createView() {
			return GetRuleContext<CreateViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTriggerContext createTrigger() {
			return GetRuleContext<CreateTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexContext createIndex() {
			return GetRuleContext<CreateIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateServerContext createServer() {
			return GetRuleContext<CreateServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTablespaceContext createTablespace() {
			return GetRuleContext<CreateTablespaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateEventContext createEvent() {
			return GetRuleContext<CreateEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateRoleContext createRole() {
			return GetRuleContext<CreateRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateSpatialReferenceContext createSpatialReference() {
			return GetRuleContext<CreateSpatialReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUndoTablespaceContext createUndoTablespace() {
			return GetRuleContext<CreateUndoTablespaceContext>(0);
		}
		public CreateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateStatement(this);
		}
	}

	[RuleVersion(0)]
	public CreateStatementContext createStatement() {
		CreateStatementContext _localctx = new CreateStatementContext(Context, State);
		EnterRule(_localctx, 82, RULE_createStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2201;
			Match(CREATE_SYMBOL);
			State = 2219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,100,Context) ) {
			case 1:
				{
				State = 2202;
				createDatabase();
				}
				break;
			case 2:
				{
				State = 2203;
				createTable();
				}
				break;
			case 3:
				{
				State = 2204;
				createFunction();
				}
				break;
			case 4:
				{
				State = 2205;
				createProcedure();
				}
				break;
			case 5:
				{
				State = 2206;
				createUdf();
				}
				break;
			case 6:
				{
				State = 2207;
				createLogfileGroup();
				}
				break;
			case 7:
				{
				State = 2208;
				createView();
				}
				break;
			case 8:
				{
				State = 2209;
				createTrigger();
				}
				break;
			case 9:
				{
				State = 2210;
				createIndex();
				}
				break;
			case 10:
				{
				State = 2211;
				createServer();
				}
				break;
			case 11:
				{
				State = 2212;
				createTablespace();
				}
				break;
			case 12:
				{
				State = 2213;
				createEvent();
				}
				break;
			case 13:
				{
				State = 2214;
				createRole();
				}
				break;
			case 14:
				{
				State = 2215;
				if (!(this.ServerVersion >= 80011)) throw new FailedPredicateException(this, "this.ServerVersion >= 80011");
				State = 2216;
				createSpatialReference();
				}
				break;
			case 15:
				{
				State = 2217;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 2218;
				createUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaNameContext schemaName() {
			return GetRuleContext<SchemaNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext[] createDatabaseOption() {
			return GetRuleContexts<CreateDatabaseOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateDatabaseOptionContext createDatabaseOption(int i) {
			return GetRuleContext<CreateDatabaseOptionContext>(i);
		}
		public CreateDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabase(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseContext createDatabase() {
		CreateDatabaseContext _localctx = new CreateDatabaseContext(Context, State);
		EnterRule(_localctx, 84, RULE_createDatabase);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2221;
			Match(DATABASE_SYMBOL);
			State = 2223;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,101,Context) ) {
			case 1:
				{
				State = 2222;
				ifNotExists();
				}
				break;
			}
			State = 2225;
			schemaName();
			State = 2229;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2226;
					createDatabaseOption();
					}
					}
				}
				State = 2231;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,102,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateDatabaseOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultEncryptionContext defaultEncryption() {
			return GetRuleContext<DefaultEncryptionContext>(0);
		}
		public CreateDatabaseOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createDatabaseOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateDatabaseOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateDatabaseOption(this);
		}
	}

	[RuleVersion(0)]
	public CreateDatabaseOptionContext createDatabaseOption() {
		CreateDatabaseOptionContext _localctx = new CreateDatabaseOptionContext(Context, State);
		EnterRule(_localctx, 86, RULE_createDatabaseOption);
		try {
			State = 2236;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,103,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2232;
				defaultCharset();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2233;
				defaultCollation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2234;
				if (!(this.ServerVersion >= 80016)) throw new FailedPredicateException(this, "this.ServerVersion >= 80016");
				State = 2235;
				defaultEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySqlParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementListContext tableElementList() {
			return GetRuleContext<TableElementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsEtcContext createTableOptionsEtc() {
			return GetRuleContext<CreateTableOptionsEtcContext>(0);
		}
		public CreateTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTable(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableContext createTable() {
		CreateTableContext _localctx = new CreateTableContext(Context, State);
		EnterRule(_localctx, 88, RULE_createTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 2238;
				Match(TEMPORARY_SYMBOL);
				}
			}

			State = 2241;
			Match(TABLE_SYMBOL);
			State = 2243;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,105,Context) ) {
			case 1:
				{
				State = 2242;
				ifNotExists();
				}
				break;
			}
			State = 2245;
			tableName();
			State = 2262;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				{
				State = 2250;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,106,Context) ) {
				case 1:
					{
					State = 2246;
					Match(OPEN_PAR_SYMBOL);
					State = 2247;
					tableElementList();
					State = 2248;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				State = 2253;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,107,Context) ) {
				case 1:
					{
					State = 2252;
					createTableOptionsEtc();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 2255;
				Match(LIKE_SYMBOL);
				State = 2256;
				tableRef();
				}
				break;
			case 3:
				{
				State = 2257;
				Match(OPEN_PAR_SYMBOL);
				State = 2258;
				Match(LIKE_SYMBOL);
				State = 2259;
				tableRef();
				State = 2260;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext[] tableElement() {
			return GetRuleContexts<TableElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableElementContext tableElement(int i) {
			return GetRuleContext<TableElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableElementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableElementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableElementList(this);
		}
	}

	[RuleVersion(0)]
	public TableElementListContext tableElementList() {
		TableElementListContext _localctx = new TableElementListContext(Context, State);
		EnterRule(_localctx, 90, RULE_tableElementList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2264;
			tableElement();
			State = 2269;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2265;
				Match(COMMA_SYMBOL);
				State = 2266;
				tableElement();
				}
				}
				State = 2271;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnDefinitionContext columnDefinition() {
			return GetRuleContext<ColumnDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableConstraintDefContext tableConstraintDef() {
			return GetRuleContext<TableConstraintDefContext>(0);
		}
		public TableElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableElement(this);
		}
	}

	[RuleVersion(0)]
	public TableElementContext tableElement() {
		TableElementContext _localctx = new TableElementContext(Context, State);
		EnterRule(_localctx, 92, RULE_tableElement);
		try {
			State = 2274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,110,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2272;
				columnDefinition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2273;
				tableConstraintDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DuplicateAsQeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsCreateQueryExpressionContext asCreateQueryExpression() {
			return GetRuleContext<AsCreateQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public DuplicateAsQeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_duplicateAsQe; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDuplicateAsQe(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDuplicateAsQe(this);
		}
	}

	[RuleVersion(0)]
	public DuplicateAsQeContext duplicateAsQe() {
		DuplicateAsQeContext _localctx = new DuplicateAsQeContext(Context, State);
		EnterRule(_localctx, 94, RULE_duplicateAsQe);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2277;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,111,Context) ) {
			case 1:
				{
				State = 2276;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 2279;
			asCreateQueryExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsCreateQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return GetRuleContext<QueryExpressionWithOptLockingClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		public AsCreateQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_asCreateQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAsCreateQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAsCreateQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public AsCreateQueryExpressionContext asCreateQueryExpression() {
		AsCreateQueryExpressionContext _localctx = new AsCreateQueryExpressionContext(Context, State);
		EnterRule(_localctx, 96, RULE_asCreateQueryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2282;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,112,Context) ) {
			case 1:
				{
				State = 2281;
				Match(AS_SYMBOL);
				}
				break;
			}
			State = 2284;
			queryExpressionWithOptLockingClauses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionOrParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public QueryExpressionOrParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionOrParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionOrParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionOrParens(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionOrParensContext queryExpressionOrParens() {
		QueryExpressionOrParensContext _localctx = new QueryExpressionOrParensContext(Context, State);
		EnterRule(_localctx, 98, RULE_queryExpressionOrParens);
		try {
			State = 2291;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,114,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2286;
				queryExpression();
				State = 2288;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,113,Context) ) {
				case 1:
					{
					State = 2287;
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2290;
				queryExpressionParens();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionWithOptLockingClausesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		public QueryExpressionWithOptLockingClausesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionWithOptLockingClauses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionWithOptLockingClauses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionWithOptLockingClauses(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
		QueryExpressionWithOptLockingClausesContext _localctx = new QueryExpressionWithOptLockingClausesContext(Context, State);
		EnterRule(_localctx, 100, RULE_queryExpressionWithOptLockingClauses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2293;
			queryExpression();
			State = 2295;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,115,Context) ) {
			case 1:
				{
				State = 2294;
				lockingClauseList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoutineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateProcedureContext createProcedure() {
			return GetRuleContext<CreateProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateFunctionContext createFunction() {
			return GetRuleContext<CreateFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUdfContext createUdf() {
			return GetRuleContext<CreateUdfContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL() { return GetToken(MySqlParser.SEMICOLON_SYMBOL, 0); }
		public CreateRoutineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRoutine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateRoutine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateRoutine(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoutineContext createRoutine() {
		CreateRoutineContext _localctx = new CreateRoutineContext(Context, State);
		EnterRule(_localctx, 102, RULE_createRoutine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2297;
			Match(CREATE_SYMBOL);
			State = 2301;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
			case 1:
				{
				State = 2298;
				createProcedure();
				}
				break;
			case 2:
				{
				State = 2299;
				createFunction();
				}
				break;
			case 3:
				{
				State = 2300;
				createUdf();
				}
				break;
			}
			State = 2304;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMICOLON_SYMBOL) {
				{
				State = 2303;
				Match(SEMICOLON_SYMBOL);
				}
			}

			State = 2306;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureNameContext procedureName() {
			return GetRuleContext<ProcedureNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StoredRoutineBodyContext storedRoutineBody() {
			return GetRuleContext<StoredRoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext[] procedureParameter() {
			return GetRuleContexts<ProcedureParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureParameterContext procedureParameter(int i) {
			return GetRuleContext<ProcedureParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public CreateProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateProcedure(this);
		}
	}

	[RuleVersion(0)]
	public CreateProcedureContext createProcedure() {
		CreateProcedureContext _localctx = new CreateProcedureContext(Context, State);
		EnterRule(_localctx, 104, RULE_createProcedure);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2309;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2308;
				definerClause();
				}
			}

			State = 2311;
			Match(PROCEDURE_SYMBOL);
			State = 2313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,119,Context) ) {
			case 1:
				{
				State = 2312;
				ifNotExists();
				}
				break;
			}
			State = 2315;
			procedureName();
			State = 2316;
			Match(OPEN_PAR_SYMBOL);
			State = 2325;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				{
				State = 2317;
				procedureParameter();
				State = 2322;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 2318;
					Match(COMMA_SYMBOL);
					State = 2319;
					procedureParameter();
					}
					}
					State = 2324;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2327;
			Match(CLOSE_PAR_SYMBOL);
			State = 2331;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2328;
					routineCreateOption();
					}
					}
				}
				State = 2333;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,122,Context);
			}
			State = 2334;
			storedRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOLLAR_QUOTED_STRING_TEXT() { return GetToken(MySqlParser.DOLLAR_QUOTED_STRING_TEXT, 0); }
		public RoutineStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineString(this);
		}
	}

	[RuleVersion(0)]
	public RoutineStringContext routineString() {
		RoutineStringContext _localctx = new RoutineStringContext(Context, State);
		EnterRule(_localctx, 106, RULE_routineString);
		try {
			State = 2338;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2336;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2337;
				Match(DOLLAR_QUOTED_STRING_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StoredRoutineBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoutineStringContext routineString() {
			return GetRuleContext<RoutineStringContext>(0);
		}
		public StoredRoutineBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storedRoutineBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStoredRoutineBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStoredRoutineBody(this);
		}
	}

	[RuleVersion(0)]
	public StoredRoutineBodyContext storedRoutineBody() {
		StoredRoutineBodyContext _localctx = new StoredRoutineBodyContext(Context, State);
		EnterRule(_localctx, 108, RULE_storedRoutineBody);
		try {
			State = 2344;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,124,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2340;
				compoundStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2341;
				if (!(this.IsStoredRoutineBody())) throw new FailedPredicateException(this, "this.IsStoredRoutineBody()");
				State = 2342;
				Match(AS_SYMBOL);
				State = 2343;
				routineString();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionNameContext functionName() {
			return GetRuleContext<FunctionNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySqlParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StoredRoutineBodyContext storedRoutineBody() {
			return GetRuleContext<StoredRoutineBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext[] functionParameter() {
			return GetRuleContexts<FunctionParameterContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter(int i) {
			return GetRuleContext<FunctionParameterContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public CreateFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateFunction(this);
		}
	}

	[RuleVersion(0)]
	public CreateFunctionContext createFunction() {
		CreateFunctionContext _localctx = new CreateFunctionContext(Context, State);
		EnterRule(_localctx, 110, RULE_createFunction);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2347;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2346;
				definerClause();
				}
			}

			State = 2349;
			Match(FUNCTION_SYMBOL);
			State = 2351;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,126,Context) ) {
			case 1:
				{
				State = 2350;
				ifNotExists();
				}
				break;
			}
			State = 2353;
			functionName();
			State = 2354;
			Match(OPEN_PAR_SYMBOL);
			State = 2363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,128,Context) ) {
			case 1:
				{
				State = 2355;
				functionParameter();
				State = 2360;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 2356;
					Match(COMMA_SYMBOL);
					State = 2357;
					functionParameter();
					}
					}
					State = 2362;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			State = 2365;
			Match(CLOSE_PAR_SYMBOL);
			State = 2366;
			Match(RETURNS_SYMBOL);
			State = 2367;
			typeWithOptCollate();
			State = 2371;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2368;
					routineCreateOption();
					}
					}
				}
				State = 2373;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,129,Context);
			}
			State = 2374;
			storedRoutineBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUdfContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UdfNameContext udfName() {
			return GetRuleContext<UdfNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySqlParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySqlParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySqlParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySqlParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySqlParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySqlParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySqlParser.AGGREGATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateUdfContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUdf; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUdf(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUdf(this);
		}
	}

	[RuleVersion(0)]
	public CreateUdfContext createUdf() {
		CreateUdfContext _localctx = new CreateUdfContext(Context, State);
		EnterRule(_localctx, 112, RULE_createUdf);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AGGREGATE_SYMBOL) {
				{
				State = 2376;
				Match(AGGREGATE_SYMBOL);
				}
			}

			State = 2379;
			Match(FUNCTION_SYMBOL);
			State = 2381;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,131,Context) ) {
			case 1:
				{
				State = 2380;
				ifNotExists();
				}
				break;
			}
			State = 2383;
			udfName();
			State = 2384;
			Match(RETURNS_SYMBOL);
			State = 2385;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DECIMAL_SYMBOL || _la==INT_SYMBOL || _la==REAL_SYMBOL || _la==STRING_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2386;
			Match(SONAME_SYMBOL);
			State = 2387;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineCreateOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineOptionContext routineOption() {
			return GetRuleContext<RoutineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DETERMINISTIC_SYMBOL() { return GetToken(MySqlParser.DETERMINISTIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		public RoutineCreateOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineCreateOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineCreateOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineCreateOption(this);
		}
	}

	[RuleVersion(0)]
	public RoutineCreateOptionContext routineCreateOption() {
		RoutineCreateOptionContext _localctx = new RoutineCreateOptionContext(Context, State);
		EnterRule(_localctx, 114, RULE_routineCreateOption);
		int _la;
		try {
			State = 2394;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
			case CONTAINS_SYMBOL:
			case LANGUAGE_SYMBOL:
			case MODIFIES_SYMBOL:
			case NO_SYMBOL:
			case READS_SYMBOL:
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2389;
				routineOption();
				}
				break;
			case DETERMINISTIC_SYMBOL:
			case NOT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2391;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2390;
					Match(NOT_SYMBOL);
					}
				}

				State = 2393;
				Match(DETERMINISTIC_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineAlterOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext[] routineCreateOption() {
			return GetRuleContexts<RoutineCreateOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoutineCreateOptionContext routineCreateOption(int i) {
			return GetRuleContext<RoutineCreateOptionContext>(i);
		}
		public RoutineAlterOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineAlterOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineAlterOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineAlterOptions(this);
		}
	}

	[RuleVersion(0)]
	public RoutineAlterOptionsContext routineAlterOptions() {
		RoutineAlterOptionsContext _localctx = new RoutineAlterOptionsContext(Context, State);
		EnterRule(_localctx, 116, RULE_routineAlterOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 2396;
				routineCreateOption();
				}
				}
				State = 2399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 72057594037960705L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 371)) & ~0x3f) == 0 && ((1L << (_la - 371)) & 5242881L) != 0) || _la==READS_SYMBOL || _la==SQL_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoutineOptionContext : ParserRuleContext {
		public IToken option;
		public IToken security;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySqlParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SYMBOL() { return GetToken(MySqlParser.SQL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySqlParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READS_SYMBOL() { return GetToken(MySqlParser.READS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFIES_SYMBOL() { return GetToken(MySqlParser.MODIFIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySqlParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySqlParser.INVOKER_SYMBOL, 0); }
		public RoutineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_routineOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoutineOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoutineOption(this);
		}
	}

	[RuleVersion(0)]
	public RoutineOptionContext routineOption() {
		RoutineOptionContext _localctx = new RoutineOptionContext(Context, State);
		EnterRule(_localctx, 118, RULE_routineOption);
		int _la;
		try {
			State = 2422;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2401;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 2402;
				textLiteral();
				}
				break;
			case LANGUAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2403;
				_localctx.option = Match(LANGUAGE_SYMBOL);
				State = 2407;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
				case 1:
					{
					State = 2404;
					Match(SQL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 2405;
					if (!(this.ServerVersion >= 80032)) throw new FailedPredicateException(this, "this.ServerVersion >= 80032");
					State = 2406;
					identifier();
					}
					break;
				}
				}
				break;
			case NO_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2409;
				_localctx.option = Match(NO_SYMBOL);
				State = 2410;
				Match(SQL_SYMBOL);
				}
				break;
			case CONTAINS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2411;
				_localctx.option = Match(CONTAINS_SYMBOL);
				State = 2412;
				Match(SQL_SYMBOL);
				}
				break;
			case READS_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2413;
				_localctx.option = Match(READS_SYMBOL);
				State = 2414;
				Match(SQL_SYMBOL);
				State = 2415;
				Match(DATA_SYMBOL);
				}
				break;
			case MODIFIES_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2416;
				_localctx.option = Match(MODIFIES_SYMBOL);
				State = 2417;
				Match(SQL_SYMBOL);
				State = 2418;
				Match(DATA_SYMBOL);
				}
				break;
			case SQL_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2419;
				_localctx.option = Match(SQL_SYMBOL);
				State = 2420;
				Match(SECURITY_SYMBOL);
				State = 2421;
				_localctx.security = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
					_localctx.security = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateIndexTargetContext createIndexTarget() {
			return GetRuleContext<CreateIndexTargetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySqlParser.FULLTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySqlParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		public CreateIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateIndex(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexContext createIndex() {
		CreateIndexContext _localctx = new CreateIndexContext(Context, State);
		EnterRule(_localctx, 120, RULE_createIndex);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2425;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 2424;
				onlineOption();
				}
			}

			State = 2462;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case UNIQUE_SYMBOL:
				{
				State = 2428;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNIQUE_SYMBOL) {
					{
					State = 2427;
					Match(UNIQUE_SYMBOL);
					}
				}

				State = 2430;
				_localctx.type = Match(INDEX_SYMBOL);
				State = 2431;
				indexName();
				State = 2433;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TYPE_SYMBOL || _la==USING_SYMBOL) {
					{
					State = 2432;
					indexTypeClause();
					}
				}

				State = 2435;
				createIndexTarget();
				State = 2439;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2436;
						indexOption();
						}
						}
					}
					State = 2441;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,140,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				{
				State = 2442;
				_localctx.type = Match(FULLTEXT_SYMBOL);
				State = 2443;
				Match(INDEX_SYMBOL);
				State = 2444;
				indexName();
				State = 2445;
				createIndexTarget();
				State = 2449;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2446;
						fulltextIndexOption();
						}
						}
					}
					State = 2451;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,141,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				{
				State = 2452;
				_localctx.type = Match(SPATIAL_SYMBOL);
				State = 2453;
				Match(INDEX_SYMBOL);
				State = 2454;
				indexName();
				State = 2455;
				createIndexTarget();
				State = 2459;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 2456;
						spatialIndexOption();
						}
						}
					}
					State = 2461;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,142,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 2465;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				State = 2464;
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameAndTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		public IndexNameAndTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexNameAndType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexNameAndType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexNameAndType(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameAndTypeContext indexNameAndType() {
		IndexNameAndTypeContext _localctx = new IndexNameAndTypeContext(Context, State);
		EnterRule(_localctx, 122, RULE_indexNameAndType);
		try {
			State = 2477;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2467;
				indexName();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2469;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
				case 1:
					{
					State = 2468;
					indexName();
					}
					break;
				}
				State = 2471;
				Match(USING_SYMBOL);
				State = 2472;
				indexType();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2473;
				indexName();
				State = 2474;
				Match(TYPE_SYMBOL);
				State = 2475;
				indexType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateIndexTargetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyListWithExpressionContext keyListWithExpression() {
			return GetRuleContext<KeyListWithExpressionContext>(0);
		}
		public CreateIndexTargetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createIndexTarget; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateIndexTarget(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateIndexTarget(this);
		}
	}

	[RuleVersion(0)]
	public CreateIndexTargetContext createIndexTarget() {
		CreateIndexTargetContext _localctx = new CreateIndexTargetContext(Context, State);
		EnterRule(_localctx, 124, RULE_createIndexTarget);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2479;
			Match(ON_SYMBOL);
			State = 2480;
			tableRef();
			State = 2481;
			keyListWithExpression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupNameContext logfileGroupName() {
			return GetRuleContext<LogfileGroupNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySqlParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionsContext logfileGroupOptions() {
			return GetRuleContext<LogfileGroupOptionsContext>(0);
		}
		public CreateLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public CreateLogfileGroupContext createLogfileGroup() {
		CreateLogfileGroupContext _localctx = new CreateLogfileGroupContext(Context, State);
		EnterRule(_localctx, 126, RULE_createLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2483;
			Match(LOGFILE_SYMBOL);
			State = 2484;
			Match(GROUP_SYMBOL);
			State = 2485;
			logfileGroupName();
			State = 2486;
			Match(ADD_SYMBOL);
			State = 2487;
			Match(UNDOFILE_SYMBOL);
			State = 2488;
			textLiteral();
			State = 2490;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2489;
				logfileGroupOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionContext[] logfileGroupOption() {
			return GetRuleContexts<LogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupOptionContext logfileGroupOption(int i) {
			return GetRuleContext<LogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public LogfileGroupOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOptions(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionsContext logfileGroupOptions() {
		LogfileGroupOptionsContext _localctx = new LogfileGroupOptionsContext(Context, State);
		EnterRule(_localctx, 128, RULE_logfileGroupOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2492;
			logfileGroupOption();
			State = 2499;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL || _la==COMMENT_SYMBOL || _la==ENGINE_SYMBOL || _la==INITIAL_SIZE_SYMBOL || _la==NODEGROUP_SYMBOL || _la==NO_WAIT_SYMBOL || _la==REDO_BUFFER_SIZE_SYMBOL || _la==STORAGE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				{
				State = 2494;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 2493;
					Match(COMMA_SYMBOL);
					}
				}

				State = 2496;
				logfileGroupOption();
				}
				}
				State = 2501;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
			return GetRuleContext<TsOptionUndoRedoBufferSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		public LogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupOptionContext logfileGroupOption() {
		LogfileGroupOptionContext _localctx = new LogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 130, RULE_logfileGroupOption);
		try {
			State = 2508;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INITIAL_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2502;
				tsOptionInitialSize();
				}
				break;
			case REDO_BUFFER_SIZE_SYMBOL:
			case UNDO_BUFFER_SIZE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2503;
				tsOptionUndoRedoBufferSize();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2504;
				tsOptionNodegroup();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2505;
				tsOptionEngine();
				}
				break;
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2506;
				tsOptionWait();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2507;
				tsOptionComment();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerNameContext serverName() {
			return GetRuleContext<ServerNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySqlParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySqlParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionsContext serverOptions() {
			return GetRuleContext<ServerOptionsContext>(0);
		}
		public CreateServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateServer(this);
		}
	}

	[RuleVersion(0)]
	public CreateServerContext createServer() {
		CreateServerContext _localctx = new CreateServerContext(Context, State);
		EnterRule(_localctx, 132, RULE_createServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2510;
			Match(SERVER_SYMBOL);
			State = 2511;
			serverName();
			State = 2512;
			Match(FOREIGN_SYMBOL);
			State = 2513;
			Match(DATA_SYMBOL);
			State = 2514;
			Match(WRAPPER_SYMBOL);
			State = 2515;
			textOrIdentifier();
			State = 2516;
			serverOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySqlParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext[] serverOption() {
			return GetRuleContexts<ServerOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ServerOptionContext serverOption(int i) {
			return GetRuleContext<ServerOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ServerOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerOptions(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionsContext serverOptions() {
		ServerOptionsContext _localctx = new ServerOptionsContext(Context, State);
		EnterRule(_localctx, 134, RULE_serverOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2518;
			Match(OPTIONS_SYMBOL);
			State = 2519;
			Match(OPEN_PAR_SYMBOL);
			State = 2520;
			serverOption();
			State = 2525;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2521;
				Match(COMMA_SYMBOL);
				State = 2522;
				serverOption();
				}
				}
				State = 2527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 2528;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySqlParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySqlParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySqlParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySqlParser.PORT_SYMBOL, 0); }
		public ServerOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerOption(this);
		}
	}

	[RuleVersion(0)]
	public ServerOptionContext serverOption() {
		ServerOptionContext _localctx = new ServerOptionContext(Context, State);
		EnterRule(_localctx, 136, RULE_serverOption);
		try {
			State = 2544;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOST_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2530;
				_localctx.option = Match(HOST_SYMBOL);
				State = 2531;
				textLiteral();
				}
				break;
			case DATABASE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2532;
				_localctx.option = Match(DATABASE_SYMBOL);
				State = 2533;
				textLiteral();
				}
				break;
			case USER_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2534;
				_localctx.option = Match(USER_SYMBOL);
				State = 2535;
				textLiteral();
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2536;
				_localctx.option = Match(PASSWORD_SYMBOL);
				State = 2537;
				textLiteral();
				}
				break;
			case SOCKET_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2538;
				_localctx.option = Match(SOCKET_SYMBOL);
				State = 2539;
				textLiteral();
				}
				break;
			case OWNER_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2540;
				_localctx.option = Match(OWNER_SYMBOL);
				State = 2541;
				textLiteral();
				}
				break;
			case PORT_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2542;
				_localctx.option = Match(PORT_SYMBOL);
				State = 2543;
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileNameContext tsDataFileName() {
			return GetRuleContext<TsDataFileNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySqlParser.USE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionsContext tablespaceOptions() {
			return GetRuleContext<TablespaceOptionsContext>(0);
		}
		public CreateTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTablespace(this);
		}
	}

	[RuleVersion(0)]
	public CreateTablespaceContext createTablespace() {
		CreateTablespaceContext _localctx = new CreateTablespaceContext(Context, State);
		EnterRule(_localctx, 138, RULE_createTablespace);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2546;
			Match(TABLESPACE_SYMBOL);
			State = 2547;
			tablespaceName();
			State = 2548;
			tsDataFileName();
			State = 2553;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,153,Context) ) {
			case 1:
				{
				State = 2549;
				Match(USE_SYMBOL);
				State = 2550;
				Match(LOGFILE_SYMBOL);
				State = 2551;
				Match(GROUP_SYMBOL);
				State = 2552;
				logfileGroupRef();
				}
				break;
			}
			State = 2556;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,154,Context) ) {
			case 1:
				{
				State = 2555;
				tablespaceOptions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySqlParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceNameContext tablespaceName() {
			return GetRuleContext<TablespaceNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public CreateUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public CreateUndoTablespaceContext createUndoTablespace() {
		CreateUndoTablespaceContext _localctx = new CreateUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 140, RULE_createUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2558;
			Match(UNDO_SYMBOL);
			State = 2559;
			Match(TABLESPACE_SYMBOL);
			State = 2560;
			tablespaceName();
			State = 2561;
			Match(ADD_SYMBOL);
			State = 2562;
			tsDataFile();
			State = 2564;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2563;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL() { return GetToken(MySqlParser.ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsDataFileContext tsDataFile() {
			return GetRuleContext<TsDataFileContext>(0);
		}
		public TsDataFileNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFileName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsDataFileName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsDataFileName(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileNameContext tsDataFileName() {
		TsDataFileNameContext _localctx = new TsDataFileNameContext(Context, State);
		EnterRule(_localctx, 142, RULE_tsDataFileName);
		try {
			State = 2573;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2566;
				Match(ADD_SYMBOL);
				State = 2567;
				tsDataFile();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2568;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 2571;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,156,Context) ) {
				case 1:
					{
					State = 2569;
					Match(ADD_SYMBOL);
					State = 2570;
					tsDataFile();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsDataFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySqlParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		public TsDataFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsDataFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsDataFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsDataFile(this);
		}
	}

	[RuleVersion(0)]
	public TsDataFileContext tsDataFile() {
		TsDataFileContext _localctx = new TsDataFileContext(Context, State);
		EnterRule(_localctx, 144, RULE_tsDataFile);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2575;
			Match(DATAFILE_SYMBOL);
			State = 2576;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionContext[] tablespaceOption() {
			return GetRuleContexts<TablespaceOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceOptionContext tablespaceOption(int i) {
			return GetRuleContext<TablespaceOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TablespaceOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOptions(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionsContext tablespaceOptions() {
		TablespaceOptionsContext _localctx = new TablespaceOptionsContext(Context, State);
		EnterRule(_localctx, 146, RULE_tablespaceOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2578;
			tablespaceOption();
			State = 2585;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2580;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,158,Context) ) {
					case 1:
						{
						State = 2579;
						Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 2582;
					tablespaceOption();
					}
					}
				}
				State = 2587;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,159,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionInitialSizeContext tsOptionInitialSize() {
			return GetRuleContext<TsOptionInitialSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionMaxSizeContext tsOptionMaxSize() {
			return GetRuleContext<TsOptionMaxSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionExtentSizeContext tsOptionExtentSize() {
			return GetRuleContext<TsOptionExtentSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionNodegroupContext tsOptionNodegroup() {
			return GetRuleContext<TsOptionNodegroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionCommentContext tsOptionComment() {
			return GetRuleContext<TsOptionCommentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionFileblockSizeContext tsOptionFileblockSize() {
			return GetRuleContext<TsOptionFileblockSizeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEncryptionContext tsOptionEncryption() {
			return GetRuleContext<TsOptionEncryptionContext>(0);
		}
		public TablespaceOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceOption(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceOptionContext tablespaceOption() {
		TablespaceOptionContext _localctx = new TablespaceOptionContext(Context, State);
		EnterRule(_localctx, 148, RULE_tablespaceOption);
		try {
			State = 2599;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2588;
				tsOptionInitialSize();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2589;
				tsOptionAutoextendSize();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2590;
				tsOptionMaxSize();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2591;
				tsOptionExtentSize();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 2592;
				tsOptionNodegroup();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 2593;
				tsOptionEngine();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 2594;
				tsOptionWait();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 2595;
				tsOptionComment();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 2596;
				tsOptionFileblockSize();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 2597;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 2598;
				tsOptionEncryption();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionInitialSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionInitialSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionInitialSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionInitialSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionInitialSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionInitialSizeContext tsOptionInitialSize() {
		TsOptionInitialSizeContext _localctx = new TsOptionInitialSizeContext(Context, State);
		EnterRule(_localctx, 150, RULE_tsOptionInitialSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2601;
			Match(INITIAL_SIZE_SYMBOL);
			State = 2603;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				{
				State = 2602;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2605;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionUndoRedoBufferSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionUndoRedoBufferSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionUndoRedoBufferSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionUndoRedoBufferSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionUndoRedoBufferSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionUndoRedoBufferSizeContext tsOptionUndoRedoBufferSize() {
		TsOptionUndoRedoBufferSizeContext _localctx = new TsOptionUndoRedoBufferSizeContext(Context, State);
		EnterRule(_localctx, 152, RULE_tsOptionUndoRedoBufferSize);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2607;
			_la = TokenStream.LA(1);
			if ( !(_la==REDO_BUFFER_SIZE_SYMBOL || _la==UNDO_BUFFER_SIZE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,162,Context) ) {
			case 1:
				{
				State = 2608;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2611;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionAutoextendSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySqlParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionAutoextendSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionAutoextendSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionAutoextendSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionAutoextendSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
		TsOptionAutoextendSizeContext _localctx = new TsOptionAutoextendSizeContext(Context, State);
		EnterRule(_localctx, 154, RULE_tsOptionAutoextendSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2613;
			Match(AUTOEXTEND_SIZE_SYMBOL);
			State = 2615;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,163,Context) ) {
			case 1:
				{
				State = 2614;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2617;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionMaxSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySqlParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionMaxSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionMaxSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionMaxSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionMaxSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionMaxSizeContext tsOptionMaxSize() {
		TsOptionMaxSizeContext _localctx = new TsOptionMaxSizeContext(Context, State);
		EnterRule(_localctx, 156, RULE_tsOptionMaxSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2619;
			Match(MAX_SIZE_SYMBOL);
			State = 2621;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,164,Context) ) {
			case 1:
				{
				State = 2620;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2623;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionExtentSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySqlParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionExtentSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionExtentSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionExtentSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionExtentSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionExtentSizeContext tsOptionExtentSize() {
		TsOptionExtentSizeContext _localctx = new TsOptionExtentSizeContext(Context, State);
		EnterRule(_localctx, 158, RULE_tsOptionExtentSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2625;
			Match(EXTENT_SIZE_SYMBOL);
			State = 2627;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,165,Context) ) {
			case 1:
				{
				State = 2626;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2629;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionNodegroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySqlParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionNodegroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionNodegroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionNodegroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionNodegroup(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionNodegroupContext tsOptionNodegroup() {
		TsOptionNodegroupContext _localctx = new TsOptionNodegroupContext(Context, State);
		EnterRule(_localctx, 160, RULE_tsOptionNodegroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2631;
			Match(NODEGROUP_SYMBOL);
			State = 2633;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR) {
				{
				State = 2632;
				Match(EQUAL_OPERATOR);
				}
			}

			State = 2635;
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEngineContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEngine; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEngine(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEngine(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEngineContext tsOptionEngine() {
		TsOptionEngineContext _localctx = new TsOptionEngineContext(Context, State);
		EnterRule(_localctx, 162, RULE_tsOptionEngine);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2638;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				State = 2637;
				Match(STORAGE_SYMBOL);
				}
			}

			State = 2640;
			Match(ENGINE_SYMBOL);
			State = 2642;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,168,Context) ) {
			case 1:
				{
				State = 2641;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2644;
			engineRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionWaitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySqlParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySqlParser.NO_WAIT_SYMBOL, 0); }
		public TsOptionWaitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionWait; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionWait(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionWait(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionWaitContext tsOptionWait() {
		TsOptionWaitContext _localctx = new TsOptionWaitContext(Context, State);
		EnterRule(_localctx, 164, RULE_tsOptionWait);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2646;
			_la = TokenStream.LA(1);
			if ( !(_la==NO_WAIT_SYMBOL || _la==WAIT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionCommentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionCommentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionComment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionComment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionComment(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionCommentContext tsOptionComment() {
		TsOptionCommentContext _localctx = new TsOptionCommentContext(Context, State);
		EnterRule(_localctx, 166, RULE_tsOptionComment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2648;
			Match(COMMENT_SYMBOL);
			State = 2650;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,169,Context) ) {
			case 1:
				{
				State = 2649;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2652;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionFileblockSizeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionFileblockSizeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionFileblockSize; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionFileblockSize(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionFileblockSize(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionFileblockSizeContext tsOptionFileblockSize() {
		TsOptionFileblockSizeContext _localctx = new TsOptionFileblockSizeContext(Context, State);
		EnterRule(_localctx, 168, RULE_tsOptionFileblockSize);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2654;
			Match(FILE_BLOCK_SIZE_SYMBOL);
			State = 2656;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,170,Context) ) {
			case 1:
				{
				State = 2655;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2658;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEncryptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEncryption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEncryption(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEncryptionContext tsOptionEncryption() {
		TsOptionEncryptionContext _localctx = new TsOptionEncryptionContext(Context, State);
		EnterRule(_localctx, 170, RULE_tsOptionEncryption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2660;
			Match(ENCRYPTION_SYMBOL);
			State = 2662;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,171,Context) ) {
			case 1:
				{
				State = 2661;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2664;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TsOptionEngineAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonAttributeContext jsonAttribute() {
			return GetRuleContext<JsonAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TsOptionEngineAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tsOptionEngineAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTsOptionEngineAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTsOptionEngineAttribute(this);
		}
	}

	[RuleVersion(0)]
	public TsOptionEngineAttributeContext tsOptionEngineAttribute() {
		TsOptionEngineAttributeContext _localctx = new TsOptionEngineAttributeContext(Context, State);
		EnterRule(_localctx, 172, RULE_tsOptionEngineAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2666;
			Match(ENGINE_SYMBOL);
			State = 2668;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,172,Context) ) {
			case 1:
				{
				State = 2667;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 2670;
			jsonAttribute();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewNameContext viewName() {
			return GetRuleContext<ViewNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewTailContext viewTail() {
			return GetRuleContext<ViewTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
			return GetRuleContext<ViewReplaceOrAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewSuidContext viewSuid() {
			return GetRuleContext<ViewSuidContext>(0);
		}
		public CreateViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateView(this);
		}
	}

	[RuleVersion(0)]
	public CreateViewContext createView() {
		CreateViewContext _localctx = new CreateViewContext(Context, State);
		EnterRule(_localctx, 174, RULE_createView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2673;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==OR_SYMBOL) {
				{
				State = 2672;
				viewReplaceOrAlgorithm();
				}
			}

			State = 2676;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2675;
				definerClause();
				}
			}

			State = 2679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SQL_SYMBOL) {
				{
				State = 2678;
				viewSuid();
				}
			}

			State = 2681;
			Match(VIEW_SYMBOL);
			State = 2682;
			viewName();
			State = 2683;
			viewTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewReplaceOrAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySqlParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewAlgorithmContext viewAlgorithm() {
			return GetRuleContext<ViewAlgorithmContext>(0);
		}
		public ViewReplaceOrAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewReplaceOrAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewReplaceOrAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewReplaceOrAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public ViewReplaceOrAlgorithmContext viewReplaceOrAlgorithm() {
		ViewReplaceOrAlgorithmContext _localctx = new ViewReplaceOrAlgorithmContext(Context, State);
		EnterRule(_localctx, 176, RULE_viewReplaceOrAlgorithm);
		int _la;
		try {
			State = 2691;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2685;
				Match(OR_SYMBOL);
				State = 2686;
				Match(REPLACE_SYMBOL);
				State = 2688;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 2687;
					viewAlgorithm();
					}
				}

				}
				break;
			case ALGORITHM_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2690;
				viewAlgorithm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewAlgorithmContext : ParserRuleContext {
		public IToken algorithm;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySqlParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySqlParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySqlParser.TEMPTABLE_SYMBOL, 0); }
		public ViewAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public ViewAlgorithmContext viewAlgorithm() {
		ViewAlgorithmContext _localctx = new ViewAlgorithmContext(Context, State);
		EnterRule(_localctx, 178, RULE_viewAlgorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2693;
			Match(ALGORITHM_SYMBOL);
			State = 2694;
			Match(EQUAL_OPERATOR);
			State = 2695;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==MERGE_SYMBOL || _la==TEMPTABLE_SYMBOL || _la==UNDEFINED_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewSuidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SYMBOL() { return GetToken(MySqlParser.SQL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySqlParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySqlParser.INVOKER_SYMBOL, 0); }
		public ViewSuidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewSuid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewSuid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewSuid(this);
		}
	}

	[RuleVersion(0)]
	public ViewSuidContext viewSuid() {
		ViewSuidContext _localctx = new ViewSuidContext(Context, State);
		EnterRule(_localctx, 180, RULE_viewSuid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2697;
			Match(SQL_SYMBOL);
			State = 2698;
			Match(SECURITY_SYMBOL);
			State = 2699;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFINER_SYMBOL || _la==INVOKER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTriggerContext : ParserRuleContext {
		public IToken timing;
		public IToken @event;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySqlParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerNameContext triggerName() {
			return GetRuleContext<TriggerNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EACH_SYMBOL() { return GetToken(MySqlParser.EACH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySqlParser.BEFORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySqlParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySqlParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySqlParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
			return GetRuleContext<TriggerFollowsPrecedesClauseContext>(0);
		}
		public CreateTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTrigger(this);
		}
	}

	[RuleVersion(0)]
	public CreateTriggerContext createTrigger() {
		CreateTriggerContext _localctx = new CreateTriggerContext(Context, State);
		EnterRule(_localctx, 182, RULE_createTrigger);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2702;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2701;
				definerClause();
				}
			}

			State = 2704;
			Match(TRIGGER_SYMBOL);
			State = 2706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,179,Context) ) {
			case 1:
				{
				State = 2705;
				ifNotExists();
				}
				break;
			}
			State = 2708;
			triggerName();
			State = 2709;
			_localctx.timing = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==AFTER_SYMBOL || _la==BEFORE_SYMBOL) ) {
				_localctx.timing = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2710;
			_localctx.@event = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==DELETE_SYMBOL || _la==INSERT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				_localctx.@event = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2711;
			Match(ON_SYMBOL);
			State = 2712;
			tableRef();
			State = 2713;
			Match(FOR_SYMBOL);
			State = 2714;
			Match(EACH_SYMBOL);
			State = 2715;
			Match(ROW_SYMBOL);
			State = 2717;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,180,Context) ) {
			case 1:
				{
				State = 2716;
				triggerFollowsPrecedesClause();
				}
				break;
			}
			State = 2719;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerFollowsPrecedesClauseContext : ParserRuleContext {
		public IToken ordering;
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySqlParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySqlParser.PRECEDES_SYMBOL, 0); }
		public TriggerFollowsPrecedesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerFollowsPrecedesClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTriggerFollowsPrecedesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTriggerFollowsPrecedesClause(this);
		}
	}

	[RuleVersion(0)]
	public TriggerFollowsPrecedesClauseContext triggerFollowsPrecedesClause() {
		TriggerFollowsPrecedesClauseContext _localctx = new TriggerFollowsPrecedesClauseContext(Context, State);
		EnterRule(_localctx, 184, RULE_triggerFollowsPrecedesClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2721;
			_localctx.ordering = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==FOLLOWS_SYMBOL || _la==PRECEDES_SYMBOL) ) {
				_localctx.ordering = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2722;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventNameContext eventName() {
			return GetRuleContext<EventNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySqlParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySqlParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySqlParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ScheduleContext schedule() {
			return GetRuleContext<ScheduleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinerClauseContext definerClause() {
			return GetRuleContext<DefinerClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySqlParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySqlParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		public CreateEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateEvent(this);
		}
	}

	[RuleVersion(0)]
	public CreateEventContext createEvent() {
		CreateEventContext _localctx = new CreateEventContext(Context, State);
		EnterRule(_localctx, 186, RULE_createEvent);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2725;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFINER_SYMBOL) {
				{
				State = 2724;
				definerClause();
				}
			}

			State = 2727;
			Match(EVENT_SYMBOL);
			State = 2729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,182,Context) ) {
			case 1:
				{
				State = 2728;
				ifNotExists();
				}
				break;
			}
			State = 2731;
			eventName();
			State = 2732;
			Match(ON_SYMBOL);
			State = 2733;
			Match(SCHEDULE_SYMBOL);
			State = 2734;
			schedule();
			State = 2741;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 2735;
				Match(ON_SYMBOL);
				State = 2736;
				Match(COMPLETION_SYMBOL);
				State = 2738;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 2737;
					Match(NOT_SYMBOL);
					}
				}

				State = 2740;
				Match(PRESERVE_SYMBOL);
				}
			}

			State = 2749;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ENABLE_SYMBOL:
				{
				State = 2743;
				Match(ENABLE_SYMBOL);
				}
				break;
			case DISABLE_SYMBOL:
				{
				State = 2744;
				Match(DISABLE_SYMBOL);
				State = 2747;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 2745;
					Match(ON_SYMBOL);
					State = 2746;
					replica();
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
			case DO_SYMBOL:
				break;
			default:
				break;
			}
			State = 2753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMENT_SYMBOL) {
				{
				State = 2751;
				Match(COMMENT_SYMBOL);
				State = 2752;
				textLiteral();
				}
			}

			State = 2755;
			Match(DO_SYMBOL);
			State = 2756;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateRole(this);
		}
	}

	[RuleVersion(0)]
	public CreateRoleContext createRole() {
		CreateRoleContext _localctx = new CreateRoleContext(Context, State);
		EnterRule(_localctx, 188, RULE_createRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2758;
			Match(ROLE_SYMBOL);
			State = 2760;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,188,Context) ) {
			case 1:
				{
				State = 2759;
				ifNotExists();
				}
				break;
			}
			State = 2762;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateSpatialReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySqlParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySqlParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySqlParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SrsAttributeContext[] srsAttribute() {
			return GetRuleContexts<SrsAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SrsAttributeContext srsAttribute(int i) {
			return GetRuleContext<SrsAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public CreateSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createSpatialReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateSpatialReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateSpatialReference(this);
		}
	}

	[RuleVersion(0)]
	public CreateSpatialReferenceContext createSpatialReference() {
		CreateSpatialReferenceContext _localctx = new CreateSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 190, RULE_createSpatialReference);
		int _la;
		try {
			State = 2789;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2764;
				Match(OR_SYMBOL);
				State = 2765;
				Match(REPLACE_SYMBOL);
				State = 2766;
				Match(SPATIAL_SYMBOL);
				State = 2767;
				Match(REFERENCE_SYMBOL);
				State = 2768;
				Match(SYSTEM_SYMBOL);
				State = 2769;
				real_ulonglong_number();
				State = 2773;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & 7L) != 0)) {
					{
					{
					State = 2770;
					srsAttribute();
					}
					}
					State = 2775;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2776;
				Match(SPATIAL_SYMBOL);
				State = 2777;
				Match(REFERENCE_SYMBOL);
				State = 2778;
				Match(SYSTEM_SYMBOL);
				State = 2780;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,190,Context) ) {
				case 1:
					{
					State = 2779;
					ifNotExists();
					}
					break;
				}
				State = 2782;
				real_ulonglong_number();
				State = 2786;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==NAME_SYMBOL || ((((_la - 724)) & ~0x3f) == 0 && ((1L << (_la - 724)) & 7L) != 0)) {
					{
					{
					State = 2783;
					srsAttribute();
					}
					}
					State = 2788;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SrsAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySqlParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySqlParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySqlParser.DEFINITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySqlParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySqlParser.DESCRIPTION_SYMBOL, 0); }
		public SrsAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_srsAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSrsAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSrsAttribute(this);
		}
	}

	[RuleVersion(0)]
	public SrsAttributeContext srsAttribute() {
		SrsAttributeContext _localctx = new SrsAttributeContext(Context, State);
		EnterRule(_localctx, 192, RULE_srsAttribute);
		try {
			State = 2806;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2791;
				Match(NAME_SYMBOL);
				State = 2792;
				Match(TEXT_SYMBOL);
				State = 2793;
				textStringNoLinebreak();
				}
				break;
			case DEFINITION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2794;
				Match(DEFINITION_SYMBOL);
				State = 2795;
				Match(TEXT_SYMBOL);
				State = 2796;
				textStringNoLinebreak();
				}
				break;
			case ORGANIZATION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 2797;
				Match(ORGANIZATION_SYMBOL);
				State = 2798;
				textStringNoLinebreak();
				State = 2799;
				Match(IDENTIFIED_SYMBOL);
				State = 2800;
				Match(BY_SYMBOL);
				State = 2801;
				real_ulonglong_number();
				}
				break;
			case DESCRIPTION_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 2803;
				Match(DESCRIPTION_SYMBOL);
				State = 2804;
				Match(TEXT_SYMBOL);
				State = 2805;
				textStringNoLinebreak();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DropDatabaseContext dropDatabase() {
			return GetRuleContext<DropDatabaseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropEventContext dropEvent() {
			return GetRuleContext<DropEventContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropFunctionContext dropFunction() {
			return GetRuleContext<DropFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropProcedureContext dropProcedure() {
			return GetRuleContext<DropProcedureContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropIndexContext dropIndex() {
			return GetRuleContext<DropIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupContext dropLogfileGroup() {
			return GetRuleContext<DropLogfileGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropServerContext dropServer() {
			return GetRuleContext<DropServerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableContext dropTable() {
			return GetRuleContext<DropTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTableSpaceContext dropTableSpace() {
			return GetRuleContext<DropTableSpaceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropTriggerContext dropTrigger() {
			return GetRuleContext<DropTriggerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropViewContext dropView() {
			return GetRuleContext<DropViewContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropRoleContext dropRole() {
			return GetRuleContext<DropRoleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropSpatialReferenceContext dropSpatialReference() {
			return GetRuleContext<DropSpatialReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUndoTablespaceContext dropUndoTablespace() {
			return GetRuleContext<DropUndoTablespaceContext>(0);
		}
		public DropStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropStatement(this);
		}
	}

	[RuleVersion(0)]
	public DropStatementContext dropStatement() {
		DropStatementContext _localctx = new DropStatementContext(Context, State);
		EnterRule(_localctx, 194, RULE_dropStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2808;
			Match(DROP_SYMBOL);
			State = 2825;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,194,Context) ) {
			case 1:
				{
				State = 2809;
				dropDatabase();
				}
				break;
			case 2:
				{
				State = 2810;
				dropEvent();
				}
				break;
			case 3:
				{
				State = 2811;
				dropFunction();
				}
				break;
			case 4:
				{
				State = 2812;
				dropProcedure();
				}
				break;
			case 5:
				{
				State = 2813;
				dropIndex();
				}
				break;
			case 6:
				{
				State = 2814;
				dropLogfileGroup();
				}
				break;
			case 7:
				{
				State = 2815;
				dropServer();
				}
				break;
			case 8:
				{
				State = 2816;
				dropTable();
				}
				break;
			case 9:
				{
				State = 2817;
				dropTableSpace();
				}
				break;
			case 10:
				{
				State = 2818;
				dropTrigger();
				}
				break;
			case 11:
				{
				State = 2819;
				dropView();
				}
				break;
			case 12:
				{
				State = 2820;
				dropRole();
				}
				break;
			case 13:
				{
				State = 2821;
				if (!(this.ServerVersion >= 80011)) throw new FailedPredicateException(this, "this.ServerVersion >= 80011");
				State = 2822;
				dropSpatialReference();
				}
				break;
			case 14:
				{
				State = 2823;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 2824;
				dropUndoTablespace();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropDatabaseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropDatabaseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropDatabase; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropDatabase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropDatabase(this);
		}
	}

	[RuleVersion(0)]
	public DropDatabaseContext dropDatabase() {
		DropDatabaseContext _localctx = new DropDatabaseContext(Context, State);
		EnterRule(_localctx, 196, RULE_dropDatabase);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2827;
			Match(DATABASE_SYMBOL);
			State = 2829;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,195,Context) ) {
			case 1:
				{
				State = 2828;
				ifExists();
				}
				break;
			}
			State = 2831;
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropEventContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropEventContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropEvent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropEvent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropEvent(this);
		}
	}

	[RuleVersion(0)]
	public DropEventContext dropEvent() {
		DropEventContext _localctx = new DropEventContext(Context, State);
		EnterRule(_localctx, 198, RULE_dropEvent);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2833;
			Match(EVENT_SYMBOL);
			State = 2835;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,196,Context) ) {
			case 1:
				{
				State = 2834;
				ifExists();
				}
				break;
			}
			State = 2837;
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropFunction(this);
		}
	}

	[RuleVersion(0)]
	public DropFunctionContext dropFunction() {
		DropFunctionContext _localctx = new DropFunctionContext(Context, State);
		EnterRule(_localctx, 200, RULE_dropFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2839;
			Match(FUNCTION_SYMBOL);
			State = 2841;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,197,Context) ) {
			case 1:
				{
				State = 2840;
				ifExists();
				}
				break;
			}
			State = 2843;
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropProcedureContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropProcedureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropProcedure; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropProcedure(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropProcedure(this);
		}
	}

	[RuleVersion(0)]
	public DropProcedureContext dropProcedure() {
		DropProcedureContext _localctx = new DropProcedureContext(Context, State);
		EnterRule(_localctx, 202, RULE_dropProcedure);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2845;
			Match(PROCEDURE_SYMBOL);
			State = 2847;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,198,Context) ) {
			case 1:
				{
				State = 2846;
				ifExists();
				}
				break;
			}
			State = 2849;
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropIndexContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IndexRefContext indexRef() {
			return GetRuleContext<IndexRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnlineOptionContext onlineOption() {
			return GetRuleContext<OnlineOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexLockAndAlgorithmContext indexLockAndAlgorithm() {
			return GetRuleContext<IndexLockAndAlgorithmContext>(0);
		}
		public DropIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropIndex(this);
		}
	}

	[RuleVersion(0)]
	public DropIndexContext dropIndex() {
		DropIndexContext _localctx = new DropIndexContext(Context, State);
		EnterRule(_localctx, 204, RULE_dropIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2852;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) {
				{
				State = 2851;
				onlineOption();
				}
			}

			State = 2854;
			_localctx.type = Match(INDEX_SYMBOL);
			State = 2855;
			indexRef();
			State = 2856;
			Match(ON_SYMBOL);
			State = 2857;
			tableRef();
			State = 2859;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALGORITHM_SYMBOL || _la==LOCK_SYMBOL) {
				{
				State = 2858;
				indexLockAndAlgorithm();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogfileGroupRefContext logfileGroupRef() {
			return GetRuleContext<LogfileGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public DropLogfileGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroup(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupContext dropLogfileGroup() {
		DropLogfileGroupContext _localctx = new DropLogfileGroupContext(Context, State);
		EnterRule(_localctx, 206, RULE_dropLogfileGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2861;
			Match(LOGFILE_SYMBOL);
			State = 2862;
			Match(GROUP_SYMBOL);
			State = 2863;
			logfileGroupRef();
			State = 2874;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2864;
				dropLogfileGroupOption();
				State = 2871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					{
					State = 2866;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2865;
						Match(COMMA_SYMBOL);
						}
					}

					State = 2868;
					dropLogfileGroupOption();
					}
					}
					State = 2873;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropLogfileGroupOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionWaitContext tsOptionWait() {
			return GetRuleContext<TsOptionWaitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionEngineContext tsOptionEngine() {
			return GetRuleContext<TsOptionEngineContext>(0);
		}
		public DropLogfileGroupOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropLogfileGroupOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropLogfileGroupOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropLogfileGroupOption(this);
		}
	}

	[RuleVersion(0)]
	public DropLogfileGroupOptionContext dropLogfileGroupOption() {
		DropLogfileGroupOptionContext _localctx = new DropLogfileGroupOptionContext(Context, State);
		EnterRule(_localctx, 208, RULE_dropLogfileGroupOption);
		try {
			State = 2878;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NO_WAIT_SYMBOL:
			case WAIT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2876;
				tsOptionWait();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 2877;
				tsOptionEngine();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerRefContext serverRef() {
			return GetRuleContext<ServerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropServer(this);
		}
	}

	[RuleVersion(0)]
	public DropServerContext dropServer() {
		DropServerContext _localctx = new DropServerContext(Context, State);
		EnterRule(_localctx, 210, RULE_dropServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2880;
			Match(SERVER_SYMBOL);
			State = 2882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,205,Context) ) {
			case 1:
				{
				State = 2881;
				ifExists();
				}
				break;
			}
			State = 2884;
			serverRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySqlParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySqlParser.CASCADE_SYMBOL, 0); }
		public DropTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTable(this);
		}
	}

	[RuleVersion(0)]
	public DropTableContext dropTable() {
		DropTableContext _localctx = new DropTableContext(Context, State);
		EnterRule(_localctx, 212, RULE_dropTable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2887;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TEMPORARY_SYMBOL) {
				{
				State = 2886;
				Match(TEMPORARY_SYMBOL);
				}
			}

			State = 2889;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2891;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,207,Context) ) {
			case 1:
				{
				State = 2890;
				ifExists();
				}
				break;
			}
			State = 2893;
			tableRefList();
			State = 2895;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2894;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTableSpaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext[] dropLogfileGroupOption() {
			return GetRuleContexts<DropLogfileGroupOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropLogfileGroupOptionContext dropLogfileGroupOption(int i) {
			return GetRuleContext<DropLogfileGroupOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public DropTableSpaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTableSpace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTableSpace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTableSpace(this);
		}
	}

	[RuleVersion(0)]
	public DropTableSpaceContext dropTableSpace() {
		DropTableSpaceContext _localctx = new DropTableSpaceContext(Context, State);
		EnterRule(_localctx, 214, RULE_dropTableSpace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2897;
			Match(TABLESPACE_SYMBOL);
			State = 2898;
			tablespaceRef();
			State = 2909;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
				{
				State = 2899;
				dropLogfileGroupOption();
				State = 2906;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL || _la==ENGINE_SYMBOL || _la==NO_WAIT_SYMBOL || _la==STORAGE_SYMBOL || _la==WAIT_SYMBOL) {
					{
					{
					State = 2901;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COMMA_SYMBOL) {
						{
						State = 2900;
						Match(COMMA_SYMBOL);
						}
					}

					State = 2903;
					dropLogfileGroupOption();
					}
					}
					State = 2908;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropTriggerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySqlParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropTriggerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropTrigger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropTrigger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropTrigger(this);
		}
	}

	[RuleVersion(0)]
	public DropTriggerContext dropTrigger() {
		DropTriggerContext _localctx = new DropTriggerContext(Context, State);
		EnterRule(_localctx, 216, RULE_dropTrigger);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2911;
			Match(TRIGGER_SYMBOL);
			State = 2913;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,212,Context) ) {
			case 1:
				{
				State = 2912;
				ifExists();
				}
				break;
			}
			State = 2915;
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropViewContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefListContext viewRefList() {
			return GetRuleContext<ViewRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySqlParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySqlParser.CASCADE_SYMBOL, 0); }
		public DropViewContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropView; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropView(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropView(this);
		}
	}

	[RuleVersion(0)]
	public DropViewContext dropView() {
		DropViewContext _localctx = new DropViewContext(Context, State);
		EnterRule(_localctx, 218, RULE_dropView);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2917;
			Match(VIEW_SYMBOL);
			State = 2919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,213,Context) ) {
			case 1:
				{
				State = 2918;
				ifExists();
				}
				break;
			}
			State = 2921;
			viewRefList();
			State = 2923;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) {
				{
				State = 2922;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropRoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropRoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropRole; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropRole(this);
		}
	}

	[RuleVersion(0)]
	public DropRoleContext dropRole() {
		DropRoleContext _localctx = new DropRoleContext(Context, State);
		EnterRule(_localctx, 220, RULE_dropRole);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2925;
			Match(ROLE_SYMBOL);
			State = 2927;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,215,Context) ) {
			case 1:
				{
				State = 2926;
				ifExists();
				}
				break;
			}
			State = 2929;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropSpatialReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySqlParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySqlParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropSpatialReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropSpatialReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropSpatialReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropSpatialReference(this);
		}
	}

	[RuleVersion(0)]
	public DropSpatialReferenceContext dropSpatialReference() {
		DropSpatialReferenceContext _localctx = new DropSpatialReferenceContext(Context, State);
		EnterRule(_localctx, 222, RULE_dropSpatialReference);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2931;
			Match(SPATIAL_SYMBOL);
			State = 2932;
			Match(REFERENCE_SYMBOL);
			State = 2933;
			Match(SYSTEM_SYMBOL);
			State = 2935;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,216,Context) ) {
			case 1:
				{
				State = 2934;
				ifExists();
				}
				break;
			}
			State = 2937;
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUndoTablespaceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySqlParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablespaceRefContext tablespaceRef() {
			return GetRuleContext<TablespaceRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UndoTableSpaceOptionsContext undoTableSpaceOptions() {
			return GetRuleContext<UndoTableSpaceOptionsContext>(0);
		}
		public DropUndoTablespaceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUndoTablespace; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropUndoTablespace(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropUndoTablespace(this);
		}
	}

	[RuleVersion(0)]
	public DropUndoTablespaceContext dropUndoTablespace() {
		DropUndoTablespaceContext _localctx = new DropUndoTablespaceContext(Context, State);
		EnterRule(_localctx, 224, RULE_dropUndoTablespace);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2939;
			Match(UNDO_SYMBOL);
			State = 2940;
			Match(TABLESPACE_SYMBOL);
			State = 2941;
			tablespaceRef();
			State = 2943;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ENGINE_SYMBOL || _la==STORAGE_SYMBOL) {
				{
				State = 2942;
				undoTableSpaceOptions();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RenamePairContext[] renamePair() {
			return GetRuleContexts<RenamePairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenamePairContext renamePair(int i) {
			return GetRuleContext<RenamePairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public RenameTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameTableStatement(this);
		}
	}

	[RuleVersion(0)]
	public RenameTableStatementContext renameTableStatement() {
		RenameTableStatementContext _localctx = new RenameTableStatementContext(Context, State);
		EnterRule(_localctx, 226, RULE_renameTableStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2945;
			Match(RENAME_SYMBOL);
			State = 2946;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 2947;
			renamePair();
			State = 2952;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 2948;
				Match(COMMA_SYMBOL);
				State = 2949;
				renamePair();
				}
				}
				State = 2954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenamePairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableNameContext tableName() {
			return GetRuleContext<TableNameContext>(0);
		}
		public RenamePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renamePair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenamePair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenamePair(this);
		}
	}

	[RuleVersion(0)]
	public RenamePairContext renamePair() {
		RenamePairContext _localctx = new RenamePairContext(Context, State);
		EnterRule(_localctx, 228, RULE_renamePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2955;
			tableRef();
			State = 2956;
			Match(TO_SYMBOL);
			State = 2957;
			tableName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TruncateTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		public TruncateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_truncateTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTruncateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTruncateTableStatement(this);
		}
	}

	[RuleVersion(0)]
	public TruncateTableStatementContext truncateTableStatement() {
		TruncateTableStatementContext _localctx = new TruncateTableStatementContext(Context, State);
		EnterRule(_localctx, 230, RULE_truncateTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2959;
			Match(TRUNCATE_SYMBOL);
			State = 2961;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,219,Context) ) {
			case 1:
				{
				State = 2960;
				Match(TABLE_SYMBOL);
				}
				break;
			}
			State = 2963;
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		public ImportStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterImportStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitImportStatement(this);
		}
	}

	[RuleVersion(0)]
	public ImportStatementContext importStatement() {
		ImportStatementContext _localctx = new ImportStatementContext(Context, State);
		EnterRule(_localctx, 232, RULE_importStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2965;
			Match(IMPORT_SYMBOL);
			State = 2966;
			Match(TABLE_SYMBOL);
			State = 2967;
			Match(FROM_SYMBOL);
			State = 2968;
			textStringLiteralList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CALL_SYMBOL() { return GetToken(MySqlParser.CALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public CallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCallStatement(this);
		}
	}

	[RuleVersion(0)]
	public CallStatementContext callStatement() {
		CallStatementContext _localctx = new CallStatementContext(Context, State);
		EnterRule(_localctx, 234, RULE_callStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 2970;
			Match(CALL_SYMBOL);
			State = 2971;
			procedureRef();
			State = 2977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 2972;
				Match(OPEN_PAR_SYMBOL);
				State = 2974;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,220,Context) ) {
				case 1:
					{
					State = 2973;
					exprList();
					}
					break;
				}
				State = 2976;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySqlParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementOptionContext[] deleteStatementOption() {
			return GetRuleContexts<DeleteStatementOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementOptionContext deleteStatementOption(int i) {
			return GetRuleContext<DeleteStatementOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDeleteContext partitionDelete() {
			return GetRuleContext<PartitionDeleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public DeleteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatement(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementContext deleteStatement() {
		DeleteStatementContext _localctx = new DeleteStatementContext(Context, State);
		EnterRule(_localctx, 236, RULE_deleteStatement);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 2980;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 2979;
				withClause();
				}
			}

			State = 2982;
			Match(DELETE_SYMBOL);
			State = 2986;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 2983;
					deleteStatementOption();
					}
					}
				}
				State = 2988;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,223,Context);
			}
			State = 3021;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,232,Context) ) {
			case 1:
				{
				State = 2989;
				Match(FROM_SYMBOL);
				State = 3013;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,230,Context) ) {
				case 1:
					{
					State = 2990;
					tableAliasRefList();
					State = 2991;
					Match(USING_SYMBOL);
					State = 2992;
					tableReferenceList();
					State = 2994;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 2993;
						whereClause();
						}
					}

					}
					break;
				case 2:
					{
					State = 2996;
					tableRef();
					State = 2999;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,225,Context) ) {
					case 1:
						{
						State = 2997;
						if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
						State = 2998;
						tableAlias();
						}
						break;
					}
					State = 3002;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PARTITION_SYMBOL) {
						{
						State = 3001;
						partitionDelete();
						}
					}

					State = 3005;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 3004;
						whereClause();
						}
					}

					State = 3008;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ORDER_SYMBOL) {
						{
						State = 3007;
						orderClause();
						}
					}

					State = 3011;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 3010;
						simpleLimitClause();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3015;
				tableAliasRefList();
				State = 3016;
				Match(FROM_SYMBOL);
				State = 3017;
				tableReferenceList();
				State = 3019;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WHERE_SYMBOL) {
					{
					State = 3018;
					whereClause();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public PartitionDeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDelete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDelete(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDelete(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDeleteContext partitionDelete() {
		PartitionDeleteContext _localctx = new PartitionDeleteContext(Context, State);
		EnterRule(_localctx, 238, RULE_partitionDelete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3023;
			Match(PARTITION_SYMBOL);
			State = 3024;
			Match(OPEN_PAR_SYMBOL);
			State = 3025;
			identifierList();
			State = 3026;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteStatementOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public DeleteStatementOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteStatementOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteStatementOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteStatementOption(this);
		}
	}

	[RuleVersion(0)]
	public DeleteStatementOptionContext deleteStatementOption() {
		DeleteStatementOptionContext _localctx = new DeleteStatementOptionContext(Context, State);
		EnterRule(_localctx, 240, RULE_deleteStatementOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3028;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==LOW_PRIORITY_SYMBOL || _la==QUICK_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DoStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		public DoStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_doStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDoStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDoStatement(this);
		}
	}

	[RuleVersion(0)]
	public DoStatementContext doStatement() {
		DoStatementContext _localctx = new DoStatementContext(Context, State);
		EnterRule(_localctx, 242, RULE_doStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3030;
			Match(DO_SYMBOL);
			State = 3031;
			selectItemList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySqlParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySqlParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerReadOrScanContext handlerReadOrScan() {
			return GetRuleContext<HandlerReadOrScanContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public HandlerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerStatement(this);
		}
	}

	[RuleVersion(0)]
	public HandlerStatementContext handlerStatement() {
		HandlerStatementContext _localctx = new HandlerStatementContext(Context, State);
		EnterRule(_localctx, 244, RULE_handlerStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3033;
			Match(HANDLER_SYMBOL);
			State = 3051;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,237,Context) ) {
			case 1:
				{
				State = 3034;
				tableRef();
				State = 3035;
				Match(OPEN_SYMBOL);
				State = 3037;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,233,Context) ) {
				case 1:
					{
					State = 3036;
					tableAlias();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3039;
				identifier();
				State = 3049;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLOSE_SYMBOL:
					{
					State = 3040;
					Match(CLOSE_SYMBOL);
					}
					break;
				case READ_SYMBOL:
					{
					State = 3041;
					Match(READ_SYMBOL);
					State = 3042;
					handlerReadOrScan();
					State = 3044;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==WHERE_SYMBOL) {
						{
						State = 3043;
						whereClause();
						}
					}

					State = 3047;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LIMIT_SYMBOL) {
						{
						State = 3046;
						limitClause();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerReadOrScanContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySqlParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySqlParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySqlParser.LESS_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySqlParser.GREATER_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySqlParser.LESS_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySqlParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		public HandlerReadOrScanContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerReadOrScan; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerReadOrScan(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerReadOrScan(this);
		}
	}

	[RuleVersion(0)]
	public HandlerReadOrScanContext handlerReadOrScan() {
		HandlerReadOrScanContext _localctx = new HandlerReadOrScanContext(Context, State);
		EnterRule(_localctx, 246, RULE_handlerReadOrScan);
		int _la;
		try {
			State = 3063;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,239,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3053;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==NEXT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3054;
				identifier();
				State = 3061;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case FIRST_SYMBOL:
				case LAST_SYMBOL:
				case NEXT_SYMBOL:
				case PREV_SYMBOL:
					{
					State = 3055;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NEXT_SYMBOL || _la==PREV_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case EQUAL_OPERATOR:
				case GREATER_OR_EQUAL_OPERATOR:
				case GREATER_THAN_OPERATOR:
				case LESS_OR_EQUAL_OPERATOR:
				case LESS_THAN_OPERATOR:
					{
					State = 3056;
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 7744L) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 3057;
					Match(OPEN_PAR_SYMBOL);
					State = 3058;
					@values();
					State = 3059;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySqlParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertLockOptionContext insertLockOption() {
			return GetRuleContext<InsertLockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertUpdateListContext insertUpdateList() {
			return GetRuleContext<InsertUpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesReferenceContext valuesReference() {
			return GetRuleContext<ValuesReferenceContext>(0);
		}
		public InsertStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertStatement(this);
		}
	}

	[RuleVersion(0)]
	public InsertStatementContext insertStatement() {
		InsertStatementContext _localctx = new InsertStatementContext(Context, State);
		EnterRule(_localctx, 248, RULE_insertStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3065;
			Match(INSERT_SYMBOL);
			State = 3067;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,240,Context) ) {
			case 1:
				{
				State = 3066;
				insertLockOption();
				}
				break;
			}
			State = 3070;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,241,Context) ) {
			case 1:
				{
				State = 3069;
				Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 3073;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,242,Context) ) {
			case 1:
				{
				State = 3072;
				Match(INTO_SYMBOL);
				}
				break;
			}
			State = 3075;
			tableRef();
			State = 3077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,243,Context) ) {
			case 1:
				{
				State = 3076;
				usePartition();
				}
				break;
			}
			State = 3089;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,246,Context) ) {
			case 1:
				{
				State = 3079;
				insertFromConstructor();
				State = 3081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,244,Context) ) {
				case 1:
					{
					State = 3080;
					valuesReference();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3083;
				Match(SET_SYMBOL);
				State = 3084;
				updateList();
				State = 3086;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,245,Context) ) {
				case 1:
					{
					State = 3085;
					valuesReference();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 3088;
				insertQueryExpression();
				}
				break;
			}
			State = 3092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ON_SYMBOL) {
				{
				State = 3091;
				insertUpdateList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertLockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySqlParser.DELAYED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySqlParser.HIGH_PRIORITY_SYMBOL, 0); }
		public InsertLockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertLockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertLockOption(this);
		}
	}

	[RuleVersion(0)]
	public InsertLockOptionContext insertLockOption() {
		InsertLockOptionContext _localctx = new InsertLockOptionContext(Context, State);
		EnterRule(_localctx, 250, RULE_insertLockOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3094;
			_la = TokenStream.LA(1);
			if ( !(_la==DELAYED_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertFromConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertValuesContext insertValues() {
			return GetRuleContext<InsertValuesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertFromConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertFromConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertFromConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertFromConstructor(this);
		}
	}

	[RuleVersion(0)]
	public InsertFromConstructorContext insertFromConstructor() {
		InsertFromConstructorContext _localctx = new InsertFromConstructorContext(Context, State);
		EnterRule(_localctx, 252, RULE_insertFromConstructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3096;
				Match(OPEN_PAR_SYMBOL);
				State = 3098;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,248,Context) ) {
				case 1:
					{
					State = 3097;
					fields();
					}
					break;
				}
				State = 3100;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			State = 3103;
			insertValues();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InsertIdentifierContext[] insertIdentifier() {
			return GetRuleContexts<InsertIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertIdentifierContext insertIdentifier(int i) {
			return GetRuleContext<InsertIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FieldsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fields; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFields(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFields(this);
		}
	}

	[RuleVersion(0)]
	public FieldsContext fields() {
		FieldsContext _localctx = new FieldsContext(Context, State);
		EnterRule(_localctx, 254, RULE_fields);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3105;
			insertIdentifier();
			State = 3110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3106;
				Match(COMMA_SYMBOL);
				State = 3107;
				insertIdentifier();
				}
				}
				State = 3112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ValueListContext valueList() {
			return GetRuleContext<ValueListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		public InsertValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertValues; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertValues(this);
		}
	}

	[RuleVersion(0)]
	public InsertValuesContext insertValues() {
		InsertValuesContext _localctx = new InsertValuesContext(Context, State);
		EnterRule(_localctx, 256, RULE_insertValues);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3113;
			_la = TokenStream.LA(1);
			if ( !(_la==VALUES_SYMBOL || _la==VALUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3114;
			valueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertQueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return GetRuleContext<QueryExpressionWithOptLockingClausesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldsContext fields() {
			return GetRuleContext<FieldsContext>(0);
		}
		public InsertQueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertQueryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public InsertQueryExpressionContext insertQueryExpression() {
		InsertQueryExpressionContext _localctx = new InsertQueryExpressionContext(Context, State);
		EnterRule(_localctx, 258, RULE_insertQueryExpression);
		try {
			State = 3126;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,253,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3116;
				queryExpression();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3117;
				queryExpressionParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3123;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,252,Context) ) {
				case 1:
					{
					State = 3118;
					Match(OPEN_PAR_SYMBOL);
					State = 3120;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,251,Context) ) {
					case 1:
						{
						State = 3119;
						fields();
						}
						break;
					}
					State = 3122;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				State = 3125;
				queryExpressionWithOptLockingClauses();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPEN_PAR_SYMBOL() { return GetTokens(MySqlParser.OPEN_PAR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL(int i) {
			return GetToken(MySqlParser.OPEN_PAR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CLOSE_PAR_SYMBOL() { return GetTokens(MySqlParser.CLOSE_PAR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL(int i) {
			return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext[] @values() {
			return GetRuleContexts<ValuesContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values(int i) {
			return GetRuleContext<ValuesContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValueList(this);
		}
	}

	[RuleVersion(0)]
	public ValueListContext valueList() {
		ValueListContext _localctx = new ValueListContext(Context, State);
		EnterRule(_localctx, 260, RULE_valueList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3128;
			Match(OPEN_PAR_SYMBOL);
			State = 3130;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,254,Context) ) {
			case 1:
				{
				State = 3129;
				@values();
				}
				break;
			}
			State = 3132;
			Match(CLOSE_PAR_SYMBOL);
			State = 3141;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3133;
					Match(COMMA_SYMBOL);
					State = 3134;
					Match(OPEN_PAR_SYMBOL);
					State = 3136;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,255,Context) ) {
					case 1:
						{
						State = 3135;
						@values();
						}
						break;
					}
					State = 3138;
					Match(CLOSE_PAR_SYMBOL);
					}
					}
				}
				State = 3143;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,256,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEFAULT_SYMBOL() { return GetTokens(MySqlParser.DEFAULT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL(int i) {
			return GetToken(MySqlParser.DEFAULT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ValuesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_values; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValues(this);
		}
	}

	[RuleVersion(0)]
	public ValuesContext @values() {
		ValuesContext _localctx = new ValuesContext(Context, State);
		EnterRule(_localctx, 262, RULE_values);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3146;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,257,Context) ) {
			case 1:
				{
				State = 3144;
				expr(0);
				}
				break;
			case 2:
				{
				State = 3145;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			State = 3155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3148;
				Match(COMMA_SYMBOL);
				State = 3151;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,258,Context) ) {
				case 1:
					{
					State = 3149;
					expr(0);
					}
					break;
				case 2:
					{
					State = 3150;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				}
				State = 3157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValuesReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public ValuesReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_valuesReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterValuesReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitValuesReference(this);
		}
	}

	[RuleVersion(0)]
	public ValuesReferenceContext valuesReference() {
		ValuesReferenceContext _localctx = new ValuesReferenceContext(Context, State);
		EnterRule(_localctx, 264, RULE_valuesReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3158;
			if (!( this.ServerVersion >= 80018)) throw new FailedPredicateException(this, " this.ServerVersion >= 80018");
			State = 3159;
			Match(AS_SYMBOL);
			State = 3160;
			identifier();
			State = 3162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3161;
				columnInternalRefList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertUpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySqlParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		public InsertUpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertUpdateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertUpdateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertUpdateList(this);
		}
	}

	[RuleVersion(0)]
	public InsertUpdateListContext insertUpdateList() {
		InsertUpdateListContext _localctx = new InsertUpdateListContext(Context, State);
		EnterRule(_localctx, 266, RULE_insertUpdateList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3164;
			Match(ON_SYMBOL);
			State = 3165;
			Match(DUPLICATE_SYMBOL);
			State = 3166;
			Match(KEY_SYMBOL);
			State = 3167;
			Match(UPDATE_SYMBOL);
			State = 3168;
			updateList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySqlParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataOrXmlContext dataOrXml() {
			return GetRuleContext<DataOrXmlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataFileTailContext loadDataFileTail() {
			return GetRuleContext<LoadDataFileTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataLockContext loadDataLock() {
			return GetRuleContext<LoadDataLockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadFromContext loadFrom() {
			return GetRuleContext<LoadFromContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadSourceTypeContext loadSourceType() {
			return GetRuleContext<LoadSourceTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceCountContext sourceCount() {
			return GetRuleContext<SourceCountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceOrderContext sourceOrder() {
			return GetRuleContext<SourceOrderContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
			return GetRuleContext<XmlRowsIdentifiedByContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadParallelContext loadParallel() {
			return GetRuleContext<LoadParallelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadMemoryContext loadMemory() {
			return GetRuleContext<LoadMemoryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LoadAlgorithmContext loadAlgorithm() {
			return GetRuleContext<LoadAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public LoadStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadStatement(this);
		}
	}

	[RuleVersion(0)]
	public LoadStatementContext loadStatement() {
		LoadStatementContext _localctx = new LoadStatementContext(Context, State);
		EnterRule(_localctx, 268, RULE_loadStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3170;
			Match(LOAD_SYMBOL);
			State = 3171;
			dataOrXml();
			State = 3173;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,261,Context) ) {
			case 1:
				{
				State = 3172;
				loadDataLock();
				}
				break;
			}
			State = 3176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,262,Context) ) {
			case 1:
				{
				State = 3175;
				loadFrom();
				}
				break;
			}
			State = 3179;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,263,Context) ) {
			case 1:
				{
				State = 3178;
				Match(LOCAL_SYMBOL);
				}
				break;
			}
			State = 3182;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,264,Context) ) {
			case 1:
				{
				State = 3181;
				loadSourceType();
				}
				break;
			}
			State = 3184;
			textStringLiteral();
			State = 3186;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,265,Context) ) {
			case 1:
				{
				State = 3185;
				sourceCount();
				}
				break;
			}
			State = 3189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,266,Context) ) {
			case 1:
				{
				State = 3188;
				sourceOrder();
				}
				break;
			}
			State = 3192;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) {
				{
				State = 3191;
				_la = TokenStream.LA(1);
				if ( !(_la==IGNORE_SYMBOL || _la==REPLACE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 3194;
			Match(INTO_SYMBOL);
			State = 3195;
			Match(TABLE_SYMBOL);
			State = 3196;
			tableRef();
			State = 3198;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,268,Context) ) {
			case 1:
				{
				State = 3197;
				usePartition();
				}
				break;
			}
			State = 3201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,269,Context) ) {
			case 1:
				{
				State = 3200;
				charsetClause();
				}
				break;
			}
			State = 3204;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,270,Context) ) {
			case 1:
				{
				State = 3203;
				xmlRowsIdentifiedBy();
				}
				break;
			}
			State = 3207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,271,Context) ) {
			case 1:
				{
				State = 3206;
				fieldsClause();
				}
				break;
			}
			State = 3210;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,272,Context) ) {
			case 1:
				{
				State = 3209;
				linesClause();
				}
				break;
			}
			State = 3212;
			loadDataFileTail();
			State = 3214;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,273,Context) ) {
			case 1:
				{
				State = 3213;
				loadParallel();
				}
				break;
			}
			State = 3217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,274,Context) ) {
			case 1:
				{
				State = 3216;
				loadMemory();
				}
				break;
			}
			State = 3220;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,275,Context) ) {
			case 1:
				{
				State = 3219;
				loadAlgorithm();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataOrXmlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySqlParser.XML_SYMBOL, 0); }
		public DataOrXmlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataOrXml; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataOrXml(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataOrXml(this);
		}
	}

	[RuleVersion(0)]
	public DataOrXmlContext dataOrXml() {
		DataOrXmlContext _localctx = new DataOrXmlContext(Context, State);
		EnterRule(_localctx, 270, RULE_dataOrXml);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3222;
			_la = TokenStream.LA(1);
			if ( !(_la==DATA_SYMBOL || _la==XML_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataLockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySqlParser.CONCURRENT_SYMBOL, 0); }
		public LoadDataLockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataLock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadDataLock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadDataLock(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataLockContext loadDataLock() {
		LoadDataLockContext _localctx = new LoadDataLockContext(Context, State);
		EnterRule(_localctx, 272, RULE_loadDataLock);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3224;
			_la = TokenStream.LA(1);
			if ( !(_la==CONCURRENT_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadFromContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		public LoadFromContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadFrom; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadFrom(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadFrom(this);
		}
	}

	[RuleVersion(0)]
	public LoadFromContext loadFrom() {
		LoadFromContext _localctx = new LoadFromContext(Context, State);
		EnterRule(_localctx, 274, RULE_loadFrom);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3226;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 3227;
			Match(FROM_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadSourceTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INFILE_SYMBOL() { return GetToken(MySqlParser.INFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode URL_SYMBOL() { return GetToken(MySqlParser.URL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S3_SYMBOL() { return GetToken(MySqlParser.S3_SYMBOL, 0); }
		public LoadSourceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadSourceType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadSourceType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadSourceType(this);
		}
	}

	[RuleVersion(0)]
	public LoadSourceTypeContext loadSourceType() {
		LoadSourceTypeContext _localctx = new LoadSourceTypeContext(Context, State);
		EnterRule(_localctx, 276, RULE_loadSourceType);
		int _la;
		try {
			State = 3232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,276,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3229;
				Match(INFILE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3230;
				if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
				State = 3231;
				_la = TokenStream.LA(1);
				if ( !(_la==URL_SYMBOL || _la==S3_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySqlParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public SourceCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceCount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceCount(this);
		}
	}

	[RuleVersion(0)]
	public SourceCountContext sourceCount() {
		SourceCountContext _localctx = new SourceCountContext(Context, State);
		EnterRule(_localctx, 278, RULE_sourceCount);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3234;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 3240;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,277,Context) ) {
			case 1:
				{
				State = 3235;
				Match(COUNT_SYMBOL);
				State = 3236;
				Match(INT_NUMBER);
				}
				break;
			case 2:
				{
				State = 3237;
				pureIdentifier();
				State = 3238;
				Match(INT_NUMBER);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceOrderContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySqlParser.ORDER_SYMBOL, 0); }
		public SourceOrderContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceOrder; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceOrder(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceOrder(this);
		}
	}

	[RuleVersion(0)]
	public SourceOrderContext sourceOrder() {
		SourceOrderContext _localctx = new SourceOrderContext(Context, State);
		EnterRule(_localctx, 280, RULE_sourceOrder);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3242;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 3243;
			Match(IN_SYMBOL);
			State = 3244;
			Match(PRIMARY_SYMBOL);
			State = 3245;
			Match(KEY_SYMBOL);
			State = 3246;
			Match(ORDER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XmlRowsIdentifiedByContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySqlParser.ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public XmlRowsIdentifiedByContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xmlRowsIdentifiedBy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXmlRowsIdentifiedBy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXmlRowsIdentifiedBy(this);
		}
	}

	[RuleVersion(0)]
	public XmlRowsIdentifiedByContext xmlRowsIdentifiedBy() {
		XmlRowsIdentifiedByContext _localctx = new XmlRowsIdentifiedByContext(Context, State);
		EnterRule(_localctx, 282, RULE_xmlRowsIdentifiedBy);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3248;
			Match(ROWS_SYMBOL);
			State = 3249;
			Match(IDENTIFIED_SYMBOL);
			State = 3250;
			Match(BY_SYMBOL);
			State = 3251;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LoadDataFileTargetListContext loadDataFileTargetList() {
			return GetRuleContext<LoadDataFileTargetListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES_SYMBOL() { return GetToken(MySqlParser.LINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySqlParser.ROWS_SYMBOL, 0); }
		public LoadDataFileTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTail(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTailContext loadDataFileTail() {
		LoadDataFileTailContext _localctx = new LoadDataFileTailContext(Context, State);
		EnterRule(_localctx, 284, RULE_loadDataFileTail);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,278,Context) ) {
			case 1:
				{
				State = 3253;
				Match(IGNORE_SYMBOL);
				State = 3254;
				Match(INT_NUMBER);
				State = 3255;
				_la = TokenStream.LA(1);
				if ( !(_la==LINES_SYMBOL || _la==ROWS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3259;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,279,Context) ) {
			case 1:
				{
				State = 3258;
				loadDataFileTargetList();
				}
				break;
			}
			State = 3263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,280,Context) ) {
			case 1:
				{
				State = 3261;
				Match(SET_SYMBOL);
				State = 3262;
				updateList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadDataFileTargetListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldOrVariableListContext fieldOrVariableList() {
			return GetRuleContext<FieldOrVariableListContext>(0);
		}
		public LoadDataFileTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadDataFileTargetList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadDataFileTargetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadDataFileTargetList(this);
		}
	}

	[RuleVersion(0)]
	public LoadDataFileTargetListContext loadDataFileTargetList() {
		LoadDataFileTargetListContext _localctx = new LoadDataFileTargetListContext(Context, State);
		EnterRule(_localctx, 286, RULE_loadDataFileTargetList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3265;
			Match(OPEN_PAR_SYMBOL);
			State = 3267;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,281,Context) ) {
			case 1:
				{
				State = 3266;
				fieldOrVariableList();
				}
				break;
			}
			State = 3269;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOrVariableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext[] columnRef() {
			return GetRuleContexts<ColumnRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef(int i) {
			return GetRuleContext<ColumnRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_SIGN_SYMBOL() { return GetTokens(MySqlParser.AT_SIGN_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL(int i) {
			return GetToken(MySqlParser.AT_SIGN_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER_SIGN_SYMBOL() { return GetTokens(MySqlParser.NUMBER_SIGN_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN_SYMBOL(int i) {
			return GetToken(MySqlParser.NUMBER_SIGN_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AT_TEXT_SUFFIX() { return GetTokens(MySqlParser.AT_TEXT_SUFFIX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX(int i) {
			return GetToken(MySqlParser.AT_TEXT_SUFFIX, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NUMBER_TEXT_SUFFIX() { return GetTokens(MySqlParser.NUMBER_TEXT_SUFFIX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_TEXT_SUFFIX(int i) {
			return GetToken(MySqlParser.NUMBER_TEXT_SUFFIX, i);
		}
		public FieldOrVariableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOrVariableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldOrVariableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldOrVariableList(this);
		}
	}

	[RuleVersion(0)]
	public FieldOrVariableListContext fieldOrVariableList() {
		FieldOrVariableListContext _localctx = new FieldOrVariableListContext(Context, State);
		EnterRule(_localctx, 288, RULE_fieldOrVariableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3276;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,282,Context) ) {
			case 1:
				{
				State = 3271;
				columnRef();
				}
				break;
			case 2:
				{
				State = 3272;
				Match(AT_SIGN_SYMBOL);
				State = 3273;
				textOrIdentifier();
				}
				break;
			case 3:
				{
				State = 3274;
				Match(NUMBER_SIGN_SYMBOL);
				State = 3275;
				textOrIdentifier();
				}
				break;
			}
			State = 3290;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3278;
				Match(COMMA_SYMBOL);
				State = 3286;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,283,Context) ) {
				case 1:
					{
					State = 3279;
					columnRef();
					}
					break;
				case 2:
					{
					State = 3280;
					Match(AT_SIGN_SYMBOL);
					State = 3281;
					textOrIdentifier();
					}
					break;
				case 3:
					{
					State = 3282;
					Match(AT_TEXT_SUFFIX);
					}
					break;
				case 4:
					{
					State = 3283;
					Match(NUMBER_SIGN_SYMBOL);
					State = 3284;
					textOrIdentifier();
					}
					break;
				case 5:
					{
					State = 3285;
					Match(NUMBER_TEXT_SUFFIX);
					}
					break;
				}
				}
				}
				State = 3292;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK_SYMBOL() { return GetToken(MySqlParser.BULK_SYMBOL, 0); }
		public LoadAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public LoadAlgorithmContext loadAlgorithm() {
		LoadAlgorithmContext _localctx = new LoadAlgorithmContext(Context, State);
		EnterRule(_localctx, 290, RULE_loadAlgorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3293;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 3294;
			Match(ALGORITHM_SYMBOL);
			State = 3295;
			Match(EQUAL_OPERATOR);
			State = 3296;
			Match(BULK_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadParallelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL_SYMBOL() { return GetToken(MySqlParser.PARALLEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		public LoadParallelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadParallel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadParallel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadParallel(this);
		}
	}

	[RuleVersion(0)]
	public LoadParallelContext loadParallel() {
		LoadParallelContext _localctx = new LoadParallelContext(Context, State);
		EnterRule(_localctx, 292, RULE_loadParallel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3298;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 3299;
			Match(PARALLEL_SYMBOL);
			State = 3300;
			Match(EQUAL_OPERATOR);
			State = 3301;
			Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoadMemoryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SizeNumberContext sizeNumber() {
			return GetRuleContext<SizeNumberContext>(0);
		}
		public LoadMemoryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loadMemory; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoadMemory(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoadMemory(this);
		}
	}

	[RuleVersion(0)]
	public LoadMemoryContext loadMemory() {
		LoadMemoryContext _localctx = new LoadMemoryContext(Context, State);
		EnterRule(_localctx, 294, RULE_loadMemory);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3303;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 3304;
			Match(MEMORY_SYMBOL);
			State = 3305;
			Match(EQUAL_OPERATOR);
			State = 3306;
			sizeNumber();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplaceStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertFromConstructorContext insertFromConstructor() {
			return GetRuleContext<InsertFromConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertQueryExpressionContext insertQueryExpression() {
			return GetRuleContext<InsertQueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAYED_SYMBOL() { return GetToken(MySqlParser.DELAYED_SYMBOL, 0); }
		public ReplaceStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replaceStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplaceStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplaceStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReplaceStatementContext replaceStatement() {
		ReplaceStatementContext _localctx = new ReplaceStatementContext(Context, State);
		EnterRule(_localctx, 296, RULE_replaceStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3308;
			Match(REPLACE_SYMBOL);
			State = 3310;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,285,Context) ) {
			case 1:
				{
				State = 3309;
				_la = TokenStream.LA(1);
				if ( !(_la==DELAYED_SYMBOL || _la==LOW_PRIORITY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 3313;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,286,Context) ) {
			case 1:
				{
				State = 3312;
				Match(INTO_SYMBOL);
				}
				break;
			}
			State = 3315;
			tableRef();
			State = 3317;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,287,Context) ) {
			case 1:
				{
				State = 3316;
				usePartition();
				}
				break;
			}
			State = 3323;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,288,Context) ) {
			case 1:
				{
				State = 3319;
				insertFromConstructor();
				}
				break;
			case 2:
				{
				State = 3320;
				Match(SET_SYMBOL);
				State = 3321;
				updateList();
				}
				break;
			case 3:
				{
				State = 3322;
				insertQueryExpression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		public SelectStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectStatement(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementContext selectStatement() {
		SelectStatementContext _localctx = new SelectStatementContext(Context, State);
		EnterRule(_localctx, 298, RULE_selectStatement);
		try {
			State = 3330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,290,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3325;
				queryExpression();
				State = 3327;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,289,Context) ) {
				case 1:
					{
					State = 3326;
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3329;
				selectStatementWithInto();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectStatementWithIntoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementWithIntoContext selectStatementWithInto() {
			return GetRuleContext<SelectStatementWithIntoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionContext queryExpression() {
			return GetRuleContext<QueryExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseListContext lockingClauseList() {
			return GetRuleContext<LockingClauseListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SelectStatementWithIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectStatementWithInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectStatementWithInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectStatementWithInto(this);
		}
	}

	[RuleVersion(0)]
	public SelectStatementWithIntoContext selectStatementWithInto() {
		SelectStatementWithIntoContext _localctx = new SelectStatementWithIntoContext(Context, State);
		EnterRule(_localctx, 300, RULE_selectStatementWithInto);
		try {
			State = 3349;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,292,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3332;
				Match(OPEN_PAR_SYMBOL);
				State = 3333;
				selectStatementWithInto();
				State = 3334;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3336;
				queryExpression();
				State = 3337;
				intoClause();
				State = 3339;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,291,Context) ) {
				case 1:
					{
					State = 3338;
					lockingClauseList();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3341;
				queryExpression();
				State = 3342;
				lockingClauseList();
				State = 3343;
				intoClause();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3345;
				if (!(this.IsSelectStatementWithInto())) throw new FailedPredicateException(this, "this.IsSelectStatementWithInto()");
				State = 3346;
				queryExpressionParens();
				State = 3347;
				intoClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionBodyContext queryExpressionBody() {
			return GetRuleContext<QueryExpressionBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public QueryExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpression(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionContext queryExpression() {
		QueryExpressionContext _localctx = new QueryExpressionContext(Context, State);
		EnterRule(_localctx, 302, RULE_queryExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3352;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,293,Context) ) {
			case 1:
				{
				State = 3351;
				withClause();
				}
				break;
			}
			State = 3354;
			queryExpressionBody();
			State = 3356;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,294,Context) ) {
			case 1:
				{
				State = 3355;
				orderClause();
				}
				break;
			}
			State = 3359;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,295,Context) ) {
			case 1:
				{
				State = 3358;
				limitClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryPrimaryContext queryPrimary() {
			return GetRuleContext<QueryPrimaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionBodyContext[] queryExpressionBody() {
			return GetRuleContexts<QueryExpressionBodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionBodyContext queryExpressionBody(int i) {
			return GetRuleContext<QueryExpressionBodyContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNION_SYMBOL() { return GetTokens(MySqlParser.UNION_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_SYMBOL(int i) {
			return GetToken(MySqlParser.UNION_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] EXCEPT_SYMBOL() { return GetTokens(MySqlParser.EXCEPT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_SYMBOL(int i) {
			return GetToken(MySqlParser.EXCEPT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INTERSECT_SYMBOL() { return GetTokens(MySqlParser.INTERSECT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERSECT_SYMBOL(int i) {
			return GetToken(MySqlParser.INTERSECT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOptionContext[] unionOption() {
			return GetRuleContexts<UnionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnionOptionContext unionOption(int i) {
			return GetRuleContext<UnionOptionContext>(i);
		}
		public QueryExpressionBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionBody(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionBodyContext queryExpressionBody() {
		QueryExpressionBodyContext _localctx = new QueryExpressionBodyContext(Context, State);
		EnterRule(_localctx, 304, RULE_queryExpressionBody);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3363;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,296,Context) ) {
			case 1:
				{
				State = 3361;
				queryPrimary();
				}
				break;
			case 2:
				{
				State = 3362;
				queryExpressionParens();
				}
				break;
			}
			State = 3376;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3368;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,297,Context) ) {
					case 1:
						{
						State = 3365;
						Match(UNION_SYMBOL);
						}
						break;
					case 2:
						{
						State = 3366;
						if (!(this.ServerVersion >= 80031)) throw new FailedPredicateException(this, "this.ServerVersion >= 80031");
						State = 3367;
						_la = TokenStream.LA(1);
						if ( !(_la==EXCEPT_SYMBOL || _la==INTERSECT_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					State = 3371;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,298,Context) ) {
					case 1:
						{
						State = 3370;
						unionOption();
						}
						break;
					}
					State = 3373;
					queryExpressionBody();
					}
					}
				}
				State = 3378;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,299,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryExpressionParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionWithOptLockingClausesContext queryExpressionWithOptLockingClauses() {
			return GetRuleContext<QueryExpressionWithOptLockingClausesContext>(0);
		}
		public QueryExpressionParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryExpressionParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryExpressionParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryExpressionParens(this);
		}
	}

	[RuleVersion(0)]
	public QueryExpressionParensContext queryExpressionParens() {
		QueryExpressionParensContext _localctx = new QueryExpressionParensContext(Context, State);
		EnterRule(_localctx, 306, RULE_queryExpressionParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3379;
			Match(OPEN_PAR_SYMBOL);
			State = 3382;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,300,Context) ) {
			case 1:
				{
				State = 3380;
				queryExpressionParens();
				}
				break;
			case 2:
				{
				State = 3381;
				queryExpressionWithOptLockingClauses();
				}
				break;
			}
			State = 3384;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QueryPrimaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecificationContext querySpecification() {
			return GetRuleContext<QuerySpecificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableValueConstructorContext tableValueConstructor() {
			return GetRuleContext<TableValueConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplicitTableContext explicitTable() {
			return GetRuleContext<ExplicitTableContext>(0);
		}
		public QueryPrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_queryPrimary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQueryPrimary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQueryPrimary(this);
		}
	}

	[RuleVersion(0)]
	public QueryPrimaryContext queryPrimary() {
		QueryPrimaryContext _localctx = new QueryPrimaryContext(Context, State);
		EnterRule(_localctx, 308, RULE_queryPrimary);
		try {
			State = 3391;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,301,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3386;
				querySpecification();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3387;
				if (!(this.ServerVersion >= 80019)) throw new FailedPredicateException(this, "this.ServerVersion >= 80019");
				State = 3388;
				tableValueConstructor();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3389;
				if (!(this.ServerVersion >= 80019)) throw new FailedPredicateException(this, "this.ServerVersion >= 80019");
				State = 3390;
				explicitTable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_SYMBOL() { return GetToken(MySqlParser.SELECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemListContext selectItemList() {
			return GetRuleContext<SelectItemListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOptionContext[] selectOption() {
			return GetRuleContexts<SelectOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectOptionContext selectOption(int i) {
			return GetRuleContext<SelectOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntoClauseContext intoClause() {
			return GetRuleContext<IntoClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FromClauseContext fromClause() {
			return GetRuleContext<FromClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupByClauseContext groupByClause() {
			return GetRuleContext<GroupByClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HavingClauseContext havingClause() {
			return GetRuleContext<HavingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowClauseContext windowClause() {
			return GetRuleContext<WindowClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifyClauseContext qualifyClause() {
			return GetRuleContext<QualifyClauseContext>(0);
		}
		public QuerySpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecification(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecificationContext querySpecification() {
		QuerySpecificationContext _localctx = new QuerySpecificationContext(Context, State);
		EnterRule(_localctx, 310, RULE_querySpecification);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3393;
			Match(SELECT_SYMBOL);
			State = 3397;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3394;
					selectOption();
					}
					}
				}
				State = 3399;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,302,Context);
			}
			State = 3400;
			selectItemList();
			State = 3402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,303,Context) ) {
			case 1:
				{
				State = 3401;
				intoClause();
				}
				break;
			}
			State = 3405;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,304,Context) ) {
			case 1:
				{
				State = 3404;
				fromClause();
				}
				break;
			}
			State = 3408;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,305,Context) ) {
			case 1:
				{
				State = 3407;
				whereClause();
				}
				break;
			}
			State = 3411;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,306,Context) ) {
			case 1:
				{
				State = 3410;
				groupByClause();
				}
				break;
			}
			State = 3414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,307,Context) ) {
			case 1:
				{
				State = 3413;
				havingClause();
				}
				break;
			}
			State = 3417;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,308,Context) ) {
			case 1:
				{
				State = 3416;
				windowClause();
				}
				break;
			}
			State = 3420;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,309,Context) ) {
			case 1:
				{
				State = 3419;
				qualifyClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubqueryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QueryExpressionParensContext queryExpressionParens() {
			return GetRuleContext<QueryExpressionParensContext>(0);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subquery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubquery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubquery(this);
		}
	}

	[RuleVersion(0)]
	public SubqueryContext subquery() {
		SubqueryContext _localctx = new SubqueryContext(Context, State);
		EnterRule(_localctx, 312, RULE_subquery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3422;
			queryExpressionParens();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuerySpecOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySqlParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySqlParser.STRAIGHT_JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HIGH_PRIORITY_SYMBOL() { return GetToken(MySqlParser.HIGH_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_SMALL_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_SMALL_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BIG_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_BIG_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_CALC_FOUND_ROWS_SYMBOL() { return GetToken(MySqlParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0); }
		public QuerySpecOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_querySpecOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQuerySpecOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQuerySpecOption(this);
		}
	}

	[RuleVersion(0)]
	public QuerySpecOptionContext querySpecOption() {
		QuerySpecOptionContext _localctx = new QuerySpecOptionContext(Context, State);
		EnterRule(_localctx, 314, RULE_querySpecOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3424;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL || _la==HIGH_PRIORITY_SYMBOL || ((((_la - 543)) & ~0x3f) == 0 && ((1L << (_la - 543)) & 8388631L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySqlParser.LIMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionsContext limitOptions() {
			return GetRuleContext<LimitOptionsContext>(0);
		}
		public LimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitClause(this);
		}
	}

	[RuleVersion(0)]
	public LimitClauseContext limitClause() {
		LimitClauseContext _localctx = new LimitClauseContext(Context, State);
		EnterRule(_localctx, 316, RULE_limitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3426;
			Match(LIMIT_SYMBOL);
			State = 3427;
			limitOptions();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleLimitClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIMIT_SYMBOL() { return GetToken(MySqlParser.LIMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext limitOption() {
			return GetRuleContext<LimitOptionContext>(0);
		}
		public SimpleLimitClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleLimitClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleLimitClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleLimitClause(this);
		}
	}

	[RuleVersion(0)]
	public SimpleLimitClauseContext simpleLimitClause() {
		SimpleLimitClauseContext _localctx = new SimpleLimitClauseContext(Context, State);
		EnterRule(_localctx, 318, RULE_simpleLimitClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3429;
			Match(LIMIT_SYMBOL);
			State = 3430;
			limitOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext[] limitOption() {
			return GetRuleContexts<LimitOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitOptionContext limitOption(int i) {
			return GetRuleContext<LimitOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySqlParser.OFFSET_SYMBOL, 0); }
		public LimitOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitOptions(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionsContext limitOptions() {
		LimitOptionsContext _localctx = new LimitOptionsContext(Context, State);
		EnterRule(_localctx, 320, RULE_limitOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3432;
			limitOption();
			State = 3435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,310,Context) ) {
			case 1:
				{
				State = 3433;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMA_SYMBOL || _la==OFFSET_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3434;
				limitOption();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LimitOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		public LimitOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_limitOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLimitOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLimitOption(this);
		}
	}

	[RuleVersion(0)]
	public LimitOptionContext limitOption() {
		LimitOptionContext _localctx = new LimitOptionContext(Context, State);
		EnterRule(_localctx, 322, RULE_limitOption);
		int _la;
		try {
			State = 3439;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,311,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3437;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3438;
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 17592186044472L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntoClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTFILE_SYMBOL() { return GetToken(MySqlParser.OUTFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySqlParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext[] textOrIdentifier() {
			return GetRuleContexts<TextOrIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier(int i) {
			return GetRuleContext<TextOrIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldsClauseContext fieldsClause() {
			return GetRuleContext<FieldsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LinesClauseContext linesClause() {
			return GetRuleContext<LinesClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IntoClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intoClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntoClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntoClause(this);
		}
	}

	[RuleVersion(0)]
	public IntoClauseContext intoClause() {
		IntoClauseContext _localctx = new IntoClauseContext(Context, State);
		EnterRule(_localctx, 324, RULE_intoClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3441;
			Match(INTO_SYMBOL);
			State = 3469;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,318,Context) ) {
			case 1:
				{
				State = 3442;
				Match(OUTFILE_SYMBOL);
				State = 3443;
				textStringLiteral();
				State = 3445;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,312,Context) ) {
				case 1:
					{
					State = 3444;
					charsetClause();
					}
					break;
				}
				State = 3448;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,313,Context) ) {
				case 1:
					{
					State = 3447;
					fieldsClause();
					}
					break;
				}
				State = 3451;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,314,Context) ) {
				case 1:
					{
					State = 3450;
					linesClause();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 3453;
				Match(DUMPFILE_SYMBOL);
				State = 3454;
				textStringLiteral();
				}
				break;
			case 3:
				{
				State = 3457;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,315,Context) ) {
				case 1:
					{
					State = 3455;
					textOrIdentifier();
					}
					break;
				case 2:
					{
					State = 3456;
					userVariable();
					}
					break;
				}
				State = 3466;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,317,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 3459;
						Match(COMMA_SYMBOL);
						State = 3462;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,316,Context) ) {
						case 1:
							{
							State = 3460;
							textOrIdentifier();
							}
							break;
						case 2:
							{
							State = 3461;
							userVariable();
							}
							break;
						}
						}
						}
					}
					State = 3468;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,317,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureAnalyseClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySqlParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySqlParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public ProcedureAnalyseClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureAnalyseClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureAnalyseClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureAnalyseClause(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureAnalyseClauseContext procedureAnalyseClause() {
		ProcedureAnalyseClauseContext _localctx = new ProcedureAnalyseClauseContext(Context, State);
		EnterRule(_localctx, 326, RULE_procedureAnalyseClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3471;
			Match(PROCEDURE_SYMBOL);
			State = 3472;
			Match(OPEN_PAR_SYMBOL);
			State = 3478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_NUMBER) {
				{
				State = 3473;
				Match(INT_NUMBER);
				State = 3476;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 3474;
					Match(COMMA_SYMBOL);
					State = 3475;
					Match(INT_NUMBER);
					}
				}

				}
			}

			State = 3480;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HavingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HAVING_SYMBOL() { return GetToken(MySqlParser.HAVING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public HavingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_havingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHavingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHavingClause(this);
		}
	}

	[RuleVersion(0)]
	public HavingClauseContext havingClause() {
		HavingClauseContext _localctx = new HavingClauseContext(Context, State);
		EnterRule(_localctx, 328, RULE_havingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3482;
			Match(HAVING_SYMBOL);
			State = 3483;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifyClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUALIFY_SYMBOL() { return GetToken(MySqlParser.QUALIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public QualifyClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifyClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQualifyClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQualifyClause(this);
		}
	}

	[RuleVersion(0)]
	public QualifyClauseContext qualifyClause() {
		QualifyClauseContext _localctx = new QualifyClauseContext(Context, State);
		EnterRule(_localctx, 330, RULE_qualifyClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3485;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 3486;
			Match(QUALIFY_SYMBOL);
			State = 3487;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WINDOW_SYMBOL() { return GetToken(MySqlParser.WINDOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowDefinitionContext[] windowDefinition() {
			return GetRuleContexts<WindowDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowDefinitionContext windowDefinition(int i) {
			return GetRuleContext<WindowDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public WindowClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowClauseContext windowClause() {
		WindowClauseContext _localctx = new WindowClauseContext(Context, State);
		EnterRule(_localctx, 332, RULE_windowClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3489;
			Match(WINDOW_SYMBOL);
			State = 3490;
			windowDefinition();
			State = 3495;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3491;
					Match(COMMA_SYMBOL);
					State = 3492;
					windowDefinition();
					}
					}
				}
				State = 3497;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,321,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowDefinition(this);
		}
	}

	[RuleVersion(0)]
	public WindowDefinitionContext windowDefinition() {
		WindowDefinitionContext _localctx = new WindowDefinitionContext(Context, State);
		EnterRule(_localctx, 334, RULE_windowDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3498;
			windowName();
			State = 3499;
			Match(AS_SYMBOL);
			State = 3500;
			windowSpec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecDetailsContext windowSpecDetails() {
			return GetRuleContext<WindowSpecDetailsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public WindowSpecContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpec; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowSpec(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowSpec(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecContext windowSpec() {
		WindowSpecContext _localctx = new WindowSpecContext(Context, State);
		EnterRule(_localctx, 336, RULE_windowSpec);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3502;
			Match(OPEN_PAR_SYMBOL);
			State = 3503;
			windowSpecDetails();
			State = 3504;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowSpecDetailsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameClauseContext windowFrameClause() {
			return GetRuleContext<WindowFrameClauseContext>(0);
		}
		public WindowSpecDetailsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowSpecDetails; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowSpecDetails(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowSpecDetails(this);
		}
	}

	[RuleVersion(0)]
	public WindowSpecDetailsContext windowSpecDetails() {
		WindowSpecDetailsContext _localctx = new WindowSpecDetailsContext(Context, State);
		EnterRule(_localctx, 338, RULE_windowSpecDetails);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3507;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,322,Context) ) {
			case 1:
				{
				State = 3506;
				windowName();
				}
				break;
			}
			State = 3512;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARTITION_SYMBOL) {
				{
				State = 3509;
				Match(PARTITION_SYMBOL);
				State = 3510;
				Match(BY_SYMBOL);
				State = 3511;
				orderList();
				}
			}

			State = 3515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3514;
				orderClause();
				}
			}

			State = 3518;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) {
				{
				State = 3517;
				windowFrameClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameUnitsContext windowFrameUnits() {
			return GetRuleContext<WindowFrameUnitsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameExtentContext windowFrameExtent() {
			return GetRuleContext<WindowFrameExtentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameExclusionContext windowFrameExclusion() {
			return GetRuleContext<WindowFrameExclusionContext>(0);
		}
		public WindowFrameClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameClauseContext windowFrameClause() {
		WindowFrameClauseContext _localctx = new WindowFrameClauseContext(Context, State);
		EnterRule(_localctx, 340, RULE_windowFrameClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3520;
			windowFrameUnits();
			State = 3521;
			windowFrameExtent();
			State = 3523;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXCLUDE_SYMBOL) {
				{
				State = 3522;
				windowFrameExclusion();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameUnitsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROWS_SYMBOL() { return GetToken(MySqlParser.ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_SYMBOL() { return GetToken(MySqlParser.RANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPS_SYMBOL() { return GetToken(MySqlParser.GROUPS_SYMBOL, 0); }
		public WindowFrameUnitsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameUnits; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameUnits(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameUnits(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameUnitsContext windowFrameUnits() {
		WindowFrameUnitsContext _localctx = new WindowFrameUnitsContext(Context, State);
		EnterRule(_localctx, 342, RULE_windowFrameUnits);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3525;
			_la = TokenStream.LA(1);
			if ( !(_la==RANGE_SYMBOL || _la==ROWS_SYMBOL || _la==GROUPS_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExtentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBetweenContext windowFrameBetween() {
			return GetRuleContext<WindowFrameBetweenContext>(0);
		}
		public WindowFrameExtentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExtent; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExtent(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExtent(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExtentContext windowFrameExtent() {
		WindowFrameExtentContext _localctx = new WindowFrameExtentContext(Context, State);
		EnterRule(_localctx, 344, RULE_windowFrameExtent);
		try {
			State = 3529;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case PARAM_MARKER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
			case CURRENT_SYMBOL:
			case INTERVAL_SYMBOL:
			case UNBOUNDED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3527;
				windowFrameStart();
				}
				break;
			case BETWEEN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3528;
				windowFrameBetween();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameStartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySqlParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		public WindowFrameStartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameStart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameStart(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameStartContext windowFrameStart() {
		WindowFrameStartContext _localctx = new WindowFrameStartContext(Context, State);
		EnterRule(_localctx, 346, RULE_windowFrameStart);
		try {
			State = 3545;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNBOUNDED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3531;
				Match(UNBOUNDED_SYMBOL);
				State = 3532;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3533;
				ulonglongNumber();
				State = 3534;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case PARAM_MARKER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3536;
				Match(PARAM_MARKER);
				State = 3537;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case INTERVAL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3538;
				Match(INTERVAL_SYMBOL);
				State = 3539;
				expr(0);
				State = 3540;
				interval();
				State = 3541;
				Match(PRECEDING_SYMBOL);
				}
				break;
			case CURRENT_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3543;
				Match(CURRENT_SYMBOL);
				State = 3544;
				Match(ROW_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBetweenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySqlParser.BETWEEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBoundContext[] windowFrameBound() {
			return GetRuleContexts<WindowFrameBoundContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameBoundContext windowFrameBound(int i) {
			return GetRuleContext<WindowFrameBoundContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		public WindowFrameBetweenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBetween; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBetween(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBetweenContext windowFrameBetween() {
		WindowFrameBetweenContext _localctx = new WindowFrameBetweenContext(Context, State);
		EnterRule(_localctx, 348, RULE_windowFrameBetween);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3547;
			Match(BETWEEN_SYMBOL);
			State = 3548;
			windowFrameBound();
			State = 3549;
			Match(AND_SYMBOL);
			State = 3550;
			windowFrameBound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameBoundContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFrameStartContext windowFrameStart() {
			return GetRuleContext<WindowFrameStartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySqlParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public WindowFrameBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameBound; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameBound(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameBound(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameBoundContext windowFrameBound() {
		WindowFrameBoundContext _localctx = new WindowFrameBoundContext(Context, State);
		EnterRule(_localctx, 350, RULE_windowFrameBound);
		try {
			State = 3565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,329,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3552;
				windowFrameStart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3553;
				Match(UNBOUNDED_SYMBOL);
				State = 3554;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3555;
				ulonglongNumber();
				State = 3556;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3558;
				Match(PARAM_MARKER);
				State = 3559;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3560;
				Match(INTERVAL_SYMBOL);
				State = 3561;
				expr(0);
				State = 3562;
				interval();
				State = 3563;
				Match(FOLLOWING_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFrameExclusionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySqlParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySqlParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySqlParser.OTHERS_SYMBOL, 0); }
		public WindowFrameExclusionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFrameExclusion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFrameExclusion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFrameExclusion(this);
		}
	}

	[RuleVersion(0)]
	public WindowFrameExclusionContext windowFrameExclusion() {
		WindowFrameExclusionContext _localctx = new WindowFrameExclusionContext(Context, State);
		EnterRule(_localctx, 352, RULE_windowFrameExclusion);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3567;
			Match(EXCLUDE_SYMBOL);
			State = 3574;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CURRENT_SYMBOL:
				{
				State = 3568;
				Match(CURRENT_SYMBOL);
				State = 3569;
				Match(ROW_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3570;
				Match(GROUP_SYMBOL);
				}
				break;
			case TIES_SYMBOL:
				{
				State = 3571;
				Match(TIES_SYMBOL);
				}
				break;
			case NO_SYMBOL:
				{
				State = 3572;
				Match(NO_SYMBOL);
				State = 3573;
				Match(OTHERS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionContext[] commonTableExpression() {
			return GetRuleContexts<CommonTableExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CommonTableExpressionContext commonTableExpression(int i) {
			return GetRuleContext<CommonTableExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECURSIVE_SYMBOL() { return GetToken(MySqlParser.RECURSIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public WithClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWithClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWithClause(this);
		}
	}

	[RuleVersion(0)]
	public WithClauseContext withClause() {
		WithClauseContext _localctx = new WithClauseContext(Context, State);
		EnterRule(_localctx, 354, RULE_withClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3576;
			Match(WITH_SYMBOL);
			State = 3578;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,331,Context) ) {
			case 1:
				{
				State = 3577;
				Match(RECURSIVE_SYMBOL);
				}
				break;
			}
			State = 3580;
			commonTableExpression();
			State = 3585;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3581;
					Match(COMMA_SYMBOL);
					State = 3582;
					commonTableExpression();
					}
					}
				}
				State = 3587;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,332,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonTableExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		public CommonTableExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonTableExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommonTableExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommonTableExpression(this);
		}
	}

	[RuleVersion(0)]
	public CommonTableExpressionContext commonTableExpression() {
		CommonTableExpressionContext _localctx = new CommonTableExpressionContext(Context, State);
		EnterRule(_localctx, 356, RULE_commonTableExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3588;
			identifier();
			State = 3590;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 3589;
				columnInternalRefList();
				}
			}

			State = 3592;
			Match(AS_SYMBOL);
			State = 3593;
			subquery();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupByClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OlapOptionContext olapOption() {
			return GetRuleContext<OlapOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupListContext groupList() {
			return GetRuleContext<GroupListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySqlParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUBE_SYMBOL() { return GetToken(MySqlParser.CUBE_SYMBOL, 0); }
		public GroupByClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupByClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupByClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupByClause(this);
		}
	}

	[RuleVersion(0)]
	public GroupByClauseContext groupByClause() {
		GroupByClauseContext _localctx = new GroupByClauseContext(Context, State);
		EnterRule(_localctx, 358, RULE_groupByClause);
		int _la;
		try {
			State = 3609;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,335,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3595;
				Match(GROUP_SYMBOL);
				State = 3596;
				Match(BY_SYMBOL);
				State = 3597;
				orderList();
				State = 3599;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,334,Context) ) {
				case 1:
					{
					State = 3598;
					olapOption();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3601;
				if (!(this.ServerVersion >= 80032)) throw new FailedPredicateException(this, "this.ServerVersion >= 80032");
				State = 3602;
				Match(GROUP_SYMBOL);
				State = 3603;
				Match(BY_SYMBOL);
				State = 3604;
				_la = TokenStream.LA(1);
				if ( !(_la==CUBE_SYMBOL || _la==ROLLUP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3605;
				Match(OPEN_PAR_SYMBOL);
				State = 3606;
				groupList();
				State = 3607;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OlapOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySqlParser.ROLLUP_SYMBOL, 0); }
		public OlapOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_olapOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOlapOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOlapOption(this);
		}
	}

	[RuleVersion(0)]
	public OlapOptionContext olapOption() {
		OlapOptionContext _localctx = new OlapOptionContext(Context, State);
		EnterRule(_localctx, 360, RULE_olapOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3611;
			Match(WITH_SYMBOL);
			State = 3612;
			Match(ROLLUP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySqlParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderListContext orderList() {
			return GetRuleContext<OrderListContext>(0);
		}
		public OrderClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderClause(this);
		}
	}

	[RuleVersion(0)]
	public OrderClauseContext orderClause() {
		OrderClauseContext _localctx = new OrderClauseContext(Context, State);
		EnterRule(_localctx, 362, RULE_orderClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3614;
			Match(ORDER_SYMBOL);
			State = 3615;
			Match(BY_SYMBOL);
			State = 3616;
			orderList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DirectionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_SYMBOL() { return GetToken(MySqlParser.ASC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySqlParser.DESC_SYMBOL, 0); }
		public DirectionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_direction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDirection(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDirection(this);
		}
	}

	[RuleVersion(0)]
	public DirectionContext direction() {
		DirectionContext _localctx = new DirectionContext(Context, State);
		EnterRule(_localctx, 364, RULE_direction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3618;
			_la = TokenStream.LA(1);
			if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUAL_SYMBOL() { return GetToken(MySqlParser.DUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		public FromClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFromClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFromClause(this);
		}
	}

	[RuleVersion(0)]
	public FromClauseContext fromClause() {
		FromClauseContext _localctx = new FromClauseContext(Context, State);
		EnterRule(_localctx, 366, RULE_fromClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3620;
			Match(FROM_SYMBOL);
			State = 3623;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,336,Context) ) {
			case 1:
				{
				State = 3621;
				Match(DUAL_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3622;
				tableReferenceList();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext[] tableReference() {
			return GetRuleContexts<TableReferenceContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext tableReference(int i) {
			return GetRuleContext<TableReferenceContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableReferenceListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceList(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListContext tableReferenceList() {
		TableReferenceListContext _localctx = new TableReferenceListContext(Context, State);
		EnterRule(_localctx, 368, RULE_tableReferenceList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3625;
			tableReference();
			State = 3630;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3626;
					Match(COMMA_SYMBOL);
					State = 3627;
					tableReference();
					}
					}
				}
				State = 3632;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,337,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableValueConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RowValueExplicitContext[] rowValueExplicit() {
			return GetRuleContexts<RowValueExplicitContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RowValueExplicitContext rowValueExplicit(int i) {
			return GetRuleContext<RowValueExplicitContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableValueConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableValueConstructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableValueConstructor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableValueConstructor(this);
		}
	}

	[RuleVersion(0)]
	public TableValueConstructorContext tableValueConstructor() {
		TableValueConstructorContext _localctx = new TableValueConstructorContext(Context, State);
		EnterRule(_localctx, 370, RULE_tableValueConstructor);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3633;
			Match(VALUES_SYMBOL);
			State = 3634;
			rowValueExplicit();
			State = 3639;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3635;
					Match(COMMA_SYMBOL);
					State = 3636;
					rowValueExplicit();
					}
					}
				}
				State = 3641;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,338,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ExplicitTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExplicitTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExplicitTable(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitTableContext explicitTable() {
		ExplicitTableContext _localctx = new ExplicitTableContext(Context, State);
		EnterRule(_localctx, 372, RULE_explicitTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3642;
			Match(TABLE_SYMBOL);
			State = 3643;
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RowValueExplicitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ValuesContext @values() {
			return GetRuleContext<ValuesContext>(0);
		}
		public RowValueExplicitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rowValueExplicit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRowValueExplicit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRowValueExplicit(this);
		}
	}

	[RuleVersion(0)]
	public RowValueExplicitContext rowValueExplicit() {
		RowValueExplicitContext _localctx = new RowValueExplicitContext(Context, State);
		EnterRule(_localctx, 374, RULE_rowValueExplicit);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3645;
			Match(ROW_SYMBOL);
			State = 3646;
			Match(OPEN_PAR_SYMBOL);
			State = 3648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,339,Context) ) {
			case 1:
				{
				State = 3647;
				@values();
				}
				break;
			}
			State = 3650;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QuerySpecOptionContext querySpecOption() {
			return GetRuleContext<QuerySpecOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySqlParser.SQL_NO_CACHE_SYMBOL, 0); }
		public SelectOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectOption(this);
		}
	}

	[RuleVersion(0)]
	public SelectOptionContext selectOption() {
		SelectOptionContext _localctx = new SelectOptionContext(Context, State);
		EnterRule(_localctx, 376, RULE_selectOption);
		try {
			State = 3654;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALL_SYMBOL:
			case DISTINCT_SYMBOL:
			case HIGH_PRIORITY_SYMBOL:
			case SQL_BIG_RESULT_SYMBOL:
			case SQL_BUFFER_RESULT_SYMBOL:
			case SQL_CALC_FOUND_ROWS_SYMBOL:
			case SQL_SMALL_RESULT_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3652;
				querySpecOption();
				}
				break;
			case SQL_NO_CACHE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3653;
				Match(SQL_NO_CACHE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseContext[] lockingClause() {
			return GetRuleContexts<LockingClauseContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockingClauseContext lockingClause(int i) {
			return GetRuleContext<LockingClauseContext>(i);
		}
		public LockingClauseListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClauseList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockingClauseList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockingClauseList(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseListContext lockingClauseList() {
		LockingClauseListContext _localctx = new LockingClauseListContext(Context, State);
		EnterRule(_localctx, 378, RULE_lockingClauseList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3656;
			if (!(this.ServerVersion >= 80031)) throw new FailedPredicateException(this, "this.ServerVersion >= 80031");
			State = 3658;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 3657;
				lockingClause();
				}
				}
				State = 3660;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==FOR_SYMBOL || _la==LOCK_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockStrenghContext lockStrengh() {
			return GetRuleContext<LockStrenghContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF_SYMBOL() { return GetToken(MySqlParser.OF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasRefListContext tableAliasRefList() {
			return GetRuleContext<TableAliasRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockedRowActionContext lockedRowAction() {
			return GetRuleContext<LockedRowActionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySqlParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySqlParser.MODE_SYMBOL, 0); }
		public LockingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockingClause(this);
		}
	}

	[RuleVersion(0)]
	public LockingClauseContext lockingClause() {
		LockingClauseContext _localctx = new LockingClauseContext(Context, State);
		EnterRule(_localctx, 380, RULE_lockingClause);
		int _la;
		try {
			State = 3675;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3662;
				Match(FOR_SYMBOL);
				State = 3663;
				lockStrengh();
				State = 3666;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_SYMBOL) {
					{
					State = 3664;
					Match(OF_SYMBOL);
					State = 3665;
					tableAliasRefList();
					}
				}

				State = 3669;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SKIP_SYMBOL || _la==NOWAIT_SYMBOL) {
					{
					State = 3668;
					lockedRowAction();
					}
				}

				}
				break;
			case LOCK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3671;
				Match(LOCK_SYMBOL);
				State = 3672;
				Match(IN_SYMBOL);
				State = 3673;
				Match(SHARE_SYMBOL);
				State = 3674;
				Match(MODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStrenghContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySqlParser.SHARE_SYMBOL, 0); }
		public LockStrenghContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStrengh; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockStrengh(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockStrengh(this);
		}
	}

	[RuleVersion(0)]
	public LockStrenghContext lockStrengh() {
		LockStrenghContext _localctx = new LockStrenghContext(Context, State);
		EnterRule(_localctx, 382, RULE_lockStrengh);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3677;
			_la = TokenStream.LA(1);
			if ( !(_la==SHARE_SYMBOL || _la==UPDATE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockedRowActionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySqlParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySqlParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySqlParser.NOWAIT_SYMBOL, 0); }
		public LockedRowActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockedRowAction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockedRowAction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockedRowAction(this);
		}
	}

	[RuleVersion(0)]
	public LockedRowActionContext lockedRowAction() {
		LockedRowActionContext _localctx = new LockedRowActionContext(Context, State);
		EnterRule(_localctx, 384, RULE_lockedRowAction);
		try {
			State = 3682;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SKIP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3679;
				Match(SKIP_SYMBOL);
				State = 3680;
				Match(LOCKED_SYMBOL);
				}
				break;
			case NOWAIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3681;
				Match(NOWAIT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext[] selectItem() {
			return GetRuleContexts<SelectItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectItemContext selectItem(int i) {
			return GetRuleContext<SelectItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public SelectItemListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItemList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectItemList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectItemList(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemListContext selectItemList() {
		SelectItemListContext _localctx = new SelectItemListContext(Context, State);
		EnterRule(_localctx, 386, RULE_selectItemList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3686;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,346,Context) ) {
			case 1:
				{
				State = 3684;
				selectItem();
				}
				break;
			case 2:
				{
				State = 3685;
				Match(MULT_OPERATOR);
				}
				break;
			}
			State = 3692;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3688;
					Match(COMMA_SYMBOL);
					State = 3689;
					selectItem();
					}
					}
				}
				State = 3694;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,347,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public SelectItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectItem(this);
		}
	}

	[RuleVersion(0)]
	public SelectItemContext selectItem() {
		SelectItemContext _localctx = new SelectItemContext(Context, State);
		EnterRule(_localctx, 388, RULE_selectItem);
		try {
			State = 3700;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,349,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3695;
				tableWild();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3696;
				expr(0);
				State = 3698;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,348,Context) ) {
				case 1:
					{
					State = 3697;
					selectAlias();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		public SelectAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_selectAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSelectAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSelectAlias(this);
		}
	}

	[RuleVersion(0)]
	public SelectAliasContext selectAlias() {
		SelectAliasContext _localctx = new SelectAliasContext(Context, State);
		EnterRule(_localctx, 390, RULE_selectAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3703;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,350,Context) ) {
			case 1:
				{
				State = 3702;
				Match(AS_SYMBOL);
				}
				break;
			}
			State = 3707;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,351,Context) ) {
			case 1:
				{
				State = 3705;
				identifier();
				}
				break;
			case 2:
				{
				State = 3706;
				textStringLiteral();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhereClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHERE_SYMBOL() { return GetToken(MySqlParser.WHERE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhereClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whereClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhereClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhereClause(this);
		}
	}

	[RuleVersion(0)]
	public WhereClauseContext whereClause() {
		WhereClauseContext _localctx = new WhereClauseContext(Context, State);
		EnterRule(_localctx, 392, RULE_whereClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3709;
			Match(WHERE_SYMBOL);
			State = 3710;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySqlParser.OPEN_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EscapedTableReferenceContext escapedTableReference() {
			return GetRuleContext<EscapedTableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySqlParser.CLOSE_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ_SYMBOL() { return GetToken(MySqlParser.OJ_SYMBOL, 0); }
		public TableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableReference(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceContext tableReference() {
		TableReferenceContext _localctx = new TableReferenceContext(Context, State);
		EnterRule(_localctx, 394, RULE_tableReference);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3722;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,353,Context) ) {
			case 1:
				{
				State = 3712;
				tableFactor();
				}
				break;
			case 2:
				{
				State = 3713;
				Match(OPEN_CURLY_SYMBOL);
				State = 3717;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,352,Context) ) {
				case 1:
					{
					State = 3714;
					if (!(this.ServerVersion < 80017)) throw new FailedPredicateException(this, "this.ServerVersion < 80017");
					State = 3715;
					identifier();
					}
					break;
				case 2:
					{
					State = 3716;
					Match(OJ_SYMBOL);
					}
					break;
				}
				State = 3719;
				escapedTableReference();
				State = 3720;
				Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			}
			State = 3727;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,354,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3724;
					joinedTable();
					}
					}
				}
				State = 3729;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,354,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EscapedTableReferenceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext[] joinedTable() {
			return GetRuleContexts<JoinedTableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JoinedTableContext joinedTable(int i) {
			return GetRuleContext<JoinedTableContext>(i);
		}
		public EscapedTableReferenceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_escapedTableReference; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEscapedTableReference(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEscapedTableReference(this);
		}
	}

	[RuleVersion(0)]
	public EscapedTableReferenceContext escapedTableReference() {
		EscapedTableReferenceContext _localctx = new EscapedTableReferenceContext(Context, State);
		EnterRule(_localctx, 396, RULE_escapedTableReference);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3730;
			tableFactor();
			State = 3734;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==CROSS_SYMBOL || ((((_la - 272)) & ~0x3f) == 0 && ((1L << (_la - 272)) & 2148532225L) != 0) || _la==NATURAL_SYMBOL || _la==RIGHT_SYMBOL || _la==STRAIGHT_JOIN_SYMBOL) {
				{
				{
				State = 3731;
				joinedTable();
				}
				}
				State = 3736;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JoinedTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InnerJoinTypeContext innerJoinType() {
			return GetRuleContext<InnerJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceContext tableReference() {
			return GetRuleContext<TableReferenceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OuterJoinTypeContext outerJoinType() {
			return GetRuleContext<OuterJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NaturalJoinTypeContext naturalJoinType() {
			return GetRuleContext<NaturalJoinTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFactorContext tableFactor() {
			return GetRuleContext<TableFactorContext>(0);
		}
		public JoinedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_joinedTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJoinedTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJoinedTable(this);
		}
	}

	[RuleVersion(0)]
	public JoinedTableContext joinedTable() {
		JoinedTableContext _localctx = new JoinedTableContext(Context, State);
		EnterRule(_localctx, 398, RULE_joinedTable);
		try {
			State = 3756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3737;
				innerJoinType();
				State = 3738;
				tableReference();
				State = 3743;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,356,Context) ) {
				case 1:
					{
					State = 3739;
					Match(ON_SYMBOL);
					State = 3740;
					expr(0);
					}
					break;
				case 2:
					{
					State = 3741;
					Match(USING_SYMBOL);
					State = 3742;
					identifierListWithParentheses();
					}
					break;
				}
				}
				break;
			case LEFT_SYMBOL:
			case RIGHT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3745;
				outerJoinType();
				State = 3746;
				tableReference();
				State = 3751;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_SYMBOL:
					{
					State = 3747;
					Match(ON_SYMBOL);
					State = 3748;
					expr(0);
					}
					break;
				case USING_SYMBOL:
					{
					State = 3749;
					Match(USING_SYMBOL);
					State = 3750;
					identifierListWithParentheses();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case NATURAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3753;
				naturalJoinType();
				State = 3754;
				tableFactor();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NaturalJoinTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySqlParser.NATURAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_SYMBOL() { return GetToken(MySqlParser.INNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySqlParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySqlParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_SYMBOL() { return GetToken(MySqlParser.OUTER_SYMBOL, 0); }
		public NaturalJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_naturalJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNaturalJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNaturalJoinType(this);
		}
	}

	[RuleVersion(0)]
	public NaturalJoinTypeContext naturalJoinType() {
		NaturalJoinTypeContext _localctx = new NaturalJoinTypeContext(Context, State);
		EnterRule(_localctx, 400, RULE_naturalJoinType);
		int _la;
		try {
			State = 3769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,361,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3758;
				Match(NATURAL_SYMBOL);
				State = 3760;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INNER_SYMBOL) {
					{
					State = 3759;
					Match(INNER_SYMBOL);
					}
				}

				State = 3762;
				Match(JOIN_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3763;
				Match(NATURAL_SYMBOL);
				State = 3764;
				_la = TokenStream.LA(1);
				if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 3766;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OUTER_SYMBOL) {
					{
					State = 3765;
					Match(OUTER_SYMBOL);
					}
				}

				State = 3768;
				Match(JOIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerJoinTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INNER_SYMBOL() { return GetToken(MySqlParser.INNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CROSS_SYMBOL() { return GetToken(MySqlParser.CROSS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRAIGHT_JOIN_SYMBOL() { return GetToken(MySqlParser.STRAIGHT_JOIN_SYMBOL, 0); }
		public InnerJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInnerJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInnerJoinType(this);
		}
	}

	[RuleVersion(0)]
	public InnerJoinTypeContext innerJoinType() {
		InnerJoinTypeContext _localctx = new InnerJoinTypeContext(Context, State);
		EnterRule(_localctx, 402, RULE_innerJoinType);
		int _la;
		try {
			State = 3776;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CROSS_SYMBOL:
			case INNER_SYMBOL:
			case JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3772;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CROSS_SYMBOL || _la==INNER_SYMBOL) {
					{
					State = 3771;
					_localctx.type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==CROSS_SYMBOL || _la==INNER_SYMBOL) ) {
						_localctx.type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 3774;
				Match(JOIN_SYMBOL);
				}
				break;
			case STRAIGHT_JOIN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3775;
				_localctx.type = Match(STRAIGHT_JOIN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OuterJoinTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySqlParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySqlParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUTER_SYMBOL() { return GetToken(MySqlParser.OUTER_SYMBOL, 0); }
		public OuterJoinTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_outerJoinType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOuterJoinType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOuterJoinType(this);
		}
	}

	[RuleVersion(0)]
	public OuterJoinTypeContext outerJoinType() {
		OuterJoinTypeContext _localctx = new OuterJoinTypeContext(Context, State);
		EnterRule(_localctx, 404, RULE_outerJoinType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3778;
			_localctx.type = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==LEFT_SYMBOL || _la==RIGHT_SYMBOL) ) {
				_localctx.type = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 3780;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OUTER_SYMBOL) {
				{
				State = 3779;
				Match(OUTER_SYMBOL);
				}
			}

			State = 3782;
			Match(JOIN_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DerivedTableContext derivedTable() {
			return GetRuleContext<DerivedTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableFunctionContext tableFunction() {
			return GetRuleContext<TableFunctionContext>(0);
		}
		public TableFactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFactor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableFactor(this);
		}
	}

	[RuleVersion(0)]
	public TableFactorContext tableFactor() {
		TableFactorContext _localctx = new TableFactorContext(Context, State);
		EnterRule(_localctx, 406, RULE_tableFactor);
		try {
			State = 3790;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,365,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3784;
				singleTable();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3785;
				singleTableParens();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3786;
				derivedTable();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 3787;
				tableReferenceListParens();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 3788;
				if (!(this.ServerVersion >= 80004)) throw new FailedPredicateException(this, "this.ServerVersion >= 80004");
				State = 3789;
				tableFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UsePartitionContext usePartition() {
			return GetRuleContext<UsePartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintListContext indexHintList() {
			return GetRuleContext<IndexHintListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TablesampleClauseContext tablesampleClause() {
			return GetRuleContext<TablesampleClauseContext>(0);
		}
		public SingleTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleTable(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableContext singleTable() {
		SingleTableContext _localctx = new SingleTableContext(Context, State);
		EnterRule(_localctx, 408, RULE_singleTable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3792;
			tableRef();
			State = 3794;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,366,Context) ) {
			case 1:
				{
				State = 3793;
				usePartition();
				}
				break;
			}
			State = 3797;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,367,Context) ) {
			case 1:
				{
				State = 3796;
				tableAlias();
				}
				break;
			}
			State = 3800;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,368,Context) ) {
			case 1:
				{
				State = 3799;
				indexHintList();
				}
				break;
			}
			State = 3803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,369,Context) ) {
			case 1:
				{
				State = 3802;
				tablesampleClause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SingleTableParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableContext singleTable() {
			return GetRuleContext<SingleTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SingleTableParensContext singleTableParens() {
			return GetRuleContext<SingleTableParensContext>(0);
		}
		public SingleTableParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_singleTableParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSingleTableParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSingleTableParens(this);
		}
	}

	[RuleVersion(0)]
	public SingleTableParensContext singleTableParens() {
		SingleTableParensContext _localctx = new SingleTableParensContext(Context, State);
		EnterRule(_localctx, 410, RULE_singleTableParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3805;
			Match(OPEN_PAR_SYMBOL);
			State = 3808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,370,Context) ) {
			case 1:
				{
				State = 3806;
				singleTable();
				}
				break;
			case 2:
				{
				State = 3807;
				singleTableParens();
				}
				break;
			}
			State = 3810;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DerivedTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LATERAL_SYMBOL() { return GetToken(MySqlParser.LATERAL_SYMBOL, 0); }
		public DerivedTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_derivedTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDerivedTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDerivedTable(this);
		}
	}

	[RuleVersion(0)]
	public DerivedTableContext derivedTable() {
		DerivedTableContext _localctx = new DerivedTableContext(Context, State);
		EnterRule(_localctx, 412, RULE_derivedTable);
		try {
			State = 3828;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,375,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3812;
				subquery();
				State = 3814;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,371,Context) ) {
				case 1:
					{
					State = 3813;
					tableAlias();
					}
					break;
				}
				State = 3817;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,372,Context) ) {
				case 1:
					{
					State = 3816;
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3819;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 3820;
				Match(LATERAL_SYMBOL);
				State = 3821;
				subquery();
				State = 3823;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,373,Context) ) {
				case 1:
					{
					State = 3822;
					tableAlias();
					}
					break;
				}
				State = 3826;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,374,Context) ) {
				case 1:
					{
					State = 3825;
					columnInternalRefList();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableReferenceListParensContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListParensContext tableReferenceListParens() {
			return GetRuleContext<TableReferenceListParensContext>(0);
		}
		public TableReferenceListParensContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableReferenceListParens; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableReferenceListParens(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableReferenceListParens(this);
		}
	}

	[RuleVersion(0)]
	public TableReferenceListParensContext tableReferenceListParens() {
		TableReferenceListParensContext _localctx = new TableReferenceListParensContext(Context, State);
		EnterRule(_localctx, 414, RULE_tableReferenceListParens);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3830;
			Match(OPEN_PAR_SYMBOL);
			State = 3833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,376,Context) ) {
			case 1:
				{
				State = 3831;
				tableReferenceList();
				}
				break;
			case 2:
				{
				State = 3832;
				tableReferenceListParens();
				}
				break;
			}
			State = 3835;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_TABLE_SYMBOL() { return GetToken(MySqlParser.JSON_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public TableFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableFunction(this);
		}
	}

	[RuleVersion(0)]
	public TableFunctionContext tableFunction() {
		TableFunctionContext _localctx = new TableFunctionContext(Context, State);
		EnterRule(_localctx, 416, RULE_tableFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3837;
			Match(JSON_TABLE_SYMBOL);
			State = 3838;
			Match(OPEN_PAR_SYMBOL);
			State = 3839;
			expr(0);
			State = 3840;
			Match(COMMA_SYMBOL);
			State = 3841;
			textStringLiteral();
			State = 3842;
			columnsClause();
			State = 3843;
			Match(CLOSE_PAR_SYMBOL);
			State = 3845;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,377,Context) ) {
			case 1:
				{
				State = 3844;
				tableAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JtColumnContext[] jtColumn() {
			return GetRuleContexts<JtColumnContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public JtColumnContext jtColumn(int i) {
			return GetRuleContext<JtColumnContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ColumnsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnsClause(this);
		}
	}

	[RuleVersion(0)]
	public ColumnsClauseContext columnsClause() {
		ColumnsClauseContext _localctx = new ColumnsClauseContext(Context, State);
		EnterRule(_localctx, 418, RULE_columnsClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3847;
			Match(COLUMNS_SYMBOL);
			State = 3848;
			Match(OPEN_PAR_SYMBOL);
			State = 3849;
			jtColumn();
			State = 3854;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3850;
				Match(COMMA_SYMBOL);
				State = 3851;
				jtColumn();
				}
				}
				State = 3856;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 3857;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JtColumnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySqlParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySqlParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySqlParser.EXISTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyOrErrorJsonTableContext onEmptyOrErrorJsonTable() {
			return GetRuleContext<OnEmptyOrErrorJsonTableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySqlParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnsClauseContext columnsClause() {
			return GetRuleContext<ColumnsClauseContext>(0);
		}
		public JtColumnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jtColumn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJtColumn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJtColumn(this);
		}
	}

	[RuleVersion(0)]
	public JtColumnContext jtColumn() {
		JtColumnContext _localctx = new JtColumnContext(Context, State);
		EnterRule(_localctx, 420, RULE_jtColumn);
		int _la;
		try {
			State = 3882;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,382,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3859;
				identifier();
				State = 3860;
				Match(FOR_SYMBOL);
				State = 3861;
				Match(ORDINALITY_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3863;
				identifier();
				State = 3864;
				dataType();
				State = 3867;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,379,Context) ) {
				case 1:
					{
					State = 3865;
					if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
					State = 3866;
					collate();
					}
					break;
				}
				State = 3870;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 3869;
					Match(EXISTS_SYMBOL);
					}
				}

				State = 3872;
				Match(PATH_SYMBOL);
				State = 3873;
				textStringLiteral();
				State = 3875;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3874;
					onEmptyOrErrorJsonTable();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3877;
				Match(NESTED_SYMBOL);
				State = 3878;
				Match(PATH_SYMBOL);
				State = 3879;
				textStringLiteral();
				State = 3880;
				columnsClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyOrErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyContext onEmpty() {
			return GetRuleContext<OnEmptyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnErrorContext onError() {
			return GetRuleContext<OnErrorContext>(0);
		}
		public OnEmptyOrErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmptyOrError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnEmptyOrError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnEmptyOrError(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyOrErrorContext onEmptyOrError() {
		OnEmptyOrErrorContext _localctx = new OnEmptyOrErrorContext(Context, State);
		EnterRule(_localctx, 422, RULE_onEmptyOrError);
		int _la;
		try {
			State = 3889;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,384,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3884;
				onEmpty();
				State = 3886;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_SYMBOL || _la==ERROR_SYMBOL || _la==NULL_SYMBOL) {
					{
					State = 3885;
					onError();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3888;
				onError();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyOrErrorJsonTableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyOrErrorContext onEmptyOrError() {
			return GetRuleContext<OnEmptyOrErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnErrorContext onError() {
			return GetRuleContext<OnErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyContext onEmpty() {
			return GetRuleContext<OnEmptyContext>(0);
		}
		public OnEmptyOrErrorJsonTableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmptyOrErrorJsonTable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnEmptyOrErrorJsonTable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnEmptyOrErrorJsonTable(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyOrErrorJsonTableContext onEmptyOrErrorJsonTable() {
		OnEmptyOrErrorJsonTableContext _localctx = new OnEmptyOrErrorJsonTableContext(Context, State);
		EnterRule(_localctx, 424, RULE_onEmptyOrErrorJsonTable);
		try {
			State = 3895;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,385,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3891;
				onEmptyOrError();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3892;
				onError();
				State = 3893;
				onEmpty();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnEmptyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnResponseContext jsonOnResponse() {
			return GetRuleContext<JsonOnResponseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EMPTY_SYMBOL() { return GetToken(MySqlParser.EMPTY_SYMBOL, 0); }
		public OnEmptyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onEmpty; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnEmpty(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnEmpty(this);
		}
	}

	[RuleVersion(0)]
	public OnEmptyContext onEmpty() {
		OnEmptyContext _localctx = new OnEmptyContext(Context, State);
		EnterRule(_localctx, 426, RULE_onEmpty);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3897;
			jsonOnResponse();
			State = 3898;
			Match(ON_SYMBOL);
			State = 3899;
			Match(EMPTY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnErrorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public JsonOnResponseContext jsonOnResponse() {
			return GetRuleContext<JsonOnResponseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		public OnErrorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onError; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnError(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnError(this);
		}
	}

	[RuleVersion(0)]
	public OnErrorContext onError() {
		OnErrorContext _localctx = new OnErrorContext(Context, State);
		EnterRule(_localctx, 428, RULE_onError);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3901;
			jsonOnResponse();
			State = 3902;
			Match(ON_SYMBOL);
			State = 3903;
			Match(ERROR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOnResponseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public JsonOnResponseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOnResponse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonOnResponse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonOnResponse(this);
		}
	}

	[RuleVersion(0)]
	public JsonOnResponseContext jsonOnResponse() {
		JsonOnResponseContext _localctx = new JsonOnResponseContext(Context, State);
		EnterRule(_localctx, 430, RULE_jsonOnResponse);
		try {
			State = 3909;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ERROR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3905;
				Match(ERROR_SYMBOL);
				}
				break;
			case NULL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3906;
				Match(NULL_SYMBOL);
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 3907;
				Match(DEFAULT_SYMBOL);
				State = 3908;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnionOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySqlParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		public UnionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnionOption(this);
		}
	}

	[RuleVersion(0)]
	public UnionOptionContext unionOption() {
		UnionOptionContext _localctx = new UnionOptionContext(Context, State);
		EnterRule(_localctx, 432, RULE_unionOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3911;
			_la = TokenStream.LA(1);
			if ( !(_la==ALL_SYMBOL || _la==DISTINCT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public TableAliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAlias; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableAlias(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableAlias(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasContext tableAlias() {
		TableAliasContext _localctx = new TableAliasContext(Context, State);
		EnterRule(_localctx, 434, RULE_tableAlias);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3916;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,387,Context) ) {
			case 1:
				{
				State = 3913;
				Match(AS_SYMBOL);
				}
				break;
			case 2:
				{
				State = 3914;
				if (!(this.ServerVersion < 80017)) throw new FailedPredicateException(this, "this.ServerVersion < 80017");
				State = 3915;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 3918;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext[] indexHint() {
			return GetRuleContexts<IndexHintContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintContext indexHint(int i) {
			return GetRuleContext<IndexHintContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IndexHintListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintList(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintListContext indexHintList() {
		IndexHintListContext _localctx = new IndexHintListContext(Context, State);
		EnterRule(_localctx, 436, RULE_indexHintList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 3920;
			indexHint();
			State = 3925;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 3921;
					Match(COMMA_SYMBOL);
					State = 3922;
					indexHint();
					}
					}
				}
				State = 3927;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,388,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintTypeContext indexHintType() {
			return GetRuleContext<IndexHintTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexListContext indexList() {
			return GetRuleContext<IndexListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexHintClauseContext indexHintClause() {
			return GetRuleContext<IndexHintClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySqlParser.USE_SYMBOL, 0); }
		public IndexHintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHint(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintContext indexHint() {
		IndexHintContext _localctx = new IndexHintContext(Context, State);
		EnterRule(_localctx, 438, RULE_indexHint);
		int _la;
		try {
			State = 3948;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FORCE_SYMBOL:
			case IGNORE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3928;
				indexHintType();
				State = 3929;
				keyOrIndex();
				State = 3931;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3930;
					indexHintClause();
					}
				}

				State = 3933;
				Match(OPEN_PAR_SYMBOL);
				State = 3934;
				indexList();
				State = 3935;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case USE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3937;
				Match(USE_SYMBOL);
				State = 3938;
				keyOrIndex();
				State = 3940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 3939;
					indexHintClause();
					}
				}

				State = 3942;
				Match(OPEN_PAR_SYMBOL);
				State = 3944;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,391,Context) ) {
				case 1:
					{
					State = 3943;
					indexList();
					}
					break;
				}
				State = 3946;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySqlParser.FORCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public IndexHintTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintType(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintTypeContext indexHintType() {
		IndexHintTypeContext _localctx = new IndexHintTypeContext(Context, State);
		EnterRule(_localctx, 440, RULE_indexHintType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3950;
			_la = TokenStream.LA(1);
			if ( !(_la==FORCE_SYMBOL || _la==IGNORE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyOrIndexContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		public KeyOrIndexContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyOrIndex; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyOrIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyOrIndex(this);
		}
	}

	[RuleVersion(0)]
	public KeyOrIndexContext keyOrIndex() {
		KeyOrIndexContext _localctx = new KeyOrIndexContext(Context, State);
		EnterRule(_localctx, 442, RULE_keyOrIndex);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3952;
			_la = TokenStream.LA(1);
			if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintKeyTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		public ConstraintKeyTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintKeyType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintKeyType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintKeyType(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintKeyTypeContext constraintKeyType() {
		ConstraintKeyTypeContext _localctx = new ConstraintKeyTypeContext(Context, State);
		EnterRule(_localctx, 444, RULE_constraintKeyType);
		int _la;
		try {
			State = 3960;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3954;
				Match(PRIMARY_SYMBOL);
				State = 3955;
				Match(KEY_SYMBOL);
				}
				break;
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3956;
				Match(UNIQUE_SYMBOL);
				State = 3958;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 3957;
					keyOrIndex();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexHintClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDER_SYMBOL() { return GetToken(MySqlParser.ORDER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		public IndexHintClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexHintClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexHintClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexHintClause(this);
		}
	}

	[RuleVersion(0)]
	public IndexHintClauseContext indexHintClause() {
		IndexHintClauseContext _localctx = new IndexHintClauseContext(Context, State);
		EnterRule(_localctx, 446, RULE_indexHintClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3962;
			Match(FOR_SYMBOL);
			State = 3968;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JOIN_SYMBOL:
				{
				State = 3963;
				Match(JOIN_SYMBOL);
				}
				break;
			case ORDER_SYMBOL:
				{
				State = 3964;
				Match(ORDER_SYMBOL);
				State = 3965;
				Match(BY_SYMBOL);
				}
				break;
			case GROUP_SYMBOL:
				{
				State = 3966;
				Match(GROUP_SYMBOL);
				State = 3967;
				Match(BY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexListElementContext[] indexListElement() {
			return GetRuleContexts<IndexListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexListElementContext indexListElement(int i) {
			return GetRuleContext<IndexListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IndexListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexList(this);
		}
	}

	[RuleVersion(0)]
	public IndexListContext indexList() {
		IndexListContext _localctx = new IndexListContext(Context, State);
		EnterRule(_localctx, 448, RULE_indexList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3970;
			indexListElement();
			State = 3975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 3971;
				Match(COMMA_SYMBOL);
				State = 3972;
				indexListElement();
				}
				}
				State = 3977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexListElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		public IndexListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexListElement(this);
		}
	}

	[RuleVersion(0)]
	public IndexListElementContext indexListElement() {
		IndexListElementContext _localctx = new IndexListElementContext(Context, State);
		EnterRule(_localctx, 450, RULE_indexListElement);
		try {
			State = 3980;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,397,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 3978;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 3979;
				Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableReferenceListContext tableReferenceList() {
			return GetRuleContext<TableReferenceListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UpdateListContext updateList() {
			return GetRuleContext<UpdateListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WithClauseContext withClause() {
			return GetRuleContext<WithClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleLimitClauseContext simpleLimitClause() {
			return GetRuleContext<SimpleLimitClauseContext>(0);
		}
		public UpdateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateStatement(this);
		}
	}

	[RuleVersion(0)]
	public UpdateStatementContext updateStatement() {
		UpdateStatementContext _localctx = new UpdateStatementContext(Context, State);
		EnterRule(_localctx, 452, RULE_updateStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 3983;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 3982;
				withClause();
				}
			}

			State = 3985;
			Match(UPDATE_SYMBOL);
			State = 3987;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,399,Context) ) {
			case 1:
				{
				State = 3986;
				Match(LOW_PRIORITY_SYMBOL);
				}
				break;
			}
			State = 3990;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,400,Context) ) {
			case 1:
				{
				State = 3989;
				Match(IGNORE_SYMBOL);
				}
				break;
			}
			State = 3992;
			tableReferenceList();
			State = 3993;
			Match(SET_SYMBOL);
			State = 3994;
			updateList();
			State = 3996;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 3995;
				whereClause();
				}
			}

			State = 3999;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ORDER_SYMBOL) {
				{
				State = 3998;
				orderClause();
				}
			}

			State = 4002;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 4001;
				simpleLimitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionOrLockingStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransactionStatementContext transactionStatement() {
			return GetRuleContext<TransactionStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SavepointStatementContext savepointStatement() {
			return GetRuleContext<SavepointStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockStatementContext lockStatement() {
			return GetRuleContext<LockStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public XaStatementContext xaStatement() {
			return GetRuleContext<XaStatementContext>(0);
		}
		public TransactionOrLockingStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionOrLockingStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionOrLockingStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionOrLockingStatement(this);
		}
	}

	[RuleVersion(0)]
	public TransactionOrLockingStatementContext transactionOrLockingStatement() {
		TransactionOrLockingStatementContext _localctx = new TransactionOrLockingStatementContext(Context, State);
		EnterRule(_localctx, 454, RULE_transactionOrLockingStatement);
		try {
			State = 4008;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMIT_SYMBOL:
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4004;
				transactionStatement();
				}
				break;
			case RELEASE_SYMBOL:
			case ROLLBACK_SYMBOL:
			case SAVEPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4005;
				savepointStatement();
				}
				break;
			case LOCK_SYMBOL:
			case UNLOCK_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4006;
				lockStatement();
				}
				break;
			case XA_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4007;
				xaStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionOptionListContext[] startTransactionOptionList() {
			return GetRuleContexts<StartTransactionOptionListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartTransactionOptionListContext startTransactionOptionList(int i) {
			return GetRuleContext<StartTransactionOptionListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySqlParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySqlParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySqlParser.RELEASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySqlParser.NO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySqlParser.NO_SYMBOL, i);
		}
		public TransactionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionStatement(this);
		}
	}

	[RuleVersion(0)]
	public TransactionStatementContext transactionStatement() {
		TransactionStatementContext _localctx = new TransactionStatementContext(Context, State);
		EnterRule(_localctx, 456, RULE_transactionStatement);
		int _la;
		try {
			State = 4035;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4010;
				Match(START_SYMBOL);
				State = 4011;
				Match(TRANSACTION_SYMBOL);
				State = 4015;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==READ_SYMBOL || _la==WITH_SYMBOL) {
					{
					{
					State = 4012;
					startTransactionOptionList();
					}
					}
					State = 4017;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case COMMIT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4018;
				Match(COMMIT_SYMBOL);
				State = 4020;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 4019;
					Match(WORK_SYMBOL);
					}
				}

				State = 4027;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AND_SYMBOL) {
					{
					State = 4022;
					Match(AND_SYMBOL);
					State = 4024;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 4023;
						Match(NO_SYMBOL);
						}
					}

					State = 4026;
					Match(CHAIN_SYMBOL);
					}
				}

				State = 4033;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
					{
					State = 4030;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL) {
						{
						State = 4029;
						Match(NO_SYMBOL);
						}
					}

					State = 4032;
					Match(RELEASE_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginWorkContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		public BeginWorkContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginWork; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBeginWork(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBeginWork(this);
		}
	}

	[RuleVersion(0)]
	public BeginWorkContext beginWork() {
		BeginWorkContext _localctx = new BeginWorkContext(Context, State);
		EnterRule(_localctx, 458, RULE_beginWork);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4037;
			Match(BEGIN_SYMBOL);
			State = 4039;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WORK_SYMBOL) {
				{
				State = 4038;
				Match(WORK_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartTransactionOptionListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySqlParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySqlParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySqlParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySqlParser.ONLY_SYMBOL, 0); }
		public StartTransactionOptionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startTransactionOptionList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartTransactionOptionList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartTransactionOptionList(this);
		}
	}

	[RuleVersion(0)]
	public StartTransactionOptionListContext startTransactionOptionList() {
		StartTransactionOptionListContext _localctx = new StartTransactionOptionListContext(Context, State);
		EnterRule(_localctx, 460, RULE_startTransactionOptionList);
		int _la;
		try {
			State = 4046;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case WITH_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4041;
				Match(WITH_SYMBOL);
				State = 4042;
				Match(CONSISTENT_SYMBOL);
				State = 4043;
				Match(SNAPSHOT_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4044;
				Match(READ_SYMBOL);
				State = 4045;
				_la = TokenStream.LA(1);
				if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SavepointStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySqlParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySqlParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELEASE_SYMBOL() { return GetToken(MySqlParser.RELEASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] NO_SYMBOL() { return GetTokens(MySqlParser.NO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL(int i) {
			return GetToken(MySqlParser.NO_SYMBOL, i);
		}
		public SavepointStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_savepointStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSavepointStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSavepointStatement(this);
		}
	}

	[RuleVersion(0)]
	public SavepointStatementContext savepointStatement() {
		SavepointStatementContext _localctx = new SavepointStatementContext(Context, State);
		EnterRule(_localctx, 462, RULE_savepointStatement);
		int _la;
		try {
			State = 4077;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SAVEPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4048;
				Match(SAVEPOINT_SYMBOL);
				State = 4049;
				identifier();
				}
				break;
			case ROLLBACK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4050;
				Match(ROLLBACK_SYMBOL);
				State = 4052;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WORK_SYMBOL) {
					{
					State = 4051;
					Match(WORK_SYMBOL);
					}
				}

				State = 4072;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TO_SYMBOL:
					{
					State = 4054;
					Match(TO_SYMBOL);
					State = 4056;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,415,Context) ) {
					case 1:
						{
						State = 4055;
						Match(SAVEPOINT_SYMBOL);
						}
						break;
					}
					State = 4058;
					identifier();
					}
					break;
				case Eof:
				case SEMICOLON_SYMBOL:
				case AND_SYMBOL:
				case NO_SYMBOL:
				case RELEASE_SYMBOL:
					{
					State = 4064;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 4059;
						Match(AND_SYMBOL);
						State = 4061;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 4060;
							Match(NO_SYMBOL);
							}
						}

						State = 4063;
						Match(CHAIN_SYMBOL);
						}
					}

					State = 4070;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NO_SYMBOL || _la==RELEASE_SYMBOL) {
						{
						State = 4067;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NO_SYMBOL) {
							{
							State = 4066;
							Match(NO_SYMBOL);
							}
						}

						State = 4069;
						Match(RELEASE_SYMBOL);
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case RELEASE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4074;
				Match(RELEASE_SYMBOL);
				State = 4075;
				Match(SAVEPOINT_SYMBOL);
				State = 4076;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LockItemContext[] lockItem() {
			return GetRuleContexts<LockItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockItemContext lockItem(int i) {
			return GetRuleContext<LockItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySqlParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySqlParser.UNLOCK_SYMBOL, 0); }
		public LockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockStatement(this);
		}
	}

	[RuleVersion(0)]
	public LockStatementContext lockStatement() {
		LockStatementContext _localctx = new LockStatementContext(Context, State);
		EnterRule(_localctx, 464, RULE_lockStatement);
		int _la;
		try {
			State = 4095;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,423,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4079;
				Match(LOCK_SYMBOL);
				State = 4080;
				_la = TokenStream.LA(1);
				if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4081;
				lockItem();
				State = 4086;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4082;
					Match(COMMA_SYMBOL);
					State = 4083;
					lockItem();
					}
					}
					State = 4088;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4089;
				Match(LOCK_SYMBOL);
				State = 4090;
				Match(INSTANCE_SYMBOL);
				State = 4091;
				Match(FOR_SYMBOL);
				State = 4092;
				Match(BACKUP_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4093;
				Match(UNLOCK_SYMBOL);
				State = 4094;
				_la = TokenStream.LA(1);
				if ( !(_la==INSTANCE_SYMBOL || _la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LockOptionContext lockOption() {
			return GetRuleContext<LockOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableAliasContext tableAlias() {
			return GetRuleContext<TableAliasContext>(0);
		}
		public LockItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockItem(this);
		}
	}

	[RuleVersion(0)]
	public LockItemContext lockItem() {
		LockItemContext _localctx = new LockItemContext(Context, State);
		EnterRule(_localctx, 466, RULE_lockItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4097;
			tableRef();
			State = 4099;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,424,Context) ) {
			case 1:
				{
				State = 4098;
				tableAlias();
				}
				break;
			}
			State = 4101;
			lockOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LockOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySqlParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOW_PRIORITY_SYMBOL() { return GetToken(MySqlParser.LOW_PRIORITY_SYMBOL, 0); }
		public LockOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lockOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLockOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLockOption(this);
		}
	}

	[RuleVersion(0)]
	public LockOptionContext lockOption() {
		LockOptionContext _localctx = new LockOptionContext(Context, State);
		EnterRule(_localctx, 468, RULE_lockOption);
		int _la;
		try {
			State = 4111;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4103;
				Match(READ_SYMBOL);
				State = 4105;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL) {
					{
					State = 4104;
					Match(LOCAL_SYMBOL);
					}
				}

				}
				break;
			case LOW_PRIORITY_SYMBOL:
			case WRITE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOW_PRIORITY_SYMBOL) {
					{
					State = 4107;
					Match(LOW_PRIORITY_SYMBOL);
					}
				}

				State = 4110;
				Match(WRITE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySqlParser.XA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XidContext xid() {
			return GetRuleContext<XidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySqlParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySqlParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySqlParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySqlParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySqlParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySqlParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public XaConvertContext xaConvert() {
			return GetRuleContext<XaConvertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JOIN_SYMBOL() { return GetToken(MySqlParser.JOIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySqlParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySqlParser.MIGRATE_SYMBOL, 0); }
		public XaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaStatement(this);
		}
	}

	[RuleVersion(0)]
	public XaStatementContext xaStatement() {
		XaStatementContext _localctx = new XaStatementContext(Context, State);
		EnterRule(_localctx, 470, RULE_xaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4113;
			Match(XA_SYMBOL);
			State = 4142;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BEGIN_SYMBOL:
			case START_SYMBOL:
				{
				State = 4114;
				_la = TokenStream.LA(1);
				if ( !(_la==BEGIN_SYMBOL || _la==START_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4115;
				xid();
				State = 4117;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) {
					{
					State = 4116;
					_la = TokenStream.LA(1);
					if ( !(_la==JOIN_SYMBOL || _la==RESUME_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case END_SYMBOL:
				{
				State = 4119;
				Match(END_SYMBOL);
				State = 4120;
				xid();
				State = 4126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SUSPEND_SYMBOL) {
					{
					State = 4121;
					Match(SUSPEND_SYMBOL);
					State = 4124;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FOR_SYMBOL) {
						{
						State = 4122;
						Match(FOR_SYMBOL);
						State = 4123;
						Match(MIGRATE_SYMBOL);
						}
					}

					}
				}

				}
				break;
			case PREPARE_SYMBOL:
				{
				State = 4128;
				Match(PREPARE_SYMBOL);
				State = 4129;
				xid();
				}
				break;
			case COMMIT_SYMBOL:
				{
				State = 4130;
				Match(COMMIT_SYMBOL);
				State = 4131;
				xid();
				State = 4134;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ONE_SYMBOL) {
					{
					State = 4132;
					Match(ONE_SYMBOL);
					State = 4133;
					Match(PHASE_SYMBOL);
					}
				}

				}
				break;
			case ROLLBACK_SYMBOL:
				{
				State = 4136;
				Match(ROLLBACK_SYMBOL);
				State = 4137;
				xid();
				}
				break;
			case RECOVER_SYMBOL:
				{
				State = 4138;
				Match(RECOVER_SYMBOL);
				State = 4140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONVERT_SYMBOL) {
					{
					State = 4139;
					xaConvert();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XaConvertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySqlParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySqlParser.XID_SYMBOL, 0); }
		public XaConvertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xaConvert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXaConvert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXaConvert(this);
		}
	}

	[RuleVersion(0)]
	public XaConvertContext xaConvert() {
		XaConvertContext _localctx = new XaConvertContext(Context, State);
		EnterRule(_localctx, 472, RULE_xaConvert);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4144;
			Match(CONVERT_SYMBOL);
			State = 4145;
			Match(XID_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class XidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public XidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_xid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterXid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitXid(this);
		}
	}

	[RuleVersion(0)]
	public XidContext xid() {
		XidContext _localctx = new XidContext(Context, State);
		EnterRule(_localctx, 474, RULE_xid);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4147;
			textString();
			State = 4154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 4148;
				Match(COMMA_SYMBOL);
				State = 4149;
				textString();
				State = 4152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 4150;
					Match(COMMA_SYMBOL);
					State = 4151;
					ulong_number();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PURGE_SYMBOL() { return GetToken(MySqlParser.PURGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PurgeOptionsContext purgeOptions() {
			return GetRuleContext<PurgeOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeSourceContext changeSource() {
			return GetRuleContext<ChangeSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySqlParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResetOptionContext[] resetOption() {
			return GetRuleContexts<ResetOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResetOptionContext resetOption(int i) {
			return GetRuleContext<ResetOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsIdentifierContext ifExistsIdentifier() {
			return GetRuleContext<IfExistsIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartReplicaStatementContext startReplicaStatement() {
			return GetRuleContext<StartReplicaStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StopReplicaStatementContext stopReplicaStatement() {
			return GetRuleContext<StopReplicaStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationContext changeReplication() {
			return GetRuleContext<ChangeReplicationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicationLoadContext replicationLoad() {
			return GetRuleContext<ReplicationLoadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationContext groupReplication() {
			return GetRuleContext<GroupReplicationContext>(0);
		}
		public ReplicationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicationStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationStatementContext replicationStatement() {
		ReplicationStatementContext _localctx = new ReplicationStatementContext(Context, State);
		EnterRule(_localctx, 476, RULE_replicationStatement);
		int _la;
		try {
			State = 4178;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,438,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4156;
				Match(PURGE_SYMBOL);
				State = 4157;
				purgeOptions();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4158;
				changeSource();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4159;
				Match(RESET_SYMBOL);
				State = 4160;
				resetOption();
				State = 4165;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4161;
					Match(COMMA_SYMBOL);
					State = 4162;
					resetOption();
					}
					}
					State = 4167;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4168;
				Match(RESET_SYMBOL);
				State = 4169;
				Match(PERSIST_SYMBOL);
				State = 4171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IF_SYMBOL) {
					{
					State = 4170;
					ifExistsIdentifier();
					}
				}

				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4173;
				startReplicaStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4174;
				stopReplicaStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4175;
				changeReplication();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4176;
				replicationLoad();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4177;
				groupReplication();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PurgeOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEFORE_SYMBOL() { return GetToken(MySqlParser.BEFORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public PurgeOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_purgeOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPurgeOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPurgeOptions(this);
		}
	}

	[RuleVersion(0)]
	public PurgeOptionsContext purgeOptions() {
		PurgeOptionsContext _localctx = new PurgeOptionsContext(Context, State);
		EnterRule(_localctx, 478, RULE_purgeOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4180;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 4181;
			Match(LOGS_SYMBOL);
			State = 4186;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TO_SYMBOL:
				{
				State = 4182;
				Match(TO_SYMBOL);
				State = 4183;
				textLiteral();
				}
				break;
			case BEFORE_SYMBOL:
				{
				State = 4184;
				Match(BEFORE_SYMBOL);
				State = 4185;
				expr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResetOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public MasterOrBinaryLogsAndGtidsContext masterOrBinaryLogsAndGtids() {
			return GetRuleContext<MasterOrBinaryLogsAndGtidsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceResetOptionsContext sourceResetOptions() {
			return GetRuleContext<SourceResetOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ResetOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resetOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResetOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResetOption(this);
		}
	}

	[RuleVersion(0)]
	public ResetOptionContext resetOption() {
		ResetOptionContext _localctx = new ResetOptionContext(Context, State);
		EnterRule(_localctx, 480, RULE_resetOption);
		int _la;
		try {
			State = 4199;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,443,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4188;
				masterOrBinaryLogsAndGtids();
				State = 4190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==TO_SYMBOL) {
					{
					State = 4189;
					sourceResetOptions();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4192;
				replica();
				State = 4194;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALL_SYMBOL) {
					{
					State = 4193;
					Match(ALL_SYMBOL);
					}
				}

				State = 4197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4196;
					channel();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MasterOrBinaryLogsAndGtidsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTIDS_SYMBOL() { return GetToken(MySqlParser.GTIDS_SYMBOL, 0); }
		public MasterOrBinaryLogsAndGtidsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_masterOrBinaryLogsAndGtids; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterMasterOrBinaryLogsAndGtids(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitMasterOrBinaryLogsAndGtids(this);
		}
	}

	[RuleVersion(0)]
	public MasterOrBinaryLogsAndGtidsContext masterOrBinaryLogsAndGtids() {
		MasterOrBinaryLogsAndGtidsContext _localctx = new MasterOrBinaryLogsAndGtidsContext(Context, State);
		EnterRule(_localctx, 482, RULE_masterOrBinaryLogsAndGtids);
		try {
			State = 4207;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,444,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4201;
				Match(MASTER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4202;
				if (!(this.ServerVersion >= 80032)) throw new FailedPredicateException(this, "this.ServerVersion >= 80032");
				State = 4203;
				Match(BINARY_SYMBOL);
				State = 4204;
				Match(LOGS_SYMBOL);
				State = 4205;
				Match(AND_SYMBOL);
				State = 4206;
				Match(GTIDS_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceResetOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		public SourceResetOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceResetOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceResetOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceResetOptions(this);
		}
	}

	[RuleVersion(0)]
	public SourceResetOptionsContext sourceResetOptions() {
		SourceResetOptionsContext _localctx = new SourceResetOptionsContext(Context, State);
		EnterRule(_localctx, 484, RULE_sourceResetOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4209;
			Match(TO_SYMBOL);
			State = 4210;
			real_ulonglong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicationLoadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySqlParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ReplicationLoadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicationLoad; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicationLoad(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicationLoad(this);
		}
	}

	[RuleVersion(0)]
	public ReplicationLoadContext replicationLoad() {
		ReplicationLoadContext _localctx = new ReplicationLoadContext(Context, State);
		EnterRule(_localctx, 486, RULE_replicationLoad);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4212;
			Match(LOAD_SYMBOL);
			State = 4216;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATA_SYMBOL:
				{
				State = 4213;
				Match(DATA_SYMBOL);
				}
				break;
			case TABLE_SYMBOL:
				{
				State = 4214;
				Match(TABLE_SYMBOL);
				State = 4215;
				tableRef();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4218;
			Match(FROM_SYMBOL);
			State = 4219;
			Match(MASTER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySqlParser.SOURCE_SYMBOL, 0); }
		public ChangeReplicationSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSource(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceContext changeReplicationSource() {
		ChangeReplicationSourceContext _localctx = new ChangeReplicationSourceContext(Context, State);
		EnterRule(_localctx, 488, RULE_changeReplicationSource);
		try {
			State = 4225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,446,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4221;
				Match(MASTER_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4222;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 4223;
				Match(REPLICATION_SYMBOL);
				State = 4224;
				Match(SOURCE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeSourceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySqlParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceContext changeReplicationSource() {
			return GetRuleContext<ChangeReplicationSourceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefinitionsContext sourceDefinitions() {
			return GetRuleContext<SourceDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeSourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeSource; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeSource(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeSource(this);
		}
	}

	[RuleVersion(0)]
	public ChangeSourceContext changeSource() {
		ChangeSourceContext _localctx = new ChangeSourceContext(Context, State);
		EnterRule(_localctx, 490, RULE_changeSource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4227;
			Match(CHANGE_SYMBOL);
			State = 4228;
			changeReplicationSource();
			State = 4229;
			Match(TO_SYMBOL);
			State = 4230;
			sourceDefinitions();
			State = 4232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4231;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefinitionContext[] sourceDefinition() {
			return GetRuleContexts<SourceDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceDefinitionContext sourceDefinition(int i) {
			return GetRuleContext<SourceDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public SourceDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public SourceDefinitionsContext sourceDefinitions() {
		SourceDefinitionsContext _localctx = new SourceDefinitionsContext(Context, State);
		EnterRule(_localctx, 492, RULE_sourceDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4234;
			sourceDefinition();
			State = 4239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4235;
				Match(COMMA_SYMBOL);
				State = 4236;
				sourceDefinition();
				}
				}
				State = 4241;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceHostContext changeReplicationSourceHost() {
			return GetRuleContext<ChangeReplicationSourceHostContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySqlParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceBindContext changeReplicationSourceBind() {
			return GetRuleContext<ChangeReplicationSourceBindContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceUserContext changeReplicationSourceUser() {
			return GetRuleContext<ChangeReplicationSourceUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourcePasswordContext changeReplicationSourcePassword() {
			return GetRuleContext<ChangeReplicationSourcePasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourcePortContext changeReplicationSourcePort() {
			return GetRuleContext<ChangeReplicationSourcePortContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceConnectRetryContext changeReplicationSourceConnectRetry() {
			return GetRuleContext<ChangeReplicationSourceConnectRetryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceRetryCountContext changeReplicationSourceRetryCount() {
			return GetRuleContext<ChangeReplicationSourceRetryCountContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceDelayContext changeReplicationSourceDelay() {
			return GetRuleContext<ChangeReplicationSourceDelayContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLContext changeReplicationSourceSSL() {
			return GetRuleContext<ChangeReplicationSourceSSLContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCAContext changeReplicationSourceSSLCA() {
			return GetRuleContext<ChangeReplicationSourceSSLCAContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCApathContext changeReplicationSourceSSLCApath() {
			return GetRuleContext<ChangeReplicationSourceSSLCApathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceTLSVersionContext changeReplicationSourceTLSVersion() {
			return GetRuleContext<ChangeReplicationSourceTLSVersionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCertContext changeReplicationSourceSSLCert() {
			return GetRuleContext<ChangeReplicationSourceSSLCertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceTLSCiphersuitesContext changeReplicationSourceTLSCiphersuites() {
			return GetRuleContext<ChangeReplicationSourceTLSCiphersuitesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceTlsCiphersuitesDefContext sourceTlsCiphersuitesDef() {
			return GetRuleContext<SourceTlsCiphersuitesDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCipherContext changeReplicationSourceSSLCipher() {
			return GetRuleContext<ChangeReplicationSourceSSLCipherContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLKeyContext changeReplicationSourceSSLKey() {
			return GetRuleContext<ChangeReplicationSourceSSLKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLVerifyServerCertContext changeReplicationSourceSSLVerifyServerCert() {
			return GetRuleContext<ChangeReplicationSourceSSLVerifyServerCertContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCLRContext changeReplicationSourceSSLCLR() {
			return GetRuleContext<ChangeReplicationSourceSSLCLRContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceSSLCLRpathContext changeReplicationSourceSSLCLRpath() {
			return GetRuleContext<ChangeReplicationSourceSSLCLRpathContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourcePublicKeyContext changeReplicationSourcePublicKey() {
			return GetRuleContext<ChangeReplicationSourcePublicKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceGetSourcePublicKeyContext changeReplicationSourceGetSourcePublicKey() {
			return GetRuleContext<ChangeReplicationSourceGetSourcePublicKeyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceHeartbeatPeriodContext changeReplicationSourceHeartbeatPeriod() {
			return GetRuleContext<ChangeReplicationSourceHeartbeatPeriodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySqlParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ServerIdListContext serverIdList() {
			return GetRuleContext<ServerIdListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceCompressionAlgorithmContext changeReplicationSourceCompressionAlgorithm() {
			return GetRuleContext<ChangeReplicationSourceCompressionAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceZstdCompressionLevelContext changeReplicationSourceZstdCompressionLevel() {
			return GetRuleContext<ChangeReplicationSourceZstdCompressionLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChangeReplicationSourceAutoPositionContext changeReplicationSourceAutoPosition() {
			return GetRuleContext<ChangeReplicationSourceAutoPositionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return GetToken(MySqlParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrivilegeCheckDefContext privilegeCheckDef() {
			return GetRuleContext<PrivilegeCheckDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return GetToken(MySqlParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
			return GetRuleContext<TablePrimaryKeyCheckDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL() { return GetToken(MySqlParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL() { return GetToken(MySqlParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignGtidsToAnonymousTransactionsDefinitionContext assignGtidsToAnonymousTransactionsDefinition() {
			return GetRuleContext<AssignGtidsToAnonymousTransactionsDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_ONLY_SYMBOL() { return GetToken(MySqlParser.GTID_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SourceFileDefContext sourceFileDef() {
			return GetRuleContext<SourceFileDefContext>(0);
		}
		public SourceDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SourceDefinitionContext sourceDefinition() {
		SourceDefinitionContext _localctx = new SourceDefinitionContext(Context, State);
		EnterRule(_localctx, 494, RULE_sourceDefinition);
		try {
			State = 4370;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,449,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4242;
				changeReplicationSourceHost();
				State = 4243;
				Match(EQUAL_OPERATOR);
				State = 4244;
				textStringNoLinebreak();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4246;
				Match(NETWORK_NAMESPACE_SYMBOL);
				State = 4247;
				Match(EQUAL_OPERATOR);
				State = 4248;
				textStringNoLinebreak();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4249;
				changeReplicationSourceBind();
				State = 4250;
				Match(EQUAL_OPERATOR);
				State = 4251;
				textStringNoLinebreak();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4253;
				changeReplicationSourceUser();
				State = 4254;
				Match(EQUAL_OPERATOR);
				State = 4255;
				textStringNoLinebreak();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4257;
				changeReplicationSourcePassword();
				State = 4258;
				Match(EQUAL_OPERATOR);
				State = 4259;
				textStringNoLinebreak();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4261;
				changeReplicationSourcePort();
				State = 4262;
				Match(EQUAL_OPERATOR);
				State = 4263;
				ulong_number();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4265;
				changeReplicationSourceConnectRetry();
				State = 4266;
				Match(EQUAL_OPERATOR);
				State = 4267;
				ulong_number();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 4269;
				changeReplicationSourceRetryCount();
				State = 4270;
				Match(EQUAL_OPERATOR);
				State = 4271;
				ulong_number();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 4273;
				changeReplicationSourceDelay();
				State = 4274;
				Match(EQUAL_OPERATOR);
				State = 4275;
				ulong_number();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 4277;
				changeReplicationSourceSSL();
				State = 4278;
				Match(EQUAL_OPERATOR);
				State = 4279;
				ulong_number();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 4281;
				changeReplicationSourceSSLCA();
				State = 4282;
				Match(EQUAL_OPERATOR);
				State = 4283;
				textStringNoLinebreak();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 4285;
				changeReplicationSourceSSLCApath();
				State = 4286;
				Match(EQUAL_OPERATOR);
				State = 4287;
				textStringNoLinebreak();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 4289;
				changeReplicationSourceTLSVersion();
				State = 4290;
				Match(EQUAL_OPERATOR);
				State = 4291;
				textStringNoLinebreak();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 4293;
				changeReplicationSourceSSLCert();
				State = 4294;
				Match(EQUAL_OPERATOR);
				State = 4295;
				textStringNoLinebreak();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 4297;
				changeReplicationSourceTLSCiphersuites();
				State = 4298;
				Match(EQUAL_OPERATOR);
				State = 4299;
				sourceTlsCiphersuitesDef();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 4301;
				changeReplicationSourceSSLCipher();
				State = 4302;
				Match(EQUAL_OPERATOR);
				State = 4303;
				textStringNoLinebreak();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 4305;
				changeReplicationSourceSSLKey();
				State = 4306;
				Match(EQUAL_OPERATOR);
				State = 4307;
				textStringNoLinebreak();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 4309;
				changeReplicationSourceSSLVerifyServerCert();
				State = 4310;
				Match(EQUAL_OPERATOR);
				State = 4311;
				ulong_number();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 4313;
				changeReplicationSourceSSLCLR();
				State = 4314;
				Match(EQUAL_OPERATOR);
				State = 4315;
				textLiteral();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 4317;
				changeReplicationSourceSSLCLRpath();
				State = 4318;
				Match(EQUAL_OPERATOR);
				State = 4319;
				textStringNoLinebreak();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 4321;
				changeReplicationSourcePublicKey();
				State = 4322;
				Match(EQUAL_OPERATOR);
				State = 4323;
				textStringNoLinebreak();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 4325;
				changeReplicationSourceGetSourcePublicKey();
				State = 4326;
				Match(EQUAL_OPERATOR);
				State = 4327;
				ulong_number();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 4329;
				changeReplicationSourceHeartbeatPeriod();
				State = 4330;
				Match(EQUAL_OPERATOR);
				State = 4331;
				ulong_number();
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 4333;
				Match(IGNORE_SERVER_IDS_SYMBOL);
				State = 4334;
				Match(EQUAL_OPERATOR);
				State = 4335;
				serverIdList();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 4336;
				changeReplicationSourceCompressionAlgorithm();
				State = 4337;
				Match(EQUAL_OPERATOR);
				State = 4338;
				textStringLiteral();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 4340;
				changeReplicationSourceZstdCompressionLevel();
				State = 4341;
				Match(EQUAL_OPERATOR);
				State = 4342;
				ulong_number();
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 4344;
				changeReplicationSourceAutoPosition();
				State = 4345;
				Match(EQUAL_OPERATOR);
				State = 4346;
				ulong_number();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 4348;
				Match(PRIVILEGE_CHECKS_USER_SYMBOL);
				State = 4349;
				Match(EQUAL_OPERATOR);
				State = 4350;
				privilegeCheckDef();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 4351;
				Match(REQUIRE_ROW_FORMAT_SYMBOL);
				State = 4352;
				Match(EQUAL_OPERATOR);
				State = 4353;
				ulong_number();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 4354;
				Match(REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
				State = 4355;
				Match(EQUAL_OPERATOR);
				State = 4356;
				tablePrimaryKeyCheckDef();
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 4357;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 4358;
				Match(SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL);
				State = 4359;
				Match(EQUAL_OPERATOR);
				State = 4360;
				real_ulong_number();
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 4361;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 4362;
				Match(ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL);
				State = 4363;
				Match(EQUAL_OPERATOR);
				State = 4364;
				assignGtidsToAnonymousTransactionsDefinition();
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 4365;
				if (!(this.ServerVersion >= 80027)) throw new FailedPredicateException(this, "this.ServerVersion >= 80027");
				State = 4366;
				Match(GTID_ONLY_SYMBOL);
				State = 4367;
				Match(EQUAL_OPERATOR);
				State = 4368;
				real_ulong_number();
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 4369;
				sourceFileDef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceAutoPositionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySqlParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_AUTO_POSITION_SYMBOL() { return GetToken(MySqlParser.SOURCE_AUTO_POSITION_SYMBOL, 0); }
		public ChangeReplicationSourceAutoPositionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceAutoPosition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceAutoPosition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceAutoPosition(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceAutoPositionContext changeReplicationSourceAutoPosition() {
		ChangeReplicationSourceAutoPositionContext _localctx = new ChangeReplicationSourceAutoPositionContext(Context, State);
		EnterRule(_localctx, 496, RULE_changeReplicationSourceAutoPosition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4372;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_AUTO_POSITION_SYMBOL || _la==SOURCE_AUTO_POSITION_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceHostContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySqlParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_HOST_SYMBOL() { return GetToken(MySqlParser.SOURCE_HOST_SYMBOL, 0); }
		public ChangeReplicationSourceHostContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceHost; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceHost(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceHost(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceHostContext changeReplicationSourceHost() {
		ChangeReplicationSourceHostContext _localctx = new ChangeReplicationSourceHostContext(Context, State);
		EnterRule(_localctx, 498, RULE_changeReplicationSourceHost);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4374;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_HOST_SYMBOL || _la==SOURCE_HOST_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceBindContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_BIND_SYMBOL() { return GetToken(MySqlParser.MASTER_BIND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_BIND_SYMBOL() { return GetToken(MySqlParser.SOURCE_BIND_SYMBOL, 0); }
		public ChangeReplicationSourceBindContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceBind; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceBind(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceBind(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceBindContext changeReplicationSourceBind() {
		ChangeReplicationSourceBindContext _localctx = new ChangeReplicationSourceBindContext(Context, State);
		EnterRule(_localctx, 500, RULE_changeReplicationSourceBind);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4376;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_BIND_SYMBOL || _la==SOURCE_BIND_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySqlParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_USER_SYMBOL() { return GetToken(MySqlParser.SOURCE_USER_SYMBOL, 0); }
		public ChangeReplicationSourceUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceUser(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceUserContext changeReplicationSourceUser() {
		ChangeReplicationSourceUserContext _localctx = new ChangeReplicationSourceUserContext(Context, State);
		EnterRule(_localctx, 502, RULE_changeReplicationSourceUser);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4378;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_USER_SYMBOL || _la==SOURCE_USER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourcePasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySqlParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PASSWORD_SYMBOL() { return GetToken(MySqlParser.SOURCE_PASSWORD_SYMBOL, 0); }
		public ChangeReplicationSourcePasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourcePassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourcePassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourcePassword(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourcePasswordContext changeReplicationSourcePassword() {
		ChangeReplicationSourcePasswordContext _localctx = new ChangeReplicationSourcePasswordContext(Context, State);
		EnterRule(_localctx, 504, RULE_changeReplicationSourcePassword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4380;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_PASSWORD_SYMBOL || _la==SOURCE_PASSWORD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourcePortContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySqlParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PORT_SYMBOL() { return GetToken(MySqlParser.SOURCE_PORT_SYMBOL, 0); }
		public ChangeReplicationSourcePortContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourcePort; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourcePort(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourcePort(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourcePortContext changeReplicationSourcePort() {
		ChangeReplicationSourcePortContext _localctx = new ChangeReplicationSourcePortContext(Context, State);
		EnterRule(_localctx, 506, RULE_changeReplicationSourcePort);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4382;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_PORT_SYMBOL || _la==SOURCE_PORT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceConnectRetryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_CONNECT_RETRY_SYMBOL() { return GetToken(MySqlParser.SOURCE_CONNECT_RETRY_SYMBOL, 0); }
		public ChangeReplicationSourceConnectRetryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceConnectRetry; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceConnectRetry(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceConnectRetry(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceConnectRetryContext changeReplicationSourceConnectRetry() {
		ChangeReplicationSourceConnectRetryContext _localctx = new ChangeReplicationSourceConnectRetryContext(Context, State);
		EnterRule(_localctx, 508, RULE_changeReplicationSourceConnectRetry);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4384;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_CONNECT_RETRY_SYMBOL || _la==SOURCE_CONNECT_RETRY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceRetryCountContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySqlParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_RETRY_COUNT_SYMBOL() { return GetToken(MySqlParser.SOURCE_RETRY_COUNT_SYMBOL, 0); }
		public ChangeReplicationSourceRetryCountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceRetryCount; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceRetryCount(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceRetryCount(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceRetryCountContext changeReplicationSourceRetryCount() {
		ChangeReplicationSourceRetryCountContext _localctx = new ChangeReplicationSourceRetryCountContext(Context, State);
		EnterRule(_localctx, 510, RULE_changeReplicationSourceRetryCount);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4386;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_RETRY_COUNT_SYMBOL || _la==SOURCE_RETRY_COUNT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceDelayContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySqlParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_DELAY_SYMBOL() { return GetToken(MySqlParser.SOURCE_DELAY_SYMBOL, 0); }
		public ChangeReplicationSourceDelayContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceDelay; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceDelay(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceDelay(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceDelayContext changeReplicationSourceDelay() {
		ChangeReplicationSourceDelayContext _localctx = new ChangeReplicationSourceDelayContext(Context, State);
		EnterRule(_localctx, 512, RULE_changeReplicationSourceDelay);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4388;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_DELAY_SYMBOL || _la==SOURCE_DELAY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_SYMBOL, 0); }
		public ChangeReplicationSourceSSLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSL(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLContext changeReplicationSourceSSL() {
		ChangeReplicationSourceSSLContext _localctx = new ChangeReplicationSourceSSLContext(Context, State);
		EnterRule(_localctx, 514, RULE_changeReplicationSourceSSL);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4390;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_SYMBOL || _la==SOURCE_SSL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCAContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CA_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CA_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCAContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCA; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCA(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCA(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCAContext changeReplicationSourceSSLCA() {
		ChangeReplicationSourceSSLCAContext _localctx = new ChangeReplicationSourceSSLCAContext(Context, State);
		EnterRule(_localctx, 516, RULE_changeReplicationSourceSSLCA);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4392;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CA_SYMBOL || _la==SOURCE_SSL_CA_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCApathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CAPATH_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CAPATH_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCApathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCApath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCApath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCApath(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCApathContext changeReplicationSourceSSLCApath() {
		ChangeReplicationSourceSSLCApathContext _localctx = new ChangeReplicationSourceSSLCApathContext(Context, State);
		EnterRule(_localctx, 518, RULE_changeReplicationSourceSSLCApath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4394;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CAPATH_SYMBOL || _la==SOURCE_SSL_CAPATH_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCipherContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CIPHER_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CIPHER_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCipherContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCipher; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCipher(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCipher(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCipherContext changeReplicationSourceSSLCipher() {
		ChangeReplicationSourceSSLCipherContext _localctx = new ChangeReplicationSourceSSLCipherContext(Context, State);
		EnterRule(_localctx, 520, RULE_changeReplicationSourceSSLCipher);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4396;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CIPHER_SYMBOL || _la==SOURCE_SSL_CIPHER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCLRContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CRL_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CRL_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCLRContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCLR; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCLR(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCLR(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCLRContext changeReplicationSourceSSLCLR() {
		ChangeReplicationSourceSSLCLRContext _localctx = new ChangeReplicationSourceSSLCLRContext(Context, State);
		EnterRule(_localctx, 522, RULE_changeReplicationSourceSSLCLR);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4398;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CRL_SYMBOL || _la==SOURCE_SSL_CRL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCLRpathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CRLPATH_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CRLPATH_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCLRpathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCLRpath; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCLRpath(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCLRpath(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCLRpathContext changeReplicationSourceSSLCLRpath() {
		ChangeReplicationSourceSSLCLRpathContext _localctx = new ChangeReplicationSourceSSLCLRpathContext(Context, State);
		EnterRule(_localctx, 524, RULE_changeReplicationSourceSSLCLRpath);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4400;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CRLPATH_SYMBOL || _la==SOURCE_SSL_CRLPATH_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_KEY_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_KEY_SYMBOL, 0); }
		public ChangeReplicationSourceSSLKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLKey(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLKeyContext changeReplicationSourceSSLKey() {
		ChangeReplicationSourceSSLKeyContext _localctx = new ChangeReplicationSourceSSLKeyContext(Context, State);
		EnterRule(_localctx, 526, RULE_changeReplicationSourceSSLKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4402;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_KEY_SYMBOL || _la==SOURCE_SSL_KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLVerifyServerCertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		public ChangeReplicationSourceSSLVerifyServerCertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLVerifyServerCert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLVerifyServerCert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLVerifyServerCert(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLVerifyServerCertContext changeReplicationSourceSSLVerifyServerCert() {
		ChangeReplicationSourceSSLVerifyServerCertContext _localctx = new ChangeReplicationSourceSSLVerifyServerCertContext(Context, State);
		EnterRule(_localctx, 528, RULE_changeReplicationSourceSSLVerifyServerCert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4404;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL || _la==SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceTLSVersionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TLS_VERSION_SYMBOL() { return GetToken(MySqlParser.SOURCE_TLS_VERSION_SYMBOL, 0); }
		public ChangeReplicationSourceTLSVersionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceTLSVersion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceTLSVersion(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceTLSVersion(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceTLSVersionContext changeReplicationSourceTLSVersion() {
		ChangeReplicationSourceTLSVersionContext _localctx = new ChangeReplicationSourceTLSVersionContext(Context, State);
		EnterRule(_localctx, 530, RULE_changeReplicationSourceTLSVersion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4406;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_TLS_VERSION_SYMBOL || _la==SOURCE_TLS_VERSION_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceTLSCiphersuitesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySqlParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0); }
		public ChangeReplicationSourceTLSCiphersuitesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceTLSCiphersuites; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceTLSCiphersuites(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceTLSCiphersuites(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceTLSCiphersuitesContext changeReplicationSourceTLSCiphersuites() {
		ChangeReplicationSourceTLSCiphersuitesContext _localctx = new ChangeReplicationSourceTLSCiphersuitesContext(Context, State);
		EnterRule(_localctx, 532, RULE_changeReplicationSourceTLSCiphersuites);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4408;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_TLS_CIPHERSUITES_SYMBOL || _la==SOURCE_TLS_CIPHERSUITES_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceSSLCertContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CERT_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CERT_SYMBOL, 0); }
		public ChangeReplicationSourceSSLCertContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceSSLCert; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceSSLCert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceSSLCert(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceSSLCertContext changeReplicationSourceSSLCert() {
		ChangeReplicationSourceSSLCertContext _localctx = new ChangeReplicationSourceSSLCertContext(Context, State);
		EnterRule(_localctx, 534, RULE_changeReplicationSourceSSLCert);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4410;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_SSL_CERT_SYMBOL || _la==SOURCE_SSL_CERT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourcePublicKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySqlParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySqlParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0); }
		public ChangeReplicationSourcePublicKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourcePublicKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourcePublicKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourcePublicKey(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourcePublicKeyContext changeReplicationSourcePublicKey() {
		ChangeReplicationSourcePublicKeyContext _localctx = new ChangeReplicationSourcePublicKeyContext(Context, State);
		EnterRule(_localctx, 536, RULE_changeReplicationSourcePublicKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4412;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_PUBLIC_KEY_PATH_SYMBOL || _la==SOURCE_PUBLIC_KEY_PATH_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceGetSourcePublicKeyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySqlParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_SOURCE_PUBLIC_KEY_SYMBOL() { return GetToken(MySqlParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0); }
		public ChangeReplicationSourceGetSourcePublicKeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceGetSourcePublicKey; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceGetSourcePublicKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceGetSourcePublicKey(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceGetSourcePublicKeyContext changeReplicationSourceGetSourcePublicKey() {
		ChangeReplicationSourceGetSourcePublicKeyContext _localctx = new ChangeReplicationSourceGetSourcePublicKeyContext(Context, State);
		EnterRule(_localctx, 538, RULE_changeReplicationSourceGetSourcePublicKey);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4414;
			_la = TokenStream.LA(1);
			if ( !(_la==GET_MASTER_PUBLIC_KEY_SYMBOL || _la==GET_SOURCE_PUBLIC_KEY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceHeartbeatPeriodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySqlParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0); }
		public ChangeReplicationSourceHeartbeatPeriodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceHeartbeatPeriod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceHeartbeatPeriod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceHeartbeatPeriod(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceHeartbeatPeriodContext changeReplicationSourceHeartbeatPeriod() {
		ChangeReplicationSourceHeartbeatPeriodContext _localctx = new ChangeReplicationSourceHeartbeatPeriodContext(Context, State);
		EnterRule(_localctx, 540, RULE_changeReplicationSourceHeartbeatPeriod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4416;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_HEARTBEAT_PERIOD_SYMBOL || _la==SOURCE_HEARTBEAT_PERIOD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceCompressionAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySqlParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySqlParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		public ChangeReplicationSourceCompressionAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceCompressionAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceCompressionAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceCompressionAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceCompressionAlgorithmContext changeReplicationSourceCompressionAlgorithm() {
		ChangeReplicationSourceCompressionAlgorithmContext _localctx = new ChangeReplicationSourceCompressionAlgorithmContext(Context, State);
		EnterRule(_localctx, 542, RULE_changeReplicationSourceCompressionAlgorithm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4418;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_COMPRESSION_ALGORITHM_SYMBOL || _la==SOURCE_COMPRESSION_ALGORITHM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationSourceZstdCompressionLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySqlParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySqlParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		public ChangeReplicationSourceZstdCompressionLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplicationSourceZstdCompressionLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplicationSourceZstdCompressionLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplicationSourceZstdCompressionLevel(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationSourceZstdCompressionLevelContext changeReplicationSourceZstdCompressionLevel() {
		ChangeReplicationSourceZstdCompressionLevelContext _localctx = new ChangeReplicationSourceZstdCompressionLevelContext(Context, State);
		EnterRule(_localctx, 544, RULE_changeReplicationSourceZstdCompressionLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4420;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL || _la==SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrivilegeCheckDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserIdentifierOrTextContext userIdentifierOrText() {
			return GetRuleContext<UserIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		public PrivilegeCheckDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_privilegeCheckDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrivilegeCheckDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrivilegeCheckDef(this);
		}
	}

	[RuleVersion(0)]
	public PrivilegeCheckDefContext privilegeCheckDef() {
		PrivilegeCheckDefContext _localctx = new PrivilegeCheckDefContext(Context, State);
		EnterRule(_localctx, 546, RULE_privilegeCheckDef);
		try {
			State = 4424;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,450,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4422;
				userIdentifierOrText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4423;
				Match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablePrimaryKeyCheckDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM_SYMBOL() { return GetToken(MySqlParser.STREAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF_SYMBOL() { return GetToken(MySqlParser.OFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATE_SYMBOL() { return GetToken(MySqlParser.GENERATE_SYMBOL, 0); }
		public TablePrimaryKeyCheckDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablePrimaryKeyCheckDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablePrimaryKeyCheckDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablePrimaryKeyCheckDef(this);
		}
	}

	[RuleVersion(0)]
	public TablePrimaryKeyCheckDefContext tablePrimaryKeyCheckDef() {
		TablePrimaryKeyCheckDefContext _localctx = new TablePrimaryKeyCheckDefContext(Context, State);
		EnterRule(_localctx, 548, RULE_tablePrimaryKeyCheckDef);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4426;
			_la = TokenStream.LA(1);
			if ( !(_la==ON_SYMBOL || ((((_la - 752)) & ~0x3f) == 0 && ((1L << (_la - 752)) & 36028797018963971L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignGtidsToAnonymousTransactionsDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF_SYMBOL() { return GetToken(MySqlParser.OFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public AssignGtidsToAnonymousTransactionsDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignGtidsToAnonymousTransactionsDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAssignGtidsToAnonymousTransactionsDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAssignGtidsToAnonymousTransactionsDefinition(this);
		}
	}

	[RuleVersion(0)]
	public AssignGtidsToAnonymousTransactionsDefinitionContext assignGtidsToAnonymousTransactionsDefinition() {
		AssignGtidsToAnonymousTransactionsDefinitionContext _localctx = new AssignGtidsToAnonymousTransactionsDefinitionContext(Context, State);
		EnterRule(_localctx, 550, RULE_assignGtidsToAnonymousTransactionsDefinition);
		try {
			State = 4431;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,451,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4428;
				Match(OFF_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4429;
				Match(LOCAL_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4430;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceTlsCiphersuitesDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		public SourceTlsCiphersuitesDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceTlsCiphersuitesDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceTlsCiphersuitesDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceTlsCiphersuitesDef(this);
		}
	}

	[RuleVersion(0)]
	public SourceTlsCiphersuitesDefContext sourceTlsCiphersuitesDef() {
		SourceTlsCiphersuitesDefContext _localctx = new SourceTlsCiphersuitesDefContext(Context, State);
		EnterRule(_localctx, 552, RULE_sourceTlsCiphersuitesDef);
		try {
			State = 4435;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,452,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4433;
				textStringNoLinebreak();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4434;
				Match(NULL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceFileDefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceLogFileContext sourceLogFile() {
			return GetRuleContext<SourceLogFileContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceLogPosContext sourceLogPos() {
			return GetRuleContext<SourceLogPosContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		public SourceFileDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceFileDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceFileDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceFileDef(this);
		}
	}

	[RuleVersion(0)]
	public SourceFileDefContext sourceFileDef() {
		SourceFileDefContext _localctx = new SourceFileDefContext(Context, State);
		EnterRule(_localctx, 554, RULE_sourceFileDef);
		try {
			State = 4451;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
			case SOURCE_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4437;
				sourceLogFile();
				State = 4438;
				Match(EQUAL_OPERATOR);
				State = 4439;
				textStringNoLinebreak();
				}
				break;
			case MASTER_LOG_POS_SYMBOL:
			case SOURCE_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4441;
				sourceLogPos();
				State = 4442;
				Match(EQUAL_OPERATOR);
				State = 4443;
				ulonglongNumber();
				}
				break;
			case RELAY_LOG_FILE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4445;
				Match(RELAY_LOG_FILE_SYMBOL);
				State = 4446;
				Match(EQUAL_OPERATOR);
				State = 4447;
				textStringNoLinebreak();
				}
				break;
			case RELAY_LOG_POS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4448;
				Match(RELAY_LOG_POS_SYMBOL);
				State = 4449;
				Match(EQUAL_OPERATOR);
				State = 4450;
				ulong_number();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceLogFileContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.SOURCE_LOG_FILE_SYMBOL, 0); }
		public SourceLogFileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceLogFile; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceLogFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceLogFile(this);
		}
	}

	[RuleVersion(0)]
	public SourceLogFileContext sourceLogFile() {
		SourceLogFileContext _localctx = new SourceLogFileContext(Context, State);
		EnterRule(_localctx, 556, RULE_sourceLogFile);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4453;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_LOG_FILE_SYMBOL || _la==SOURCE_LOG_FILE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SourceLogPosContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_LOG_POS_SYMBOL() { return GetToken(MySqlParser.SOURCE_LOG_POS_SYMBOL, 0); }
		public SourceLogPosContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sourceLogPos; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSourceLogPos(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSourceLogPos(this);
		}
	}

	[RuleVersion(0)]
	public SourceLogPosContext sourceLogPos() {
		SourceLogPosContext _localctx = new SourceLogPosContext(Context, State);
		EnterRule(_localctx, 558, RULE_sourceLogPos);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4455;
			_la = TokenStream.LA(1);
			if ( !(_la==MASTER_LOG_POS_SYMBOL || _la==SOURCE_LOG_POS_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ServerIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerIdList(this);
		}
	}

	[RuleVersion(0)]
	public ServerIdListContext serverIdList() {
		ServerIdListContext _localctx = new ServerIdListContext(Context, State);
		EnterRule(_localctx, 560, RULE_serverIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4457;
			Match(OPEN_PAR_SYMBOL);
			State = 4466;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 457396837154872L) != 0)) {
				{
				State = 4458;
				ulong_number();
				State = 4463;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 4459;
					Match(COMMA_SYMBOL);
					State = 4460;
					ulong_number();
					}
					}
					State = 4465;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 4468;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChangeReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGE_SYMBOL() { return GetToken(MySqlParser.CHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySqlParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDefinitionContext[] filterDefinition() {
			return GetRuleContexts<FilterDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterDefinitionContext filterDefinition(int i) {
			return GetRuleContext<FilterDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ChangeReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_changeReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChangeReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChangeReplication(this);
		}
	}

	[RuleVersion(0)]
	public ChangeReplicationContext changeReplication() {
		ChangeReplicationContext _localctx = new ChangeReplicationContext(Context, State);
		EnterRule(_localctx, 562, RULE_changeReplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4470;
			Match(CHANGE_SYMBOL);
			State = 4471;
			Match(REPLICATION_SYMBOL);
			State = 4472;
			Match(FILTER_SYMBOL);
			State = 4473;
			filterDefinition();
			State = 4478;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4474;
				Match(COMMA_SYMBOL);
				State = 4475;
				filterDefinition();
				}
				}
				State = 4480;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 4482;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4481;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDbListContext filterDbList() {
			return GetRuleContext<FilterDbListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableListContext filterTableList() {
			return GetRuleContext<FilterTableListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterStringListContext filterStringList() {
			return GetRuleContext<FilterStringListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FilterDbPairListContext filterDbPairList() {
			return GetRuleContext<FilterDbPairListContext>(0);
		}
		public FilterDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FilterDefinitionContext filterDefinition() {
		FilterDefinitionContext _localctx = new FilterDefinitionContext(Context, State);
		EnterRule(_localctx, 564, RULE_filterDefinition);
		int _la;
		try {
			State = 4533;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPLICATE_DO_DB_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4484;
				Match(REPLICATE_DO_DB_SYMBOL);
				State = 4485;
				Match(EQUAL_OPERATOR);
				State = 4486;
				Match(OPEN_PAR_SYMBOL);
				State = 4488;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,458,Context) ) {
				case 1:
					{
					State = 4487;
					filterDbList();
					}
					break;
				}
				State = 4490;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4491;
				Match(REPLICATE_IGNORE_DB_SYMBOL);
				State = 4492;
				Match(EQUAL_OPERATOR);
				State = 4493;
				Match(OPEN_PAR_SYMBOL);
				State = 4495;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,459,Context) ) {
				case 1:
					{
					State = 4494;
					filterDbList();
					}
					break;
				}
				State = 4497;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4498;
				Match(REPLICATE_DO_TABLE_SYMBOL);
				State = 4499;
				Match(EQUAL_OPERATOR);
				State = 4500;
				Match(OPEN_PAR_SYMBOL);
				State = 4502;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,460,Context) ) {
				case 1:
					{
					State = 4501;
					filterTableList();
					}
					break;
				}
				State = 4504;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4505;
				Match(REPLICATE_IGNORE_TABLE_SYMBOL);
				State = 4506;
				Match(EQUAL_OPERATOR);
				State = 4507;
				Match(OPEN_PAR_SYMBOL);
				State = 4509;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,461,Context) ) {
				case 1:
					{
					State = 4508;
					filterTableList();
					}
					break;
				}
				State = 4511;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_DO_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4512;
				Match(REPLICATE_WILD_DO_TABLE_SYMBOL);
				State = 4513;
				Match(EQUAL_OPERATOR);
				State = 4514;
				Match(OPEN_PAR_SYMBOL);
				State = 4516;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,462,Context) ) {
				case 1:
					{
					State = 4515;
					filterStringList();
					}
					break;
				}
				State = 4518;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_WILD_IGNORE_TABLE_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4519;
				Match(REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
				State = 4520;
				Match(EQUAL_OPERATOR);
				State = 4521;
				Match(OPEN_PAR_SYMBOL);
				State = 4523;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,463,Context) ) {
				case 1:
					{
					State = 4522;
					filterStringList();
					}
					break;
				}
				State = 4525;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case REPLICATE_REWRITE_DB_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4526;
				Match(REPLICATE_REWRITE_DB_SYMBOL);
				State = 4527;
				Match(EQUAL_OPERATOR);
				State = 4528;
				Match(OPEN_PAR_SYMBOL);
				State = 4530;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					State = 4529;
					filterDbPairList();
					}
				}

				State = 4532;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FilterDbListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterDbList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterDbList(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbListContext filterDbList() {
		FilterDbListContext _localctx = new FilterDbListContext(Context, State);
		EnterRule(_localctx, 566, RULE_filterDbList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4535;
			schemaRef();
			State = 4540;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4536;
				Match(COMMA_SYMBOL);
				State = 4537;
				schemaRef();
				}
				}
				State = 4542;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableRefContext[] filterTableRef() {
			return GetRuleContexts<FilterTableRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterTableRefContext filterTableRef(int i) {
			return GetRuleContext<FilterTableRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FilterTableListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterTableList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterTableList(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableListContext filterTableList() {
		FilterTableListContext _localctx = new FilterTableListContext(Context, State);
		EnterRule(_localctx, 568, RULE_filterTableList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4543;
			filterTableRef();
			State = 4548;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4544;
				Match(COMMA_SYMBOL);
				State = 4545;
				filterTableRef();
				}
				}
				State = 4550;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterStringListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterWildDbTableStringContext[] filterWildDbTableString() {
			return GetRuleContexts<FilterWildDbTableStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterWildDbTableStringContext filterWildDbTableString(int i) {
			return GetRuleContext<FilterWildDbTableStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FilterStringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterStringList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterStringList(this);
		}
	}

	[RuleVersion(0)]
	public FilterStringListContext filterStringList() {
		FilterStringListContext _localctx = new FilterStringListContext(Context, State);
		EnterRule(_localctx, 570, RULE_filterStringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4551;
			filterWildDbTableString();
			State = 4556;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4552;
				Match(COMMA_SYMBOL);
				State = 4553;
				filterWildDbTableString();
				}
				}
				State = 4558;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterWildDbTableStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public FilterWildDbTableStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterWildDbTableString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterWildDbTableString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterWildDbTableString(this);
		}
	}

	[RuleVersion(0)]
	public FilterWildDbTableStringContext filterWildDbTableString() {
		FilterWildDbTableStringContext _localctx = new FilterWildDbTableStringContext(Context, State);
		EnterRule(_localctx, 572, RULE_filterWildDbTableString);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4559;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterDbPairListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaIdentifierPairContext[] schemaIdentifierPair() {
			return GetRuleContexts<SchemaIdentifierPairContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaIdentifierPairContext schemaIdentifierPair(int i) {
			return GetRuleContext<SchemaIdentifierPairContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public FilterDbPairListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterDbPairList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterDbPairList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterDbPairList(this);
		}
	}

	[RuleVersion(0)]
	public FilterDbPairListContext filterDbPairList() {
		FilterDbPairListContext _localctx = new FilterDbPairListContext(Context, State);
		EnterRule(_localctx, 574, RULE_filterDbPairList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4561;
			schemaIdentifierPair();
			State = 4566;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4562;
				Match(COMMA_SYMBOL);
				State = 4563;
				schemaIdentifierPair();
				}
				}
				State = 4568;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartReplicaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaThreadOptionsContext replicaThreadOptions() {
			return GetRuleContext<ReplicaThreadOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySqlParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaUntilContext replicaUntil() {
			return GetRuleContext<ReplicaUntilContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserOptionContext userOption() {
			return GetRuleContext<UserOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PasswordOptionContext passwordOption() {
			return GetRuleContext<PasswordOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultAuthOptionContext defaultAuthOption() {
			return GetRuleContext<DefaultAuthOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PluginDirOptionContext pluginDirOption() {
			return GetRuleContext<PluginDirOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public StartReplicaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startReplicaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartReplicaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartReplicaStatement(this);
		}
	}

	[RuleVersion(0)]
	public StartReplicaStatementContext startReplicaStatement() {
		StartReplicaStatementContext _localctx = new StartReplicaStatementContext(Context, State);
		EnterRule(_localctx, 576, RULE_startReplicaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4569;
			Match(START_SYMBOL);
			State = 4570;
			replica();
			State = 4572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) {
				{
				State = 4571;
				replicaThreadOptions();
				}
			}

			State = 4576;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==UNTIL_SYMBOL) {
				{
				State = 4574;
				Match(UNTIL_SYMBOL);
				State = 4575;
				replicaUntil();
				}
			}

			State = 4579;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USER_SYMBOL) {
				{
				State = 4578;
				userOption();
				}
			}

			State = 4582;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PASSWORD_SYMBOL) {
				{
				State = 4581;
				passwordOption();
				}
			}

			State = 4585;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_AUTH_SYMBOL) {
				{
				State = 4584;
				defaultAuthOption();
				}
			}

			State = 4588;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PLUGIN_DIR_SYMBOL) {
				{
				State = 4587;
				pluginDirOption();
				}
			}

			State = 4591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4590;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StopReplicaStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySqlParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaThreadOptionsContext replicaThreadOptions() {
			return GetRuleContext<ReplicaThreadOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public StopReplicaStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stopReplicaStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStopReplicaStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStopReplicaStatement(this);
		}
	}

	[RuleVersion(0)]
	public StopReplicaStatementContext stopReplicaStatement() {
		StopReplicaStatementContext _localctx = new StopReplicaStatementContext(Context, State);
		EnterRule(_localctx, 578, RULE_stopReplicaStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4593;
			Match(STOP_SYMBOL);
			State = 4594;
			replica();
			State = 4596;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) {
				{
				State = 4595;
				replicaThreadOptions();
				}
			}

			State = 4599;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 4598;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicaUntilContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SourceFileDefContext[] sourceFileDef() {
			return GetRuleContexts<SourceFileDefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SourceFileDefContext sourceFileDef(int i) {
			return GetRuleContext<SourceFileDefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ReplicaUntilContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicaUntil; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicaUntil(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicaUntil(this);
		}
	}

	[RuleVersion(0)]
	public ReplicaUntilContext replicaUntil() {
		ReplicaUntilContext _localctx = new ReplicaUntilContext(Context, State);
		EnterRule(_localctx, 580, RULE_replicaUntil);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4606;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case MASTER_LOG_FILE_SYMBOL:
			case MASTER_LOG_POS_SYMBOL:
			case RELAY_LOG_FILE_SYMBOL:
			case RELAY_LOG_POS_SYMBOL:
			case SOURCE_LOG_FILE_SYMBOL:
			case SOURCE_LOG_POS_SYMBOL:
				{
				State = 4601;
				sourceFileDef();
				}
				break;
			case SQL_AFTER_GTIDS_SYMBOL:
			case SQL_BEFORE_GTIDS_SYMBOL:
				{
				State = 4602;
				_la = TokenStream.LA(1);
				if ( !(_la==SQL_AFTER_GTIDS_SYMBOL || _la==SQL_BEFORE_GTIDS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4603;
				Match(EQUAL_OPERATOR);
				State = 4604;
				textString();
				}
				break;
			case SQL_AFTER_MTS_GAPS_SYMBOL:
				{
				State = 4605;
				Match(SQL_AFTER_MTS_GAPS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4612;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4608;
				Match(COMMA_SYMBOL);
				State = 4609;
				sourceFileDef();
				}
				}
				State = 4614;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public UserOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserOption(this);
		}
	}

	[RuleVersion(0)]
	public UserOptionContext userOption() {
		UserOptionContext _localctx = new UserOptionContext(Context, State);
		EnterRule(_localctx, 582, RULE_userOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4615;
			Match(USER_SYMBOL);
			State = 4616;
			Match(EQUAL_OPERATOR);
			State = 4617;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PasswordOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public PasswordOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_passwordOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPasswordOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPasswordOption(this);
		}
	}

	[RuleVersion(0)]
	public PasswordOptionContext passwordOption() {
		PasswordOptionContext _localctx = new PasswordOptionContext(Context, State);
		EnterRule(_localctx, 584, RULE_passwordOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4619;
			Match(PASSWORD_SYMBOL);
			State = 4620;
			Match(EQUAL_OPERATOR);
			State = 4621;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultAuthOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySqlParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public DefaultAuthOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultAuthOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultAuthOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultAuthOption(this);
		}
	}

	[RuleVersion(0)]
	public DefaultAuthOptionContext defaultAuthOption() {
		DefaultAuthOptionContext _localctx = new DefaultAuthOptionContext(Context, State);
		EnterRule(_localctx, 586, RULE_defaultAuthOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4623;
			Match(DEFAULT_AUTH_SYMBOL);
			State = 4624;
			Match(EQUAL_OPERATOR);
			State = 4625;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginDirOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySqlParser.PLUGIN_DIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public PluginDirOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluginDirOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPluginDirOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPluginDirOption(this);
		}
	}

	[RuleVersion(0)]
	public PluginDirOptionContext pluginDirOption() {
		PluginDirOptionContext _localctx = new PluginDirOptionContext(Context, State);
		EnterRule(_localctx, 588, RULE_pluginDirOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4627;
			Match(PLUGIN_DIR_SYMBOL);
			State = 4628;
			Match(EQUAL_OPERATOR);
			State = 4629;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicaThreadOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaThreadOptionContext[] replicaThreadOption() {
			return GetRuleContexts<ReplicaThreadOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaThreadOptionContext replicaThreadOption(int i) {
			return GetRuleContext<ReplicaThreadOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ReplicaThreadOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicaThreadOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicaThreadOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicaThreadOptions(this);
		}
	}

	[RuleVersion(0)]
	public ReplicaThreadOptionsContext replicaThreadOptions() {
		ReplicaThreadOptionsContext _localctx = new ReplicaThreadOptionsContext(Context, State);
		EnterRule(_localctx, 590, RULE_replicaThreadOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4631;
			replicaThreadOption();
			State = 4636;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4632;
				Match(COMMA_SYMBOL);
				State = 4633;
				replicaThreadOption();
				}
				}
				State = 4638;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicaThreadOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySqlParser.SQL_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySqlParser.RELAY_THREAD_SYMBOL, 0); }
		public ReplicaThreadOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replicaThreadOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplicaThreadOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplicaThreadOption(this);
		}
	}

	[RuleVersion(0)]
	public ReplicaThreadOptionContext replicaThreadOption() {
		ReplicaThreadOptionContext _localctx = new ReplicaThreadOptionContext(Context, State);
		EnterRule(_localctx, 592, RULE_replicaThreadOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4639;
			_la = TokenStream.LA(1);
			if ( !(_la==RELAY_THREAD_SYMBOL || _la==SQL_THREAD_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySqlParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySqlParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationStartOptionsContext groupReplicationStartOptions() {
			return GetRuleContext<GroupReplicationStartOptionsContext>(0);
		}
		public GroupReplicationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplication; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupReplication(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupReplication(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationContext groupReplication() {
		GroupReplicationContext _localctx = new GroupReplicationContext(Context, State);
		EnterRule(_localctx, 594, RULE_groupReplication);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4646;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case START_SYMBOL:
				{
				State = 4641;
				Match(START_SYMBOL);
				State = 4643;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DEFAULT_AUTH_SYMBOL || _la==PASSWORD_SYMBOL || _la==USER_SYMBOL) {
					{
					State = 4642;
					groupReplicationStartOptions();
					}
				}

				}
				break;
			case STOP_SYMBOL:
				{
				State = 4645;
				Match(STOP_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 4648;
			Match(GROUP_REPLICATION_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationStartOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationStartOptionContext[] groupReplicationStartOption() {
			return GetRuleContexts<GroupReplicationStartOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationStartOptionContext groupReplicationStartOption(int i) {
			return GetRuleContext<GroupReplicationStartOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public GroupReplicationStartOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationStartOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationStartOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationStartOptions(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationStartOptionsContext groupReplicationStartOptions() {
		GroupReplicationStartOptionsContext _localctx = new GroupReplicationStartOptionsContext(Context, State);
		EnterRule(_localctx, 596, RULE_groupReplicationStartOptions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4650;
			groupReplicationStartOption();
			State = 4655;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4651;
				Match(COMMA_SYMBOL);
				State = 4652;
				groupReplicationStartOption();
				}
				}
				State = 4657;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationStartOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationUserContext groupReplicationUser() {
			return GetRuleContext<GroupReplicationUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationPasswordContext groupReplicationPassword() {
			return GetRuleContext<GroupReplicationPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupReplicationPluginAuthContext groupReplicationPluginAuth() {
			return GetRuleContext<GroupReplicationPluginAuthContext>(0);
		}
		public GroupReplicationStartOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationStartOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationStartOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationStartOption(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationStartOptionContext groupReplicationStartOption() {
		GroupReplicationStartOptionContext _localctx = new GroupReplicationStartOptionContext(Context, State);
		EnterRule(_localctx, 598, RULE_groupReplicationStartOption);
		try {
			State = 4661;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case USER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4658;
				groupReplicationUser();
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4659;
				groupReplicationPassword();
				}
				break;
			case DEFAULT_AUTH_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4660;
				groupReplicationPluginAuth();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public GroupReplicationUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationUser(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationUserContext groupReplicationUser() {
		GroupReplicationUserContext _localctx = new GroupReplicationUserContext(Context, State);
		EnterRule(_localctx, 600, RULE_groupReplicationUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4663;
			Match(USER_SYMBOL);
			State = 4664;
			Match(EQUAL_OPERATOR);
			State = 4665;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public GroupReplicationPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationPassword(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationPasswordContext groupReplicationPassword() {
		GroupReplicationPasswordContext _localctx = new GroupReplicationPasswordContext(Context, State);
		EnterRule(_localctx, 602, RULE_groupReplicationPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4667;
			Match(PASSWORD_SYMBOL);
			State = 4668;
			Match(EQUAL_OPERATOR);
			State = 4669;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupReplicationPluginAuthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySqlParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public GroupReplicationPluginAuthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupReplicationPluginAuth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupReplicationPluginAuth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupReplicationPluginAuth(this);
		}
	}

	[RuleVersion(0)]
	public GroupReplicationPluginAuthContext groupReplicationPluginAuth() {
		GroupReplicationPluginAuthContext _localctx = new GroupReplicationPluginAuthContext(Context, State);
		EnterRule(_localctx, 604, RULE_groupReplicationPluginAuth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4671;
			Match(DEFAULT_AUTH_SYMBOL);
			State = 4672;
			Match(EQUAL_OPERATOR);
			State = 4673;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplicaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA_SYMBOL() { return GetToken(MySqlParser.REPLICA_SYMBOL, 0); }
		public ReplicaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replica; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplica(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplica(this);
		}
	}

	[RuleVersion(0)]
	public ReplicaContext replica() {
		ReplicaContext _localctx = new ReplicaContext(Context, State);
		EnterRule(_localctx, 606, RULE_replica);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4675;
			_la = TokenStream.LA(1);
			if ( !(_la==SLAVE_SYMBOL || _la==REPLICA_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreparedStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySqlParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteStatementContext executeStatement() {
			return GetRuleContext<ExecuteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySqlParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		public PreparedStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preparedStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreparedStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreparedStatement(this);
		}
	}

	[RuleVersion(0)]
	public PreparedStatementContext preparedStatement() {
		PreparedStatementContext _localctx = new PreparedStatementContext(Context, State);
		EnterRule(_localctx, 608, RULE_preparedStatement);
		int _la;
		try {
			State = 4688;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PREPARE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4677;
				_localctx.type = Match(PREPARE_SYMBOL);
				State = 4678;
				identifier();
				State = 4679;
				Match(FROM_SYMBOL);
				State = 4682;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,486,Context) ) {
				case 1:
					{
					State = 4680;
					textLiteral();
					}
					break;
				case 2:
					{
					State = 4681;
					userVariable();
					}
					break;
				}
				}
				break;
			case EXECUTE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4684;
				executeStatement();
				}
				break;
			case DEALLOCATE_SYMBOL:
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4685;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DEALLOCATE_SYMBOL || _la==DROP_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 4686;
				Match(PREPARE_SYMBOL);
				State = 4687;
				identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySqlParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExecuteVarListContext executeVarList() {
			return GetRuleContext<ExecuteVarListContext>(0);
		}
		public ExecuteStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExecuteStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExecuteStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteStatementContext executeStatement() {
		ExecuteStatementContext _localctx = new ExecuteStatementContext(Context, State);
		EnterRule(_localctx, 610, RULE_executeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4690;
			Match(EXECUTE_SYMBOL);
			State = 4691;
			identifier();
			State = 4694;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==USING_SYMBOL) {
				{
				State = 4692;
				Match(USING_SYMBOL);
				State = 4693;
				executeVarList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExecuteVarListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext[] userVariable() {
			return GetRuleContexts<UserVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable(int i) {
			return GetRuleContext<UserVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ExecuteVarListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_executeVarList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExecuteVarList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExecuteVarList(this);
		}
	}

	[RuleVersion(0)]
	public ExecuteVarListContext executeVarList() {
		ExecuteVarListContext _localctx = new ExecuteVarListContext(Context, State);
		EnterRule(_localctx, 612, RULE_executeVarList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4696;
			userVariable();
			State = 4701;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 4697;
				Match(COMMA_SYMBOL);
				State = 4698;
				userVariable();
				}
				}
				State = 4703;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CloneStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySqlParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySqlParser.REMOTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMBOL() { return GetToken(MySqlParser.COLON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DataDirSSLContext dataDirSSL() {
			return GetRuleContext<DataDirSSLContext>(0);
		}
		public CloneStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cloneStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCloneStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCloneStatement(this);
		}
	}

	[RuleVersion(0)]
	public CloneStatementContext cloneStatement() {
		CloneStatementContext _localctx = new CloneStatementContext(Context, State);
		EnterRule(_localctx, 614, RULE_cloneStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4704;
			Match(CLONE_SYMBOL);
			State = 4729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,493,Context) ) {
			case 1:
				{
				State = 4705;
				Match(LOCAL_SYMBOL);
				State = 4706;
				Match(DATA_SYMBOL);
				State = 4707;
				Match(DIRECTORY_SYMBOL);
				State = 4709;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,490,Context) ) {
				case 1:
					{
					State = 4708;
					equal();
					}
					break;
				}
				State = 4711;
				textStringLiteral();
				}
				break;
			case 2:
				{
				State = 4712;
				Match(REMOTE_SYMBOL);
				State = 4715;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 4713;
					Match(FOR_SYMBOL);
					State = 4714;
					Match(REPLICATION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				{
				State = 4717;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 4718;
				Match(INSTANCE_SYMBOL);
				State = 4719;
				Match(FROM_SYMBOL);
				State = 4720;
				user();
				State = 4721;
				Match(COLON_SYMBOL);
				State = 4722;
				ulong_number();
				State = 4723;
				Match(IDENTIFIED_SYMBOL);
				State = 4724;
				Match(BY_SYMBOL);
				State = 4725;
				textStringLiteral();
				State = 4727;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DATA_SYMBOL || _la==REQUIRE_SYMBOL) {
					{
					State = 4726;
					dataDirSSL();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataDirSSLContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SslContext ssl() {
			return GetRuleContext<SslContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public DataDirSSLContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataDirSSL; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataDirSSL(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataDirSSL(this);
		}
	}

	[RuleVersion(0)]
	public DataDirSSLContext dataDirSSL() {
		DataDirSSLContext _localctx = new DataDirSSLContext(Context, State);
		EnterRule(_localctx, 616, RULE_dataDirSSL);
		int _la;
		try {
			State = 4741;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REQUIRE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4731;
				ssl();
				}
				break;
			case DATA_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4732;
				Match(DATA_SYMBOL);
				State = 4733;
				Match(DIRECTORY_SYMBOL);
				State = 4735;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,494,Context) ) {
				case 1:
					{
					State = 4734;
					equal();
					}
					break;
				}
				State = 4737;
				textStringLiteral();
				State = 4739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REQUIRE_SYMBOL) {
					{
					State = 4738;
					ssl();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SslContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySqlParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL_SYMBOL() { return GetToken(MySqlParser.SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		public SslContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ssl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSsl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSsl(this);
		}
	}

	[RuleVersion(0)]
	public SslContext ssl() {
		SslContext _localctx = new SslContext(Context, State);
		EnterRule(_localctx, 618, RULE_ssl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4743;
			Match(REQUIRE_SYMBOL);
			State = 4745;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NO_SYMBOL) {
				{
				State = 4744;
				Match(NO_SYMBOL);
				}
			}

			State = 4747;
			Match(SSL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountManagementStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserStatementContext alterUserStatement() {
			return GetRuleContext<AlterUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserStatementContext createUserStatement() {
			return GetRuleContext<CreateUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropUserStatementContext dropUserStatement() {
			return GetRuleContext<DropUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantStatementContext grantStatement() {
			return GetRuleContext<GrantStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RenameUserStatementContext renameUserStatement() {
			return GetRuleContext<RenameUserStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RevokeStatementContext revokeStatement() {
			return GetRuleContext<RevokeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetRoleStatementContext setRoleStatement() {
			return GetRuleContext<SetRoleStatementContext>(0);
		}
		public AccountManagementStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountManagementStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAccountManagementStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAccountManagementStatement(this);
		}
	}

	[RuleVersion(0)]
	public AccountManagementStatementContext accountManagementStatement() {
		AccountManagementStatementContext _localctx = new AccountManagementStatementContext(Context, State);
		EnterRule(_localctx, 620, RULE_accountManagementStatement);
		try {
			State = 4756;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ALTER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4749;
				alterUserStatement();
				}
				break;
			case CREATE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4750;
				createUserStatement();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4751;
				dropUserStatement();
				}
				break;
			case GRANT_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 4752;
				grantStatement();
				}
				break;
			case RENAME_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 4753;
				renameUserStatement();
				}
				break;
			case REVOKE_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 4754;
				revokeStatement();
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 4755;
				setRoleStatement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionContext userFunction() {
			return GetRuleContext<UserFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserListContext alterUserList() {
			return GetRuleContext<AlterUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySqlParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return GetRuleContext<IdentifiedByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByPasswordContext identifiedByPassword() {
			return GetRuleContext<IdentifiedByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserRegistrationContext userRegistration() {
			return GetRuleContext<UserRegistrationContext>(0);
		}
		public AlterUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserStatementContext alterUserStatement() {
		AlterUserStatementContext _localctx = new AlterUserStatementContext(Context, State);
		EnterRule(_localctx, 622, RULE_alterUserStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4758;
			Match(ALTER_SYMBOL);
			State = 4759;
			Match(USER_SYMBOL);
			State = 4761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,499,Context) ) {
			case 1:
				{
				State = 4760;
				ifExists();
				}
				break;
			}
			State = 4803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,509,Context) ) {
			case 1:
				{
				State = 4767;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,500,Context) ) {
				case 1:
					{
					State = 4763;
					if (!(this.ServerVersion < 80014)) throw new FailedPredicateException(this, "this.ServerVersion < 80014");
					State = 4764;
					createUserList();
					}
					break;
				case 2:
					{
					State = 4765;
					if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
					State = 4766;
					alterUserList();
					}
					break;
				}
				State = 4769;
				createUserTail();
				}
				break;
			case 2:
				{
				State = 4771;
				userFunction();
				State = 4788;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case IDENTIFIED_SYMBOL:
					{
					State = 4774;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,501,Context) ) {
					case 1:
						{
						State = 4772;
						identifiedByRandomPassword();
						}
						break;
					case 2:
						{
						State = 4773;
						identifiedByPassword();
						}
						break;
					}
					State = 4777;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 4776;
						replacePassword();
						}
					}

					State = 4780;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 4779;
						retainCurrentPassword();
						}
					}

					}
					break;
				case DISCARD_SYMBOL:
					{
					State = 4782;
					Match(DISCARD_SYMBOL);
					State = 4783;
					Match(OLD_SYMBOL);
					State = 4784;
					Match(PASSWORD_SYMBOL);
					}
					break;
				case Eof:
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case SEMICOLON_SYMBOL:
				case DECIMAL_NUMBER:
				case FLOAT_NUMBER:
					{
					State = 4786;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 422212465066040L) != 0)) {
						{
						State = 4785;
						userRegistration();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 3:
				{
				State = 4790;
				user();
				State = 4801;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case DEFAULT_SYMBOL:
					{
					State = 4791;
					Match(DEFAULT_SYMBOL);
					State = 4792;
					Match(ROLE_SYMBOL);
					State = 4796;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,506,Context) ) {
					case 1:
						{
						State = 4793;
						Match(ALL_SYMBOL);
						}
						break;
					case 2:
						{
						State = 4794;
						Match(NONE_SYMBOL);
						}
						break;
					case 3:
						{
						State = 4795;
						roleList();
						}
						break;
					}
					}
					break;
				case Eof:
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case SEMICOLON_SYMBOL:
				case DECIMAL_NUMBER:
				case FLOAT_NUMBER:
					{
					State = 4799;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 422212465066040L) != 0)) {
						{
						State = 4798;
						userRegistration();
						}
					}

					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext[] alterUser() {
			return GetRuleContexts<AlterUserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterUserContext alterUser(int i) {
			return GetRuleContext<AlterUserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public AlterUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUserList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUserList(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserListContext alterUserList() {
		AlterUserListContext _localctx = new AlterUserListContext(Context, State);
		EnterRule(_localctx, 624, RULE_alterUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4805;
			alterUser();
			State = 4810;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,510,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4806;
					Match(COMMA_SYMBOL);
					State = 4807;
					alterUser();
					}
					}
				}
				State = 4812;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,510,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OldAlterUserContext oldAlterUser() {
			return GetRuleContext<OldAlterUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByPasswordContext identifiedByPassword() {
			return GetRuleContext<IdentifiedByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return GetRuleContext<IdentifiedByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginContext identifiedWithPlugin() {
			return GetRuleContext<IdentifiedWithPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return GetRuleContext<IdentifiedWithPluginAsAuthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() {
			return GetRuleContext<IdentifiedWithPluginByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() {
			return GetRuleContext<IdentifiedWithPluginByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADD_SYMBOL() { return GetTokens(MySqlParser.ADD_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADD_SYMBOL(int i) {
			return GetToken(MySqlParser.ADD_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext[] identification() {
			return GetRuleContexts<IdentificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext identification(int i) {
			return GetRuleContext<IdentificationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MODIFY_SYMBOL() { return GetTokens(MySqlParser.MODIFY_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL(int i) {
			return GetToken(MySqlParser.MODIFY_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DROP_SYMBOL() { return GetTokens(MySqlParser.DROP_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL(int i) {
			return GetToken(MySqlParser.DROP_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		public AlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterUser(this);
		}
	}

	[RuleVersion(0)]
	public AlterUserContext alterUser() {
		AlterUserContext _localctx = new AlterUserContext(Context, State);
		EnterRule(_localctx, 626, RULE_alterUser);
		try {
			State = 4888;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,527,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4813;
				if (!(this.ServerVersion < 80025)) throw new FailedPredicateException(this, "this.ServerVersion < 80025");
				State = 4814;
				oldAlterUser();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4815;
				if (!(this.ServerVersion >= 80025)) throw new FailedPredicateException(this, "this.ServerVersion >= 80025");
				{
				State = 4816;
				user();
				State = 4886;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,526,Context) ) {
				case 1:
					{
					State = 4817;
					identifiedByPassword();
					State = 4826;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,513,Context) ) {
					case 1:
						{
						State = 4818;
						Match(REPLACE_SYMBOL);
						State = 4819;
						textStringLiteral();
						State = 4821;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,511,Context) ) {
						case 1:
							{
							State = 4820;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						State = 4824;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,512,Context) ) {
						case 1:
							{
							State = 4823;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4828;
					identifiedByRandomPassword();
					State = 4837;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,516,Context) ) {
					case 1:
						{
						State = 4830;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,514,Context) ) {
						case 1:
							{
							State = 4829;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						State = 4832;
						Match(REPLACE_SYMBOL);
						State = 4833;
						textStringLiteral();
						State = 4835;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,515,Context) ) {
						case 1:
							{
							State = 4834;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 4839;
					identifiedWithPlugin();
					}
					break;
				case 4:
					{
					State = 4840;
					identifiedWithPluginAsAuth();
					State = 4842;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,517,Context) ) {
					case 1:
						{
						State = 4841;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 5:
					{
					State = 4844;
					identifiedWithPluginByPassword();
					State = 4853;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,520,Context) ) {
					case 1:
						{
						State = 4845;
						Match(REPLACE_SYMBOL);
						State = 4846;
						textStringLiteral();
						State = 4848;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,518,Context) ) {
						case 1:
							{
							State = 4847;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					case 2:
						{
						State = 4851;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,519,Context) ) {
						case 1:
							{
							State = 4850;
							retainCurrentPassword();
							}
							break;
						}
						}
						break;
					}
					}
					break;
				case 6:
					{
					State = 4855;
					identifiedWithPluginByRandomPassword();
					State = 4857;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,521,Context) ) {
					case 1:
						{
						State = 4856;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 7:
					{
					State = 4860;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,522,Context) ) {
					case 1:
						{
						State = 4859;
						discardOldPassword();
						}
						break;
					}
					}
					break;
				case 8:
					{
					State = 4862;
					Match(ADD_SYMBOL);
					State = 4863;
					factor();
					State = 4864;
					identification();
					State = 4869;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,523,Context) ) {
					case 1:
						{
						State = 4865;
						Match(ADD_SYMBOL);
						State = 4866;
						factor();
						State = 4867;
						identification();
						}
						break;
					}
					}
					break;
				case 9:
					{
					State = 4871;
					Match(MODIFY_SYMBOL);
					State = 4872;
					factor();
					State = 4873;
					identification();
					State = 4878;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,524,Context) ) {
					case 1:
						{
						State = 4874;
						Match(MODIFY_SYMBOL);
						State = 4875;
						factor();
						State = 4876;
						identification();
						}
						break;
					}
					}
					break;
				case 10:
					{
					State = 4880;
					Match(DROP_SYMBOL);
					State = 4881;
					factor();
					State = 4884;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,525,Context) ) {
					case 1:
						{
						State = 4882;
						Match(DROP_SYMBOL);
						State = 4883;
						factor();
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OldAlterUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DiscardOldPasswordContext discardOldPassword() {
			return GetRuleContext<DiscardOldPasswordContext>(0);
		}
		public OldAlterUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_oldAlterUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOldAlterUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOldAlterUser(this);
		}
	}

	[RuleVersion(0)]
	public OldAlterUserContext oldAlterUser() {
		OldAlterUserContext _localctx = new OldAlterUserContext(Context, State);
		EnterRule(_localctx, 628, RULE_oldAlterUser);
		try {
			State = 4947;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,539,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4890;
				user();
				State = 4891;
				Match(IDENTIFIED_SYMBOL);
				State = 4892;
				Match(BY_SYMBOL);
				State = 4912;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,532,Context) ) {
				case 1:
					{
					State = 4893;
					textString();
					State = 4894;
					Match(REPLACE_SYMBOL);
					State = 4895;
					textString();
					State = 4897;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,528,Context) ) {
					case 1:
						{
						State = 4896;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4899;
					textString();
					State = 4901;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,529,Context) ) {
					case 1:
						{
						State = 4900;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 4903;
					Match(RANDOM_SYMBOL);
					State = 4904;
					Match(PASSWORD_SYMBOL);
					State = 4907;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,530,Context) ) {
					case 1:
						{
						State = 4905;
						Match(REPLACE_SYMBOL);
						State = 4906;
						textString();
						}
						break;
					}
					State = 4910;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,531,Context) ) {
					case 1:
						{
						State = 4909;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4914;
				user();
				State = 4915;
				Match(IDENTIFIED_SYMBOL);
				State = 4916;
				Match(WITH_SYMBOL);
				{
				State = 4917;
				textOrIdentifier();
				State = 4941;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,537,Context) ) {
				case 1:
					{
					State = 4918;
					Match(BY_SYMBOL);
					State = 4919;
					textString();
					State = 4920;
					Match(REPLACE_SYMBOL);
					State = 4921;
					textString();
					State = 4923;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,533,Context) ) {
					case 1:
						{
						State = 4922;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 4925;
					Match(AS_SYMBOL);
					State = 4926;
					textStringHash();
					State = 4928;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,534,Context) ) {
					case 1:
						{
						State = 4927;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 3:
					{
					State = 4930;
					Match(BY_SYMBOL);
					State = 4931;
					textString();
					State = 4933;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,535,Context) ) {
					case 1:
						{
						State = 4932;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				case 4:
					{
					State = 4935;
					Match(BY_SYMBOL);
					State = 4936;
					Match(RANDOM_SYMBOL);
					State = 4937;
					Match(PASSWORD_SYMBOL);
					State = 4939;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,536,Context) ) {
					case 1:
						{
						State = 4938;
						retainCurrentPassword();
						}
						break;
					}
					}
					break;
				}
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 4943;
				user();
				State = 4945;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,538,Context) ) {
				case 1:
					{
					State = 4944;
					discardOldPassword();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserFunction(this);
		}
	}

	[RuleVersion(0)]
	public UserFunctionContext userFunction() {
		UserFunctionContext _localctx = new UserFunctionContext(Context, State);
		EnterRule(_localctx, 630, RULE_userFunction);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4949;
			Match(USER_SYMBOL);
			State = 4950;
			parentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserTailContext createUserTail() {
			return GetRuleContext<CreateUserTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultRoleClauseContext defaultRoleClause() {
			return GetRuleContext<DefaultRoleClauseContext>(0);
		}
		public CreateUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserStatementContext createUserStatement() {
		CreateUserStatementContext _localctx = new CreateUserStatementContext(Context, State);
		EnterRule(_localctx, 632, RULE_createUserStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4952;
			Match(CREATE_SYMBOL);
			State = 4953;
			Match(USER_SYMBOL);
			State = 4955;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,540,Context) ) {
			case 1:
				{
				State = 4954;
				ifNotExists();
				}
				break;
			}
			State = 4957;
			createUserList();
			State = 4959;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,541,Context) ) {
			case 1:
				{
				State = 4958;
				defaultRoleClause();
				}
				break;
			}
			State = 4961;
			createUserTail();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConnectOptionsContext connectOptions() {
			return GetRuleContext<ConnectOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountLockPasswordExpireOptionsContext[] accountLockPasswordExpireOptions() {
			return GetRuleContexts<AccountLockPasswordExpireOptionsContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions(int i) {
			return GetRuleContext<AccountLockPasswordExpireOptionsContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserAttributesContext userAttributes() {
			return GetRuleContext<UserAttributesContext>(0);
		}
		public CreateUserTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserTail(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserTailContext createUserTail() {
		CreateUserTailContext _localctx = new CreateUserTailContext(Context, State);
		EnterRule(_localctx, 634, RULE_createUserTail);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4964;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,542,Context) ) {
			case 1:
				{
				State = 4963;
				requireClause();
				}
				break;
			}
			State = 4967;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,543,Context) ) {
			case 1:
				{
				State = 4966;
				connectOptions();
				}
				break;
			}
			State = 4972;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,544,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 4969;
					accountLockPasswordExpireOptions();
					}
					}
				}
				State = 4974;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,544,Context);
			}
			State = 4977;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,545,Context) ) {
			case 1:
				{
				State = 4975;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 4976;
				userAttributes();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAttributesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		public UserAttributesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAttributes; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserAttributes(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserAttributes(this);
		}
	}

	[RuleVersion(0)]
	public UserAttributesContext userAttributes() {
		UserAttributesContext _localctx = new UserAttributesContext(Context, State);
		EnterRule(_localctx, 636, RULE_userAttributes);
		try {
			State = 4983;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 4979;
				Match(ATTRIBUTE_SYMBOL);
				State = 4980;
				textStringLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 4981;
				Match(COMMENT_SYMBOL);
				State = 4982;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultRoleClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public DefaultRoleClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultRoleClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultRoleClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultRoleClause(this);
		}
	}

	[RuleVersion(0)]
	public DefaultRoleClauseContext defaultRoleClause() {
		DefaultRoleClauseContext _localctx = new DefaultRoleClauseContext(Context, State);
		EnterRule(_localctx, 638, RULE_defaultRoleClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4985;
			Match(DEFAULT_SYMBOL);
			State = 4986;
			Match(ROLE_SYMBOL);
			State = 4987;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireClauseContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySqlParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RequireListContext requireList() {
			return GetRuleContext<RequireListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SSL_SYMBOL() { return GetToken(MySqlParser.SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySqlParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		public RequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRequireClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRequireClause(this);
		}
	}

	[RuleVersion(0)]
	public RequireClauseContext requireClause() {
		RequireClauseContext _localctx = new RequireClauseContext(Context, State);
		EnterRule(_localctx, 640, RULE_requireClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 4989;
			Match(REQUIRE_SYMBOL);
			State = 4992;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
			case ISSUER_SYMBOL:
			case SUBJECT_SYMBOL:
				{
				State = 4990;
				requireList();
				}
				break;
			case NONE_SYMBOL:
			case SSL_SYMBOL:
			case X509_SYMBOL:
				{
				State = 4991;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==NONE_SYMBOL || _la==SSL_SYMBOL || _la==X509_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConnectOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_QUERIES_PER_HOUR_SYMBOL() { return GetTokens(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_UPDATES_PER_HOUR_SYMBOL() { return GetTokens(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetTokens(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL(int i) {
			return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX_USER_CONNECTIONS_SYMBOL() { return GetTokens(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL(int i) {
			return GetToken(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL, i);
		}
		public ConnectOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_connectOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConnectOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConnectOptions(this);
		}
	}

	[RuleVersion(0)]
	public ConnectOptionsContext connectOptions() {
		ConnectOptionsContext _localctx = new ConnectOptionsContext(Context, State);
		EnterRule(_localctx, 642, RULE_connectOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 4994;
			Match(WITH_SYMBOL);
			State = 5003;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					State = 5003;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case MAX_QUERIES_PER_HOUR_SYMBOL:
						{
						State = 4995;
						Match(MAX_QUERIES_PER_HOUR_SYMBOL);
						State = 4996;
						ulong_number();
						}
						break;
					case MAX_UPDATES_PER_HOUR_SYMBOL:
						{
						State = 4997;
						Match(MAX_UPDATES_PER_HOUR_SYMBOL);
						State = 4998;
						ulong_number();
						}
						break;
					case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
						{
						State = 4999;
						Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
						State = 5000;
						ulong_number();
						}
						break;
					case MAX_USER_CONNECTIONS_SYMBOL:
						{
						State = 5001;
						Match(MAX_USER_CONNECTIONS_SYMBOL);
						State = 5002;
						ulong_number();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5005;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,549,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AccountLockPasswordExpireOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySqlParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNLOCK_SYMBOL() { return GetToken(MySqlParser.UNLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySqlParser.EXPIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySqlParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySqlParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_SYMBOL() { return GetToken(MySqlParser.REQUIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySqlParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySqlParser.OPTIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return GetToken(MySqlParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return GetToken(MySqlParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		public AccountLockPasswordExpireOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_accountLockPasswordExpireOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAccountLockPasswordExpireOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAccountLockPasswordExpireOptions(this);
		}
	}

	[RuleVersion(0)]
	public AccountLockPasswordExpireOptionsContext accountLockPasswordExpireOptions() {
		AccountLockPasswordExpireOptionsContext _localctx = new AccountLockPasswordExpireOptionsContext(Context, State);
		EnterRule(_localctx, 644, RULE_accountLockPasswordExpireOptions);
		int _la;
		try {
			State = 5047;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ACCOUNT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5007;
				Match(ACCOUNT_SYMBOL);
				State = 5008;
				_la = TokenStream.LA(1);
				if ( !(_la==LOCK_SYMBOL || _la==UNLOCK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case PASSWORD_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5009;
				Match(PASSWORD_SYMBOL);
				State = 5038;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,554,Context) ) {
				case 1:
					{
					State = 5010;
					Match(EXPIRE_SYMBOL);
					State = 5017;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,550,Context) ) {
					case 1:
						{
						State = 5011;
						Match(INTERVAL_SYMBOL);
						State = 5012;
						real_ulong_number();
						State = 5013;
						Match(DAY_SYMBOL);
						}
						break;
					case 2:
						{
						State = 5015;
						Match(NEVER_SYMBOL);
						}
						break;
					case 3:
						{
						State = 5016;
						Match(DEFAULT_SYMBOL);
						}
						break;
					}
					}
					break;
				case 2:
					{
					State = 5019;
					Match(HISTORY_SYMBOL);
					State = 5022;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 5020;
						real_ulong_number();
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 5021;
						Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 3:
					{
					State = 5024;
					Match(REUSE_SYMBOL);
					State = 5025;
					Match(INTERVAL_SYMBOL);
					State = 5030;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case INT_NUMBER:
					case LONG_NUMBER:
					case ULONGLONG_NUMBER:
					case HEX_NUMBER:
						{
						State = 5026;
						real_ulong_number();
						State = 5027;
						Match(DAY_SYMBOL);
						}
						break;
					case DEFAULT_SYMBOL:
						{
						State = 5029;
						Match(DEFAULT_SYMBOL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				case 4:
					{
					State = 5032;
					if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
					State = 5033;
					Match(REQUIRE_SYMBOL);
					State = 5034;
					Match(CURRENT_SYMBOL);
					State = 5036;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,553,Context) ) {
					case 1:
						{
						State = 5035;
						_la = TokenStream.LA(1);
						if ( !(_la==DEFAULT_SYMBOL || _la==OPTIONAL_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					}
					}
					break;
				}
				}
				break;
			case FAILED_LOGIN_ATTEMPTS_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5040;
				Match(FAILED_LOGIN_ATTEMPTS_SYMBOL);
				State = 5041;
				real_ulong_number();
				}
				break;
			case PASSWORD_LOCK_TIME_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5042;
				Match(PASSWORD_LOCK_TIME_SYMBOL);
				State = 5045;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case INT_NUMBER:
				case LONG_NUMBER:
				case ULONGLONG_NUMBER:
				case HEX_NUMBER:
					{
					State = 5043;
					real_ulong_number();
					}
					break;
				case UNBOUNDED_SYMBOL:
					{
					State = 5044;
					Match(UNBOUNDED_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		public UserAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserAttribute(this);
		}
	}

	[RuleVersion(0)]
	public UserAttributeContext userAttribute() {
		UserAttributeContext _localctx = new UserAttributeContext(Context, State);
		EnterRule(_localctx, 646, RULE_userAttribute);
		try {
			State = 5054;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case Eof:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case ATTRIBUTE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5050;
				Match(ATTRIBUTE_SYMBOL);
				State = 5051;
				textStringLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5052;
				Match(COMMENT_SYMBOL);
				State = 5053;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		public DropUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public DropUserStatementContext dropUserStatement() {
		DropUserStatementContext _localctx = new DropUserStatementContext(Context, State);
		EnterRule(_localctx, 648, RULE_dropUserStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5056;
			Match(DROP_SYMBOL);
			State = 5057;
			Match(USER_SYMBOL);
			State = 5059;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,558,Context) ) {
			case 1:
				{
				State = 5058;
				ifExists();
				}
				break;
			}
			State = 5061;
			userList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] GRANT_SYMBOL() { return GetTokens(MySqlParser.GRANT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL(int i) {
			return GetToken(MySqlParser.GRANT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantTargetListContext grantTargetList() {
			return GetRuleContext<GrantTargetListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySqlParser.ADMIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VersionedRequireClauseContext versionedRequireClause() {
			return GetRuleContext<VersionedRequireClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantOptionsContext grantOptions() {
			return GetRuleContext<GrantOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GrantAsContext grantAs() {
			return GetRuleContext<GrantAsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		public GrantStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantStatement(this);
		}
	}

	[RuleVersion(0)]
	public GrantStatementContext grantStatement() {
		GrantStatementContext _localctx = new GrantStatementContext(Context, State);
		EnterRule(_localctx, 650, RULE_grantStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5063;
			Match(GRANT_SYMBOL);
			State = 5105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,567,Context) ) {
			case 1:
				{
				State = 5064;
				roleOrPrivilegesList();
				State = 5065;
				Match(TO_SYMBOL);
				State = 5066;
				userList();
				State = 5070;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5067;
					Match(WITH_SYMBOL);
					State = 5068;
					Match(ADMIN_SYMBOL);
					State = 5069;
					Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			case 2:
				{
				State = 5077;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,561,Context) ) {
				case 1:
					{
					State = 5072;
					roleOrPrivilegesList();
					}
					break;
				case 2:
					{
					State = 5073;
					Match(ALL_SYMBOL);
					State = 5075;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==PRIVILEGES_SYMBOL) {
						{
						State = 5074;
						Match(PRIVILEGES_SYMBOL);
						}
					}

					}
					break;
				}
				State = 5079;
				Match(ON_SYMBOL);
				State = 5081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,562,Context) ) {
				case 1:
					{
					State = 5080;
					aclType();
					}
					break;
				}
				State = 5083;
				grantIdentifier();
				State = 5084;
				Match(TO_SYMBOL);
				State = 5085;
				grantTargetList();
				State = 5087;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,563,Context) ) {
				case 1:
					{
					State = 5086;
					versionedRequireClause();
					}
					break;
				}
				State = 5090;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5089;
					grantOptions();
					}
				}

				State = 5093;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AS_SYMBOL) {
					{
					State = 5092;
					grantAs();
					}
				}

				}
				break;
			case 3:
				{
				State = 5095;
				Match(PROXY_SYMBOL);
				State = 5096;
				Match(ON_SYMBOL);
				State = 5097;
				user();
				State = 5098;
				Match(TO_SYMBOL);
				State = 5099;
				grantTargetList();
				State = 5103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 5100;
					Match(WITH_SYMBOL);
					State = 5101;
					Match(GRANT_SYMBOL);
					State = 5102;
					Match(OPTION_SYMBOL);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantTargetListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserListContext createUserList() {
			return GetRuleContext<CreateUserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public GrantTargetListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantTargetList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantTargetList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantTargetList(this);
		}
	}

	[RuleVersion(0)]
	public GrantTargetListContext grantTargetList() {
		GrantTargetListContext _localctx = new GrantTargetListContext(Context, State);
		EnterRule(_localctx, 652, RULE_grantTargetList);
		try {
			State = 5111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,568,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5107;
				if (!(this.ServerVersion < 80011)) throw new FailedPredicateException(this, "this.ServerVersion < 80011");
				State = 5108;
				createUserList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5109;
				if (!(this.ServerVersion >= 80011)) throw new FailedPredicateException(this, "this.ServerVersion >= 80011");
				State = 5110;
				userList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantOptionContext grantOption() {
			return GetRuleContext<GrantOptionContext>(0);
		}
		public GrantOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantOptions(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionsContext grantOptions() {
		GrantOptionsContext _localctx = new GrantOptionsContext(Context, State);
		EnterRule(_localctx, 654, RULE_grantOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5113;
			Match(WITH_SYMBOL);
			State = 5114;
			grantOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExceptRoleListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySqlParser.EXCEPT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		public ExceptRoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exceptRoleList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExceptRoleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExceptRoleList(this);
		}
	}

	[RuleVersion(0)]
	public ExceptRoleListContext exceptRoleList() {
		ExceptRoleListContext _localctx = new ExceptRoleListContext(Context, State);
		EnterRule(_localctx, 656, RULE_exceptRoleList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5116;
			Match(EXCEPT_SYMBOL);
			State = 5117;
			roleList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WithRolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList() {
			return GetRuleContext<RoleListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExceptRoleListContext exceptRoleList() {
			return GetRuleContext<ExceptRoleListContext>(0);
		}
		public WithRolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_withRoles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWithRoles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWithRoles(this);
		}
	}

	[RuleVersion(0)]
	public WithRolesContext withRoles() {
		WithRolesContext _localctx = new WithRolesContext(Context, State);
		EnterRule(_localctx, 658, RULE_withRoles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5119;
			Match(WITH_SYMBOL);
			State = 5120;
			Match(ROLE_SYMBOL);
			State = 5128;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,570,Context) ) {
			case 1:
				{
				State = 5121;
				roleList();
				}
				break;
			case 2:
				{
				State = 5122;
				Match(ALL_SYMBOL);
				State = 5124;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 5123;
					exceptRoleList();
					}
				}

				}
				break;
			case 3:
				{
				State = 5126;
				Match(NONE_SYMBOL);
				}
				break;
			case 4:
				{
				State = 5127;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantAsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WithRolesContext withRoles() {
			return GetRuleContext<WithRolesContext>(0);
		}
		public GrantAsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantAs; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantAs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantAs(this);
		}
	}

	[RuleVersion(0)]
	public GrantAsContext grantAs() {
		GrantAsContext _localctx = new GrantAsContext(Context, State);
		EnterRule(_localctx, 660, RULE_grantAs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5130;
			Match(AS_SYMBOL);
			State = 5131;
			Match(USER_SYMBOL);
			State = 5133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WITH_SYMBOL) {
				{
				State = 5132;
				withRoles();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VersionedRequireClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireClauseContext requireClause() {
			return GetRuleContext<RequireClauseContext>(0);
		}
		public VersionedRequireClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_versionedRequireClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVersionedRequireClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVersionedRequireClause(this);
		}
	}

	[RuleVersion(0)]
	public VersionedRequireClauseContext versionedRequireClause() {
		VersionedRequireClauseContext _localctx = new VersionedRequireClauseContext(Context, State);
		EnterRule(_localctx, 662, RULE_versionedRequireClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5135;
			if (!(this.ServerVersion < 80011)) throw new FailedPredicateException(this, "this.ServerVersion < 80011");
			State = 5136;
			requireClause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RenameUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RENAME_SYMBOL() { return GetToken(MySqlParser.RENAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TO_SYMBOL() { return GetTokens(MySqlParser.TO_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL(int i) {
			return GetToken(MySqlParser.TO_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public RenameUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_renameUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRenameUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRenameUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public RenameUserStatementContext renameUserStatement() {
		RenameUserStatementContext _localctx = new RenameUserStatementContext(Context, State);
		EnterRule(_localctx, 664, RULE_renameUserStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5138;
			Match(RENAME_SYMBOL);
			State = 5139;
			Match(USER_SYMBOL);
			State = 5140;
			user();
			State = 5141;
			Match(TO_SYMBOL);
			State = 5142;
			user();
			State = 5150;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5143;
				Match(COMMA_SYMBOL);
				State = 5144;
				user();
				State = 5145;
				Match(TO_SYMBOL);
				State = 5146;
				user();
				}
				}
				State = 5152;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RevokeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVOKE_SYMBOL() { return GetToken(MySqlParser.REVOKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegesListContext roleOrPrivilegesList() {
			return GetRuleContext<RoleOrPrivilegesListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public GrantIdentifierContext grantIdentifier() {
			return GetRuleContext<GrantIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IgnoreUnknownUserContext ignoreUnknownUser() {
			return GetRuleContext<IgnoreUnknownUserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySqlParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AclTypeContext aclType() {
			return GetRuleContext<AclTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		public RevokeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_revokeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRevokeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRevokeStatement(this);
		}
	}

	[RuleVersion(0)]
	public RevokeStatementContext revokeStatement() {
		RevokeStatementContext _localctx = new RevokeStatementContext(Context, State);
		EnterRule(_localctx, 666, RULE_revokeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5153;
			Match(REVOKE_SYMBOL);
			State = 5156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,573,Context) ) {
			case 1:
				{
				State = 5154;
				if (!(this.ServerVersion >= 80031)) throw new FailedPredicateException(this, "this.ServerVersion >= 80031");
				State = 5155;
				ifExists();
				}
				break;
			}
			State = 5193;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,578,Context) ) {
			case 1:
				{
				State = 5158;
				roleOrPrivilegesList();
				State = 5159;
				Match(FROM_SYMBOL);
				State = 5160;
				userList();
				}
				break;
			case 2:
				{
				State = 5162;
				roleOrPrivilegesList();
				State = 5163;
				Match(ON_SYMBOL);
				State = 5165;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,574,Context) ) {
				case 1:
					{
					State = 5164;
					aclType();
					}
					break;
				}
				State = 5167;
				grantIdentifier();
				State = 5168;
				Match(FROM_SYMBOL);
				State = 5169;
				userList();
				}
				break;
			case 3:
				{
				State = 5171;
				Match(ALL_SYMBOL);
				State = 5173;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIVILEGES_SYMBOL) {
					{
					State = 5172;
					Match(PRIVILEGES_SYMBOL);
					}
				}

				State = 5183;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case ON_SYMBOL:
					{
					State = 5175;
					Match(ON_SYMBOL);
					State = 5177;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,576,Context) ) {
					case 1:
						{
						State = 5176;
						aclType();
						}
						break;
					}
					State = 5179;
					grantIdentifier();
					}
					break;
				case COMMA_SYMBOL:
					{
					State = 5180;
					Match(COMMA_SYMBOL);
					State = 5181;
					Match(GRANT_SYMBOL);
					State = 5182;
					Match(OPTION_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 5185;
				Match(FROM_SYMBOL);
				State = 5186;
				userList();
				}
				break;
			case 4:
				{
				State = 5187;
				Match(PROXY_SYMBOL);
				State = 5188;
				Match(ON_SYMBOL);
				State = 5189;
				user();
				State = 5190;
				Match(FROM_SYMBOL);
				State = 5191;
				userList();
				}
				break;
			}
			State = 5197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,579,Context) ) {
			case 1:
				{
				State = 5195;
				if (!(this.ServerVersion >= 80031)) throw new FailedPredicateException(this, "this.ServerVersion >= 80031");
				State = 5196;
				ignoreUnknownUser();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AclTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		public AclTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_aclType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAclType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAclType(this);
		}
	}

	[RuleVersion(0)]
	public AclTypeContext aclType() {
		AclTypeContext _localctx = new AclTypeContext(Context, State);
		EnterRule(_localctx, 668, RULE_aclType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5199;
			_la = TokenStream.LA(1);
			if ( !(_la==FUNCTION_SYMBOL || _la==PROCEDURE_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegesListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegeContext[] roleOrPrivilege() {
			return GetRuleContexts<RoleOrPrivilegeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrPrivilegeContext roleOrPrivilege(int i) {
			return GetRuleContext<RoleOrPrivilegeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public RoleOrPrivilegesListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilegesList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilegesList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilegesList(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegesListContext roleOrPrivilegesList() {
		RoleOrPrivilegesListContext _localctx = new RoleOrPrivilegesListContext(Context, State);
		EnterRule(_localctx, 670, RULE_roleOrPrivilegesList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5201;
			roleOrPrivilege();
			State = 5206;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5202;
				Match(COMMA_SYMBOL);
				State = 5203;
				roleOrPrivilege();
				}
				}
				State = 5208;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrPrivilegeContext : ParserRuleContext {
		public IToken @object;
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySqlParser.AT_TEXT_SUFFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_TEXT_SUFFIX() { return GetToken(MySqlParser.NUMBER_TEXT_SUFFIX, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN_SYMBOL() { return GetToken(MySqlParser.NUMBER_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefListContext columnInternalRefList() {
			return GetRuleContext<ColumnInternalRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SELECT_SYMBOL() { return GetToken(MySqlParser.SELECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySqlParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySqlParser.REFERENCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySqlParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USAGE_SYMBOL() { return GetToken(MySqlParser.USAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySqlParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySqlParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySqlParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySqlParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySqlParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySqlParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySqlParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySqlParser.DATABASES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySqlParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySqlParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		public RoleOrPrivilegeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrPrivilege; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOrPrivilege(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOrPrivilege(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrPrivilegeContext roleOrPrivilege() {
		RoleOrPrivilegeContext _localctx = new RoleOrPrivilegeContext(Context, State);
		EnterRule(_localctx, 672, RULE_roleOrPrivilege);
		int _la;
		try {
			State = 5254;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,588,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5222;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,583,Context) ) {
				case 1:
					{
					State = 5209;
					roleIdentifierOrText();
					State = 5211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==OPEN_PAR_SYMBOL) {
						{
						State = 5210;
						columnInternalRefList();
						}
					}

					}
					break;
				case 2:
					{
					State = 5213;
					roleIdentifierOrText();
					State = 5220;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case AT_TEXT_SUFFIX:
						{
						State = 5214;
						Match(AT_TEXT_SUFFIX);
						}
						break;
					case AT_SIGN_SYMBOL:
						{
						State = 5215;
						Match(AT_SIGN_SYMBOL);
						State = 5216;
						textOrIdentifier();
						}
						break;
					case NUMBER_TEXT_SUFFIX:
						{
						State = 5217;
						Match(NUMBER_TEXT_SUFFIX);
						}
						break;
					case NUMBER_SIGN_SYMBOL:
						{
						State = 5218;
						Match(NUMBER_SIGN_SYMBOL);
						State = 5219;
						textOrIdentifier();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5224;
				_la = TokenStream.LA(1);
				if ( !(_la==INSERT_SYMBOL || _la==REFERENCES_SYMBOL || _la==SELECT_SYMBOL || _la==UPDATE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5226;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPEN_PAR_SYMBOL) {
					{
					State = 5225;
					columnInternalRefList();
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5228;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 172)) & ~0x3f) == 0 && ((1L << (_la - 172)) & 2251954432516097L) != 0) || _la==INDEX_SYMBOL || ((((_la - 442)) & ~0x3f) == 0 && ((1L << (_la - 442)) & 134217745L) != 0) || _la==SHUTDOWN_SYMBOL || _la==SUPER_SYMBOL || _la==TRIGGER_SYMBOL || _la==USAGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5229;
				Match(GRANT_SYMBOL);
				State = 5230;
				Match(OPTION_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5231;
				Match(SHOW_SYMBOL);
				State = 5232;
				Match(DATABASES_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5233;
				Match(CREATE_SYMBOL);
				State = 5237;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TEMPORARY_SYMBOL:
					{
					State = 5234;
					Match(TEMPORARY_SYMBOL);
					State = 5235;
					_localctx.@object = Match(TABLES_SYMBOL);
					}
					break;
				case ROUTINE_SYMBOL:
				case TABLESPACE_SYMBOL:
				case USER_SYMBOL:
				case VIEW_SYMBOL:
					{
					State = 5236;
					_localctx.@object = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==ROUTINE_SYMBOL || ((((_la - 583)) & ~0x3f) == 0 && ((1L << (_la - 583)) & 4611721202799476737L) != 0)) ) {
						_localctx.@object = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				case COMMA_SYMBOL:
				case FROM_SYMBOL:
				case ON_SYMBOL:
				case TO_SYMBOL:
					break;
				default:
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5239;
				Match(LOCK_SYMBOL);
				State = 5240;
				Match(TABLES_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 5241;
				Match(REPLICATION_SYMBOL);
				State = 5244;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLIENT_SYMBOL:
					{
					State = 5242;
					Match(CLIENT_SYMBOL);
					}
					break;
				case SLAVE_SYMBOL:
				case REPLICA_SYMBOL:
					{
					State = 5243;
					replica();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 5246;
				Match(SHOW_SYMBOL);
				State = 5247;
				Match(VIEW_SYMBOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 5248;
				Match(ALTER_SYMBOL);
				State = 5250;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROUTINE_SYMBOL) {
					{
					State = 5249;
					Match(ROUTINE_SYMBOL);
					}
				}

				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 5252;
				_la = TokenStream.LA(1);
				if ( !(_la==CREATE_SYMBOL || _la==DROP_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 5253;
				Match(ROLE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MULT_OPERATOR() { return GetTokens(MySqlParser.MULT_OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR(int i) {
			return GetToken(MySqlParser.MULT_OPERATOR, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public GrantIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public GrantIdentifierContext grantIdentifier() {
		GrantIdentifierContext _localctx = new GrantIdentifierContext(Context, State);
		EnterRule(_localctx, 674, RULE_grantIdentifier);
		int _la;
		try {
			State = 5272;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,591,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5256;
				Match(MULT_OPERATOR);
				State = 5259;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 5257;
					Match(DOT_SYMBOL);
					State = 5258;
					Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5261;
				schemaRef();
				State = 5264;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 5262;
					Match(DOT_SYMBOL);
					State = 5263;
					Match(MULT_OPERATOR);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5266;
				tableRef();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5267;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 5268;
				schemaRef();
				State = 5269;
				Match(DOT_SYMBOL);
				State = 5270;
				tableRef();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RequireListElementContext[] requireListElement() {
			return GetRuleContexts<RequireListElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RequireListElementContext requireListElement(int i) {
			return GetRuleContext<RequireListElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_SYMBOL() { return GetTokens(MySqlParser.AND_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL(int i) {
			return GetToken(MySqlParser.AND_SYMBOL, i);
		}
		public RequireListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRequireList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRequireList(this);
		}
	}

	[RuleVersion(0)]
	public RequireListContext requireList() {
		RequireListContext _localctx = new RequireListContext(Context, State);
		EnterRule(_localctx, 676, RULE_requireList);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5274;
			requireListElement();
			State = 5281;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,593,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5276;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AND_SYMBOL) {
						{
						State = 5275;
						Match(AND_SYMBOL);
						}
					}

					State = 5278;
					requireListElement();
					}
					}
				}
				State = 5283;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,593,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RequireListElementContext : ParserRuleContext {
		public IToken element;
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySqlParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySqlParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySqlParser.SUBJECT_SYMBOL, 0); }
		public RequireListElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_requireListElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRequireListElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRequireListElement(this);
		}
	}

	[RuleVersion(0)]
	public RequireListElementContext requireListElement() {
		RequireListElementContext _localctx = new RequireListElementContext(Context, State);
		EnterRule(_localctx, 678, RULE_requireListElement);
		try {
			State = 5290;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CIPHER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5284;
				_localctx.element = Match(CIPHER_SYMBOL);
				State = 5285;
				textString();
				}
				break;
			case ISSUER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5286;
				_localctx.element = Match(ISSUER_SYMBOL);
				State = 5287;
				textString();
				}
				break;
			case SUBJECT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5288;
				_localctx.element = Match(SUBJECT_SYMBOL);
				State = 5289;
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GrantOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTION_SYMBOL() { return GetToken(MySqlParser.OPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANT_SYMBOL() { return GetToken(MySqlParser.GRANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		public GrantOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grantOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGrantOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGrantOption(this);
		}
	}

	[RuleVersion(0)]
	public GrantOptionContext grantOption() {
		GrantOptionContext _localctx = new GrantOptionContext(Context, State);
		EnterRule(_localctx, 680, RULE_grantOption);
		try {
			State = 5305;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,596,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5292;
				_localctx.option = Match(GRANT_SYMBOL);
				State = 5293;
				Match(OPTION_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5294;
				if (!(this.ServerVersion < 80011)) throw new FailedPredicateException(this, "this.ServerVersion < 80011");
				State = 5303;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case MAX_QUERIES_PER_HOUR_SYMBOL:
					{
					State = 5295;
					_localctx.option = Match(MAX_QUERIES_PER_HOUR_SYMBOL);
					State = 5296;
					ulong_number();
					}
					break;
				case MAX_UPDATES_PER_HOUR_SYMBOL:
					{
					State = 5297;
					_localctx.option = Match(MAX_UPDATES_PER_HOUR_SYMBOL);
					State = 5298;
					ulong_number();
					}
					break;
				case MAX_CONNECTIONS_PER_HOUR_SYMBOL:
					{
					State = 5299;
					_localctx.option = Match(MAX_CONNECTIONS_PER_HOUR_SYMBOL);
					State = 5300;
					ulong_number();
					}
					break;
				case MAX_USER_CONNECTIONS_SYMBOL:
					{
					State = 5301;
					_localctx.option = Match(MAX_USER_CONNECTIONS_SYMBOL);
					State = 5302;
					ulong_number();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetRoleStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext[] roleList() {
			return GetRuleContexts<RoleListContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleListContext roleList(int i) {
			return GetRuleContext<RoleListContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCEPT_SYMBOL() { return GetToken(MySqlParser.EXCEPT_SYMBOL, 0); }
		public SetRoleStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setRoleStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetRoleStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetRoleStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetRoleStatementContext setRoleStatement() {
		SetRoleStatementContext _localctx = new SetRoleStatementContext(Context, State);
		EnterRule(_localctx, 682, RULE_setRoleStatement);
		int _la;
		try {
			State = 5330;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,599,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5307;
				Match(SET_SYMBOL);
				State = 5308;
				Match(ROLE_SYMBOL);
				State = 5309;
				roleList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5310;
				Match(SET_SYMBOL);
				State = 5311;
				Match(ROLE_SYMBOL);
				State = 5312;
				_la = TokenStream.LA(1);
				if ( !(_la==DEFAULT_SYMBOL || _la==NONE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5313;
				Match(SET_SYMBOL);
				State = 5314;
				Match(DEFAULT_SYMBOL);
				State = 5315;
				Match(ROLE_SYMBOL);
				State = 5319;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,597,Context) ) {
				case 1:
					{
					State = 5316;
					roleList();
					}
					break;
				case 2:
					{
					State = 5317;
					Match(NONE_SYMBOL);
					}
					break;
				case 3:
					{
					State = 5318;
					Match(ALL_SYMBOL);
					}
					break;
				}
				State = 5321;
				Match(TO_SYMBOL);
				State = 5322;
				roleList();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5323;
				Match(SET_SYMBOL);
				State = 5324;
				Match(ROLE_SYMBOL);
				State = 5325;
				Match(ALL_SYMBOL);
				State = 5328;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXCEPT_SYMBOL) {
					{
					State = 5326;
					Match(EXCEPT_SYMBOL);
					State = 5327;
					roleList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleContext[] role() {
			return GetRuleContexts<RoleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleContext role(int i) {
			return GetRuleContext<RoleContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public RoleListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleList(this);
		}
	}

	[RuleVersion(0)]
	public RoleListContext roleList() {
		RoleListContext _localctx = new RoleListContext(Context, State);
		EnterRule(_localctx, 684, RULE_roleList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 5332;
			role();
			State = 5337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,600,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 5333;
					Match(COMMA_SYMBOL);
					State = 5334;
					role();
					}
					}
				}
				State = 5339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,600,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierOrTextContext roleIdentifierOrText() {
			return GetRuleContext<RoleIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public RoleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_role; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRole(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRole(this);
		}
	}

	[RuleVersion(0)]
	public RoleContext role() {
		RoleContext _localctx = new RoleContext(Context, State);
		EnterRule(_localctx, 686, RULE_role);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5340;
			roleIdentifierOrText();
			State = 5342;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,601,Context) ) {
			case 1:
				{
				State = 5341;
				userVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAdministrationStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySqlParser.ANALYZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HistogramContext histogram() {
			return GetRuleContext<HistogramContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext[] checkOption() {
			return GetRuleContexts<CheckOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOptionContext checkOption(int i) {
			return GetRuleContext<CheckOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySqlParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZE_SYMBOL() { return GetToken(MySqlParser.OPTIMIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySqlParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext[] repairType() {
			return GetRuleContexts<RepairTypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepairTypeContext repairType(int i) {
			return GetRuleContext<RepairTypeContext>(i);
		}
		public TableAdministrationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAdministrationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableAdministrationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableAdministrationStatement(this);
		}
	}

	[RuleVersion(0)]
	public TableAdministrationStatementContext tableAdministrationStatement() {
		TableAdministrationStatementContext _localctx = new TableAdministrationStatementContext(Context, State);
		EnterRule(_localctx, 688, RULE_tableAdministrationStatement);
		int _la;
		try {
			State = 5386;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ANALYZE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5344;
				_localctx.type = Match(ANALYZE_SYMBOL);
				State = 5346;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 5345;
					noWriteToBinLog();
					}
				}

				State = 5348;
				Match(TABLE_SYMBOL);
				State = 5349;
				tableRefList();
				State = 5351;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DROP_SYMBOL || _la==UPDATE_SYMBOL) {
					{
					State = 5350;
					histogram();
					}
				}

				}
				break;
			case CHECK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5353;
				_localctx.type = Match(CHECK_SYMBOL);
				State = 5354;
				Match(TABLE_SYMBOL);
				State = 5355;
				tableRefList();
				State = 5359;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CHANGED_SYMBOL || ((((_la - 216)) & ~0x3f) == 0 && ((1L << (_la - 216)) & 131089L) != 0) || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) {
					{
					{
					State = 5356;
					checkOption();
					}
					}
					State = 5361;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case CHECKSUM_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5362;
				_localctx.type = Match(CHECKSUM_SYMBOL);
				State = 5363;
				Match(TABLE_SYMBOL);
				State = 5364;
				tableRefList();
				State = 5366;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) {
					{
					State = 5365;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				}
				break;
			case OPTIMIZE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5368;
				_localctx.type = Match(OPTIMIZE_SYMBOL);
				State = 5370;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 5369;
					noWriteToBinLog();
					}
				}

				State = 5372;
				Match(TABLE_SYMBOL);
				State = 5373;
				tableRefList();
				}
				break;
			case REPAIR_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5374;
				_localctx.type = Match(REPAIR_SYMBOL);
				State = 5376;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 5375;
					noWriteToBinLog();
					}
				}

				State = 5378;
				Match(TABLE_SYMBOL);
				State = 5379;
				tableRefList();
				State = 5383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) {
					{
					{
					State = 5380;
					repairType();
					}
					}
					State = 5385;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramAutoUpdateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MANUAL_SYMBOL() { return GetToken(MySqlParser.MANUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_SYMBOL() { return GetToken(MySqlParser.AUTO_SYMBOL, 0); }
		public HistogramAutoUpdateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogramAutoUpdate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHistogramAutoUpdate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHistogramAutoUpdate(this);
		}
	}

	[RuleVersion(0)]
	public HistogramAutoUpdateContext histogramAutoUpdate() {
		HistogramAutoUpdateContext _localctx = new HistogramAutoUpdateContext(Context, State);
		EnterRule(_localctx, 690, RULE_histogramAutoUpdate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5388;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 5389;
			_la = TokenStream.LA(1);
			if ( !(_la==AUTO_SYMBOL || _la==MANUAL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5390;
			Match(UPDATE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramUpdateParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public HistogramNumBucketsContext histogramNumBuckets() {
			return GetRuleContext<HistogramNumBucketsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HistogramAutoUpdateContext histogramAutoUpdate() {
			return GetRuleContext<HistogramAutoUpdateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public HistogramUpdateParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogramUpdateParam; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHistogramUpdateParam(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHistogramUpdateParam(this);
		}
	}

	[RuleVersion(0)]
	public HistogramUpdateParamContext histogramUpdateParam() {
		HistogramUpdateParamContext _localctx = new HistogramUpdateParamContext(Context, State);
		EnterRule(_localctx, 692, RULE_histogramUpdateParam);
		try {
			State = 5402;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,612,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5393;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,610,Context) ) {
				case 1:
					{
					State = 5392;
					histogramNumBuckets();
					}
					break;
				}
				State = 5396;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,611,Context) ) {
				case 1:
					{
					State = 5395;
					histogramAutoUpdate();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5398;
				if (!(this.ServerVersion >= 80031)) throw new FailedPredicateException(this, "this.ServerVersion >= 80031");
				State = 5399;
				Match(USING_SYMBOL);
				State = 5400;
				Match(DATA_SYMBOL);
				State = 5401;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramNumBucketsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySqlParser.BUCKETS_SYMBOL, 0); }
		public HistogramNumBucketsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogramNumBuckets; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHistogramNumBuckets(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHistogramNumBuckets(this);
		}
	}

	[RuleVersion(0)]
	public HistogramNumBucketsContext histogramNumBuckets() {
		HistogramNumBucketsContext _localctx = new HistogramNumBucketsContext(Context, State);
		EnterRule(_localctx, 694, RULE_histogramNumBuckets);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5404;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 5405;
			Match(WITH_SYMBOL);
			State = 5406;
			Match(INT_NUMBER);
			State = 5407;
			Match(BUCKETS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HistogramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySqlParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HistogramUpdateParamContext histogramUpdateParam() {
			return GetRuleContext<HistogramUpdateParamContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		public HistogramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_histogram; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHistogram(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHistogram(this);
		}
	}

	[RuleVersion(0)]
	public HistogramContext histogram() {
		HistogramContext _localctx = new HistogramContext(Context, State);
		EnterRule(_localctx, 696, RULE_histogram);
		try {
			State = 5419;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UPDATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5409;
				Match(UPDATE_SYMBOL);
				State = 5410;
				Match(HISTOGRAM_SYMBOL);
				State = 5411;
				Match(ON_SYMBOL);
				State = 5412;
				identifierList();
				State = 5413;
				histogramUpdateParam();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5415;
				Match(DROP_SYMBOL);
				State = 5416;
				Match(HISTOGRAM_SYMBOL);
				State = 5417;
				Match(ON_SYMBOL);
				State = 5418;
				identifierList();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySqlParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySqlParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySqlParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySqlParser.CHANGED_SYMBOL, 0); }
		public CheckOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckOption(this);
		}
	}

	[RuleVersion(0)]
	public CheckOptionContext checkOption() {
		CheckOptionContext _localctx = new CheckOptionContext(Context, State);
		EnterRule(_localctx, 698, RULE_checkOption);
		int _la;
		try {
			State = 5424;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5421;
				Match(FOR_SYMBOL);
				State = 5422;
				Match(UPGRADE_SYMBOL);
				}
				break;
			case CHANGED_SYMBOL:
			case EXTENDED_SYMBOL:
			case FAST_SYMBOL:
			case MEDIUM_SYMBOL:
			case QUICK_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5423;
				_la = TokenStream.LA(1);
				if ( !(_la==CHANGED_SYMBOL || _la==EXTENDED_SYMBOL || _la==FAST_SYMBOL || _la==MEDIUM_SYMBOL || _la==QUICK_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepairTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySqlParser.USE_FRM_SYMBOL, 0); }
		public RepairTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repairType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepairType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepairType(this);
		}
	}

	[RuleVersion(0)]
	public RepairTypeContext repairType() {
		RepairTypeContext _localctx = new RepairTypeContext(Context, State);
		EnterRule(_localctx, 700, RULE_repairType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5426;
			_la = TokenStream.LA(1);
			if ( !(_la==EXTENDED_SYMBOL || _la==QUICK_SYMBOL || _la==USE_FRM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UninstallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySqlParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySqlParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PluginRefContext pluginRef() {
			return GetRuleContext<PluginRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySqlParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ComponentRefContext[] componentRef() {
			return GetRuleContexts<ComponentRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ComponentRefContext componentRef(int i) {
			return GetRuleContext<ComponentRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UninstallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_uninstallStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUninstallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUninstallStatement(this);
		}
	}

	[RuleVersion(0)]
	public UninstallStatementContext uninstallStatement() {
		UninstallStatementContext _localctx = new UninstallStatementContext(Context, State);
		EnterRule(_localctx, 702, RULE_uninstallStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5428;
			Match(UNINSTALL_SYMBOL);
			State = 5440;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUGIN_SYMBOL:
				{
				State = 5429;
				Match(PLUGIN_SYMBOL);
				State = 5430;
				pluginRef();
				}
				break;
			case COMPONENT_SYMBOL:
				{
				State = 5431;
				Match(COMPONENT_SYMBOL);
				State = 5432;
				componentRef();
				State = 5437;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 5433;
					Match(COMMA_SYMBOL);
					State = 5434;
					componentRef();
					}
					}
					State = 5439;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySqlParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySqlParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySqlParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySqlParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralListContext textStringLiteralList() {
			return GetRuleContext<TextStringLiteralListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallSetValueListContext installSetValueList() {
			return GetRuleContext<InstallSetValueListContext>(0);
		}
		public InstallStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallStatement(this);
		}
	}

	[RuleVersion(0)]
	public InstallStatementContext installStatement() {
		InstallStatementContext _localctx = new InstallStatementContext(Context, State);
		EnterRule(_localctx, 704, RULE_installStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5442;
			Match(INSTALL_SYMBOL);
			State = 5453;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUGIN_SYMBOL:
				{
				State = 5443;
				Match(PLUGIN_SYMBOL);
				State = 5444;
				identifier();
				State = 5445;
				Match(SONAME_SYMBOL);
				State = 5446;
				textStringLiteral();
				}
				break;
			case COMPONENT_SYMBOL:
				{
				State = 5448;
				Match(COMPONENT_SYMBOL);
				State = 5449;
				textStringLiteralList();
				State = 5451;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,617,Context) ) {
				case 1:
					{
					State = 5450;
					installSetValueList();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		public InstallOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallOptionType(this);
		}
	}

	[RuleVersion(0)]
	public InstallOptionTypeContext installOptionType() {
		InstallOptionTypeContext _localctx = new InstallOptionTypeContext(Context, State);
		EnterRule(_localctx, 706, RULE_installOptionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5455;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==PERSIST_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallSetRvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		public InstallSetRvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installSetRvalue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallSetRvalue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallSetRvalue(this);
		}
	}

	[RuleVersion(0)]
	public InstallSetRvalueContext installSetRvalue() {
		InstallSetRvalueContext _localctx = new InstallSetRvalueContext(Context, State);
		EnterRule(_localctx, 708, RULE_installSetRvalue);
		try {
			State = 5459;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,619,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5457;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5458;
				Match(ON_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallSetValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public InstallOptionTypeContext installOptionType() {
			return GetRuleContext<InstallOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallSetRvalueContext installSetRvalue() {
			return GetRuleContext<InstallSetRvalueContext>(0);
		}
		public InstallSetValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installSetValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallSetValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallSetValue(this);
		}
	}

	[RuleVersion(0)]
	public InstallSetValueContext installSetValue() {
		InstallSetValueContext _localctx = new InstallSetValueContext(Context, State);
		EnterRule(_localctx, 710, RULE_installSetValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5461;
			installOptionType();
			State = 5462;
			lvalueVariable();
			State = 5463;
			equal();
			State = 5464;
			installSetRvalue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstallSetValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InstallSetValueContext[] installSetValue() {
			return GetRuleContexts<InstallSetValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InstallSetValueContext installSetValue(int i) {
			return GetRuleContext<InstallSetValueContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public InstallSetValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_installSetValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInstallSetValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInstallSetValueList(this);
		}
	}

	[RuleVersion(0)]
	public InstallSetValueListContext installSetValueList() {
		InstallSetValueListContext _localctx = new InstallSetValueListContext(Context, State);
		EnterRule(_localctx, 712, RULE_installSetValueList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5466;
			if (!(this.ServerVersion >= 80032)) throw new FailedPredicateException(this, "this.ServerVersion >= 80032");
			State = 5467;
			Match(SET_SYMBOL);
			State = 5468;
			installSetValue();
			State = 5473;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5469;
				Match(COMMA_SYMBOL);
				State = 5470;
				installSetValue();
				}
				}
				State = 5475;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StartOptionValueListContext startOptionValueList() {
			return GetRuleContext<StartOptionValueListContext>(0);
		}
		public SetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetStatement(this);
		}
	}

	[RuleVersion(0)]
	public SetStatementContext setStatement() {
		SetStatementContext _localctx = new SetStatementContext(Context, State);
		EnterRule(_localctx, 714, RULE_setStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5476;
			Match(SET_SYMBOL);
			State = 5477;
			startOptionValueList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartOptionValueListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueListContinuedContext optionValueListContinued() {
			return GetRuleContext<OptionValueListContinuedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionCharacteristicsContext transactionCharacteristics() {
			return GetRuleContext<TransactionCharacteristicsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
			return GetRuleContext<StartOptionValueListFollowingOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] PASSWORD_SYMBOL() { return GetTokens(MySqlParser.PASSWORD_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL(int i) {
			return GetToken(MySqlParser.PASSWORD_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplacePasswordContext replacePassword() {
			return GetRuleContext<ReplacePasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RetainCurrentPasswordContext retainCurrentPassword() {
			return GetRuleContext<RetainCurrentPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TO_SYMBOL() { return GetToken(MySqlParser.TO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		public StartOptionValueListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startOptionValueList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartOptionValueList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartOptionValueList(this);
		}
	}

	[RuleVersion(0)]
	public StartOptionValueListContext startOptionValueList() {
		StartOptionValueListContext _localctx = new StartOptionValueListContext(Context, State);
		EnterRule(_localctx, 716, RULE_startOptionValueList);
		int _la;
		try {
			State = 5529;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,630,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5479;
				optionValueNoOptionType();
				State = 5480;
				optionValueListContinued();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5482;
				Match(TRANSACTION_SYMBOL);
				State = 5483;
				transactionCharacteristics();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5484;
				optionType();
				State = 5485;
				startOptionValueListFollowingOptionType();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5487;
				Match(PASSWORD_SYMBOL);
				State = 5490;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 5488;
					Match(FOR_SYMBOL);
					State = 5489;
					user();
					}
				}

				State = 5492;
				equal();
				State = 5513;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,626,Context) ) {
				case 1:
					{
					State = 5493;
					textString();
					State = 5495;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 5494;
						replacePassword();
						}
					}

					State = 5498;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 5497;
						retainCurrentPassword();
						}
					}

					}
					break;
				case 2:
					{
					State = 5500;
					textString();
					State = 5502;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==REPLACE_SYMBOL) {
						{
						State = 5501;
						replacePassword();
						}
					}

					State = 5505;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==RETAIN_SYMBOL) {
						{
						State = 5504;
						retainCurrentPassword();
						}
					}

					}
					break;
				case 3:
					{
					State = 5507;
					if (!(this.ServerVersion < 80014)) throw new FailedPredicateException(this, "this.ServerVersion < 80014");
					State = 5508;
					Match(PASSWORD_SYMBOL);
					State = 5509;
					Match(OPEN_PAR_SYMBOL);
					State = 5510;
					textString();
					State = 5511;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5515;
				if (!(this.ServerVersion >= 80018)) throw new FailedPredicateException(this, "this.ServerVersion >= 80018");
				State = 5516;
				Match(PASSWORD_SYMBOL);
				State = 5519;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 5517;
					Match(FOR_SYMBOL);
					State = 5518;
					user();
					}
				}

				State = 5521;
				Match(TO_SYMBOL);
				State = 5522;
				Match(RANDOM_SYMBOL);
				State = 5524;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REPLACE_SYMBOL) {
					{
					State = 5523;
					replacePassword();
					}
				}

				State = 5527;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETAIN_SYMBOL) {
					{
					State = 5526;
					retainCurrentPassword();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionCharacteristicsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TransactionAccessModeContext transactionAccessMode() {
			return GetRuleContext<TransactionAccessModeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IsolationLevelContext isolationLevel() {
			return GetRuleContext<IsolationLevelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public TransactionCharacteristicsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionCharacteristics; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionCharacteristics(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionCharacteristics(this);
		}
	}

	[RuleVersion(0)]
	public TransactionCharacteristicsContext transactionCharacteristics() {
		TransactionCharacteristicsContext _localctx = new TransactionCharacteristicsContext(Context, State);
		EnterRule(_localctx, 718, RULE_transactionCharacteristics);
		int _la;
		try {
			State = 5540;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case READ_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5531;
				transactionAccessMode();
				State = 5533;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ISOLATION_SYMBOL) {
					{
					State = 5532;
					isolationLevel();
					}
				}

				}
				break;
			case ISOLATION_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5535;
				isolationLevel();
				State = 5538;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 5536;
					Match(COMMA_SYMBOL);
					State = 5537;
					transactionAccessMode();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TransactionAccessModeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRITE_SYMBOL() { return GetToken(MySqlParser.WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySqlParser.ONLY_SYMBOL, 0); }
		public TransactionAccessModeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_transactionAccessMode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTransactionAccessMode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTransactionAccessMode(this);
		}
	}

	[RuleVersion(0)]
	public TransactionAccessModeContext transactionAccessMode() {
		TransactionAccessModeContext _localctx = new TransactionAccessModeContext(Context, State);
		EnterRule(_localctx, 720, RULE_transactionAccessMode);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5542;
			Match(READ_SYMBOL);
			State = 5543;
			_la = TokenStream.LA(1);
			if ( !(_la==ONLY_SYMBOL || _la==WRITE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IsolationLevelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySqlParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySqlParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySqlParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySqlParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySqlParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySqlParser.UNCOMMITTED_SYMBOL, 0); }
		public IsolationLevelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_isolationLevel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIsolationLevel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIsolationLevel(this);
		}
	}

	[RuleVersion(0)]
	public IsolationLevelContext isolationLevel() {
		IsolationLevelContext _localctx = new IsolationLevelContext(Context, State);
		EnterRule(_localctx, 722, RULE_isolationLevel);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5545;
			Match(ISOLATION_SYMBOL);
			State = 5546;
			Match(LEVEL_SYMBOL);
			State = 5552;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REPEATABLE_SYMBOL:
				{
				State = 5547;
				Match(REPEATABLE_SYMBOL);
				State = 5548;
				Match(READ_SYMBOL);
				}
				break;
			case READ_SYMBOL:
				{
				State = 5549;
				Match(READ_SYMBOL);
				State = 5550;
				_la = TokenStream.LA(1);
				if ( !(_la==COMMITTED_SYMBOL || _la==UNCOMMITTED_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case SERIALIZABLE_SYMBOL:
				{
				State = 5551;
				Match(SERIALIZABLE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueListContinuedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext[] optionValue() {
			return GetRuleContexts<OptionValueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueContext optionValue(int i) {
			return GetRuleContext<OptionValueContext>(i);
		}
		public OptionValueListContinuedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueListContinued; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionValueListContinued(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionValueListContinued(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueListContinuedContext optionValueListContinued() {
		OptionValueListContinuedContext _localctx = new OptionValueListContinuedContext(Context, State);
		EnterRule(_localctx, 724, RULE_optionValueListContinued);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5558;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5554;
				Match(COMMA_SYMBOL);
				State = 5555;
				optionValue();
				}
				}
				State = 5560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueNoOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetClauseContext charsetClause() {
			return GetRuleContext<CharsetClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySqlParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public OptionValueNoOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueNoOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionValueNoOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionValueNoOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueNoOptionTypeContext optionValueNoOptionType() {
		OptionValueNoOptionTypeContext _localctx = new OptionValueNoOptionTypeContext(Context, State);
		EnterRule(_localctx, 726, RULE_optionValueNoOptionType);
		int _la;
		try {
			State = 5582;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,638,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5561;
				lvalueVariable();
				State = 5562;
				equal();
				State = 5563;
				setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5565;
				charsetClause();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5566;
				userVariable();
				State = 5567;
				equal();
				State = 5568;
				expr(0);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5570;
				Match(NAMES_SYMBOL);
				State = 5580;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,637,Context) ) {
				case 1:
					{
					State = 5571;
					equal();
					State = 5572;
					expr(0);
					}
					break;
				case 2:
					{
					State = 5574;
					charsetName();
					State = 5576;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==COLLATE_SYMBOL) {
						{
						State = 5575;
						collate();
						}
					}

					}
					break;
				case 3:
					{
					State = 5578;
					if (!(this.ServerVersion >= 80011)) throw new FailedPredicateException(this, "this.ServerVersion >= 80011");
					State = 5579;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueNoOptionTypeContext optionValueNoOptionType() {
			return GetRuleContext<OptionValueNoOptionTypeContext>(0);
		}
		public OptionValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValue; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionValue(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueContext optionValue() {
		OptionValueContext _localctx = new OptionValueContext(Context, State);
		EnterRule(_localctx, 728, RULE_optionValue);
		try {
			State = 5590;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,639,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5584;
				optionType();
				State = 5585;
				lvalueVariable();
				State = 5586;
				equal();
				State = 5587;
				setExprOrDefault();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5589;
				optionValueNoOptionType();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StartOptionValueListFollowingOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
			return GetRuleContext<OptionValueFollowingOptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OptionValueListContinuedContext optionValueListContinued() {
			return GetRuleContext<OptionValueListContinuedContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TransactionCharacteristicsContext transactionCharacteristics() {
			return GetRuleContext<TransactionCharacteristicsContext>(0);
		}
		public StartOptionValueListFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_startOptionValueListFollowingOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStartOptionValueListFollowingOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStartOptionValueListFollowingOptionType(this);
		}
	}

	[RuleVersion(0)]
	public StartOptionValueListFollowingOptionTypeContext startOptionValueListFollowingOptionType() {
		StartOptionValueListFollowingOptionTypeContext _localctx = new StartOptionValueListFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 730, RULE_startOptionValueListFollowingOptionType);
		try {
			State = 5597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,640,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5592;
				optionValueFollowingOptionType();
				State = 5593;
				optionValueListContinued();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5595;
				Match(TRANSACTION_SYMBOL);
				State = 5596;
				transactionCharacteristics();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionValueFollowingOptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueVariableContext lvalueVariable() {
			return GetRuleContext<LvalueVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetExprOrDefaultContext setExprOrDefault() {
			return GetRuleContext<SetExprOrDefaultContext>(0);
		}
		public OptionValueFollowingOptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionValueFollowingOptionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionValueFollowingOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionValueFollowingOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionValueFollowingOptionTypeContext optionValueFollowingOptionType() {
		OptionValueFollowingOptionTypeContext _localctx = new OptionValueFollowingOptionTypeContext(Context, State);
		EnterRule(_localctx, 732, RULE_optionValueFollowingOptionType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5599;
			lvalueVariable();
			State = 5600;
			equal();
			State = 5601;
			setExprOrDefault();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetExprOrDefaultContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		public SetExprOrDefaultContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setExprOrDefault; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetExprOrDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetExprOrDefault(this);
		}
	}

	[RuleVersion(0)]
	public SetExprOrDefaultContext setExprOrDefault() {
		SetExprOrDefaultContext _localctx = new SetExprOrDefaultContext(Context, State);
		EnterRule(_localctx, 734, RULE_setExprOrDefault);
		try {
			State = 5610;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,641,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5603;
				expr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5604;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5605;
				Match(ON_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5606;
				Match(ALL_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5607;
				Match(BINARY_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 5608;
				Match(ROW_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 5609;
				Match(SYSTEM_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowDatabasesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASES_SYMBOL() { return GetToken(MySqlParser.DATABASES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowDatabasesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showDatabasesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowDatabasesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowDatabasesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowDatabasesStatementContext showDatabasesStatement() {
		ShowDatabasesStatementContext _localctx = new ShowDatabasesStatementContext(Context, State);
		EnterRule(_localctx, 736, RULE_showDatabasesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5612;
			Match(SHOW_SYMBOL);
			State = 5613;
			Match(DATABASES_SYMBOL);
			State = 5615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5614;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowTablesStatementContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandTypeContext showCommandType() {
			return GetRuleContext<ShowCommandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowTablesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showTablesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowTablesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowTablesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowTablesStatementContext showTablesStatement() {
		ShowTablesStatementContext _localctx = new ShowTablesStatementContext(Context, State);
		EnterRule(_localctx, 738, RULE_showTablesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5617;
			Match(SHOW_SYMBOL);
			State = 5619;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED_SYMBOL || _la==FULL_SYMBOL) {
				{
				State = 5618;
				showCommandType();
				}
			}

			State = 5621;
			_localctx.value = Match(TABLES_SYMBOL);
			State = 5623;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5622;
				inDb();
				}
			}

			State = 5626;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5625;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowTriggersStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySqlParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowTriggersStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showTriggersStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowTriggersStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowTriggersStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowTriggersStatementContext showTriggersStatement() {
		ShowTriggersStatementContext _localctx = new ShowTriggersStatementContext(Context, State);
		EnterRule(_localctx, 740, RULE_showTriggersStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5628;
			Match(SHOW_SYMBOL);
			State = 5630;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULL_SYMBOL) {
				{
				State = 5629;
				Match(FULL_SYMBOL);
				}
			}

			State = 5632;
			Match(TRIGGERS_SYMBOL);
			State = 5634;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5633;
				inDb();
				}
			}

			State = 5637;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5636;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEventsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySqlParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowEventsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEventsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowEventsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowEventsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEventsStatementContext showEventsStatement() {
		ShowEventsStatementContext _localctx = new ShowEventsStatementContext(Context, State);
		EnterRule(_localctx, 742, RULE_showEventsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5639;
			Match(SHOW_SYMBOL);
			State = 5640;
			Match(EVENTS_SYMBOL);
			State = 5642;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5641;
				inDb();
				}
			}

			State = 5645;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5644;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowTableStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowTableStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showTableStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowTableStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowTableStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowTableStatusStatementContext showTableStatusStatement() {
		ShowTableStatusStatementContext _localctx = new ShowTableStatusStatementContext(Context, State);
		EnterRule(_localctx, 744, RULE_showTableStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5647;
			Match(SHOW_SYMBOL);
			State = 5648;
			Match(TABLE_SYMBOL);
			State = 5649;
			Match(STATUS_SYMBOL);
			State = 5651;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5650;
				inDb();
				}
			}

			State = 5654;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5653;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowOpenTablesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowOpenTablesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showOpenTablesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowOpenTablesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowOpenTablesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowOpenTablesStatementContext showOpenTablesStatement() {
		ShowOpenTablesStatementContext _localctx = new ShowOpenTablesStatementContext(Context, State);
		EnterRule(_localctx, 746, RULE_showOpenTablesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5656;
			Match(SHOW_SYMBOL);
			State = 5657;
			Match(OPEN_SYMBOL);
			State = 5658;
			Match(TABLES_SYMBOL);
			State = 5660;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5659;
				inDb();
				}
			}

			State = 5663;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5662;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowParseTreeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE_TREE_SYMBOL() { return GetToken(MySqlParser.PARSE_TREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		public ShowParseTreeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showParseTreeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowParseTreeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowParseTreeStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowParseTreeStatementContext showParseTreeStatement() {
		ShowParseTreeStatementContext _localctx = new ShowParseTreeStatementContext(Context, State);
		EnterRule(_localctx, 748, RULE_showParseTreeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5665;
			if (!(this.ServerVersion >= 80100)) throw new FailedPredicateException(this, "this.ServerVersion >= 80100");
			State = 5666;
			Match(SHOW_SYMBOL);
			State = 5667;
			Match(PARSE_TREE_SYMBOL);
			State = 5668;
			simpleStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowPluginsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySqlParser.PLUGINS_SYMBOL, 0); }
		public ShowPluginsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showPluginsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowPluginsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowPluginsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowPluginsStatementContext showPluginsStatement() {
		ShowPluginsStatementContext _localctx = new ShowPluginsStatementContext(Context, State);
		EnterRule(_localctx, 750, RULE_showPluginsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5670;
			Match(SHOW_SYMBOL);
			State = 5671;
			Match(PLUGINS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEngineLogsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineOrAllContext engineOrAll() {
			return GetRuleContext<EngineOrAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		public ShowEngineLogsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEngineLogsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowEngineLogsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowEngineLogsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEngineLogsStatementContext showEngineLogsStatement() {
		ShowEngineLogsStatementContext _localctx = new ShowEngineLogsStatementContext(Context, State);
		EnterRule(_localctx, 752, RULE_showEngineLogsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5673;
			Match(SHOW_SYMBOL);
			State = 5674;
			Match(ENGINE_SYMBOL);
			State = 5675;
			engineOrAll();
			State = 5676;
			Match(LOGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEngineMutexStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineOrAllContext engineOrAll() {
			return GetRuleContext<EngineOrAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySqlParser.MUTEX_SYMBOL, 0); }
		public ShowEngineMutexStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEngineMutexStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowEngineMutexStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowEngineMutexStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEngineMutexStatementContext showEngineMutexStatement() {
		ShowEngineMutexStatementContext _localctx = new ShowEngineMutexStatementContext(Context, State);
		EnterRule(_localctx, 754, RULE_showEngineMutexStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5678;
			Match(SHOW_SYMBOL);
			State = 5679;
			Match(ENGINE_SYMBOL);
			State = 5680;
			engineOrAll();
			State = 5681;
			Match(MUTEX_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEngineStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineOrAllContext engineOrAll() {
			return GetRuleContext<EngineOrAllContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		public ShowEngineStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEngineStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowEngineStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowEngineStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEngineStatusStatementContext showEngineStatusStatement() {
		ShowEngineStatusStatementContext _localctx = new ShowEngineStatusStatementContext(Context, State);
		EnterRule(_localctx, 756, RULE_showEngineStatusStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5683;
			Match(SHOW_SYMBOL);
			State = 5684;
			Match(ENGINE_SYMBOL);
			State = 5685;
			engineOrAll();
			State = 5686;
			Match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowColumnsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ShowCommandTypeContext showCommandType() {
			return GetRuleContext<ShowCommandTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowColumnsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showColumnsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowColumnsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowColumnsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowColumnsStatementContext showColumnsStatement() {
		ShowColumnsStatementContext _localctx = new ShowColumnsStatementContext(Context, State);
		EnterRule(_localctx, 758, RULE_showColumnsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5688;
			Match(SHOW_SYMBOL);
			State = 5690;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED_SYMBOL || _la==FULL_SYMBOL) {
				{
				State = 5689;
				showCommandType();
				}
			}

			State = 5692;
			Match(COLUMNS_SYMBOL);
			State = 5693;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5694;
			tableRef();
			State = 5696;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5695;
				inDb();
				}
			}

			State = 5699;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5698;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowBinaryLogsStatementContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		public ShowBinaryLogsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showBinaryLogsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowBinaryLogsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowBinaryLogsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowBinaryLogsStatementContext showBinaryLogsStatement() {
		ShowBinaryLogsStatementContext _localctx = new ShowBinaryLogsStatementContext(Context, State);
		EnterRule(_localctx, 760, RULE_showBinaryLogsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5701;
			Match(SHOW_SYMBOL);
			State = 5702;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_SYMBOL || _la==MASTER_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5703;
			_localctx.value = Match(LOGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowBinaryLogStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG_SYMBOL() { return GetToken(MySqlParser.LOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		public ShowBinaryLogStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showBinaryLogStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowBinaryLogStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowBinaryLogStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowBinaryLogStatusStatementContext showBinaryLogStatusStatement() {
		ShowBinaryLogStatusStatementContext _localctx = new ShowBinaryLogStatusStatementContext(Context, State);
		EnterRule(_localctx, 762, RULE_showBinaryLogStatusStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5705;
			Match(SHOW_SYMBOL);
			State = 5706;
			Match(BINARY_SYMBOL);
			State = 5707;
			Match(LOG_SYMBOL);
			State = 5708;
			Match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowReplicasStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySqlParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICAS_SYMBOL() { return GetToken(MySqlParser.REPLICAS_SYMBOL, 0); }
		public ShowReplicasStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showReplicasStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowReplicasStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowReplicasStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowReplicasStatementContext showReplicasStatement() {
		ShowReplicasStatementContext _localctx = new ShowReplicasStatementContext(Context, State);
		EnterRule(_localctx, 764, RULE_showReplicasStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5710;
			Match(SHOW_SYMBOL);
			State = 5715;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SLAVE_SYMBOL:
			case REPLICA_SYMBOL:
				{
				State = 5711;
				replica();
				State = 5712;
				Match(HOSTS_SYMBOL);
				}
				break;
			case REPLICAS_SYMBOL:
				{
				State = 5714;
				Match(REPLICAS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowBinlogEventsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySqlParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySqlParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ShowBinlogEventsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showBinlogEventsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowBinlogEventsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowBinlogEventsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowBinlogEventsStatementContext showBinlogEventsStatement() {
		ShowBinlogEventsStatementContext _localctx = new ShowBinlogEventsStatementContext(Context, State);
		EnterRule(_localctx, 766, RULE_showBinlogEventsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5717;
			Match(SHOW_SYMBOL);
			State = 5718;
			Match(BINLOG_SYMBOL);
			State = 5719;
			Match(EVENTS_SYMBOL);
			State = 5722;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN_SYMBOL) {
				{
				State = 5720;
				Match(IN_SYMBOL);
				State = 5721;
				textString();
				}
			}

			State = 5726;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL) {
				{
				State = 5724;
				Match(FROM_SYMBOL);
				State = 5725;
				ulonglongNumber();
				}
			}

			State = 5729;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5728;
				limitClause();
				}
			}

			State = 5732;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5731;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowRelaylogEventsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySqlParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySqlParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ShowRelaylogEventsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showRelaylogEventsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowRelaylogEventsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowRelaylogEventsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowRelaylogEventsStatementContext showRelaylogEventsStatement() {
		ShowRelaylogEventsStatementContext _localctx = new ShowRelaylogEventsStatementContext(Context, State);
		EnterRule(_localctx, 768, RULE_showRelaylogEventsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5734;
			Match(SHOW_SYMBOL);
			State = 5735;
			Match(RELAYLOG_SYMBOL);
			State = 5736;
			Match(EVENTS_SYMBOL);
			State = 5739;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IN_SYMBOL) {
				{
				State = 5737;
				Match(IN_SYMBOL);
				State = 5738;
				textString();
				}
			}

			State = 5743;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL) {
				{
				State = 5741;
				Match(FROM_SYMBOL);
				State = 5742;
				ulonglongNumber();
				}
			}

			State = 5746;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5745;
				limitClause();
				}
			}

			State = 5749;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5748;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowKeysStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySqlParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYS_SYMBOL() { return GetToken(MySqlParser.KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InDbContext inDb() {
			return GetRuleContext<InDbContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public ShowKeysStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showKeysStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowKeysStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowKeysStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowKeysStatementContext showKeysStatement() {
		ShowKeysStatementContext _localctx = new ShowKeysStatementContext(Context, State);
		EnterRule(_localctx, 770, RULE_showKeysStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5751;
			Match(SHOW_SYMBOL);
			State = 5753;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDED_SYMBOL) {
				{
				State = 5752;
				Match(EXTENDED_SYMBOL);
				}
			}

			State = 5755;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 268)) & ~0x3f) == 0 && ((1L << (_la - 268)) & 67108867L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 5756;
			fromOrIn();
			State = 5757;
			tableRef();
			State = 5759;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FROM_SYMBOL || _la==IN_SYMBOL) {
				{
				State = 5758;
				inDb();
				}
			}

			State = 5762;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==WHERE_SYMBOL) {
				{
				State = 5761;
				whereClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowEnginesStatementContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySqlParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		public ShowEnginesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showEnginesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowEnginesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowEnginesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowEnginesStatementContext showEnginesStatement() {
		ShowEnginesStatementContext _localctx = new ShowEnginesStatementContext(Context, State);
		EnterRule(_localctx, 772, RULE_showEnginesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5764;
			Match(SHOW_SYMBOL);
			State = 5766;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STORAGE_SYMBOL) {
				{
				State = 5765;
				Match(STORAGE_SYMBOL);
				}
			}

			State = 5768;
			_localctx.value = Match(ENGINES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCountWarningsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySqlParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySqlParser.WARNINGS_SYMBOL, 0); }
		public ShowCountWarningsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCountWarningsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCountWarningsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCountWarningsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCountWarningsStatementContext showCountWarningsStatement() {
		ShowCountWarningsStatementContext _localctx = new ShowCountWarningsStatementContext(Context, State);
		EnterRule(_localctx, 774, RULE_showCountWarningsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5770;
			Match(SHOW_SYMBOL);
			State = 5771;
			Match(COUNT_SYMBOL);
			State = 5772;
			Match(OPEN_PAR_SYMBOL);
			State = 5773;
			Match(MULT_OPERATOR);
			State = 5774;
			Match(CLOSE_PAR_SYMBOL);
			State = 5775;
			Match(WARNINGS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCountErrorsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySqlParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySqlParser.ERRORS_SYMBOL, 0); }
		public ShowCountErrorsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCountErrorsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCountErrorsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCountErrorsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCountErrorsStatementContext showCountErrorsStatement() {
		ShowCountErrorsStatementContext _localctx = new ShowCountErrorsStatementContext(Context, State);
		EnterRule(_localctx, 776, RULE_showCountErrorsStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5777;
			Match(SHOW_SYMBOL);
			State = 5778;
			Match(COUNT_SYMBOL);
			State = 5779;
			Match(OPEN_PAR_SYMBOL);
			State = 5780;
			Match(MULT_OPERATOR);
			State = 5781;
			Match(CLOSE_PAR_SYMBOL);
			State = 5782;
			Match(ERRORS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowWarningsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySqlParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ShowWarningsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showWarningsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowWarningsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowWarningsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowWarningsStatementContext showWarningsStatement() {
		ShowWarningsStatementContext _localctx = new ShowWarningsStatementContext(Context, State);
		EnterRule(_localctx, 778, RULE_showWarningsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5784;
			Match(SHOW_SYMBOL);
			State = 5785;
			Match(WARNINGS_SYMBOL);
			State = 5787;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5786;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowErrorsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySqlParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ShowErrorsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showErrorsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowErrorsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowErrorsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowErrorsStatementContext showErrorsStatement() {
		ShowErrorsStatementContext _localctx = new ShowErrorsStatementContext(Context, State);
		EnterRule(_localctx, 780, RULE_showErrorsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5789;
			Match(SHOW_SYMBOL);
			State = 5790;
			Match(ERRORS_SYMBOL);
			State = 5792;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5791;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfilesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySqlParser.PROFILES_SYMBOL, 0); }
		public ShowProfilesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfilesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProfilesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProfilesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfilesStatementContext showProfilesStatement() {
		ShowProfilesStatementContext _localctx = new ShowProfilesStatementContext(Context, State);
		EnterRule(_localctx, 782, RULE_showProfilesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5794;
			Match(SHOW_SYMBOL);
			State = 5795;
			Match(PROFILES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProfileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySqlParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProfileDefinitionsContext profileDefinitions() {
			return GetRuleContext<ProfileDefinitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LimitClauseContext limitClause() {
			return GetRuleContext<LimitClauseContext>(0);
		}
		public ShowProfileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProfileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProfileStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProfileStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowProfileStatementContext showProfileStatement() {
		ShowProfileStatementContext _localctx = new ShowProfileStatementContext(Context, State);
		EnterRule(_localctx, 784, RULE_showProfileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5797;
			Match(SHOW_SYMBOL);
			State = 5798;
			Match(PROFILE_SYMBOL);
			State = 5800;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ALL_SYMBOL || ((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & 19140298416324609L) != 0) || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==PAGE_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) {
				{
				State = 5799;
				profileDefinitions();
				}
			}

			State = 5805;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5802;
				Match(FOR_SYMBOL);
				State = 5803;
				Match(QUERY_SYMBOL);
				State = 5804;
				Match(INT_NUMBER);
				}
			}

			State = 5808;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT_SYMBOL) {
				{
				State = 5807;
				limitClause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowStatusStatementContext showStatusStatement() {
		ShowStatusStatementContext _localctx = new ShowStatusStatementContext(Context, State);
		EnterRule(_localctx, 786, RULE_showStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5810;
			Match(SHOW_SYMBOL);
			State = 5812;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
				{
				State = 5811;
				optionType();
				}
			}

			State = 5814;
			Match(STATUS_SYMBOL);
			State = 5816;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5815;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowProcessListStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySqlParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		public ShowProcessListStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showProcessListStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowProcessListStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowProcessListStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowProcessListStatementContext showProcessListStatement() {
		ShowProcessListStatementContext _localctx = new ShowProcessListStatementContext(Context, State);
		EnterRule(_localctx, 788, RULE_showProcessListStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5818;
			Match(SHOW_SYMBOL);
			State = 5820;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FULL_SYMBOL) {
				{
				State = 5819;
				Match(FULL_SYMBOL);
				}
			}

			State = 5822;
			Match(PROCESSLIST_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowVariablesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySqlParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OptionTypeContext optionType() {
			return GetRuleContext<OptionTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowVariablesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showVariablesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowVariablesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowVariablesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowVariablesStatementContext showVariablesStatement() {
		ShowVariablesStatementContext _localctx = new ShowVariablesStatementContext(Context, State);
		EnterRule(_localctx, 790, RULE_showVariablesStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5824;
			Match(SHOW_SYMBOL);
			State = 5826;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) {
				{
				State = 5825;
				optionType();
				}
			}

			State = 5828;
			Match(VARIABLES_SYMBOL);
			State = 5830;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5829;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCharacterSetStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCharacterSetStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCharacterSetStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCharacterSetStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCharacterSetStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCharacterSetStatementContext showCharacterSetStatement() {
		ShowCharacterSetStatementContext _localctx = new ShowCharacterSetStatementContext(Context, State);
		EnterRule(_localctx, 792, RULE_showCharacterSetStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5832;
			Match(SHOW_SYMBOL);
			State = 5833;
			charset();
			State = 5835;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5834;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCollationStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySqlParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCollationStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCollationStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCollationStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCollationStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCollationStatementContext showCollationStatement() {
		ShowCollationStatementContext _localctx = new ShowCollationStatementContext(Context, State);
		EnterRule(_localctx, 794, RULE_showCollationStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5837;
			Match(SHOW_SYMBOL);
			State = 5838;
			Match(COLLATION_SYMBOL);
			State = 5840;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5839;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowPrivilegesStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		public ShowPrivilegesStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showPrivilegesStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowPrivilegesStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowPrivilegesStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowPrivilegesStatementContext showPrivilegesStatement() {
		ShowPrivilegesStatementContext _localctx = new ShowPrivilegesStatementContext(Context, State);
		EnterRule(_localctx, 796, RULE_showPrivilegesStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5842;
			Match(SHOW_SYMBOL);
			State = 5843;
			Match(PRIVILEGES_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowGrantsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySqlParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserListContext userList() {
			return GetRuleContext<UserListContext>(0);
		}
		public ShowGrantsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showGrantsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowGrantsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowGrantsStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowGrantsStatementContext showGrantsStatement() {
		ShowGrantsStatementContext _localctx = new ShowGrantsStatementContext(Context, State);
		EnterRule(_localctx, 798, RULE_showGrantsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5845;
			Match(SHOW_SYMBOL);
			State = 5846;
			Match(GRANTS_SYMBOL);
			State = 5853;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5847;
				Match(FOR_SYMBOL);
				State = 5848;
				user();
				State = 5851;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING_SYMBOL) {
					{
					State = 5849;
					Match(USING_SYMBOL);
					State = 5850;
					userList();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateDatabaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfNotExistsContext ifNotExists() {
			return GetRuleContext<IfNotExistsContext>(0);
		}
		public ShowCreateDatabaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateDatabaseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateDatabaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateDatabaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateDatabaseStatementContext showCreateDatabaseStatement() {
		ShowCreateDatabaseStatementContext _localctx = new ShowCreateDatabaseStatementContext(Context, State);
		EnterRule(_localctx, 800, RULE_showCreateDatabaseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5855;
			Match(SHOW_SYMBOL);
			State = 5856;
			Match(CREATE_SYMBOL);
			State = 5857;
			Match(DATABASE_SYMBOL);
			State = 5859;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,685,Context) ) {
			case 1:
				{
				State = 5858;
				ifNotExists();
				}
				break;
			}
			State = 5861;
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateTableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		public ShowCreateTableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateTableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateTableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateTableStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateTableStatementContext showCreateTableStatement() {
		ShowCreateTableStatementContext _localctx = new ShowCreateTableStatementContext(Context, State);
		EnterRule(_localctx, 802, RULE_showCreateTableStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5863;
			Match(SHOW_SYMBOL);
			State = 5864;
			Match(CREATE_SYMBOL);
			State = 5865;
			Match(TABLE_SYMBOL);
			State = 5866;
			tableRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateViewStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef() {
			return GetRuleContext<ViewRefContext>(0);
		}
		public ShowCreateViewStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateViewStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateViewStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateViewStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateViewStatementContext showCreateViewStatement() {
		ShowCreateViewStatementContext _localctx = new ShowCreateViewStatementContext(Context, State);
		EnterRule(_localctx, 804, RULE_showCreateViewStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5868;
			Match(SHOW_SYMBOL);
			State = 5869;
			Match(CREATE_SYMBOL);
			State = 5870;
			Match(VIEW_SYMBOL);
			State = 5871;
			viewRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowMasterStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		public ShowMasterStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showMasterStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowMasterStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowMasterStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowMasterStatusStatementContext showMasterStatusStatement() {
		ShowMasterStatusStatementContext _localctx = new ShowMasterStatusStatementContext(Context, State);
		EnterRule(_localctx, 806, RULE_showMasterStatusStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5873;
			Match(SHOW_SYMBOL);
			State = 5874;
			Match(MASTER_SYMBOL);
			State = 5875;
			Match(STATUS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowReplicaStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReplicaContext replica() {
			return GetRuleContext<ReplicaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		public ShowReplicaStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showReplicaStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowReplicaStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowReplicaStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowReplicaStatusStatementContext showReplicaStatusStatement() {
		ShowReplicaStatusStatementContext _localctx = new ShowReplicaStatusStatementContext(Context, State);
		EnterRule(_localctx, 808, RULE_showReplicaStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5877;
			Match(SHOW_SYMBOL);
			State = 5878;
			replica();
			State = 5879;
			Match(STATUS_SYMBOL);
			State = 5881;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 5880;
				channel();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateProcedureStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public ShowCreateProcedureStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateProcedureStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateProcedureStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateProcedureStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateProcedureStatementContext showCreateProcedureStatement() {
		ShowCreateProcedureStatementContext _localctx = new ShowCreateProcedureStatementContext(Context, State);
		EnterRule(_localctx, 810, RULE_showCreateProcedureStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5883;
			Match(SHOW_SYMBOL);
			State = 5884;
			Match(CREATE_SYMBOL);
			State = 5885;
			Match(PROCEDURE_SYMBOL);
			State = 5886;
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateFunctionStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public ShowCreateFunctionStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateFunctionStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFunctionStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFunctionStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateFunctionStatementContext showCreateFunctionStatement() {
		ShowCreateFunctionStatementContext _localctx = new ShowCreateFunctionStatementContext(Context, State);
		EnterRule(_localctx, 812, RULE_showCreateFunctionStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5888;
			Match(SHOW_SYMBOL);
			State = 5889;
			Match(CREATE_SYMBOL);
			State = 5890;
			Match(FUNCTION_SYMBOL);
			State = 5891;
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateTriggerStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGER_SYMBOL() { return GetToken(MySqlParser.TRIGGER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TriggerRefContext triggerRef() {
			return GetRuleContext<TriggerRefContext>(0);
		}
		public ShowCreateTriggerStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateTriggerStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateTriggerStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateTriggerStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateTriggerStatementContext showCreateTriggerStatement() {
		ShowCreateTriggerStatementContext _localctx = new ShowCreateTriggerStatementContext(Context, State);
		EnterRule(_localctx, 814, RULE_showCreateTriggerStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5893;
			Match(SHOW_SYMBOL);
			State = 5894;
			Match(CREATE_SYMBOL);
			State = 5895;
			Match(TRIGGER_SYMBOL);
			State = 5896;
			triggerRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateProcedureStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCreateProcedureStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateProcedureStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateProcedureStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateProcedureStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateProcedureStatusStatementContext showCreateProcedureStatusStatement() {
		ShowCreateProcedureStatusStatementContext _localctx = new ShowCreateProcedureStatusStatementContext(Context, State);
		EnterRule(_localctx, 816, RULE_showCreateProcedureStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5898;
			Match(SHOW_SYMBOL);
			State = 5899;
			Match(CREATE_SYMBOL);
			State = 5900;
			Match(PROCEDURE_SYMBOL);
			State = 5901;
			Match(STATUS_SYMBOL);
			State = 5903;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5902;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateFunctionStatusStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LikeOrWhereContext likeOrWhere() {
			return GetRuleContext<LikeOrWhereContext>(0);
		}
		public ShowCreateFunctionStatusStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateFunctionStatusStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFunctionStatusStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFunctionStatusStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateFunctionStatusStatementContext showCreateFunctionStatusStatement() {
		ShowCreateFunctionStatusStatementContext _localctx = new ShowCreateFunctionStatusStatementContext(Context, State);
		EnterRule(_localctx, 818, RULE_showCreateFunctionStatusStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5905;
			Match(SHOW_SYMBOL);
			State = 5906;
			Match(CREATE_SYMBOL);
			State = 5907;
			Match(FUNCTION_SYMBOL);
			State = 5908;
			Match(STATUS_SYMBOL);
			State = 5910;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIKE_SYMBOL || _la==WHERE_SYMBOL) {
				{
				State = 5909;
				likeOrWhere();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateProcedureCodeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCEDURE_SYMBOL() { return GetToken(MySqlParser.PROCEDURE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySqlParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ProcedureRefContext procedureRef() {
			return GetRuleContext<ProcedureRefContext>(0);
		}
		public ShowCreateProcedureCodeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateProcedureCodeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateProcedureCodeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateProcedureCodeStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateProcedureCodeStatementContext showCreateProcedureCodeStatement() {
		ShowCreateProcedureCodeStatementContext _localctx = new ShowCreateProcedureCodeStatementContext(Context, State);
		EnterRule(_localctx, 820, RULE_showCreateProcedureCodeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5912;
			Match(SHOW_SYMBOL);
			State = 5913;
			Match(CREATE_SYMBOL);
			State = 5914;
			Match(PROCEDURE_SYMBOL);
			State = 5915;
			Match(CODE_SYMBOL);
			State = 5916;
			procedureRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateFunctionCodeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FUNCTION_SYMBOL() { return GetToken(MySqlParser.FUNCTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySqlParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionRefContext functionRef() {
			return GetRuleContext<FunctionRefContext>(0);
		}
		public ShowCreateFunctionCodeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateFunctionCodeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateFunctionCodeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateFunctionCodeStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateFunctionCodeStatementContext showCreateFunctionCodeStatement() {
		ShowCreateFunctionCodeStatementContext _localctx = new ShowCreateFunctionCodeStatementContext(Context, State);
		EnterRule(_localctx, 822, RULE_showCreateFunctionCodeStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5918;
			Match(SHOW_SYMBOL);
			State = 5919;
			Match(CREATE_SYMBOL);
			State = 5920;
			Match(FUNCTION_SYMBOL);
			State = 5921;
			Match(CODE_SYMBOL);
			State = 5922;
			functionRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateEventStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EventRefContext eventRef() {
			return GetRuleContext<EventRefContext>(0);
		}
		public ShowCreateEventStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateEventStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateEventStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateEventStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateEventStatementContext showCreateEventStatement() {
		ShowCreateEventStatementContext _localctx = new ShowCreateEventStatementContext(Context, State);
		EnterRule(_localctx, 824, RULE_showCreateEventStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5924;
			Match(SHOW_SYMBOL);
			State = 5925;
			Match(CREATE_SYMBOL);
			State = 5926;
			Match(EVENT_SYMBOL);
			State = 5927;
			eventRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCreateUserStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHOW_SYMBOL() { return GetToken(MySqlParser.SHOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public ShowCreateUserStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCreateUserStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCreateUserStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCreateUserStatement(this);
		}
	}

	[RuleVersion(0)]
	public ShowCreateUserStatementContext showCreateUserStatement() {
		ShowCreateUserStatementContext _localctx = new ShowCreateUserStatementContext(Context, State);
		EnterRule(_localctx, 826, RULE_showCreateUserStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5929;
			Match(SHOW_SYMBOL);
			State = 5930;
			Match(CREATE_SYMBOL);
			State = 5931;
			Match(USER_SYMBOL);
			State = 5932;
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowCommandTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		public ShowCommandTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_showCommandType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterShowCommandType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitShowCommandType(this);
		}
	}

	[RuleVersion(0)]
	public ShowCommandTypeContext showCommandType() {
		ShowCommandTypeContext _localctx = new ShowCommandTypeContext(Context, State);
		EnterRule(_localctx, 828, RULE_showCommandType);
		int _la;
		try {
			State = 5939;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FULL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5934;
				Match(FULL_SYMBOL);
				}
				break;
			case EXTENDED_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5935;
				Match(EXTENDED_SYMBOL);
				State = 5937;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FULL_SYMBOL) {
					{
					State = 5936;
					Match(FULL_SYMBOL);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineOrAllContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		public EngineOrAllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineOrAll; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEngineOrAll(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEngineOrAll(this);
		}
	}

	[RuleVersion(0)]
	public EngineOrAllContext engineOrAll() {
		EngineOrAllContext _localctx = new EngineOrAllContext(Context, State);
		EnterRule(_localctx, 830, RULE_engineOrAll);
		try {
			State = 5943;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,691,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5941;
				engineRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5942;
				Match(ALL_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FromOrInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		public FromOrInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fromOrIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFromOrIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFromOrIn(this);
		}
	}

	[RuleVersion(0)]
	public FromOrInContext fromOrIn() {
		FromOrInContext _localctx = new FromOrInContext(Context, State);
		EnterRule(_localctx, 832, RULE_fromOrIn);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5945;
			_la = TokenStream.LA(1);
			if ( !(_la==FROM_SYMBOL || _la==IN_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InDbContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FromOrInContext fromOrIn() {
			return GetRuleContext<FromOrInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public InDbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inDb; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInDb(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInDb(this);
		}
	}

	[RuleVersion(0)]
	public InDbContext inDb() {
		InDbContext _localctx = new InDbContext(Context, State);
		EnterRule(_localctx, 834, RULE_inDb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5947;
			fromOrIn();
			State = 5948;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ProfileDefinitionContext[] profileDefinition() {
			return GetRuleContexts<ProfileDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ProfileDefinitionContext profileDefinition(int i) {
			return GetRuleContext<ProfileDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ProfileDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profileDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProfileDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProfileDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public ProfileDefinitionsContext profileDefinitions() {
		ProfileDefinitionsContext _localctx = new ProfileDefinitionsContext(Context, State);
		EnterRule(_localctx, 836, RULE_profileDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 5950;
			profileDefinition();
			State = 5955;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 5951;
				Match(COMMA_SYMBOL);
				State = 5952;
				profileDefinition();
				}
				}
				State = 5957;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProfileDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySqlParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySqlParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySqlParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySqlParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySqlParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySqlParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySqlParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySqlParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySqlParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySqlParser.SWAPS_SYMBOL, 0); }
		public ProfileDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_profileDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProfileDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProfileDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ProfileDefinitionContext profileDefinition() {
		ProfileDefinitionContext _localctx = new ProfileDefinitionContext(Context, State);
		EnterRule(_localctx, 838, RULE_profileDefinition);
		int _la;
		try {
			State = 5965;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BLOCK_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5958;
				Match(BLOCK_SYMBOL);
				State = 5959;
				Match(IO_SYMBOL);
				}
				break;
			case CONTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5960;
				Match(CONTEXT_SYMBOL);
				State = 5961;
				Match(SWITCHES_SYMBOL);
				}
				break;
			case PAGE_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5962;
				Match(PAGE_SYMBOL);
				State = 5963;
				Match(FAULTS_SYMBOL);
				}
				break;
			case ALL_SYMBOL:
			case CPU_SYMBOL:
			case IPC_SYMBOL:
			case MEMORY_SYMBOL:
			case SOURCE_SYMBOL:
			case SWAPS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5964;
				_la = TokenStream.LA(1);
				if ( !(_la==ALL_SYMBOL || _la==CPU_SYMBOL || _la==IPC_SYMBOL || _la==MEMORY_SYMBOL || _la==SOURCE_SYMBOL || _la==SWAPS_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OtherAdministrativeStatementContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySqlParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyCacheListOrPartsContext keyCacheListOrParts() {
			return GetRuleContext<KeyCacheListOrPartsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySqlParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySqlParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FlushTablesContext flushTables() {
			return GetRuleContext<FlushTablesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext[] flushOption() {
			return GetRuleContexts<FlushOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushOptionContext flushOption(int i) {
			return GetRuleContext<FlushOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NoWriteToBinLogContext noWriteToBinLog() {
			return GetRuleContext<NoWriteToBinLogContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KILL_SYMBOL() { return GetToken(MySqlParser.KILL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreloadTailContext preloadTail() {
			return GetRuleContext<PreloadTailContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOAD_SYMBOL() { return GetToken(MySqlParser.LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		public OtherAdministrativeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_otherAdministrativeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOtherAdministrativeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOtherAdministrativeStatement(this);
		}
	}

	[RuleVersion(0)]
	public OtherAdministrativeStatementContext otherAdministrativeStatement() {
		OtherAdministrativeStatementContext _localctx = new OtherAdministrativeStatementContext(Context, State);
		EnterRule(_localctx, 840, RULE_otherAdministrativeStatement);
		int _la;
		try {
			State = 6003;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BINLOG_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 5967;
				_localctx.type = Match(BINLOG_SYMBOL);
				State = 5968;
				textLiteral();
				}
				break;
			case CACHE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5969;
				_localctx.type = Match(CACHE_SYMBOL);
				State = 5970;
				Match(INDEX_SYMBOL);
				State = 5971;
				keyCacheListOrParts();
				State = 5972;
				Match(IN_SYMBOL);
				State = 5975;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,694,Context) ) {
				case 1:
					{
					State = 5973;
					identifier();
					}
					break;
				case 2:
					{
					State = 5974;
					Match(DEFAULT_SYMBOL);
					}
					break;
				}
				}
				break;
			case FLUSH_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 5977;
				_localctx.type = Match(FLUSH_SYMBOL);
				State = 5979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) {
					{
					State = 5978;
					noWriteToBinLog();
					}
				}

				State = 5990;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case TABLES_SYMBOL:
				case TABLE_SYMBOL:
					{
					State = 5981;
					flushTables();
					}
					break;
				case BINARY_SYMBOL:
				case ENGINE_SYMBOL:
				case ERROR_SYMBOL:
				case GENERAL_SYMBOL:
				case HOSTS_SYMBOL:
				case LOGS_SYMBOL:
				case OPTIMIZER_COSTS_SYMBOL:
				case PRIVILEGES_SYMBOL:
				case RELAY_SYMBOL:
				case SLOW_SYMBOL:
				case STATUS_SYMBOL:
				case USER_RESOURCES_SYMBOL:
					{
					State = 5982;
					flushOption();
					State = 5987;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while (_la==COMMA_SYMBOL) {
						{
						{
						State = 5983;
						Match(COMMA_SYMBOL);
						State = 5984;
						flushOption();
						}
						}
						State = 5989;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case KILL_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 5992;
				_localctx.type = Match(KILL_SYMBOL);
				State = 5994;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,698,Context) ) {
				case 1:
					{
					State = 5993;
					_la = TokenStream.LA(1);
					if ( !(_la==CONNECTION_SYMBOL || _la==QUERY_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 5996;
				expr(0);
				}
				break;
			case LOAD_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 5997;
				_localctx.type = Match(LOAD_SYMBOL);
				State = 5998;
				Match(INDEX_SYMBOL);
				State = 5999;
				Match(INTO_SYMBOL);
				State = 6000;
				Match(CACHE_SYMBOL);
				State = 6001;
				preloadTail();
				}
				break;
			case SHUTDOWN_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6002;
				_localctx.type = Match(SHUTDOWN_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListOrPartsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyCacheListContext keyCacheList() {
			return GetRuleContext<KeyCacheListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycachePartitionContext assignToKeycachePartition() {
			return GetRuleContext<AssignToKeycachePartitionContext>(0);
		}
		public KeyCacheListOrPartsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheListOrParts; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheListOrParts(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheListOrParts(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListOrPartsContext keyCacheListOrParts() {
		KeyCacheListOrPartsContext _localctx = new KeyCacheListOrPartsContext(Context, State);
		EnterRule(_localctx, 842, RULE_keyCacheListOrParts);
		try {
			State = 6007;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,700,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6005;
				keyCacheList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6006;
				assignToKeycachePartition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyCacheListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycacheContext[] assignToKeycache() {
			return GetRuleContexts<AssignToKeycacheContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignToKeycacheContext assignToKeycache(int i) {
			return GetRuleContext<AssignToKeycacheContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public KeyCacheListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyCacheList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyCacheList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyCacheList(this);
		}
	}

	[RuleVersion(0)]
	public KeyCacheListContext keyCacheList() {
		KeyCacheListContext _localctx = new KeyCacheListContext(Context, State);
		EnterRule(_localctx, 844, RULE_keyCacheList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6009;
			assignToKeycache();
			State = 6014;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6010;
				Match(COMMA_SYMBOL);
				State = 6011;
				assignToKeycache();
				}
				}
				State = 6016;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycacheContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycacheContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycache; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycache(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycache(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycacheContext assignToKeycache() {
		AssignToKeycacheContext _localctx = new AssignToKeycacheContext(Context, State);
		EnterRule(_localctx, 846, RULE_assignToKeycache);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6017;
			tableRef();
			State = 6019;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 6018;
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignToKeycachePartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		public AssignToKeycachePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignToKeycachePartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAssignToKeycachePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAssignToKeycachePartition(this);
		}
	}

	[RuleVersion(0)]
	public AssignToKeycachePartitionContext assignToKeycachePartition() {
		AssignToKeycachePartitionContext _localctx = new AssignToKeycachePartitionContext(Context, State);
		EnterRule(_localctx, 848, RULE_assignToKeycachePartition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6021;
			tableRef();
			State = 6022;
			Match(PARTITION_SYMBOL);
			State = 6023;
			Match(OPEN_PAR_SYMBOL);
			State = 6024;
			allOrPartitionNameList();
			State = 6025;
			Match(CLOSE_PAR_SYMBOL);
			State = 6027;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 6026;
				cacheKeyList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CacheKeyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageListContext keyUsageList() {
			return GetRuleContext<KeyUsageListContext>(0);
		}
		public CacheKeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cacheKeyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCacheKeyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCacheKeyList(this);
		}
	}

	[RuleVersion(0)]
	public CacheKeyListContext cacheKeyList() {
		CacheKeyListContext _localctx = new CacheKeyListContext(Context, State);
		EnterRule(_localctx, 850, RULE_cacheKeyList);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6029;
			keyOrIndex();
			State = 6030;
			Match(OPEN_PAR_SYMBOL);
			State = 6032;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,704,Context) ) {
			case 1:
				{
				State = 6031;
				keyUsageList();
				}
				break;
			}
			State = 6034;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		public KeyUsageElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageElement(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageElementContext keyUsageElement() {
		KeyUsageElementContext _localctx = new KeyUsageElementContext(Context, State);
		EnterRule(_localctx, 852, RULE_keyUsageElement);
		try {
			State = 6038;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,705,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6036;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6037;
				Match(PRIMARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyUsageListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageElementContext[] keyUsageElement() {
			return GetRuleContexts<KeyUsageElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyUsageElementContext keyUsageElement(int i) {
			return GetRuleContext<KeyUsageElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public KeyUsageListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyUsageList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyUsageList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyUsageList(this);
		}
	}

	[RuleVersion(0)]
	public KeyUsageListContext keyUsageList() {
		KeyUsageListContext _localctx = new KeyUsageListContext(Context, State);
		EnterRule(_localctx, 854, RULE_keyUsageList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6040;
			keyUsageElement();
			State = 6045;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6041;
				Match(COMMA_SYMBOL);
				State = 6042;
				keyUsageElement();
				}
				}
				State = 6047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySqlParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySqlParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LogTypeContext logType() {
			return GetRuleContext<LogTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySqlParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ChannelContext channel() {
			return GetRuleContext<ChannelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIMIZER_COSTS_SYMBOL() { return GetToken(MySqlParser.OPTIMIZER_COSTS_SYMBOL, 0); }
		public FlushOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushOption(this);
		}
	}

	[RuleVersion(0)]
	public FlushOptionContext flushOption() {
		FlushOptionContext _localctx = new FlushOptionContext(Context, State);
		EnterRule(_localctx, 856, RULE_flushOption);
		int _la;
		try {
			State = 6059;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HOSTS_SYMBOL:
			case PRIVILEGES_SYMBOL:
			case STATUS_SYMBOL:
			case USER_RESOURCES_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6048;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==HOSTS_SYMBOL || _la==PRIVILEGES_SYMBOL || _la==STATUS_SYMBOL || _la==USER_RESOURCES_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case BINARY_SYMBOL:
			case ENGINE_SYMBOL:
			case ERROR_SYMBOL:
			case GENERAL_SYMBOL:
			case LOGS_SYMBOL:
			case SLOW_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6050;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==BINARY_SYMBOL || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & 4398046511109L) != 0) || _la==SLOW_SYMBOL) {
					{
					State = 6049;
					logType();
					}
				}

				State = 6052;
				_localctx.option = Match(LOGS_SYMBOL);
				}
				break;
			case RELAY_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6053;
				_localctx.option = Match(RELAY_SYMBOL);
				State = 6054;
				Match(LOGS_SYMBOL);
				State = 6056;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 6055;
					channel();
					}
				}

				}
				break;
			case OPTIMIZER_COSTS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6058;
				_localctx.option = Match(OPTIMIZER_COSTS_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySqlParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySqlParser.SLOW_SYMBOL, 0); }
		public LogTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogType(this);
		}
	}

	[RuleVersion(0)]
	public LogTypeContext logType() {
		LogTypeContext _localctx = new LogTypeContext(Context, State);
		EnterRule(_localctx, 858, RULE_logType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6061;
			_la = TokenStream.LA(1);
			if ( !(_la==BINARY_SYMBOL || ((((_la - 199)) & ~0x3f) == 0 && ((1L << (_la - 199)) & 4398046511109L) != 0) || _la==SLOW_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_SYMBOL() { return GetToken(MySqlParser.TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FlushTablesOptionsContext flushTablesOptions() {
			return GetRuleContext<FlushTablesOptionsContext>(0);
		}
		public FlushTablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushTables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushTables(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesContext flushTables() {
		FlushTablesContext _localctx = new FlushTablesContext(Context, State);
		EnterRule(_localctx, 860, RULE_flushTables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6063;
			_la = TokenStream.LA(1);
			if ( !(_la==TABLES_SYMBOL || _la==TABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6071;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,711,Context) ) {
			case 1:
				{
				State = 6064;
				Match(WITH_SYMBOL);
				State = 6065;
				Match(READ_SYMBOL);
				State = 6066;
				Match(LOCK_SYMBOL);
				}
				break;
			case 2:
				{
				State = 6067;
				identifierList();
				State = 6069;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL || _la==WITH_SYMBOL) {
					{
					State = 6068;
					flushTablesOptions();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FlushTablesOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySqlParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_SYMBOL() { return GetToken(MySqlParser.READ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCK_SYMBOL() { return GetToken(MySqlParser.LOCK_SYMBOL, 0); }
		public FlushTablesOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_flushTablesOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFlushTablesOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFlushTablesOptions(this);
		}
	}

	[RuleVersion(0)]
	public FlushTablesOptionsContext flushTablesOptions() {
		FlushTablesOptionsContext _localctx = new FlushTablesOptionsContext(Context, State);
		EnterRule(_localctx, 862, RULE_flushTablesOptions);
		try {
			State = 6078;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6073;
				Match(FOR_SYMBOL);
				State = 6074;
				Match(EXPORT_SYMBOL);
				}
				break;
			case WITH_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6075;
				Match(WITH_SYMBOL);
				State = 6076;
				Match(READ_SYMBOL);
				State = 6077;
				Match(LOCK_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadTailContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AdminPartitionContext adminPartition() {
			return GetRuleContext<AdminPartitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySqlParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PreloadListContext preloadList() {
			return GetRuleContext<PreloadListContext>(0);
		}
		public PreloadTailContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadTail; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreloadTail(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreloadTail(this);
		}
	}

	[RuleVersion(0)]
	public PreloadTailContext preloadTail() {
		PreloadTailContext _localctx = new PreloadTailContext(Context, State);
		EnterRule(_localctx, 864, RULE_preloadTail);
		int _la;
		try {
			State = 6090;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,715,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6080;
				tableRef();
				State = 6081;
				adminPartition();
				State = 6083;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
					{
					State = 6082;
					cacheKeyList();
					}
				}

				State = 6087;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL) {
					{
					State = 6085;
					Match(IGNORE_SYMBOL);
					State = 6086;
					Match(LEAVES_SYMBOL);
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6089;
				preloadList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PreloadKeysContext[] preloadKeys() {
			return GetRuleContexts<PreloadKeysContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PreloadKeysContext preloadKeys(int i) {
			return GetRuleContext<PreloadKeysContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PreloadListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreloadList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreloadList(this);
		}
	}

	[RuleVersion(0)]
	public PreloadListContext preloadList() {
		PreloadListContext _localctx = new PreloadListContext(Context, State);
		EnterRule(_localctx, 866, RULE_preloadList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6092;
			preloadKeys();
			State = 6097;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6093;
				Match(COMMA_SYMBOL);
				State = 6094;
				preloadKeys();
				}
				}
				State = 6099;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreloadKeysContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CacheKeyListContext cacheKeyList() {
			return GetRuleContext<CacheKeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySqlParser.LEAVES_SYMBOL, 0); }
		public PreloadKeysContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_preloadKeys; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPreloadKeys(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPreloadKeys(this);
		}
	}

	[RuleVersion(0)]
	public PreloadKeysContext preloadKeys() {
		PreloadKeysContext _localctx = new PreloadKeysContext(Context, State);
		EnterRule(_localctx, 868, RULE_preloadKeys);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6100;
			tableRef();
			State = 6102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INDEX_SYMBOL || _la==KEY_SYMBOL) {
				{
				State = 6101;
				cacheKeyList();
				}
			}

			State = 6106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IGNORE_SYMBOL) {
				{
				State = 6104;
				Match(IGNORE_SYMBOL);
				State = 6105;
				Match(LEAVES_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AdminPartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AllOrPartitionNameListContext allOrPartitionNameList() {
			return GetRuleContext<AllOrPartitionNameListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public AdminPartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_adminPartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAdminPartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAdminPartition(this);
		}
	}

	[RuleVersion(0)]
	public AdminPartitionContext adminPartition() {
		AdminPartitionContext _localctx = new AdminPartitionContext(Context, State);
		EnterRule(_localctx, 870, RULE_adminPartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6108;
			Match(PARTITION_SYMBOL);
			State = 6109;
			Match(OPEN_PAR_SYMBOL);
			State = 6110;
			allOrPartitionNameList();
			State = 6111;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupManagementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateResourceGroupContext createResourceGroup() {
			return GetRuleContext<CreateResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AlterResourceGroupContext alterResourceGroup() {
			return GetRuleContext<AlterResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SetResourceGroupContext setResourceGroup() {
			return GetRuleContext<SetResourceGroupContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DropResourceGroupContext dropResourceGroup() {
			return GetRuleContext<DropResourceGroupContext>(0);
		}
		public ResourceGroupManagementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupManagement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupManagement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupManagement(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupManagementContext resourceGroupManagement() {
		ResourceGroupManagementContext _localctx = new ResourceGroupManagementContext(Context, State);
		EnterRule(_localctx, 872, RULE_resourceGroupManagement);
		try {
			State = 6117;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CREATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6113;
				createResourceGroup();
				}
				break;
			case ALTER_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6114;
				alterResourceGroup();
				}
				break;
			case SET_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6115;
				setResourceGroup();
				}
				break;
			case DROP_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6116;
				dropResourceGroup();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CREATE_SYMBOL() { return GetToken(MySqlParser.CREATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		public CreateResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public CreateResourceGroupContext createResourceGroup() {
		CreateResourceGroupContext _localctx = new CreateResourceGroupContext(Context, State);
		EnterRule(_localctx, 874, RULE_createResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6119;
			Match(CREATE_SYMBOL);
			State = 6120;
			Match(RESOURCE_SYMBOL);
			State = 6121;
			Match(GROUP_SYMBOL);
			State = 6122;
			identifier();
			State = 6123;
			Match(TYPE_SYMBOL);
			State = 6125;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 6124;
				equal();
				}
			}

			State = 6127;
			_la = TokenStream.LA(1);
			if ( !(_la==USER_SYMBOL || _la==SYSTEM_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 6128;
				resourceGroupVcpuList();
				}
			}

			State = 6132;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 6131;
				resourceGroupPriority();
				}
			}

			State = 6135;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 6134;
				resourceGroupEnableDisable();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupVcpuListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySqlParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VcpuNumOrRangeContext[] vcpuNumOrRange() {
			return GetRuleContexts<VcpuNumOrRangeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public VcpuNumOrRangeContext vcpuNumOrRange(int i) {
			return GetRuleContext<VcpuNumOrRangeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ResourceGroupVcpuListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupVcpuList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupVcpuList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupVcpuList(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupVcpuListContext resourceGroupVcpuList() {
		ResourceGroupVcpuListContext _localctx = new ResourceGroupVcpuListContext(Context, State);
		EnterRule(_localctx, 876, RULE_resourceGroupVcpuList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6137;
			Match(VCPU_SYMBOL);
			State = 6139;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 6138;
				equal();
				}
			}

			State = 6141;
			vcpuNumOrRange();
			State = 6148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INT_NUMBER || _la==COMMA_SYMBOL) {
				{
				{
				State = 6143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6142;
					Match(COMMA_SYMBOL);
					}
				}

				State = 6145;
				vcpuNumOrRange();
				}
				}
				State = 6150;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VcpuNumOrRangeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySqlParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySqlParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		public VcpuNumOrRangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_vcpuNumOrRange; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVcpuNumOrRange(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVcpuNumOrRange(this);
		}
	}

	[RuleVersion(0)]
	public VcpuNumOrRangeContext vcpuNumOrRange() {
		VcpuNumOrRangeContext _localctx = new VcpuNumOrRangeContext(Context, State);
		EnterRule(_localctx, 878, RULE_vcpuNumOrRange);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6151;
			Match(INT_NUMBER);
			State = 6154;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MINUS_OPERATOR) {
				{
				State = 6152;
				Match(MINUS_OPERATOR);
				State = 6153;
				Match(INT_NUMBER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupPriorityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySqlParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		public ResourceGroupPriorityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupPriority; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupPriority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupPriority(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupPriorityContext resourceGroupPriority() {
		ResourceGroupPriorityContext _localctx = new ResourceGroupPriorityContext(Context, State);
		EnterRule(_localctx, 880, RULE_resourceGroupPriority);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6156;
			Match(THREAD_PRIORITY_SYMBOL);
			State = 6158;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) {
				{
				State = 6157;
				equal();
				}
			}

			State = 6160;
			Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupEnableDisableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		public ResourceGroupEnableDisableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupEnableDisable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupEnableDisable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupEnableDisable(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
		ResourceGroupEnableDisableContext _localctx = new ResourceGroupEnableDisableContext(Context, State);
		EnterRule(_localctx, 882, RULE_resourceGroupEnableDisable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6162;
			_la = TokenStream.LA(1);
			if ( !(_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AlterResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALTER_SYMBOL() { return GetToken(MySqlParser.ALTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupVcpuListContext resourceGroupVcpuList() {
			return GetRuleContext<ResourceGroupVcpuListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupPriorityContext resourceGroupPriority() {
			return GetRuleContext<ResourceGroupPriorityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupEnableDisableContext resourceGroupEnableDisable() {
			return GetRuleContext<ResourceGroupEnableDisableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySqlParser.FORCE_SYMBOL, 0); }
		public AlterResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_alterResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAlterResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAlterResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public AlterResourceGroupContext alterResourceGroup() {
		AlterResourceGroupContext _localctx = new AlterResourceGroupContext(Context, State);
		EnterRule(_localctx, 884, RULE_alterResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6164;
			Match(ALTER_SYMBOL);
			State = 6165;
			Match(RESOURCE_SYMBOL);
			State = 6166;
			Match(GROUP_SYMBOL);
			State = 6167;
			resourceGroupRef();
			State = 6169;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==VCPU_SYMBOL) {
				{
				State = 6168;
				resourceGroupVcpuList();
				}
			}

			State = 6172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THREAD_PRIORITY_SYMBOL) {
				{
				State = 6171;
				resourceGroupPriority();
				}
			}

			State = 6175;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DISABLE_SYMBOL || _la==ENABLE_SYMBOL) {
				{
				State = 6174;
				resourceGroupEnableDisable();
				}
			}

			State = 6178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 6177;
				Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ThreadIdListContext threadIdList() {
			return GetRuleContext<ThreadIdListContext>(0);
		}
		public SetResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public SetResourceGroupContext setResourceGroup() {
		SetResourceGroupContext _localctx = new SetResourceGroupContext(Context, State);
		EnterRule(_localctx, 886, RULE_setResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6180;
			Match(SET_SYMBOL);
			State = 6181;
			Match(RESOURCE_SYMBOL);
			State = 6182;
			Match(GROUP_SYMBOL);
			State = 6183;
			identifier();
			State = 6186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FOR_SYMBOL) {
				{
				State = 6184;
				Match(FOR_SYMBOL);
				State = 6185;
				threadIdList();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThreadIdListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ThreadIdListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_threadIdList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThreadIdList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThreadIdList(this);
		}
	}

	[RuleVersion(0)]
	public ThreadIdListContext threadIdList() {
		ThreadIdListContext _localctx = new ThreadIdListContext(Context, State);
		EnterRule(_localctx, 888, RULE_threadIdList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6188;
			real_ulong_number();
			State = 6195;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184908959800L) != 0)) {
				{
				{
				State = 6190;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6189;
					Match(COMMA_SYMBOL);
					}
				}

				State = 6192;
				real_ulong_number();
				}
				}
				State = 6197;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DropResourceGroupContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DROP_SYMBOL() { return GetToken(MySqlParser.DROP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_SYMBOL() { return GetToken(MySqlParser.GROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ResourceGroupRefContext resourceGroupRef() {
			return GetRuleContext<ResourceGroupRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORCE_SYMBOL() { return GetToken(MySqlParser.FORCE_SYMBOL, 0); }
		public DropResourceGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dropResourceGroup; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDropResourceGroup(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDropResourceGroup(this);
		}
	}

	[RuleVersion(0)]
	public DropResourceGroupContext dropResourceGroup() {
		DropResourceGroupContext _localctx = new DropResourceGroupContext(Context, State);
		EnterRule(_localctx, 890, RULE_dropResourceGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6198;
			Match(DROP_SYMBOL);
			State = 6199;
			Match(RESOURCE_SYMBOL);
			State = 6200;
			Match(GROUP_SYMBOL);
			State = 6201;
			resourceGroupRef();
			State = 6203;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==FORCE_SYMBOL) {
				{
				State = 6202;
				Match(FORCE_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UtilityStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescribeStatementContext describeStatement() {
			return GetRuleContext<DescribeStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainStatementContext explainStatement() {
			return GetRuleContext<ExplainStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HelpCommandContext helpCommand() {
			return GetRuleContext<HelpCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UseCommandContext useCommand() {
			return GetRuleContext<UseCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RestartServerContext restartServer() {
			return GetRuleContext<RestartServerContext>(0);
		}
		public UtilityStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_utilityStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUtilityStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUtilityStatement(this);
		}
	}

	[RuleVersion(0)]
	public UtilityStatementContext utilityStatement() {
		UtilityStatementContext _localctx = new UtilityStatementContext(Context, State);
		EnterRule(_localctx, 892, RULE_utilityStatement);
		try {
			State = 6211;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,737,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6205;
				describeStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6206;
				explainStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6207;
				helpCommand();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6208;
				useCommand();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6209;
				if (!(this.ServerVersion >= 80011)) throw new FailedPredicateException(this, "this.ServerVersion >= 80011");
				State = 6210;
				restartServer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescribeStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN_SYMBOL() { return GetToken(MySqlParser.EXPLAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySqlParser.DESCRIBE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySqlParser.DESC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		public DescribeStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_describeStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDescribeStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDescribeStatement(this);
		}
	}

	[RuleVersion(0)]
	public DescribeStatementContext describeStatement() {
		DescribeStatementContext _localctx = new DescribeStatementContext(Context, State);
		EnterRule(_localctx, 894, RULE_describeStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6213;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & 2199023255555L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6214;
			tableRef();
			State = 6217;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,738,Context) ) {
			case 1:
				{
				State = 6215;
				textString();
				}
				break;
			case 2:
				{
				State = 6216;
				columnRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExplainableStatementContext explainableStatement() {
			return GetRuleContext<ExplainableStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPLAIN_SYMBOL() { return GetToken(MySqlParser.EXPLAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIBE_SYMBOL() { return GetToken(MySqlParser.DESCRIBE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySqlParser.DESC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExplainOptionsContext explainOptions() {
			return GetRuleContext<ExplainOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ExplainStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExplainStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExplainStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExplainStatementContext explainStatement() {
		ExplainStatementContext _localctx = new ExplainStatementContext(Context, State);
		EnterRule(_localctx, 896, RULE_explainStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6219;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 173)) & ~0x3f) == 0 && ((1L << (_la - 173)) & 2199023255555L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6221;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,739,Context) ) {
			case 1:
				{
				State = 6220;
				explainOptions();
				}
				break;
			}
			State = 6227;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,740,Context) ) {
			case 1:
				{
				State = 6223;
				if (!(this.ServerVersion >= 80032)) throw new FailedPredicateException(this, "this.ServerVersion >= 80032");
				State = 6224;
				Match(FOR_SYMBOL);
				State = 6225;
				Match(DATABASE_SYMBOL);
				State = 6226;
				textOrIdentifier();
				}
				break;
			}
			State = 6229;
			explainableStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySqlParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExplainIntoContext explainInto() {
			return GetRuleContext<ExplainIntoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANALYZE_SYMBOL() { return GetToken(MySqlParser.ANALYZE_SYMBOL, 0); }
		public ExplainOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExplainOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExplainOptions(this);
		}
	}

	[RuleVersion(0)]
	public ExplainOptionsContext explainOptions() {
		ExplainOptionsContext _localctx = new ExplainOptionsContext(Context, State);
		EnterRule(_localctx, 898, RULE_explainOptions);
		try {
			State = 6247;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,742,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6231;
				Match(FORMAT_SYMBOL);
				State = 6232;
				Match(EQUAL_OPERATOR);
				State = 6233;
				textOrIdentifier();
				State = 6236;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,741,Context) ) {
				case 1:
					{
					State = 6234;
					if (!(this.ServerVersion >= 80032)) throw new FailedPredicateException(this, "this.ServerVersion >= 80032");
					State = 6235;
					explainInto();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6238;
				if (!(this.ServerVersion < 80012)) throw new FailedPredicateException(this, "this.ServerVersion < 80012");
				State = 6239;
				Match(EXTENDED_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6240;
				if (!(this.ServerVersion >= 80018)) throw new FailedPredicateException(this, "this.ServerVersion >= 80018");
				State = 6241;
				Match(ANALYZE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6242;
				if (!(this.ServerVersion >= 80019)) throw new FailedPredicateException(this, "this.ServerVersion >= 80019");
				State = 6243;
				Match(ANALYZE_SYMBOL);
				State = 6244;
				Match(FORMAT_SYMBOL);
				State = 6245;
				Match(EQUAL_OPERATOR);
				State = 6246;
				textOrIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainableStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteStatementContext deleteStatement() {
			return GetRuleContext<DeleteStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InsertStatementContext insertStatement() {
			return GetRuleContext<InsertStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReplaceStatementContext replaceStatement() {
			return GetRuleContext<ReplaceStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateStatementContext updateStatement() {
			return GetRuleContext<UpdateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public ExplainableStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainableStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExplainableStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExplainableStatement(this);
		}
	}

	[RuleVersion(0)]
	public ExplainableStatementContext explainableStatement() {
		ExplainableStatementContext _localctx = new ExplainableStatementContext(Context, State);
		EnterRule(_localctx, 900, RULE_explainableStatement);
		try {
			State = 6257;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,743,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6249;
				selectStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6250;
				deleteStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6251;
				insertStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6252;
				replaceStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6253;
				updateStatement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6254;
				Match(FOR_SYMBOL);
				State = 6255;
				Match(CONNECTION_SYMBOL);
				State = 6256;
				real_ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplainIntoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN_SYMBOL() { return GetToken(MySqlParser.NUMBER_SIGN_SYMBOL, 0); }
		public ExplainIntoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explainInto; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExplainInto(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExplainInto(this);
		}
	}

	[RuleVersion(0)]
	public ExplainIntoContext explainInto() {
		ExplainIntoContext _localctx = new ExplainIntoContext(Context, State);
		EnterRule(_localctx, 902, RULE_explainInto);
		try {
			State = 6265;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,744,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6259;
				Match(INTO_SYMBOL);
				State = 6260;
				Match(AT_SIGN_SYMBOL);
				State = 6261;
				textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6262;
				Match(INTO_SYMBOL);
				State = 6263;
				Match(NUMBER_SIGN_SYMBOL);
				State = 6264;
				textOrIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HelpCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySqlParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public HelpCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_helpCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHelpCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHelpCommand(this);
		}
	}

	[RuleVersion(0)]
	public HelpCommandContext helpCommand() {
		HelpCommandContext _localctx = new HelpCommandContext(Context, State);
		EnterRule(_localctx, 904, RULE_helpCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6267;
			Match(HELP_SYMBOL);
			State = 6268;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UseCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_SYMBOL() { return GetToken(MySqlParser.USE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		public UseCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_useCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUseCommand(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUseCommand(this);
		}
	}

	[RuleVersion(0)]
	public UseCommandContext useCommand() {
		UseCommandContext _localctx = new UseCommandContext(Context, State);
		EnterRule(_localctx, 906, RULE_useCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6270;
			Match(USE_SYMBOL);
			State = 6271;
			schemaRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RestartServerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySqlParser.RESTART_SYMBOL, 0); }
		public RestartServerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_restartServer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRestartServer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRestartServer(this);
		}
	}

	[RuleVersion(0)]
	public RestartServerContext restartServer() {
		RestartServerContext _localctx = new RestartServerContext(Context, State);
		EnterRule(_localctx, 908, RULE_restartServer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6273;
			Match(RESTART_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }

		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExprOrContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR_SYMBOL() { return GetToken(MySqlParser.OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_OR_OPERATOR() { return GetToken(MySqlParser.LOGICAL_OR_OPERATOR, 0); }
		public ExprOrContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprOr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprOr(this);
		}
	}
	public partial class ExprNotContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprNotContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprNot(this);
		}
	}
	public partial class ExprIsContext : ExprContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_SYMBOL() { return GetToken(MySqlParser.IS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_SYMBOL() { return GetToken(MySqlParser.TRUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_SYMBOL() { return GetToken(MySqlParser.FALSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySqlParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public ExprIsContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprIs(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprIs(this);
		}
	}
	public partial class ExprAndContext : ExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_AND_OPERATOR() { return GetToken(MySqlParser.LOGICAL_AND_OPERATOR, 0); }
		public ExprAndContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprAnd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprAnd(this);
		}
	}
	public partial class ExprXorContext : ExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XOR_SYMBOL() { return GetToken(MySqlParser.XOR_SYMBOL, 0); }
		public ExprXorContext(ExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprXor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprXor(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 910;
		EnterRecursionRule(_localctx, 910, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6286;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,747,Context) ) {
			case 1:
				{
				_localctx = new ExprIsContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6276;
				boolPri(0);
				State = 6282;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,746,Context) ) {
				case 1:
					{
					State = 6277;
					Match(IS_SYMBOL);
					State = 6279;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
						{
						State = 6278;
						notRule();
						}
					}

					State = 6281;
					((ExprIsContext)_localctx).type = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL || _la==UNKNOWN_SYMBOL) ) {
						((ExprIsContext)_localctx).type = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new ExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6284;
				Match(NOT_SYMBOL);
				State = 6285;
				expr(4);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6299;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,749,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6297;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,748,Context) ) {
					case 1:
						{
						_localctx = new ExprAndContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 6288;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6289;
						((ExprAndContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LOGICAL_AND_OPERATOR || _la==AND_SYMBOL) ) {
							((ExprAndContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6290;
						expr(4);
						}
						break;
					case 2:
						{
						_localctx = new ExprXorContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 6291;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6292;
						Match(XOR_SYMBOL);
						State = 6293;
						expr(3);
						}
						break;
					case 3:
						{
						_localctx = new ExprOrContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 6294;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6295;
						((ExprOrContext)_localctx).op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==LOGICAL_OR_OPERATOR || _la==OR_SYMBOL) ) {
							((ExprOrContext)_localctx).op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6296;
						expr(2);
						}
						break;
					}
					}
				}
				State = 6301;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,749,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class BoolPriContext : ParserRuleContext {
		public BoolPriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolPri; } }

		public BoolPriContext() { }
		public virtual void CopyFrom(BoolPriContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrimaryExprPredicateContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprPredicateContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprPredicate(this);
		}
	}
	public partial class PrimaryExprCompareContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PrimaryExprCompareContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprCompare(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprCompare(this);
		}
	}
	public partial class PrimaryExprAllAnyContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompOpContext compOp() {
			return GetRuleContext<CompOpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySqlParser.ANY_SYMBOL, 0); }
		public PrimaryExprAllAnyContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprAllAny(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprAllAny(this);
		}
	}
	public partial class PrimaryExprIsNullContext : BoolPriContext {
		[System.Diagnostics.DebuggerNonUserCode] public BoolPriContext boolPri() {
			return GetRuleContext<BoolPriContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IS_SYMBOL() { return GetToken(MySqlParser.IS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		public PrimaryExprIsNullContext(BoolPriContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrimaryExprIsNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrimaryExprIsNull(this);
		}
	}

	[RuleVersion(0)]
	public BoolPriContext boolPri() {
		return boolPri(0);
	}

	private BoolPriContext boolPri(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BoolPriContext _localctx = new BoolPriContext(Context, _parentState);
		BoolPriContext _prevctx = _localctx;
		int _startState = 912;
		EnterRecursionRule(_localctx, 912, RULE_boolPri, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PrimaryExprPredicateContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 6303;
			predicate();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6322;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,752,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6320;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,751,Context) ) {
					case 1:
						{
						_localctx = new PrimaryExprIsNullContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 6305;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6306;
						Match(IS_SYMBOL);
						State = 6308;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
							{
							State = 6307;
							notRule();
							}
						}

						State = 6310;
						Match(NULL_SYMBOL);
						}
						break;
					case 2:
						{
						_localctx = new PrimaryExprCompareContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 6311;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6312;
						compOp();
						State = 6313;
						predicate();
						}
						break;
					case 3:
						{
						_localctx = new PrimaryExprAllAnyContext(new BoolPriContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_boolPri);
						State = 6315;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6316;
						compOp();
						State = 6317;
						_la = TokenStream.LA(1);
						if ( !(_la==ALL_SYMBOL || _la==ANY_SYMBOL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6318;
						subquery();
						}
						break;
					}
					}
				}
				State = 6324;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,752,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class CompOpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SAFE_EQUAL_OPERATOR() { return GetToken(MySqlParser.NULL_SAFE_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_OR_EQUAL_OPERATOR() { return GetToken(MySqlParser.GREATER_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GREATER_THAN_OPERATOR() { return GetToken(MySqlParser.GREATER_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_OR_EQUAL_OPERATOR() { return GetToken(MySqlParser.LESS_OR_EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_THAN_OPERATOR() { return GetToken(MySqlParser.LESS_THAN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_EQUAL_OPERATOR() { return GetToken(MySqlParser.NOT_EQUAL_OPERATOR, 0); }
		public CompOpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compOp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompOp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompOp(this);
		}
	}

	[RuleVersion(0)]
	public CompOpContext compOp() {
		CompOpContext _localctx = new CompOpContext(Context, State);
		EnterRule(_localctx, 914, RULE_compOp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6325;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 16192L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PredicateOperationsContext predicateOperations() {
			return GetRuleContext<PredicateOperationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySqlParser.MEMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySqlParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySqlParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OF_SYMBOL() { return GetToken(MySqlParser.OF_SYMBOL, 0); }
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 916, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6327;
			bitExpr(0);
			State = 6341;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,755,Context) ) {
			case 1:
				{
				State = 6329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					State = 6328;
					notRule();
					}
				}

				State = 6331;
				predicateOperations();
				}
				break;
			case 2:
				{
				State = 6332;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 6333;
				Match(MEMBER_SYMBOL);
				State = 6335;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OF_SYMBOL) {
					{
					State = 6334;
					Match(OF_SYMBOL);
					}
				}

				State = 6337;
				simpleExprWithParentheses();
				}
				break;
			case 3:
				{
				State = 6338;
				Match(SOUNDS_SYMBOL);
				State = 6339;
				Match(LIKE_SYMBOL);
				State = 6340;
				bitExpr(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateOperationsContext : ParserRuleContext {
		public PredicateOperationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicateOperations; } }

		public PredicateOperationsContext() { }
		public virtual void CopyFrom(PredicateOperationsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PredicateExprRegexContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGEXP_SYMBOL() { return GetToken(MySqlParser.REGEXP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		public PredicateExprRegexContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprRegex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprRegex(this);
		}
	}
	public partial class PredicateExprBetweenContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BETWEEN_SYMBOL() { return GetToken(MySqlParser.BETWEEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL() { return GetToken(MySqlParser.AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		public PredicateExprBetweenContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprBetween(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprBetween(this);
		}
	}
	public partial class PredicateExprInContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public PredicateExprInContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprIn(this);
		}
	}
	public partial class PredicateExprLikeContext : PredicateOperationsContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySqlParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySqlParser.ESCAPE_SYMBOL, 0); }
		public PredicateExprLikeContext(PredicateOperationsContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPredicateExprLike(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPredicateExprLike(this);
		}
	}

	[RuleVersion(0)]
	public PredicateOperationsContext predicateOperations() {
		PredicateOperationsContext _localctx = new PredicateOperationsContext(Context, State);
		EnterRule(_localctx, 918, RULE_predicateOperations);
		try {
			State = 6365;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IN_SYMBOL:
				_localctx = new PredicateExprInContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 6343;
				Match(IN_SYMBOL);
				State = 6350;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,756,Context) ) {
				case 1:
					{
					State = 6344;
					subquery();
					}
					break;
				case 2:
					{
					State = 6345;
					userVariable();
					}
					break;
				case 3:
					{
					State = 6346;
					Match(OPEN_PAR_SYMBOL);
					State = 6347;
					exprList();
					State = 6348;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				}
				}
				break;
			case BETWEEN_SYMBOL:
				_localctx = new PredicateExprBetweenContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 6352;
				Match(BETWEEN_SYMBOL);
				State = 6353;
				bitExpr(0);
				State = 6354;
				Match(AND_SYMBOL);
				State = 6355;
				predicate();
				}
				break;
			case LIKE_SYMBOL:
				_localctx = new PredicateExprLikeContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 6357;
				Match(LIKE_SYMBOL);
				State = 6358;
				simpleExpr(0);
				State = 6361;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,757,Context) ) {
				case 1:
					{
					State = 6359;
					Match(ESCAPE_SYMBOL);
					State = 6360;
					simpleExpr(0);
					}
					break;
				}
				}
				break;
			case REGEXP_SYMBOL:
				_localctx = new PredicateExprRegexContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 6363;
				Match(REGEXP_SYMBOL);
				State = 6364;
				bitExpr(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BitExprContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext[] bitExpr() {
			return GetRuleContexts<BitExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr(int i) {
			return GetRuleContext<BitExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_XOR_OPERATOR() { return GetToken(MySqlParser.BITWISE_XOR_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_OPERATOR() { return GetToken(MySqlParser.DIV_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_OPERATOR() { return GetToken(MySqlParser.MOD_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIV_SYMBOL() { return GetToken(MySqlParser.DIV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_SYMBOL() { return GetToken(MySqlParser.MOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySqlParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_LEFT_OPERATOR() { return GetToken(MySqlParser.SHIFT_LEFT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHIFT_RIGHT_OPERATOR() { return GetToken(MySqlParser.SHIFT_RIGHT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_AND_OPERATOR() { return GetToken(MySqlParser.BITWISE_AND_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_OR_OPERATOR() { return GetToken(MySqlParser.BITWISE_OR_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		public BitExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBitExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBitExpr(this);
		}
	}

	[RuleVersion(0)]
	public BitExprContext bitExpr() {
		return bitExpr(0);
	}

	private BitExprContext bitExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		BitExprContext _localctx = new BitExprContext(Context, _parentState);
		BitExprContext _prevctx = _localctx;
		int _startState = 920;
		EnterRecursionRule(_localctx, 920, RULE_bitExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 6368;
			simpleExpr(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6396;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,760,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6394;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,759,Context) ) {
					case 1:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6370;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 6371;
						_localctx.op = Match(BITWISE_XOR_OPERATOR);
						State = 6372;
						bitExpr(8);
						}
						break;
					case 2:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6373;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 6374;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 458752L) != 0) || _la==DIV_SYMBOL || _la==MOD_SYMBOL) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6375;
						bitExpr(7);
						}
						break;
					case 3:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6376;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 6377;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6378;
						bitExpr(6);
						}
						break;
					case 4:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6379;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 6380;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==SHIFT_LEFT_OPERATOR || _la==SHIFT_RIGHT_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6381;
						bitExpr(4);
						}
						break;
					case 5:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6382;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 6383;
						_localctx.op = Match(BITWISE_AND_OPERATOR);
						State = 6384;
						bitExpr(3);
						}
						break;
					case 6:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6385;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 6386;
						_localctx.op = Match(BITWISE_OR_OPERATOR);
						State = 6387;
						bitExpr(2);
						}
						break;
					case 7:
						{
						_localctx = new BitExprContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_bitExpr);
						State = 6388;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 6389;
						_localctx.op = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==PLUS_OPERATOR || _la==MINUS_OPERATOR) ) {
							_localctx.op = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 6390;
						Match(INTERVAL_SYMBOL);
						State = 6391;
						expr(0);
						State = 6392;
						interval();
						}
						break;
					}
					}
				}
				State = 6398;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,760,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class SimpleExprContext : ParserRuleContext {
		public SimpleExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExpr; } }

		public SimpleExprContext() { }
		public virtual void CopyFrom(SimpleExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SimpleExprConvertContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySqlParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvert(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvert(this);
		}
	}
	public partial class SimpleExprCastContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_SYMBOL() { return GetToken(MySqlParser.CAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySqlParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArrayCastContext arrayCast() {
			return GetRuleContext<ArrayCastContext>(0);
		}
		public SimpleExprCastContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCast(this);
		}
	}
	public partial class SimpleExprUnaryContext : SimpleExprContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySqlParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BITWISE_NOT_OPERATOR() { return GetToken(MySqlParser.BITWISE_NOT_OPERATOR, 0); }
		public SimpleExprUnaryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprUnary(this);
		}
	}
	public partial class SimpleExpressionRValueContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() {
			return GetRuleContext<RvalueSystemOrUserVariableContext>(0);
		}
		public SimpleExpressionRValueContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExpressionRValue(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExpressionRValue(this);
		}
	}
	public partial class SimpleExprOdbcContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_CURLY_SYMBOL() { return GetToken(MySqlParser.OPEN_CURLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_CURLY_SYMBOL() { return GetToken(MySqlParser.CLOSE_CURLY_SYMBOL, 0); }
		public SimpleExprOdbcContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprOdbc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprOdbc(this);
		}
	}
	public partial class SimpleExprRuntimeFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public RuntimeFunctionCallContext runtimeFunctionCall() {
			return GetRuleContext<RuntimeFunctionCallContext>(0);
		}
		public SimpleExprRuntimeFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprRuntimeFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprRuntimeFunction(this);
		}
	}
	public partial class SimpleExprFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public SimpleExprFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprFunction(this);
		}
	}
	public partial class SimpleExprCollateContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySqlParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public SimpleExprCollateContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCollate(this);
		}
	}
	public partial class SimpleExprMatchContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_SYMBOL() { return GetToken(MySqlParser.MATCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentListArgContext identListArg() {
			return GetRuleContext<IdentListArgContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySqlParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FulltextOptionsContext fulltextOptions() {
			return GetRuleContext<FulltextOptionsContext>(0);
		}
		public SimpleExprMatchContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprMatch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprMatch(this);
		}
	}
	public partial class SimpleExprWindowingFunctionContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public WindowFunctionCallContext windowFunctionCall() {
			return GetRuleContext<WindowFunctionCallContext>(0);
		}
		public SimpleExprWindowingFunctionContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWindowingFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWindowingFunction(this);
		}
	}
	public partial class SimpleExprBinaryContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprBinaryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprBinary(this);
		}
	}
	public partial class SimpleExprColumnRefContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonOperatorContext jsonOperator() {
			return GetRuleContext<JsonOperatorContext>(0);
		}
		public SimpleExprColumnRefContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprColumnRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprColumnRef(this);
		}
	}
	public partial class SimpleExprParamMarkerContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		public SimpleExprParamMarkerContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprParamMarker(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprParamMarker(this);
		}
	}
	public partial class SimpleExprSumContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SumExprContext sumExpr() {
			return GetRuleContext<SumExprContext>(0);
		}
		public SimpleExprSumContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSum(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSum(this);
		}
	}
	public partial class SimpleExprCastTimeContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAST_SYMBOL() { return GetToken(MySqlParser.CAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySqlParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE_SYMBOL() { return GetToken(MySqlParser.ZONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		public SimpleExprCastTimeContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCastTime(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCastTime(this);
		}
	}
	public partial class SimpleExprConvertUsingContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONVERT_SYMBOL() { return GetToken(MySqlParser.CONVERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprConvertUsingContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConvertUsing(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConvertUsing(this);
		}
	}
	public partial class SimpleExprSubQueryContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SubqueryContext subquery() {
			return GetRuleContext<SubqueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySqlParser.EXISTS_SYMBOL, 0); }
		public SimpleExprSubQueryContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprSubQuery(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprSubQuery(this);
		}
	}
	public partial class SimpleExprGroupingOperationContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingOperationContext groupingOperation() {
			return GetRuleContext<GroupingOperationContext>(0);
		}
		public SimpleExprGroupingOperationContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprGroupingOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprGroupingOperation(this);
		}
	}
	public partial class SimpleExprNotContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Not2RuleContext not2Rule() {
			return GetRuleContext<Not2RuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		public SimpleExprNotContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprNot(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprNot(this);
		}
	}
	public partial class SimpleExprValuesContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprValuesContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprValues(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprValues(this);
		}
	}
	public partial class SimpleExprUserVariableAssignmentContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public InExpressionUserVariableAssignmentContext inExpressionUserVariableAssignment() {
			return GetRuleContext<InExpressionUserVariableAssignmentContext>(0);
		}
		public SimpleExprUserVariableAssignmentContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprUserVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprUserVariableAssignment(this);
		}
	}
	public partial class SimpleExprDefaultContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier() {
			return GetRuleContext<SimpleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprDefaultContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprDefault(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprDefault(this);
		}
	}
	public partial class SimpleExprListContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_SYMBOL() { return GetToken(MySqlParser.ROW_SYMBOL, 0); }
		public SimpleExprListContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprList(this);
		}
	}
	public partial class SimpleExprIntervalContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySqlParser.PLUS_OPERATOR, 0); }
		public SimpleExprIntervalContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprInterval(this);
		}
	}
	public partial class SimpleExprCaseContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_SYMBOL() { return GetToken(MySqlParser.CASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenExpressionContext[] thenExpression() {
			return GetRuleContexts<ThenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenExpressionContext thenExpression(int i) {
			return GetRuleContext<ThenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseExpressionContext elseExpression() {
			return GetRuleContext<ElseExpressionContext>(0);
		}
		public SimpleExprCaseContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprCase(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprCase(this);
		}
	}
	public partial class SimpleExprConcatContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext[] simpleExpr() {
			return GetRuleContexts<SimpleExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr(int i) {
			return GetRuleContext<SimpleExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCAT_PIPES_SYMBOL() { return GetToken(MySqlParser.CONCAT_PIPES_SYMBOL, 0); }
		public SimpleExprConcatContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprConcat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprConcat(this);
		}
	}
	public partial class SimpleExprLiteralContext : SimpleExprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralOrNullContext literalOrNull() {
			return GetRuleContext<LiteralOrNullContext>(0);
		}
		public SimpleExprLiteralContext(SimpleExprContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprLiteral(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprContext simpleExpr() {
		return simpleExpr(0);
	}

	private SimpleExprContext simpleExpr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		SimpleExprContext _localctx = new SimpleExprContext(Context, _parentState);
		SimpleExprContext _prevctx = _localctx;
		int _startState = 922;
		EnterRecursionRule(_localctx, 922, RULE_simpleExpr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 6521;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,771,Context) ) {
			case 1:
				{
				_localctx = new SimpleExprColumnRefContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 6400;
				columnRef();
				State = 6402;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,761,Context) ) {
				case 1:
					{
					State = 6401;
					jsonOperator();
					}
					break;
				}
				}
				break;
			case 2:
				{
				_localctx = new SimpleExprRuntimeFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6404;
				runtimeFunctionCall();
				}
				break;
			case 3:
				{
				_localctx = new SimpleExprFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6405;
				functionCall();
				}
				break;
			case 4:
				{
				_localctx = new SimpleExprLiteralContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6406;
				literalOrNull();
				}
				break;
			case 5:
				{
				_localctx = new SimpleExprParamMarkerContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6407;
				Match(PARAM_MARKER);
				}
				break;
			case 6:
				{
				_localctx = new SimpleExpressionRValueContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6408;
				rvalueSystemOrUserVariable();
				}
				break;
			case 7:
				{
				_localctx = new SimpleExprUserVariableAssignmentContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6409;
				inExpressionUserVariableAssignment();
				}
				break;
			case 8:
				{
				_localctx = new SimpleExprSumContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6410;
				sumExpr();
				}
				break;
			case 9:
				{
				_localctx = new SimpleExprGroupingOperationContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6411;
				groupingOperation();
				}
				break;
			case 10:
				{
				_localctx = new SimpleExprWindowingFunctionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6412;
				windowFunctionCall();
				}
				break;
			case 11:
				{
				_localctx = new SimpleExprUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6413;
				((SimpleExprUnaryContext)_localctx).op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1097728L) != 0)) ) {
					((SimpleExprUnaryContext)_localctx).op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6414;
				simpleExpr(15);
				}
				break;
			case 12:
				{
				_localctx = new SimpleExprNotContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6415;
				not2Rule();
				State = 6416;
				simpleExpr(14);
				}
				break;
			case 13:
				{
				_localctx = new SimpleExprListContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6419;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ROW_SYMBOL) {
					{
					State = 6418;
					Match(ROW_SYMBOL);
					}
				}

				State = 6421;
				Match(OPEN_PAR_SYMBOL);
				State = 6422;
				exprList();
				State = 6423;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 14:
				{
				_localctx = new SimpleExprSubQueryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6426;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXISTS_SYMBOL) {
					{
					State = 6425;
					Match(EXISTS_SYMBOL);
					}
				}

				State = 6428;
				subquery();
				}
				break;
			case 15:
				{
				_localctx = new SimpleExprOdbcContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6429;
				Match(OPEN_CURLY_SYMBOL);
				State = 6430;
				identifier();
				State = 6431;
				expr(0);
				State = 6432;
				Match(CLOSE_CURLY_SYMBOL);
				}
				break;
			case 16:
				{
				_localctx = new SimpleExprMatchContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6434;
				Match(MATCH_SYMBOL);
				State = 6435;
				identListArg();
				State = 6436;
				Match(AGAINST_SYMBOL);
				State = 6437;
				Match(OPEN_PAR_SYMBOL);
				State = 6438;
				bitExpr(0);
				State = 6440;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IN_SYMBOL || _la==WITH_SYMBOL) {
					{
					State = 6439;
					fulltextOptions();
					}
				}

				State = 6442;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				{
				_localctx = new SimpleExprBinaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6444;
				Match(BINARY_SYMBOL);
				State = 6445;
				simpleExpr(9);
				}
				break;
			case 18:
				{
				_localctx = new SimpleExprCastContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6446;
				Match(CAST_SYMBOL);
				State = 6447;
				Match(OPEN_PAR_SYMBOL);
				State = 6448;
				expr(0);
				State = 6451;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==AT_SYMBOL) {
					{
					State = 6449;
					Match(AT_SYMBOL);
					State = 6450;
					Match(LOCAL_SYMBOL);
					}
				}

				State = 6453;
				Match(AS_SYMBOL);
				State = 6454;
				castType();
				State = 6456;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,766,Context) ) {
				case 1:
					{
					State = 6455;
					arrayCast();
					}
					break;
				}
				State = 6458;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 19:
				{
				_localctx = new SimpleExprCastTimeContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6460;
				Match(CAST_SYMBOL);
				State = 6461;
				Match(OPEN_PAR_SYMBOL);
				State = 6462;
				expr(0);
				State = 6463;
				Match(AT_SYMBOL);
				State = 6464;
				Match(TIME_SYMBOL);
				State = 6465;
				Match(ZONE_SYMBOL);
				State = 6467;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,767,Context) ) {
				case 1:
					{
					State = 6466;
					Match(INTERVAL_SYMBOL);
					}
					break;
				}
				State = 6469;
				textStringLiteral();
				State = 6470;
				Match(AS_SYMBOL);
				State = 6471;
				Match(DATETIME_SYMBOL);
				State = 6472;
				typeDatetimePrecision();
				State = 6473;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 20:
				{
				_localctx = new SimpleExprCaseContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6475;
				Match(CASE_SYMBOL);
				State = 6477;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,768,Context) ) {
				case 1:
					{
					State = 6476;
					expr(0);
					}
					break;
				}
				State = 6482;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6479;
					whenExpression();
					State = 6480;
					thenExpression();
					}
					}
					State = 6484;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WHEN_SYMBOL );
				State = 6487;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ELSE_SYMBOL) {
					{
					State = 6486;
					elseExpression();
					}
				}

				State = 6489;
				Match(END_SYMBOL);
				}
				break;
			case 21:
				{
				_localctx = new SimpleExprConvertContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6491;
				Match(CONVERT_SYMBOL);
				State = 6492;
				Match(OPEN_PAR_SYMBOL);
				State = 6493;
				expr(0);
				State = 6494;
				Match(COMMA_SYMBOL);
				State = 6495;
				castType();
				State = 6496;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 22:
				{
				_localctx = new SimpleExprConvertUsingContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6498;
				Match(CONVERT_SYMBOL);
				State = 6499;
				Match(OPEN_PAR_SYMBOL);
				State = 6500;
				expr(0);
				State = 6501;
				Match(USING_SYMBOL);
				State = 6502;
				charsetName();
				State = 6503;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 23:
				{
				_localctx = new SimpleExprDefaultContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6505;
				Match(DEFAULT_SYMBOL);
				State = 6506;
				Match(OPEN_PAR_SYMBOL);
				State = 6507;
				simpleIdentifier();
				State = 6508;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				{
				_localctx = new SimpleExprValuesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6510;
				Match(VALUES_SYMBOL);
				State = 6511;
				Match(OPEN_PAR_SYMBOL);
				State = 6512;
				simpleIdentifier();
				State = 6513;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				{
				_localctx = new SimpleExprIntervalContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 6515;
				Match(INTERVAL_SYMBOL);
				State = 6516;
				expr(0);
				State = 6517;
				interval();
				State = 6518;
				Match(PLUS_OPERATOR);
				State = 6519;
				expr(0);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 6531;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,773,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 6529;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,772,Context) ) {
					case 1:
						{
						_localctx = new SimpleExprConcatContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 6523;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 6524;
						Match(CONCAT_PIPES_SYMBOL);
						State = 6525;
						simpleExpr(17);
						}
						break;
					case 2:
						{
						_localctx = new SimpleExprCollateContext(new SimpleExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_simpleExpr);
						State = 6526;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 6527;
						Match(COLLATE_SYMBOL);
						State = 6528;
						textOrIdentifier();
						}
						break;
					}
					}
				}
				State = 6533;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,773,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class ArrayCastContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySqlParser.ARRAY_SYMBOL, 0); }
		public ArrayCastContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCast; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterArrayCast(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitArrayCast(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCastContext arrayCast() {
		ArrayCastContext _localctx = new ArrayCastContext(Context, State);
		EnterRule(_localctx, 924, RULE_arrayCast);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6534;
			if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
			State = 6535;
			Match(ARRAY_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonOperatorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SEPARATOR_SYMBOL() { return GetToken(MySqlParser.JSON_SEPARATOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_UNQUOTED_SEPARATOR_SYMBOL() { return GetToken(MySqlParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0); }
		public JsonOperatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonOperator; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonOperator(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonOperator(this);
		}
	}

	[RuleVersion(0)]
	public JsonOperatorContext jsonOperator() {
		JsonOperatorContext _localctx = new JsonOperatorContext(Context, State);
		EnterRule(_localctx, 926, RULE_jsonOperator);
		try {
			State = 6541;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_SEPARATOR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6537;
				Match(JSON_SEPARATOR_SYMBOL);
				State = 6538;
				textStringLiteral();
				}
				break;
			case JSON_UNQUOTED_SEPARATOR_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6539;
				Match(JSON_UNQUOTED_SEPARATOR_SYMBOL);
				State = 6540;
				textStringLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SumExprContext : ParserRuleContext {
		public IToken name;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext inSumExpr() {
			return GetRuleContext<InSumExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySqlParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISTINCT_SYMBOL() { return GetToken(MySqlParser.DISTINCT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_AND_SYMBOL() { return GetToken(MySqlParser.BIT_AND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_OR_SYMBOL() { return GetToken(MySqlParser.BIT_OR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_XOR_SYMBOL() { return GetToken(MySqlParser.BIT_XOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonFunctionContext jsonFunction() {
			return GetRuleContext<JsonFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_COLLECT_SYMBOL() { return GetToken(MySqlParser.ST_COLLECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COUNT_SYMBOL() { return GetToken(MySqlParser.COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_SYMBOL() { return GetToken(MySqlParser.MIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SYMBOL() { return GetToken(MySqlParser.MAX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STD_SYMBOL() { return GetToken(MySqlParser.STD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIANCE_SYMBOL() { return GetToken(MySqlParser.VARIANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STDDEV_SAMP_SYMBOL() { return GetToken(MySqlParser.STDDEV_SAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VAR_SAMP_SYMBOL() { return GetToken(MySqlParser.VAR_SAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUM_SYMBOL() { return GetToken(MySqlParser.SUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_CONCAT_SYMBOL() { return GetToken(MySqlParser.GROUP_CONCAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public OrderClauseContext orderClause() {
			return GetRuleContext<OrderClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEPARATOR_SYMBOL() { return GetToken(MySqlParser.SEPARATOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public SumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sumExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSumExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSumExpr(this);
		}
	}

	[RuleVersion(0)]
	public SumExprContext sumExpr() {
		SumExprContext _localctx = new SumExprContext(Context, State);
		EnterRule(_localctx, 928, RULE_sumExpr);
		int _la;
		try {
			State = 6628;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,791,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6543;
				_localctx.name = Match(AVG_SYMBOL);
				State = 6544;
				Match(OPEN_PAR_SYMBOL);
				State = 6546;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,775,Context) ) {
				case 1:
					{
					State = 6545;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 6548;
				inSumExpr();
				State = 6549;
				Match(CLOSE_PAR_SYMBOL);
				State = 6551;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,776,Context) ) {
				case 1:
					{
					State = 6550;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6553;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 80)) & ~0x3f) == 0 && ((1L << (_la - 80)) & 11L) != 0)) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6554;
				Match(OPEN_PAR_SYMBOL);
				State = 6555;
				inSumExpr();
				State = 6556;
				Match(CLOSE_PAR_SYMBOL);
				State = 6558;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,777,Context) ) {
				case 1:
					{
					State = 6557;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6560;
				jsonFunction();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6561;
				_localctx.name = Match(ST_COLLECT_SYMBOL);
				State = 6562;
				Match(OPEN_PAR_SYMBOL);
				State = 6564;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,778,Context) ) {
				case 1:
					{
					State = 6563;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 6566;
				inSumExpr();
				State = 6567;
				Match(CLOSE_PAR_SYMBOL);
				State = 6569;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,779,Context) ) {
				case 1:
					{
					State = 6568;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6571;
				_localctx.name = Match(COUNT_SYMBOL);
				State = 6572;
				Match(OPEN_PAR_SYMBOL);
				State = 6580;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,781,Context) ) {
				case 1:
					{
					State = 6574;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==ALL_SYMBOL) {
						{
						State = 6573;
						Match(ALL_SYMBOL);
						}
					}

					State = 6576;
					Match(MULT_OPERATOR);
					}
					break;
				case 2:
					{
					State = 6577;
					inSumExpr();
					}
					break;
				case 3:
					{
					State = 6578;
					Match(DISTINCT_SYMBOL);
					State = 6579;
					exprList();
					}
					break;
				}
				State = 6582;
				Match(CLOSE_PAR_SYMBOL);
				State = 6584;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,782,Context) ) {
				case 1:
					{
					State = 6583;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6586;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MAX_SYMBOL || _la==MIN_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6587;
				Match(OPEN_PAR_SYMBOL);
				State = 6589;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,783,Context) ) {
				case 1:
					{
					State = 6588;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 6591;
				inSumExpr();
				State = 6592;
				Match(CLOSE_PAR_SYMBOL);
				State = 6594;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,784,Context) ) {
				case 1:
					{
					State = 6593;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6596;
				_localctx.name = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 559)) & ~0x3f) == 0 && ((1L << (_la - 559)) & 65545L) != 0) || _la==VARIANCE_SYMBOL || _la==VAR_SAMP_SYMBOL) ) {
					_localctx.name = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6597;
				Match(OPEN_PAR_SYMBOL);
				State = 6598;
				inSumExpr();
				State = 6599;
				Match(CLOSE_PAR_SYMBOL);
				State = 6601;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,785,Context) ) {
				case 1:
					{
					State = 6600;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6603;
				_localctx.name = Match(SUM_SYMBOL);
				State = 6604;
				Match(OPEN_PAR_SYMBOL);
				State = 6605;
				Match(DISTINCT_SYMBOL);
				State = 6606;
				inSumExpr();
				State = 6607;
				Match(CLOSE_PAR_SYMBOL);
				State = 6609;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,786,Context) ) {
				case 1:
					{
					State = 6608;
					windowingClause();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6611;
				_localctx.name = Match(GROUP_CONCAT_SYMBOL);
				State = 6612;
				Match(OPEN_PAR_SYMBOL);
				State = 6614;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,787,Context) ) {
				case 1:
					{
					State = 6613;
					Match(DISTINCT_SYMBOL);
					}
					break;
				}
				State = 6616;
				exprList();
				State = 6618;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ORDER_SYMBOL) {
					{
					State = 6617;
					orderClause();
					}
				}

				State = 6622;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==SEPARATOR_SYMBOL) {
					{
					State = 6620;
					Match(SEPARATOR_SYMBOL);
					State = 6621;
					textString();
					}
				}

				State = 6624;
				Match(CLOSE_PAR_SYMBOL);
				State = 6626;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,790,Context) ) {
				case 1:
					{
					State = 6625;
					windowingClause();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingOperationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUPING_SYMBOL() { return GetToken(MySqlParser.GROUPING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public GroupingOperationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingOperation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupingOperation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupingOperation(this);
		}
	}

	[RuleVersion(0)]
	public GroupingOperationContext groupingOperation() {
		GroupingOperationContext _localctx = new GroupingOperationContext(Context, State);
		EnterRule(_localctx, 930, RULE_groupingOperation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6630;
			Match(GROUPING_SYMBOL);
			State = 6631;
			Match(OPEN_PAR_SYMBOL);
			State = 6632;
			exprList();
			State = 6633;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_NUMBER_SYMBOL() { return GetToken(MySqlParser.ROW_NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANK_SYMBOL() { return GetToken(MySqlParser.RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DENSE_RANK_SYMBOL() { return GetToken(MySqlParser.DENSE_RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CUME_DIST_SYMBOL() { return GetToken(MySqlParser.CUME_DIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERCENT_RANK_SYMBOL() { return GetToken(MySqlParser.PERCENT_RANK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTILE_SYMBOL() { return GetToken(MySqlParser.NTILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StableIntegerContext stableInteger() {
			return GetRuleContext<StableIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
			return GetRuleContext<SimpleExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAD_SYMBOL() { return GetToken(MySqlParser.LEAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAG_SYMBOL() { return GetToken(MySqlParser.LAG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LeadLagInfoContext leadLagInfo() {
			return GetRuleContext<LeadLagInfoContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullTreatmentContext nullTreatment() {
			return GetRuleContext<NullTreatmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_VALUE_SYMBOL() { return GetToken(MySqlParser.FIRST_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_VALUE_SYMBOL() { return GetToken(MySqlParser.LAST_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NTH_VALUE_SYMBOL() { return GetToken(MySqlParser.NTH_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		public WindowFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public WindowFunctionCallContext windowFunctionCall() {
		WindowFunctionCallContext _localctx = new WindowFunctionCallContext(Context, State);
		EnterRule(_localctx, 932, RULE_windowFunctionCall);
		int _la;
		try {
			State = 6684;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CUME_DIST_SYMBOL:
			case DENSE_RANK_SYMBOL:
			case PERCENT_RANK_SYMBOL:
			case RANK_SYMBOL:
			case ROW_NUMBER_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6635;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 687)) & ~0x3f) == 0 && ((1L << (_la - 687)) & 344067L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6636;
				parentheses();
				State = 6637;
				windowingClause();
				}
				break;
			case NTILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6639;
				Match(NTILE_SYMBOL);
				State = 6646;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,792,Context) ) {
				case 1:
					{
					State = 6640;
					Match(OPEN_PAR_SYMBOL);
					State = 6641;
					stableInteger();
					State = 6642;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case 2:
					{
					State = 6644;
					if (!(this.ServerVersion < 80024)) throw new FailedPredicateException(this, "this.ServerVersion < 80024");
					State = 6645;
					simpleExprWithParentheses();
					}
					break;
				}
				State = 6648;
				windowingClause();
				}
				break;
			case LAG_SYMBOL:
			case LEAD_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6650;
				_la = TokenStream.LA(1);
				if ( !(_la==LAG_SYMBOL || _la==LEAD_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6651;
				Match(OPEN_PAR_SYMBOL);
				State = 6652;
				expr(0);
				State = 6654;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6653;
					leadLagInfo();
					}
				}

				State = 6656;
				Match(CLOSE_PAR_SYMBOL);
				State = 6658;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 6657;
					nullTreatment();
					}
				}

				State = 6660;
				windowingClause();
				}
				break;
			case FIRST_VALUE_SYMBOL:
			case LAST_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6662;
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_VALUE_SYMBOL || _la==LAST_VALUE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6663;
				exprWithParentheses();
				State = 6665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 6664;
					nullTreatment();
					}
				}

				State = 6667;
				windowingClause();
				}
				break;
			case NTH_VALUE_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6669;
				Match(NTH_VALUE_SYMBOL);
				State = 6670;
				Match(OPEN_PAR_SYMBOL);
				State = 6671;
				expr(0);
				State = 6672;
				Match(COMMA_SYMBOL);
				State = 6673;
				simpleExpr(0);
				State = 6674;
				Match(CLOSE_PAR_SYMBOL);
				State = 6677;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 6675;
					Match(FROM_SYMBOL);
					State = 6676;
					_la = TokenStream.LA(1);
					if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
				}

				State = 6680;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) {
					{
					State = 6679;
					nullTreatment();
					}
				}

				State = 6682;
				windowingClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplingMethodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSTEM_SYMBOL() { return GetToken(MySqlParser.SYSTEM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI_SYMBOL() { return GetToken(MySqlParser.BERNOULLI_SYMBOL, 0); }
		public SamplingMethodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplingMethod; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSamplingMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSamplingMethod(this);
		}
	}

	[RuleVersion(0)]
	public SamplingMethodContext samplingMethod() {
		SamplingMethodContext _localctx = new SamplingMethodContext(Context, State);
		EnterRule(_localctx, 934, RULE_samplingMethod);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6686;
			_la = TokenStream.LA(1);
			if ( !(_la==SYSTEM_SYMBOL || _la==BERNOULLI_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SamplingPercentageContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN_SYMBOL() { return GetToken(MySqlParser.NUMBER_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		public SamplingPercentageContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_samplingPercentage; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSamplingPercentage(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSamplingPercentage(this);
		}
	}

	[RuleVersion(0)]
	public SamplingPercentageContext samplingPercentage() {
		SamplingPercentageContext _localctx = new SamplingPercentageContext(Context, State);
		EnterRule(_localctx, 936, RULE_samplingPercentage);
		try {
			State = 6694;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6688;
				ulonglongNumber();
				}
				break;
			case AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6689;
				Match(AT_SIGN_SYMBOL);
				State = 6690;
				textOrIdentifier();
				}
				break;
			case NUMBER_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6691;
				Match(NUMBER_SIGN_SYMBOL);
				State = 6692;
				textOrIdentifier();
				}
				break;
			case PARAM_MARKER:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6693;
				Match(PARAM_MARKER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablesampleClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESAMPLE_SYMBOL() { return GetToken(MySqlParser.TABLESAMPLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SamplingMethodContext samplingMethod() {
			return GetRuleContext<SamplingMethodContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SamplingPercentageContext samplingPercentage() {
			return GetRuleContext<SamplingPercentageContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public TablesampleClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablesampleClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablesampleClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablesampleClause(this);
		}
	}

	[RuleVersion(0)]
	public TablesampleClauseContext tablesampleClause() {
		TablesampleClauseContext _localctx = new TablesampleClauseContext(Context, State);
		EnterRule(_localctx, 938, RULE_tablesampleClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6696;
			if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
			State = 6697;
			Match(TABLESAMPLE_SYMBOL);
			State = 6698;
			samplingMethod();
			State = 6699;
			Match(OPEN_PAR_SYMBOL);
			State = 6700;
			samplingPercentage();
			State = 6701;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowingClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OVER_SYMBOL() { return GetToken(MySqlParser.OVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowNameContext windowName() {
			return GetRuleContext<WindowNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WindowSpecContext windowSpec() {
			return GetRuleContext<WindowSpecContext>(0);
		}
		public WindowingClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowingClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowingClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowingClause(this);
		}
	}

	[RuleVersion(0)]
	public WindowingClauseContext windowingClause() {
		WindowingClauseContext _localctx = new WindowingClauseContext(Context, State);
		EnterRule(_localctx, 940, RULE_windowingClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6703;
			Match(OVER_SYMBOL);
			State = 6706;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,800,Context) ) {
			case 1:
				{
				State = 6704;
				windowName();
				}
				break;
			case 2:
				{
				State = 6705;
				windowSpec();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeadLagInfoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StableIntegerContext stableInteger() {
			return GetRuleContext<StableIntegerContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public LeadLagInfoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leadLagInfo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLeadLagInfo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLeadLagInfo(this);
		}
	}

	[RuleVersion(0)]
	public LeadLagInfoContext leadLagInfo() {
		LeadLagInfoContext _localctx = new LeadLagInfoContext(Context, State);
		EnterRule(_localctx, 942, RULE_leadLagInfo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6708;
			Match(COMMA_SYMBOL);
			State = 6713;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,801,Context) ) {
			case 1:
				{
				State = 6709;
				ulonglongNumber();
				}
				break;
			case 2:
				{
				State = 6710;
				Match(PARAM_MARKER);
				}
				break;
			case 3:
				{
				State = 6711;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 6712;
				stableInteger();
				}
				break;
			}
			State = 6717;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA_SYMBOL) {
				{
				State = 6715;
				Match(COMMA_SYMBOL);
				State = 6716;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StableIntegerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int64LiteralContext int64Literal() {
			return GetRuleContext<Int64LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamOrVarContext paramOrVar() {
			return GetRuleContext<ParamOrVarContext>(0);
		}
		public StableIntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stableInteger; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStableInteger(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStableInteger(this);
		}
	}

	[RuleVersion(0)]
	public StableIntegerContext stableInteger() {
		StableIntegerContext _localctx = new StableIntegerContext(Context, State);
		EnterRule(_localctx, 944, RULE_stableInteger);
		try {
			State = 6721;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,803,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6719;
				int64Literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6720;
				paramOrVar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamOrVarContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARAM_MARKER() { return GetToken(MySqlParser.PARAM_MARKER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN_SYMBOL() { return GetToken(MySqlParser.NUMBER_SIGN_SYMBOL, 0); }
		public ParamOrVarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paramOrVar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterParamOrVar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitParamOrVar(this);
		}
	}

	[RuleVersion(0)]
	public ParamOrVarContext paramOrVar() {
		ParamOrVarContext _localctx = new ParamOrVarContext(Context, State);
		EnterRule(_localctx, 946, RULE_paramOrVar);
		try {
			State = 6729;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,804,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6723;
				Match(PARAM_MARKER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6724;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6725;
				Match(AT_SIGN_SYMBOL);
				State = 6726;
				textOrIdentifier();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6727;
				Match(NUMBER_SIGN_SYMBOL);
				State = 6728;
				textOrIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullTreatmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySqlParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySqlParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		public NullTreatmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullTreatment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullTreatment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullTreatment(this);
		}
	}

	[RuleVersion(0)]
	public NullTreatmentContext nullTreatment() {
		NullTreatmentContext _localctx = new NullTreatmentContext(Context, State);
		EnterRule(_localctx, 948, RULE_nullTreatment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6731;
			_la = TokenStream.LA(1);
			if ( !(_la==IGNORE_SYMBOL || _la==RESPECT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 6732;
			Match(NULLS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_ARRAYAGG_SYMBOL() { return GetToken(MySqlParser.JSON_ARRAYAGG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext[] inSumExpr() {
			return GetRuleContexts<InSumExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public InSumExprContext inSumExpr(int i) {
			return GetRuleContext<InSumExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WindowingClauseContext windowingClause() {
			return GetRuleContext<WindowingClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_OBJECTAGG_SYMBOL() { return GetToken(MySqlParser.JSON_OBJECTAGG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		public JsonFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonFunction(this);
		}
	}

	[RuleVersion(0)]
	public JsonFunctionContext jsonFunction() {
		JsonFunctionContext _localctx = new JsonFunctionContext(Context, State);
		EnterRule(_localctx, 950, RULE_jsonFunction);
		try {
			State = 6750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case JSON_ARRAYAGG_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6734;
				Match(JSON_ARRAYAGG_SYMBOL);
				State = 6735;
				Match(OPEN_PAR_SYMBOL);
				State = 6736;
				inSumExpr();
				State = 6737;
				Match(CLOSE_PAR_SYMBOL);
				State = 6739;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,805,Context) ) {
				case 1:
					{
					State = 6738;
					windowingClause();
					}
					break;
				}
				}
				break;
			case JSON_OBJECTAGG_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6741;
				Match(JSON_OBJECTAGG_SYMBOL);
				State = 6742;
				Match(OPEN_PAR_SYMBOL);
				State = 6743;
				inSumExpr();
				State = 6744;
				Match(COMMA_SYMBOL);
				State = 6745;
				inSumExpr();
				State = 6746;
				Match(CLOSE_PAR_SYMBOL);
				State = 6748;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,806,Context) ) {
				case 1:
					{
					State = 6747;
					windowingClause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InSumExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALL_SYMBOL() { return GetToken(MySqlParser.ALL_SYMBOL, 0); }
		public InSumExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inSumExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInSumExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInSumExpr(this);
		}
	}

	[RuleVersion(0)]
	public InSumExprContext inSumExpr() {
		InSumExprContext _localctx = new InSumExprContext(Context, State);
		EnterRule(_localctx, 952, RULE_inSumExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6753;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,808,Context) ) {
			case 1:
				{
				State = 6752;
				Match(ALL_SYMBOL);
				}
				break;
			}
			State = 6755;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListArgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentListContext identList() {
			return GetRuleContext<IdentListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentListArgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identListArg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentListArg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentListArg(this);
		}
	}

	[RuleVersion(0)]
	public IdentListArgContext identListArg() {
		IdentListArgContext _localctx = new IdentListArgContext(Context, State);
		EnterRule(_localctx, 954, RULE_identListArg);
		try {
			State = 6762;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,809,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6757;
				identList();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6758;
				Match(OPEN_PAR_SYMBOL);
				State = 6759;
				identList();
				State = 6760;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext[] simpleIdentifier() {
			return GetRuleContexts<SimpleIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SimpleIdentifierContext simpleIdentifier(int i) {
			return GetRuleContext<SimpleIdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IdentListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentList(this);
		}
	}

	[RuleVersion(0)]
	public IdentListContext identList() {
		IdentListContext _localctx = new IdentListContext(Context, State);
		EnterRule(_localctx, 956, RULE_identList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 6764;
			simpleIdentifier();
			State = 6769;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 6765;
				Match(COMMA_SYMBOL);
				State = 6766;
				simpleIdentifier();
				}
				}
				State = 6771;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySqlParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySqlParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATURAL_SYMBOL() { return GetToken(MySqlParser.NATURAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySqlParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySqlParser.EXPANSION_SYMBOL, 0); }
		public FulltextOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFulltextOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFulltextOptions(this);
		}
	}

	[RuleVersion(0)]
	public FulltextOptionsContext fulltextOptions() {
		FulltextOptionsContext _localctx = new FulltextOptionsContext(Context, State);
		EnterRule(_localctx, 958, RULE_fulltextOptions);
		int _la;
		try {
			State = 6787;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,812,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6772;
				Match(IN_SYMBOL);
				State = 6773;
				Match(BOOLEAN_SYMBOL);
				State = 6774;
				Match(MODE_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6775;
				Match(IN_SYMBOL);
				State = 6776;
				Match(NATURAL_SYMBOL);
				State = 6777;
				Match(LANGUAGE_SYMBOL);
				State = 6778;
				Match(MODE_SYMBOL);
				State = 6782;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==WITH_SYMBOL) {
					{
					State = 6779;
					Match(WITH_SYMBOL);
					State = 6780;
					Match(QUERY_SYMBOL);
					State = 6781;
					Match(EXPANSION_SYMBOL);
					}
				}

				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6784;
				Match(WITH_SYMBOL);
				State = 6785;
				Match(QUERY_SYMBOL);
				State = 6786;
				Match(EXPANSION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuntimeFunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySqlParser.CURRENT_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySqlParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_SYMBOL() { return GetToken(MySqlParser.INSERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTERVAL_SYMBOL() { return GetToken(MySqlParser.INTERVAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE_SYMBOL() { return GetToken(MySqlParser.JSON_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public OnEmptyOrErrorContext onEmptyOrError() {
			return GetRuleContext<OnEmptyOrErrorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturningTypeContext returningType() {
			return GetRuleContext<ReturningTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEFT_SYMBOL() { return GetToken(MySqlParser.LEFT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySqlParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySqlParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RIGHT_SYMBOL() { return GetToken(MySqlParser.RIGHT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TrimFunctionContext trimFunction() {
			return GetRuleContext<TrimFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserFunctionContext userFunction() {
			return GetRuleContext<UserFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySqlParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySqlParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURDATE_SYMBOL() { return GetToken(MySqlParser.CURDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURTIME_SYMBOL() { return GetToken(MySqlParser.CURTIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_ADD_SYMBOL() { return GetToken(MySqlParser.DATE_ADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SUB_SYMBOL() { return GetToken(MySqlParser.DATE_SUB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTRACT_SYMBOL() { return GetToken(MySqlParser.EXTRACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySqlParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DateTimeTtypeContext dateTimeTtype() {
			return GetRuleContext<DateTimeTtypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG_SYMBOL() { return GetToken(MySqlParser.LOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW_SYMBOL() { return GetToken(MySqlParser.NOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POSITION_SYMBOL() { return GetToken(MySqlParser.POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubstringFunctionContext substringFunction() {
			return GetRuleContext<SubstringFunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SYSDATE_SYMBOL() { return GetToken(MySqlParser.SYSDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD_SYMBOL() { return GetToken(MySqlParser.TIMESTAMPADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF_SYMBOL() { return GetToken(MySqlParser.TIMESTAMPDIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_DATE_SYMBOL() { return GetToken(MySqlParser.UTC_DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIME_SYMBOL() { return GetToken(MySqlParser.UTC_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UTC_TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.UTC_TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySqlParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySqlParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySqlParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySqlParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATABASE_SYMBOL() { return GetToken(MySqlParser.DATABASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySqlParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySqlParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MOD_SYMBOL() { return GetToken(MySqlParser.MOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySqlParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_SYMBOL() { return GetToken(MySqlParser.REPEAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySqlParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySqlParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySqlParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySqlParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WsNumCodepointsContext wsNumCodepoints() {
			return GetRuleContext<WsNumCodepointsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext[] ulong_number() {
			return GetRuleContexts<Ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number(int i) {
			return GetRuleContext<Ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public GeometryFunctionContext geometryFunction() {
			return GetRuleContext<GeometryFunctionContext>(0);
		}
		public RuntimeFunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_runtimeFunctionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRuntimeFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRuntimeFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public RuntimeFunctionCallContext runtimeFunctionCall() {
		RuntimeFunctionCallContext _localctx = new RuntimeFunctionCallContext(Context, State);
		EnterRule(_localctx, 960, RULE_runtimeFunctionCall);
		int _la;
		try {
			State = 7072;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,831,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 6789;
				Match(CHAR_SYMBOL);
				State = 6790;
				Match(OPEN_PAR_SYMBOL);
				State = 6791;
				exprList();
				State = 6794;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==USING_SYMBOL) {
					{
					State = 6792;
					Match(USING_SYMBOL);
					State = 6793;
					charsetName();
					}
				}

				State = 6796;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 6798;
				Match(CURRENT_USER_SYMBOL);
				State = 6800;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,814,Context) ) {
				case 1:
					{
					State = 6799;
					parentheses();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 6802;
				Match(DATE_SYMBOL);
				State = 6803;
				exprWithParentheses();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 6804;
				Match(DAY_SYMBOL);
				State = 6805;
				exprWithParentheses();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 6806;
				Match(HOUR_SYMBOL);
				State = 6807;
				exprWithParentheses();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 6808;
				Match(INSERT_SYMBOL);
				State = 6809;
				Match(OPEN_PAR_SYMBOL);
				State = 6810;
				expr(0);
				State = 6811;
				Match(COMMA_SYMBOL);
				State = 6812;
				expr(0);
				State = 6813;
				Match(COMMA_SYMBOL);
				State = 6814;
				expr(0);
				State = 6815;
				Match(COMMA_SYMBOL);
				State = 6816;
				expr(0);
				State = 6817;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 6819;
				Match(INTERVAL_SYMBOL);
				State = 6820;
				Match(OPEN_PAR_SYMBOL);
				State = 6821;
				expr(0);
				State = 6824;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 6822;
					Match(COMMA_SYMBOL);
					State = 6823;
					expr(0);
					}
					}
					State = 6826;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==COMMA_SYMBOL );
				State = 6828;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 6830;
				Match(JSON_VALUE_SYMBOL);
				State = 6831;
				Match(OPEN_PAR_SYMBOL);
				State = 6832;
				simpleExpr(0);
				State = 6833;
				Match(COMMA_SYMBOL);
				State = 6834;
				textLiteral();
				State = 6836;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==RETURNING_SYMBOL) {
					{
					State = 6835;
					returningType();
					}
				}

				State = 6838;
				onEmptyOrError();
				State = 6839;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 6841;
				Match(LEFT_SYMBOL);
				State = 6842;
				Match(OPEN_PAR_SYMBOL);
				State = 6843;
				expr(0);
				State = 6844;
				Match(COMMA_SYMBOL);
				State = 6845;
				expr(0);
				State = 6846;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 6848;
				Match(MINUTE_SYMBOL);
				State = 6849;
				exprWithParentheses();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 6850;
				Match(MONTH_SYMBOL);
				State = 6851;
				exprWithParentheses();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 6852;
				Match(RIGHT_SYMBOL);
				State = 6853;
				Match(OPEN_PAR_SYMBOL);
				State = 6854;
				expr(0);
				State = 6855;
				Match(COMMA_SYMBOL);
				State = 6856;
				expr(0);
				State = 6857;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 6859;
				Match(SECOND_SYMBOL);
				State = 6860;
				exprWithParentheses();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 6861;
				Match(TIME_SYMBOL);
				State = 6862;
				exprWithParentheses();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 6863;
				Match(TIMESTAMP_SYMBOL);
				State = 6864;
				Match(OPEN_PAR_SYMBOL);
				State = 6865;
				expr(0);
				State = 6868;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6866;
					Match(COMMA_SYMBOL);
					State = 6867;
					expr(0);
					}
				}

				State = 6870;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 6872;
				trimFunction();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 6873;
				userFunction();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 6874;
				Match(VALUES_SYMBOL);
				State = 6875;
				exprWithParentheses();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 6876;
				Match(YEAR_SYMBOL);
				State = 6877;
				exprWithParentheses();
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 6878;
				_la = TokenStream.LA(1);
				if ( !(_la==ADDDATE_SYMBOL || _la==SUBDATE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6879;
				Match(OPEN_PAR_SYMBOL);
				State = 6880;
				expr(0);
				State = 6881;
				Match(COMMA_SYMBOL);
				State = 6887;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,818,Context) ) {
				case 1:
					{
					State = 6882;
					expr(0);
					}
					break;
				case 2:
					{
					State = 6883;
					Match(INTERVAL_SYMBOL);
					State = 6884;
					expr(0);
					State = 6885;
					interval();
					}
					break;
				}
				State = 6889;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 6891;
				Match(CURDATE_SYMBOL);
				State = 6893;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,819,Context) ) {
				case 1:
					{
					State = 6892;
					parentheses();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 6895;
				Match(CURTIME_SYMBOL);
				State = 6897;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,820,Context) ) {
				case 1:
					{
					State = 6896;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 6899;
				_la = TokenStream.LA(1);
				if ( !(_la==DATE_ADD_SYMBOL || _la==DATE_SUB_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6900;
				Match(OPEN_PAR_SYMBOL);
				State = 6901;
				expr(0);
				State = 6902;
				Match(COMMA_SYMBOL);
				State = 6903;
				Match(INTERVAL_SYMBOL);
				State = 6904;
				expr(0);
				State = 6905;
				interval();
				State = 6906;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 6908;
				Match(EXTRACT_SYMBOL);
				State = 6909;
				Match(OPEN_PAR_SYMBOL);
				State = 6910;
				interval();
				State = 6911;
				Match(FROM_SYMBOL);
				State = 6912;
				expr(0);
				State = 6913;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 6915;
				Match(GET_FORMAT_SYMBOL);
				State = 6916;
				Match(OPEN_PAR_SYMBOL);
				State = 6917;
				dateTimeTtype();
				State = 6918;
				Match(COMMA_SYMBOL);
				State = 6919;
				expr(0);
				State = 6920;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 6922;
				if (!(this.ServerVersion >= 80032)) throw new FailedPredicateException(this, "this.ServerVersion >= 80032");
				State = 6923;
				Match(LOG_SYMBOL);
				State = 6924;
				Match(OPEN_PAR_SYMBOL);
				State = 6925;
				expr(0);
				State = 6928;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6926;
					Match(COMMA_SYMBOL);
					State = 6927;
					expr(0);
					}
				}

				State = 6930;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 6932;
				Match(NOW_SYMBOL);
				State = 6934;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,822,Context) ) {
				case 1:
					{
					State = 6933;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 6936;
				Match(POSITION_SYMBOL);
				State = 6937;
				Match(OPEN_PAR_SYMBOL);
				State = 6938;
				bitExpr(0);
				State = 6939;
				Match(IN_SYMBOL);
				State = 6940;
				expr(0);
				State = 6941;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 6943;
				substringFunction();
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 6944;
				Match(SYSDATE_SYMBOL);
				State = 6946;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,823,Context) ) {
				case 1:
					{
					State = 6945;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 31:
				EnterOuterAlt(_localctx, 31);
				{
				State = 6948;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMPADD_SYMBOL || _la==TIMESTAMPDIFF_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 6949;
				Match(OPEN_PAR_SYMBOL);
				State = 6950;
				intervalTimeStamp();
				State = 6951;
				Match(COMMA_SYMBOL);
				State = 6952;
				expr(0);
				State = 6953;
				Match(COMMA_SYMBOL);
				State = 6954;
				expr(0);
				State = 6955;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 32:
				EnterOuterAlt(_localctx, 32);
				{
				State = 6957;
				Match(UTC_DATE_SYMBOL);
				State = 6959;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,824,Context) ) {
				case 1:
					{
					State = 6958;
					parentheses();
					}
					break;
				}
				}
				break;
			case 33:
				EnterOuterAlt(_localctx, 33);
				{
				State = 6961;
				Match(UTC_TIME_SYMBOL);
				State = 6963;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,825,Context) ) {
				case 1:
					{
					State = 6962;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 34:
				EnterOuterAlt(_localctx, 34);
				{
				State = 6965;
				Match(UTC_TIMESTAMP_SYMBOL);
				State = 6967;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,826,Context) ) {
				case 1:
					{
					State = 6966;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 35:
				EnterOuterAlt(_localctx, 35);
				{
				State = 6969;
				Match(ASCII_SYMBOL);
				State = 6970;
				exprWithParentheses();
				}
				break;
			case 36:
				EnterOuterAlt(_localctx, 36);
				{
				State = 6971;
				Match(CHARSET_SYMBOL);
				State = 6972;
				exprWithParentheses();
				}
				break;
			case 37:
				EnterOuterAlt(_localctx, 37);
				{
				State = 6973;
				Match(COALESCE_SYMBOL);
				State = 6974;
				exprListWithParentheses();
				}
				break;
			case 38:
				EnterOuterAlt(_localctx, 38);
				{
				State = 6975;
				Match(COLLATION_SYMBOL);
				State = 6976;
				exprWithParentheses();
				}
				break;
			case 39:
				EnterOuterAlt(_localctx, 39);
				{
				State = 6977;
				Match(DATABASE_SYMBOL);
				State = 6978;
				parentheses();
				}
				break;
			case 40:
				EnterOuterAlt(_localctx, 40);
				{
				State = 6979;
				Match(IF_SYMBOL);
				State = 6980;
				Match(OPEN_PAR_SYMBOL);
				State = 6981;
				expr(0);
				State = 6982;
				Match(COMMA_SYMBOL);
				State = 6983;
				expr(0);
				State = 6984;
				Match(COMMA_SYMBOL);
				State = 6985;
				expr(0);
				State = 6986;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 41:
				EnterOuterAlt(_localctx, 41);
				{
				State = 6988;
				Match(FORMAT_SYMBOL);
				State = 6989;
				Match(OPEN_PAR_SYMBOL);
				State = 6990;
				expr(0);
				State = 6991;
				Match(COMMA_SYMBOL);
				State = 6992;
				expr(0);
				State = 6995;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 6993;
					Match(COMMA_SYMBOL);
					State = 6994;
					expr(0);
					}
				}

				State = 6997;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 42:
				EnterOuterAlt(_localctx, 42);
				{
				State = 6999;
				Match(MICROSECOND_SYMBOL);
				State = 7000;
				exprWithParentheses();
				}
				break;
			case 43:
				EnterOuterAlt(_localctx, 43);
				{
				State = 7001;
				Match(MOD_SYMBOL);
				State = 7002;
				Match(OPEN_PAR_SYMBOL);
				State = 7003;
				expr(0);
				State = 7004;
				Match(COMMA_SYMBOL);
				State = 7005;
				expr(0);
				State = 7006;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 44:
				EnterOuterAlt(_localctx, 44);
				{
				State = 7008;
				if (!(this.ServerVersion < 80011)) throw new FailedPredicateException(this, "this.ServerVersion < 80011");
				State = 7009;
				Match(PASSWORD_SYMBOL);
				State = 7010;
				exprWithParentheses();
				}
				break;
			case 45:
				EnterOuterAlt(_localctx, 45);
				{
				State = 7011;
				Match(QUARTER_SYMBOL);
				State = 7012;
				exprWithParentheses();
				}
				break;
			case 46:
				EnterOuterAlt(_localctx, 46);
				{
				State = 7013;
				Match(REPEAT_SYMBOL);
				State = 7014;
				Match(OPEN_PAR_SYMBOL);
				State = 7015;
				expr(0);
				State = 7016;
				Match(COMMA_SYMBOL);
				State = 7017;
				expr(0);
				State = 7018;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 47:
				EnterOuterAlt(_localctx, 47);
				{
				State = 7020;
				Match(REPLACE_SYMBOL);
				State = 7021;
				Match(OPEN_PAR_SYMBOL);
				State = 7022;
				expr(0);
				State = 7023;
				Match(COMMA_SYMBOL);
				State = 7024;
				expr(0);
				State = 7025;
				Match(COMMA_SYMBOL);
				State = 7026;
				expr(0);
				State = 7027;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 48:
				EnterOuterAlt(_localctx, 48);
				{
				State = 7029;
				Match(REVERSE_SYMBOL);
				State = 7030;
				exprWithParentheses();
				}
				break;
			case 49:
				EnterOuterAlt(_localctx, 49);
				{
				State = 7031;
				Match(ROW_COUNT_SYMBOL);
				State = 7032;
				parentheses();
				}
				break;
			case 50:
				EnterOuterAlt(_localctx, 50);
				{
				State = 7033;
				Match(TRUNCATE_SYMBOL);
				State = 7034;
				Match(OPEN_PAR_SYMBOL);
				State = 7035;
				expr(0);
				State = 7036;
				Match(COMMA_SYMBOL);
				State = 7037;
				expr(0);
				State = 7038;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 51:
				EnterOuterAlt(_localctx, 51);
				{
				State = 7040;
				Match(WEEK_SYMBOL);
				State = 7041;
				Match(OPEN_PAR_SYMBOL);
				State = 7042;
				expr(0);
				State = 7045;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 7043;
					Match(COMMA_SYMBOL);
					State = 7044;
					expr(0);
					}
				}

				State = 7047;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 52:
				EnterOuterAlt(_localctx, 52);
				{
				State = 7049;
				Match(WEIGHT_STRING_SYMBOL);
				State = 7050;
				Match(OPEN_PAR_SYMBOL);
				State = 7051;
				expr(0);
				State = 7067;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,830,Context) ) {
				case 1:
					{
					State = 7055;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==AS_SYMBOL) {
						{
						State = 7052;
						Match(AS_SYMBOL);
						State = 7053;
						Match(CHAR_SYMBOL);
						State = 7054;
						wsNumCodepoints();
						}
					}

					}
					break;
				case 2:
					{
					State = 7057;
					Match(AS_SYMBOL);
					State = 7058;
					Match(BINARY_SYMBOL);
					State = 7059;
					wsNumCodepoints();
					}
					break;
				case 3:
					{
					State = 7060;
					Match(COMMA_SYMBOL);
					State = 7061;
					ulong_number();
					State = 7062;
					Match(COMMA_SYMBOL);
					State = 7063;
					ulong_number();
					State = 7064;
					Match(COMMA_SYMBOL);
					State = 7065;
					ulong_number();
					}
					break;
				}
				State = 7069;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 53:
				EnterOuterAlt(_localctx, 53);
				{
				State = 7071;
				geometryFunction();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturningTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING_SYMBOL() { return GetToken(MySqlParser.RETURNING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CastTypeContext castType() {
			return GetRuleContext<CastTypeContext>(0);
		}
		public ReturningTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returningType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReturningType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReturningType(this);
		}
	}

	[RuleVersion(0)]
	public ReturningTypeContext returningType() {
		ReturningTypeContext _localctx = new ReturningTypeContext(Context, State);
		EnterRule(_localctx, 962, RULE_returningType);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7074;
			Match(RETURNING_SYMBOL);
			State = 7075;
			castType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GeometryFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListWithParenthesesContext exprListWithParentheses() {
			return GetRuleContext<ExprListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		public GeometryFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_geometryFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGeometryFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGeometryFunction(this);
		}
	}

	[RuleVersion(0)]
	public GeometryFunctionContext geometryFunction() {
		GeometryFunctionContext _localctx = new GeometryFunctionContext(Context, State);
		EnterRule(_localctx, 964, RULE_geometryFunction);
		try {
			State = 7100;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GEOMETRYCOLLECTION_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7077;
				Match(GEOMETRYCOLLECTION_SYMBOL);
				State = 7078;
				Match(OPEN_PAR_SYMBOL);
				State = 7080;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,832,Context) ) {
				case 1:
					{
					State = 7079;
					exprList();
					}
					break;
				}
				State = 7082;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case LINESTRING_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7083;
				Match(LINESTRING_SYMBOL);
				State = 7084;
				exprListWithParentheses();
				}
				break;
			case MULTILINESTRING_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7085;
				Match(MULTILINESTRING_SYMBOL);
				State = 7086;
				exprListWithParentheses();
				}
				break;
			case MULTIPOINT_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7087;
				Match(MULTIPOINT_SYMBOL);
				State = 7088;
				exprListWithParentheses();
				}
				break;
			case MULTIPOLYGON_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7089;
				Match(MULTIPOLYGON_SYMBOL);
				State = 7090;
				exprListWithParentheses();
				}
				break;
			case POINT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7091;
				Match(POINT_SYMBOL);
				State = 7092;
				Match(OPEN_PAR_SYMBOL);
				State = 7093;
				expr(0);
				State = 7094;
				Match(COMMA_SYMBOL);
				State = 7095;
				expr(0);
				State = 7096;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case POLYGON_SYMBOL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7098;
				Match(POLYGON_SYMBOL);
				State = 7099;
				exprListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeFunctionParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FractionalPrecisionContext fractionalPrecision() {
			return GetRuleContext<FractionalPrecisionContext>(0);
		}
		public TimeFunctionParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_timeFunctionParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTimeFunctionParameters(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTimeFunctionParameters(this);
		}
	}

	[RuleVersion(0)]
	public TimeFunctionParametersContext timeFunctionParameters() {
		TimeFunctionParametersContext _localctx = new TimeFunctionParametersContext(Context, State);
		EnterRule(_localctx, 966, RULE_timeFunctionParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7102;
			Match(OPEN_PAR_SYMBOL);
			State = 7104;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==INT_NUMBER) {
				{
				State = 7103;
				fractionalPrecision();
				}
			}

			State = 7106;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FractionalPrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		public FractionalPrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fractionalPrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFractionalPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFractionalPrecision(this);
		}
	}

	[RuleVersion(0)]
	public FractionalPrecisionContext fractionalPrecision() {
		FractionalPrecisionContext _localctx = new FractionalPrecisionContext(Context, State);
		EnterRule(_localctx, 968, RULE_fractionalPrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7108;
			Match(INT_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySqlParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext[] real_ulong_number() {
			return GetRuleContexts<Real_ulong_numberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number(int i) {
			return GetRuleContext<Real_ulong_numberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public WeightStringLevelListItemContext[] weightStringLevelListItem() {
			return GetRuleContexts<WeightStringLevelListItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WeightStringLevelListItemContext weightStringLevelListItem(int i) {
			return GetRuleContext<WeightStringLevelListItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public WeightStringLevelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevels(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelsContext weightStringLevels() {
		WeightStringLevelsContext _localctx = new WeightStringLevelsContext(Context, State);
		EnterRule(_localctx, 970, RULE_weightStringLevels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7110;
			Match(LEVEL_SYMBOL);
			State = 7123;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,836,Context) ) {
			case 1:
				{
				State = 7111;
				real_ulong_number();
				State = 7112;
				Match(MINUS_OPERATOR);
				State = 7113;
				real_ulong_number();
				}
				break;
			case 2:
				{
				State = 7115;
				weightStringLevelListItem();
				State = 7120;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7116;
					Match(COMMA_SYMBOL);
					State = 7117;
					weightStringLevelListItem();
					}
					}
					State = 7122;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WeightStringLevelListItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySqlParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASC_SYMBOL() { return GetToken(MySqlParser.ASC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESC_SYMBOL() { return GetToken(MySqlParser.DESC_SYMBOL, 0); }
		public WeightStringLevelListItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_weightStringLevelListItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWeightStringLevelListItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWeightStringLevelListItem(this);
		}
	}

	[RuleVersion(0)]
	public WeightStringLevelListItemContext weightStringLevelListItem() {
		WeightStringLevelListItemContext _localctx = new WeightStringLevelListItemContext(Context, State);
		EnterRule(_localctx, 972, RULE_weightStringLevelListItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7125;
			real_ulong_number();
			State = 7131;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASC_SYMBOL:
			case DESC_SYMBOL:
				{
				State = 7126;
				_la = TokenStream.LA(1);
				if ( !(_la==ASC_SYMBOL || _la==DESC_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7128;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==REVERSE_SYMBOL) {
					{
					State = 7127;
					Match(REVERSE_SYMBOL);
					}
				}

				}
				break;
			case REVERSE_SYMBOL:
				{
				State = 7130;
				Match(REVERSE_SYMBOL);
				}
				break;
			case Eof:
			case COMMA_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DateTimeTtypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		public DateTimeTtypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dateTimeTtype; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDateTimeTtype(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDateTimeTtype(this);
		}
	}

	[RuleVersion(0)]
	public DateTimeTtypeContext dateTimeTtype() {
		DateTimeTtypeContext _localctx = new DateTimeTtypeContext(Context, State);
		EnterRule(_localctx, 974, RULE_dateTimeTtype);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7133;
			_la = TokenStream.LA(1);
			if ( !(_la==DATETIME_SYMBOL || _la==DATE_SYMBOL || _la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TrimFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIM_SYMBOL() { return GetToken(MySqlParser.TRIM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEADING_SYMBOL() { return GetToken(MySqlParser.LEADING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRAILING_SYMBOL() { return GetToken(MySqlParser.TRAILING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOTH_SYMBOL() { return GetToken(MySqlParser.BOTH_SYMBOL, 0); }
		public TrimFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_trimFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTrimFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTrimFunction(this);
		}
	}

	[RuleVersion(0)]
	public TrimFunctionContext trimFunction() {
		TrimFunctionContext _localctx = new TrimFunctionContext(Context, State);
		EnterRule(_localctx, 976, RULE_trimFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7135;
			Match(TRIM_SYMBOL);
			State = 7136;
			Match(OPEN_PAR_SYMBOL);
			State = 7160;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,843,Context) ) {
			case 1:
				{
				State = 7137;
				expr(0);
				State = 7140;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FROM_SYMBOL) {
					{
					State = 7138;
					Match(FROM_SYMBOL);
					State = 7139;
					expr(0);
					}
				}

				}
				break;
			case 2:
				{
				State = 7142;
				Match(LEADING_SYMBOL);
				State = 7144;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,840,Context) ) {
				case 1:
					{
					State = 7143;
					expr(0);
					}
					break;
				}
				State = 7146;
				Match(FROM_SYMBOL);
				State = 7147;
				expr(0);
				}
				break;
			case 3:
				{
				State = 7148;
				Match(TRAILING_SYMBOL);
				State = 7150;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,841,Context) ) {
				case 1:
					{
					State = 7149;
					expr(0);
					}
					break;
				}
				State = 7152;
				Match(FROM_SYMBOL);
				State = 7153;
				expr(0);
				}
				break;
			case 4:
				{
				State = 7154;
				Match(BOTH_SYMBOL);
				State = 7156;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,842,Context) ) {
				case 1:
					{
					State = 7155;
					expr(0);
					}
					break;
				}
				State = 7158;
				Match(FROM_SYMBOL);
				State = 7159;
				expr(0);
				}
				break;
			}
			State = 7162;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubstringFunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBSTRING_SYMBOL() { return GetToken(MySqlParser.SUBSTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		public SubstringFunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_substringFunction; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubstringFunction(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubstringFunction(this);
		}
	}

	[RuleVersion(0)]
	public SubstringFunctionContext substringFunction() {
		SubstringFunctionContext _localctx = new SubstringFunctionContext(Context, State);
		EnterRule(_localctx, 978, RULE_substringFunction);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7164;
			Match(SUBSTRING_SYMBOL);
			State = 7165;
			Match(OPEN_PAR_SYMBOL);
			State = 7166;
			expr(0);
			State = 7179;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case COMMA_SYMBOL:
				{
				State = 7167;
				Match(COMMA_SYMBOL);
				State = 7168;
				expr(0);
				State = 7171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA_SYMBOL) {
					{
					State = 7169;
					Match(COMMA_SYMBOL);
					State = 7170;
					expr(0);
					}
				}

				}
				break;
			case FROM_SYMBOL:
				{
				State = 7173;
				Match(FROM_SYMBOL);
				State = 7174;
				expr(0);
				State = 7177;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FOR_SYMBOL) {
					{
					State = 7175;
					Match(FOR_SYMBOL);
					State = 7176;
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 7181;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprListContext udfExprList() {
			return GetRuleContext<UdfExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 980, RULE_functionCall);
		try {
			State = 7197;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,849,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7183;
				pureIdentifier();
				State = 7184;
				Match(OPEN_PAR_SYMBOL);
				State = 7186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,847,Context) ) {
				case 1:
					{
					State = 7185;
					udfExprList();
					}
					break;
				}
				State = 7188;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7190;
				qualifiedIdentifier();
				State = 7191;
				Match(OPEN_PAR_SYMBOL);
				State = 7193;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,848,Context) ) {
				case 1:
					{
					State = 7192;
					exprList();
					}
					break;
				}
				State = 7195;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprContext[] udfExpr() {
			return GetRuleContexts<UdfExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UdfExprContext udfExpr(int i) {
			return GetRuleContext<UdfExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UdfExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfExprList(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprListContext udfExprList() {
		UdfExprListContext _localctx = new UdfExprListContext(Context, State);
		EnterRule(_localctx, 982, RULE_udfExprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7199;
			udfExpr();
			State = 7204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7200;
				Match(COMMA_SYMBOL);
				State = 7201;
				udfExpr();
				}
				}
				State = 7206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SelectAliasContext selectAlias() {
			return GetRuleContext<SelectAliasContext>(0);
		}
		public UdfExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfExpr(this);
		}
	}

	[RuleVersion(0)]
	public UdfExprContext udfExpr() {
		UdfExprContext _localctx = new UdfExprContext(Context, State);
		EnterRule(_localctx, 984, RULE_udfExpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7207;
			expr(0);
			State = 7209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,851,Context) ) {
			case 1:
				{
				State = 7208;
				selectAlias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ContextVariableContext contextVariable() {
			return GetRuleContext<ContextVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EmittedVariableContext emittedVariable() {
			return GetRuleContext<EmittedVariableContext>(0);
		}
		public UserVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserVariable(this);
		}
	}

	[RuleVersion(0)]
	public UserVariableContext userVariable() {
		UserVariableContext _localctx = new UserVariableContext(Context, State);
		EnterRule(_localctx, 986, RULE_userVariable);
		try {
			State = 7213;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7211;
				contextVariable();
				}
				break;
			case NUMBER_SIGN_SYMBOL:
			case NUMBER_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7212;
				emittedVariable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ContextVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SIGN_SYMBOL() { return GetToken(MySqlParser.AT_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_TEXT_SUFFIX() { return GetToken(MySqlParser.AT_TEXT_SUFFIX, 0); }
		public ContextVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_contextVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterContextVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitContextVariable(this);
		}
	}

	[RuleVersion(0)]
	public ContextVariableContext contextVariable() {
		ContextVariableContext _localctx = new ContextVariableContext(Context, State);
		EnterRule(_localctx, 988, RULE_contextVariable);
		try {
			State = 7218;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7215;
				Match(AT_SIGN_SYMBOL);
				State = 7216;
				textOrIdentifier();
				}
				break;
			case AT_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7217;
				Match(AT_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EmittedVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SIGN_SYMBOL() { return GetToken(MySqlParser.NUMBER_SIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_TEXT_SUFFIX() { return GetToken(MySqlParser.NUMBER_TEXT_SUFFIX, 0); }
		public EmittedVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_emittedVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEmittedVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEmittedVariable(this);
		}
	}

	[RuleVersion(0)]
	public EmittedVariableContext emittedVariable() {
		EmittedVariableContext _localctx = new EmittedVariableContext(Context, State);
		EnterRule(_localctx, 990, RULE_emittedVariable);
		try {
			State = 7223;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER_SIGN_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7220;
				Match(NUMBER_SIGN_SYMBOL);
				State = 7221;
				textOrIdentifier();
				}
				break;
			case NUMBER_TEXT_SUFFIX:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7222;
				Match(NUMBER_TEXT_SUFFIX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InExpressionUserVariableAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OPERATOR() { return GetToken(MySqlParser.ASSIGN_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public InExpressionUserVariableAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_inExpressionUserVariableAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInExpressionUserVariableAssignment(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInExpressionUserVariableAssignment(this);
		}
	}

	[RuleVersion(0)]
	public InExpressionUserVariableAssignmentContext inExpressionUserVariableAssignment() {
		InExpressionUserVariableAssignmentContext _localctx = new InExpressionUserVariableAssignmentContext(Context, State);
		EnterRule(_localctx, 992, RULE_inExpressionUserVariableAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7225;
			userVariable();
			State = 7226;
			Match(ASSIGN_OPERATOR);
			State = 7227;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueSystemOrUserVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public RvalueSystemOrUserVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalueSystemOrUserVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRvalueSystemOrUserVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRvalueSystemOrUserVariable(this);
		}
	}

	[RuleVersion(0)]
	public RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() {
		RvalueSystemOrUserVariableContext _localctx = new RvalueSystemOrUserVariableContext(Context, State);
		EnterRule(_localctx, 994, RULE_rvalueSystemOrUserVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7229;
			userVariable();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueIdentifierContext lValueIdentifier() {
			return GetRuleContext<LValueIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public LvalueVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalueVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLvalueVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLvalueVariable(this);
		}
	}

	[RuleVersion(0)]
	public LvalueVariableContext lvalueVariable() {
		LvalueVariableContext _localctx = new LvalueVariableContext(Context, State);
		EnterRule(_localctx, 996, RULE_lvalueVariable);
		int _la;
		try {
			State = 7244;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,858,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,857,Context) ) {
				case 1:
					{
					State = 7231;
					identifier();
					State = 7233;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 7232;
						dotIdentifier();
						}
					}

					}
					break;
				case 2:
					{
					State = 7235;
					if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
					State = 7236;
					lValueIdentifier();
					State = 7238;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==DOT_SYMBOL) {
						{
						State = 7237;
						dotIdentifier();
						}
					}

					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7242;
				Match(DEFAULT_SYMBOL);
				State = 7243;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueSystemVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public RvalueSystemVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalueSystemVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRvalueSystemVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRvalueSystemVariable(this);
		}
	}

	[RuleVersion(0)]
	public RvalueSystemVariableContext rvalueSystemVariable() {
		RvalueSystemVariableContext _localctx = new RvalueSystemVariableContext(Context, State);
		EnterRule(_localctx, 998, RULE_rvalueSystemVariable);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7246;
			textOrIdentifier();
			State = 7248;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT_SYMBOL) {
				{
				State = 7247;
				dotIdentifier();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHEN_SYMBOL() { return GetToken(MySqlParser.WHEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public WhenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhenExpression(this);
		}
	}

	[RuleVersion(0)]
	public WhenExpressionContext whenExpression() {
		WhenExpressionContext _localctx = new WhenExpressionContext(Context, State);
		EnterRule(_localctx, 1000, RULE_whenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7250;
			Match(WHEN_SYMBOL);
			State = 7251;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_SYMBOL() { return GetToken(MySqlParser.THEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ThenExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThenExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThenExpression(this);
		}
	}

	[RuleVersion(0)]
	public ThenExpressionContext thenExpression() {
		ThenExpressionContext _localctx = new ThenExpressionContext(Context, State);
		EnterRule(_localctx, 1002, RULE_thenExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7253;
			Match(THEN_SYMBOL);
			State = 7254;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySqlParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ElseExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterElseExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitElseExpression(this);
		}
	}

	[RuleVersion(0)]
	public ElseExpressionContext elseExpression() {
		ElseExpressionContext _localctx = new ElseExpressionContext(Context, State);
		EnterRule(_localctx, 1004, RULE_elseExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7256;
			Match(ELSE_SYMBOL);
			State = 7257;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CastTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySqlParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySqlParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_SYMBOL() { return GetToken(MySqlParser.UNSIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySqlParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySqlParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RealTypeContext realType() {
			return GetRuleContext<RealTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySqlParser.FLOAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StandardFloatOptionsContext standardFloatOptions() {
			return GetRuleContext<StandardFloatOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		public CastTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_castType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCastType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCastType(this);
		}
	}

	[RuleVersion(0)]
	public CastTypeContext castType() {
		CastTypeContext _localctx = new CastTypeContext(Context, State);
		EnterRule(_localctx, 1006, RULE_castType);
		int _la;
		try {
			State = 7307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,870,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7259;
				Match(BINARY_SYMBOL);
				State = 7261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,860,Context) ) {
				case 1:
					{
					State = 7260;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7263;
				Match(CHAR_SYMBOL);
				State = 7265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,861,Context) ) {
				case 1:
					{
					State = 7264;
					fieldLength();
					}
					break;
				}
				State = 7268;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,862,Context) ) {
				case 1:
					{
					State = 7267;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7270;
				nchar();
				State = 7272;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,863,Context) ) {
				case 1:
					{
					State = 7271;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7274;
				Match(SIGNED_SYMBOL);
				State = 7276;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,864,Context) ) {
				case 1:
					{
					State = 7275;
					Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7278;
				Match(UNSIGNED_SYMBOL);
				State = 7280;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,865,Context) ) {
				case 1:
					{
					State = 7279;
					Match(INT_SYMBOL);
					}
					break;
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7282;
				Match(DATE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7283;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 7284;
				Match(YEAR_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7285;
				Match(TIME_SYMBOL);
				State = 7287;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,866,Context) ) {
				case 1:
					{
					State = 7286;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7289;
				Match(DATETIME_SYMBOL);
				State = 7291;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,867,Context) ) {
				case 1:
					{
					State = 7290;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7293;
				Match(DECIMAL_SYMBOL);
				State = 7295;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,868,Context) ) {
				case 1:
					{
					State = 7294;
					floatOptions();
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7297;
				Match(JSON_SYMBOL);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7298;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 7299;
				realType();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7300;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 7301;
				Match(FLOAT_SYMBOL);
				State = 7303;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,869,Context) ) {
				case 1:
					{
					State = 7302;
					standardFloatOptions();
					}
					break;
				}
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7305;
				if (!(this.ServerVersion >= 80027)) throw new FailedPredicateException(this, "this.ServerVersion >= 80027");
				State = 7306;
				_la = TokenStream.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & 108086391056891911L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ExprListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprList(this);
		}
	}

	[RuleVersion(0)]
	public ExprListContext exprList() {
		ExprListContext _localctx = new ExprListContext(Context, State);
		EnterRule(_localctx, 1008, RULE_exprList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7309;
			expr(0);
			State = 7314;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7310;
				Match(COMMA_SYMBOL);
				State = 7311;
				expr(0);
				}
				}
				State = 7316;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySqlParser.CHARSET_SYMBOL, 0); }
		public CharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharset(this);
		}
	}

	[RuleVersion(0)]
	public CharsetContext charset() {
		CharsetContext _localctx = new CharsetContext(Context, State);
		EnterRule(_localctx, 1010, RULE_charset);
		try {
			State = 7320;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7317;
				Match(CHAR_SYMBOL);
				State = 7318;
				Match(SET_SYMBOL);
				}
				break;
			case CHARSET_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7319;
				Match(CHARSET_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NotRuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT2_SYMBOL() { return GetToken(MySqlParser.NOT2_SYMBOL, 0); }
		public NotRuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_notRule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNotRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNotRule(this);
		}
	}

	[RuleVersion(0)]
	public NotRuleContext notRule() {
		NotRuleContext _localctx = new NotRuleContext(Context, State);
		EnterRule(_localctx, 1012, RULE_notRule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7322;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==NOT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Not2RuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGICAL_NOT_OPERATOR() { return GetToken(MySqlParser.LOGICAL_NOT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT2_SYMBOL() { return GetToken(MySqlParser.NOT2_SYMBOL, 0); }
		public Not2RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_not2Rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNot2Rule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNot2Rule(this);
		}
	}

	[RuleVersion(0)]
	public Not2RuleContext not2Rule() {
		Not2RuleContext _localctx = new Not2RuleContext(Context, State);
		EnterRule(_localctx, 1014, RULE_not2Rule);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7324;
			_la = TokenStream.LA(1);
			if ( !(_la==NOT2_SYMBOL || _la==LOGICAL_NOT_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IntervalTimeStampContext intervalTimeStamp() {
			return GetRuleContext<IntervalTimeStampContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_MICROSECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MINUTE_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SECOND_SYMBOL() { return GetToken(MySqlParser.MINUTE_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MICROSECOND_SYMBOL() { return GetToken(MySqlParser.HOUR_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SECOND_SYMBOL() { return GetToken(MySqlParser.HOUR_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_MINUTE_SYMBOL() { return GetToken(MySqlParser.HOUR_MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MICROSECOND_SYMBOL() { return GetToken(MySqlParser.DAY_MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SECOND_SYMBOL() { return GetToken(MySqlParser.DAY_SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_MINUTE_SYMBOL() { return GetToken(MySqlParser.DAY_MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_HOUR_SYMBOL() { return GetToken(MySqlParser.DAY_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_MONTH_SYMBOL() { return GetToken(MySqlParser.YEAR_MONTH_SYMBOL, 0); }
		public IntervalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interval; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInterval(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInterval(this);
		}
	}

	[RuleVersion(0)]
	public IntervalContext interval() {
		IntervalContext _localctx = new IntervalContext(Context, State);
		EnterRule(_localctx, 1016, RULE_interval);
		int _la;
		try {
			State = 7328;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DAY_SYMBOL:
			case HOUR_SYMBOL:
			case MICROSECOND_SYMBOL:
			case MINUTE_SYMBOL:
			case MONTH_SYMBOL:
			case QUARTER_SYMBOL:
			case SECOND_SYMBOL:
			case WEEK_SYMBOL:
			case YEAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7326;
				intervalTimeStamp();
				}
				break;
			case DAY_HOUR_SYMBOL:
			case DAY_MICROSECOND_SYMBOL:
			case DAY_MINUTE_SYMBOL:
			case DAY_SECOND_SYMBOL:
			case HOUR_MICROSECOND_SYMBOL:
			case HOUR_MINUTE_SYMBOL:
			case HOUR_SECOND_SYMBOL:
			case MINUTE_MICROSECOND_SYMBOL:
			case MINUTE_SECOND_SYMBOL:
			case SECOND_MICROSECOND_SYMBOL:
			case YEAR_MONTH_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7327;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & 15L) != 0) || ((((_la - 259)) & ~0x3f) == 0 && ((1L << (_la - 259)) & 7L) != 0) || _la==MINUTE_MICROSECOND_SYMBOL || _la==MINUTE_SECOND_SYMBOL || _la==SECOND_MICROSECOND_SYMBOL || _la==YEAR_MONTH_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntervalTimeStampContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySqlParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySqlParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySqlParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySqlParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySqlParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		public IntervalTimeStampContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_intervalTimeStamp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIntervalTimeStamp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIntervalTimeStamp(this);
		}
	}

	[RuleVersion(0)]
	public IntervalTimeStampContext intervalTimeStamp() {
		IntervalTimeStampContext _localctx = new IntervalTimeStampContext(Context, State);
		EnterRule(_localctx, 1018, RULE_intervalTimeStamp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7330;
			_la = TokenStream.LA(1);
			if ( !(_la==DAY_SYMBOL || _la==HOUR_SYMBOL || ((((_la - 362)) & ~0x3f) == 0 && ((1L << (_la - 362)) & 4129L) != 0) || _la==QUARTER_SYMBOL || _la==SECOND_SYMBOL || _la==WEEK_SYMBOL || _la==YEAR_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprListWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprListContext exprList() {
			return GetRuleContext<ExprListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprListWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprListWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprListWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ExprListWithParenthesesContext exprListWithParentheses() {
		ExprListWithParenthesesContext _localctx = new ExprListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1020, RULE_exprListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7332;
			Match(OPEN_PAR_SYMBOL);
			State = 7333;
			exprList();
			State = 7334;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public ExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_exprWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterExprWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitExprWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ExprWithParenthesesContext exprWithParentheses() {
		ExprWithParenthesesContext _localctx = new ExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1022, RULE_exprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7336;
			Match(OPEN_PAR_SYMBOL);
			State = 7337;
			expr(0);
			State = 7338;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleExprWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SimpleExprContext simpleExpr() {
			return GetRuleContext<SimpleExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SimpleExprWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleExprWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleExprWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleExprWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public SimpleExprWithParenthesesContext simpleExprWithParentheses() {
		SimpleExprWithParenthesesContext _localctx = new SimpleExprWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1024, RULE_simpleExprWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7340;
			Match(OPEN_PAR_SYMBOL);
			State = 7341;
			simpleExpr(0);
			State = 7342;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public OrderExpressionContext[] orderExpression() {
			return GetRuleContexts<OrderExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public OrderExpressionContext orderExpression(int i) {
			return GetRuleContext<OrderExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public OrderListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderList(this);
		}
	}

	[RuleVersion(0)]
	public OrderListContext orderList() {
		OrderListContext _localctx = new OrderListContext(Context, State);
		EnterRule(_localctx, 1026, RULE_orderList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7344;
			orderExpression();
			State = 7349;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,874,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7345;
					Match(COMMA_SYMBOL);
					State = 7346;
					orderExpression();
					}
					}
				}
				State = 7351;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,874,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OrderExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public OrderExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_orderExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOrderExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOrderExpression(this);
		}
	}

	[RuleVersion(0)]
	public OrderExpressionContext orderExpression() {
		OrderExpressionContext _localctx = new OrderExpressionContext(Context, State);
		EnterRule(_localctx, 1028, RULE_orderExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7352;
			expr(0);
			State = 7354;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,875,Context) ) {
			case 1:
				{
				State = 7353;
				direction();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GroupingExpressionContext[] groupingExpression() {
			return GetRuleContexts<GroupingExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GroupingExpressionContext groupingExpression(int i) {
			return GetRuleContext<GroupingExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public GroupListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupList(this);
		}
	}

	[RuleVersion(0)]
	public GroupListContext groupList() {
		GroupListContext _localctx = new GroupListContext(Context, State);
		EnterRule(_localctx, 1030, RULE_groupList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7356;
			groupingExpression();
			State = 7361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7357;
				Match(COMMA_SYMBOL);
				State = 7358;
				groupingExpression();
				}
				}
				State = 7363;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GroupingExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public GroupingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_groupingExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGroupingExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGroupingExpression(this);
		}
	}

	[RuleVersion(0)]
	public GroupingExpressionContext groupingExpression() {
		GroupingExpressionContext _localctx = new GroupingExpressionContext(Context, State);
		EnterRule(_localctx, 1032, RULE_groupingExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7364;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ChannelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySqlParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringNoLinebreakContext textStringNoLinebreak() {
			return GetRuleContext<TextStringNoLinebreakContext>(0);
		}
		public ChannelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_channel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterChannel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitChannel(this);
		}
	}

	[RuleVersion(0)]
	public ChannelContext channel() {
		ChannelContext _localctx = new ChannelContext(Context, State);
		EnterRule(_localctx, 1034, RULE_channel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7366;
			Match(FOR_SYMBOL);
			State = 7367;
			Match(CHANNEL_SYMBOL);
			State = 7368;
			textStringNoLinebreak();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SimpleStatementContext simpleStatement() {
			return GetRuleContext<SimpleStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CaseStatementContext caseStatement() {
			return GetRuleContext<CaseStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledBlockContext labeledBlock() {
			return GetRuleContext<LabeledBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledBlockContext unlabeledBlock() {
			return GetRuleContext<UnlabeledBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabeledControlContext labeledControl() {
			return GetRuleContext<LabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LeaveStatementContext leaveStatement() {
			return GetRuleContext<LeaveStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IterateStatementContext iterateStatement() {
			return GetRuleContext<IterateStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorOpenContext cursorOpen() {
			return GetRuleContext<CursorOpenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorFetchContext cursorFetch() {
			return GetRuleContext<CursorFetchContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorCloseContext cursorClose() {
			return GetRuleContext<CursorCloseContext>(0);
		}
		public CompoundStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatement(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementContext compoundStatement() {
		CompoundStatementContext _localctx = new CompoundStatementContext(Context, State);
		EnterRule(_localctx, 1036, RULE_compoundStatement);
		try {
			State = 7383;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,877,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7370;
				simpleStatement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7371;
				returnStatement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7372;
				ifStatement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7373;
				caseStatement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7374;
				labeledBlock();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7375;
				unlabeledBlock();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7376;
				labeledControl();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7377;
				unlabeledControl();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7378;
				leaveStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7379;
				iterateStatement();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7380;
				cursorOpen();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7381;
				cursorFetch();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7382;
				cursorClose();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN_SYMBOL() { return GetToken(MySqlParser.RETURN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReturnStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReturnStatement(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 1038, RULE_returnStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7385;
			Match(RETURN_SYMBOL);
			State = 7386;
			expr(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IF_SYMBOL() { return GetTokens(MySqlParser.IF_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL(int i) {
			return GetToken(MySqlParser.IF_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfStatement(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 1040, RULE_ifStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7388;
			Match(IF_SYMBOL);
			State = 7389;
			ifBody();
			State = 7390;
			Match(END_SYMBOL);
			State = 7391;
			Match(IF_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfBodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext thenStatement() {
			return GetRuleContext<ThenStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSEIF_SYMBOL() { return GetToken(MySqlParser.ELSEIF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IfBodyContext ifBody() {
			return GetRuleContext<IfBodyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySqlParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public IfBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifBody; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfBody(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfBody(this);
		}
	}

	[RuleVersion(0)]
	public IfBodyContext ifBody() {
		IfBodyContext _localctx = new IfBodyContext(Context, State);
		EnterRule(_localctx, 1042, RULE_ifBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7393;
			expr(0);
			State = 7394;
			thenStatement();
			State = 7399;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ELSEIF_SYMBOL:
				{
				State = 7395;
				Match(ELSEIF_SYMBOL);
				State = 7396;
				ifBody();
				}
				break;
			case ELSE_SYMBOL:
				{
				State = 7397;
				Match(ELSE_SYMBOL);
				State = 7398;
				compoundStatementList();
				}
				break;
			case END_SYMBOL:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ThenStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THEN_SYMBOL() { return GetToken(MySqlParser.THEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ThenStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_thenStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterThenStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitThenStatement(this);
		}
	}

	[RuleVersion(0)]
	public ThenStatementContext thenStatement() {
		ThenStatementContext _localctx = new ThenStatementContext(Context, State);
		EnterRule(_localctx, 1044, RULE_thenStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7401;
			Match(THEN_SYMBOL);
			State = 7402;
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundStatementListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext[] compoundStatement() {
			return GetRuleContexts<CompoundStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement(int i) {
			return GetRuleContext<CompoundStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySqlParser.SEMICOLON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySqlParser.SEMICOLON_SYMBOL, i);
		}
		public CompoundStatementListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundStatementList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCompoundStatementList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCompoundStatementList(this);
		}
	}

	[RuleVersion(0)]
	public CompoundStatementListContext compoundStatementList() {
		CompoundStatementListContext _localctx = new CompoundStatementListContext(Context, State);
		EnterRule(_localctx, 1046, RULE_compoundStatementList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7407;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7404;
					compoundStatement();
					State = 7405;
					Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7409;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,879,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CaseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] CASE_SYMBOL() { return GetTokens(MySqlParser.CASE_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASE_SYMBOL(int i) {
			return GetToken(MySqlParser.CASE_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext[] whenExpression() {
			return GetRuleContexts<WhenExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhenExpressionContext whenExpression(int i) {
			return GetRuleContext<WhenExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext[] thenStatement() {
			return GetRuleContexts<ThenStatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ThenStatementContext thenStatement(int i) {
			return GetRuleContext<ThenStatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ElseStatementContext elseStatement() {
			return GetRuleContext<ElseStatementContext>(0);
		}
		public CaseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_caseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCaseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCaseStatement(this);
		}
	}

	[RuleVersion(0)]
	public CaseStatementContext caseStatement() {
		CaseStatementContext _localctx = new CaseStatementContext(Context, State);
		EnterRule(_localctx, 1048, RULE_caseStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7411;
			Match(CASE_SYMBOL);
			State = 7413;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,880,Context) ) {
			case 1:
				{
				State = 7412;
				expr(0);
				}
				break;
			}
			State = 7418;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 7415;
				whenExpression();
				State = 7416;
				thenStatement();
				}
				}
				State = 7420;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==WHEN_SYMBOL );
			State = 7423;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE_SYMBOL) {
				{
				State = 7422;
				elseStatement();
				}
			}

			State = 7425;
			Match(END_SYMBOL);
			State = 7426;
			Match(CASE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElseStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE_SYMBOL() { return GetToken(MySqlParser.ELSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public ElseStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elseStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterElseStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitElseStatement(this);
		}
	}

	[RuleVersion(0)]
	public ElseStatementContext elseStatement() {
		ElseStatementContext _localctx = new ElseStatementContext(Context, State);
		EnterRule(_localctx, 1050, RULE_elseStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7428;
			Match(ELSE_SYMBOL);
			State = 7429;
			compoundStatementList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabeledBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabeledBlock(this);
		}
	}

	[RuleVersion(0)]
	public LabeledBlockContext labeledBlock() {
		LabeledBlockContext _localctx = new LabeledBlockContext(Context, State);
		EnterRule(_localctx, 1052, RULE_labeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7431;
			label();
			State = 7432;
			beginEndBlock();
			State = 7434;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,883,Context) ) {
			case 1:
				{
				State = 7433;
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BeginEndBlockContext beginEndBlock() {
			return GetRuleContext<BeginEndBlockContext>(0);
		}
		public UnlabeledBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledBlock(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledBlockContext unlabeledBlock() {
		UnlabeledBlockContext _localctx = new UnlabeledBlockContext(Context, State);
		EnterRule(_localctx, 1054, RULE_unlabeledBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7436;
			beginEndBlock();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLON_SYMBOL() { return GetToken(MySqlParser.COLON_SYMBOL, 0); }
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 1056, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7438;
			labelIdentifier();
			State = 7439;
			Match(COLON_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BeginEndBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationsContext spDeclarations() {
			return GetRuleContext<SpDeclarationsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		public BeginEndBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_beginEndBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBeginEndBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBeginEndBlock(this);
		}
	}

	[RuleVersion(0)]
	public BeginEndBlockContext beginEndBlock() {
		BeginEndBlockContext _localctx = new BeginEndBlockContext(Context, State);
		EnterRule(_localctx, 1058, RULE_beginEndBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7441;
			Match(BEGIN_SYMBOL);
			State = 7443;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,884,Context) ) {
			case 1:
				{
				State = 7442;
				spDeclarations();
				}
				break;
			}
			State = 7446;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,885,Context) ) {
			case 1:
				{
				State = 7445;
				compoundStatementList();
				}
				break;
			}
			State = 7448;
			Match(END_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabeledControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnlabeledControlContext unlabeledControl() {
			return GetRuleContext<UnlabeledControlContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labeledControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabeledControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabeledControl(this);
		}
	}

	[RuleVersion(0)]
	public LabeledControlContext labeledControl() {
		LabeledControlContext _localctx = new LabeledControlContext(Context, State);
		EnterRule(_localctx, 1060, RULE_labeledControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7450;
			label();
			State = 7451;
			unlabeledControl();
			State = 7453;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,886,Context) ) {
			case 1:
				{
				State = 7452;
				labelRef();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnlabeledControlContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LoopBlockContext loopBlock() {
			return GetRuleContext<LoopBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileDoBlockContext whileDoBlock() {
			return GetRuleContext<WhileDoBlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RepeatUntilBlockContext repeatUntilBlock() {
			return GetRuleContext<RepeatUntilBlockContext>(0);
		}
		public UnlabeledControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unlabeledControl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnlabeledControl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnlabeledControl(this);
		}
	}

	[RuleVersion(0)]
	public UnlabeledControlContext unlabeledControl() {
		UnlabeledControlContext _localctx = new UnlabeledControlContext(Context, State);
		EnterRule(_localctx, 1062, RULE_unlabeledControl);
		try {
			State = 7458;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOOP_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7455;
				loopBlock();
				}
				break;
			case WHILE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7456;
				whileDoBlock();
				}
				break;
			case REPEAT_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7457;
				repeatUntilBlock();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LoopBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] LOOP_SYMBOL() { return GetTokens(MySqlParser.LOOP_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOOP_SYMBOL(int i) {
			return GetToken(MySqlParser.LOOP_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		public LoopBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_loopBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLoopBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLoopBlock(this);
		}
	}

	[RuleVersion(0)]
	public LoopBlockContext loopBlock() {
		LoopBlockContext _localctx = new LoopBlockContext(Context, State);
		EnterRule(_localctx, 1064, RULE_loopBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7460;
			Match(LOOP_SYMBOL);
			State = 7461;
			compoundStatementList();
			State = 7462;
			Match(END_SYMBOL);
			State = 7463;
			Match(LOOP_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileDoBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WHILE_SYMBOL() { return GetTokens(MySqlParser.WHILE_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE_SYMBOL(int i) {
			return GetToken(MySqlParser.WHILE_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		public WhileDoBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileDoBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWhileDoBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWhileDoBlock(this);
		}
	}

	[RuleVersion(0)]
	public WhileDoBlockContext whileDoBlock() {
		WhileDoBlockContext _localctx = new WhileDoBlockContext(Context, State);
		EnterRule(_localctx, 1066, RULE_whileDoBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7465;
			Match(WHILE_SYMBOL);
			State = 7466;
			expr(0);
			State = 7467;
			Match(DO_SYMBOL);
			State = 7468;
			compoundStatementList();
			State = 7469;
			Match(END_SYMBOL);
			State = 7470;
			Match(WHILE_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RepeatUntilBlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] REPEAT_SYMBOL() { return GetTokens(MySqlParser.REPEAT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEAT_SYMBOL(int i) {
			return GetToken(MySqlParser.REPEAT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementListContext compoundStatementList() {
			return GetRuleContext<CompoundStatementListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySqlParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		public RepeatUntilBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_repeatUntilBlock; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRepeatUntilBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRepeatUntilBlock(this);
		}
	}

	[RuleVersion(0)]
	public RepeatUntilBlockContext repeatUntilBlock() {
		RepeatUntilBlockContext _localctx = new RepeatUntilBlockContext(Context, State);
		EnterRule(_localctx, 1068, RULE_repeatUntilBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7472;
			Match(REPEAT_SYMBOL);
			State = 7473;
			compoundStatementList();
			State = 7474;
			Match(UNTIL_SYMBOL);
			State = 7475;
			expr(0);
			State = 7476;
			Match(END_SYMBOL);
			State = 7477;
			Match(REPEAT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationContext[] spDeclaration() {
			return GetRuleContexts<SpDeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpDeclarationContext spDeclaration(int i) {
			return GetRuleContext<SpDeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SEMICOLON_SYMBOL() { return GetTokens(MySqlParser.SEMICOLON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SEMICOLON_SYMBOL(int i) {
			return GetToken(MySqlParser.SEMICOLON_SYMBOL, i);
		}
		public SpDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclarations; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpDeclarations(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpDeclarations(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationsContext spDeclarations() {
		SpDeclarationsContext _localctx = new SpDeclarationsContext(Context, State);
		EnterRule(_localctx, 1070, RULE_spDeclarations);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7482;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 7479;
					spDeclaration();
					State = 7480;
					Match(SEMICOLON_SYMBOL);
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 7484;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,888,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableDeclarationContext variableDeclaration() {
			return GetRuleContext<VariableDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionDeclarationContext conditionDeclaration() {
			return GetRuleContext<ConditionDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerDeclarationContext handlerDeclaration() {
			return GetRuleContext<HandlerDeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CursorDeclarationContext cursorDeclaration() {
			return GetRuleContext<CursorDeclarationContext>(0);
		}
		public SpDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public SpDeclarationContext spDeclaration() {
		SpDeclarationContext _localctx = new SpDeclarationContext(Context, State);
		EnterRule(_localctx, 1072, RULE_spDeclaration);
		try {
			State = 7490;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,889,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7486;
				variableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7487;
				conditionDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7488;
				handlerDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7489;
				cursorDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySqlParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public VariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclarationContext variableDeclaration() {
		VariableDeclarationContext _localctx = new VariableDeclarationContext(Context, State);
		EnterRule(_localctx, 1074, RULE_variableDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7492;
			Match(DECLARE_SYMBOL);
			State = 7493;
			identifierList();
			State = 7494;
			dataType();
			State = 7496;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLLATE_SYMBOL) {
				{
				State = 7495;
				collate();
				}
			}

			State = 7500;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 7498;
				Match(DEFAULT_SYMBOL);
				State = 7499;
				expr(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySqlParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySqlParser.CONDITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		public ConditionDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConditionDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConditionDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ConditionDeclarationContext conditionDeclaration() {
		ConditionDeclarationContext _localctx = new ConditionDeclarationContext(Context, State);
		EnterRule(_localctx, 1076, RULE_conditionDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7502;
			Match(DECLARE_SYMBOL);
			State = 7503;
			identifier();
			State = 7504;
			Match(CONDITION_SYMBOL);
			State = 7505;
			Match(FOR_SYMBOL);
			State = 7506;
			spCondition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		public SpConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpCondition(this);
		}
	}

	[RuleVersion(0)]
	public SpConditionContext spCondition() {
		SpConditionContext _localctx = new SpConditionContext(Context, State);
		EnterRule(_localctx, 1078, RULE_spCondition);
		try {
			State = 7510;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7508;
				ulong_number();
				}
				break;
			case SQLSTATE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7509;
				sqlstate();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SqlstateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLSTATE_SYMBOL() { return GetToken(MySqlParser.SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		public SqlstateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sqlstate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSqlstate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSqlstate(this);
		}
	}

	[RuleVersion(0)]
	public SqlstateContext sqlstate() {
		SqlstateContext _localctx = new SqlstateContext(Context, State);
		EnterRule(_localctx, 1080, RULE_sqlstate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7512;
			Match(SQLSTATE_SYMBOL);
			State = 7514;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,893,Context) ) {
			case 1:
				{
				State = 7513;
				Match(VALUE_SYMBOL);
				}
				break;
			}
			State = 7516;
			textLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySqlParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySqlParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionContext[] handlerCondition() {
			return GetRuleContexts<HandlerConditionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public HandlerConditionContext handlerCondition(int i) {
			return GetRuleContext<HandlerConditionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundStatementContext compoundStatement() {
			return GetRuleContext<CompoundStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTINUE_SYMBOL() { return GetToken(MySqlParser.CONTINUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXIT_SYMBOL() { return GetToken(MySqlParser.EXIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_SYMBOL() { return GetToken(MySqlParser.UNDO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public HandlerDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public HandlerDeclarationContext handlerDeclaration() {
		HandlerDeclarationContext _localctx = new HandlerDeclarationContext(Context, State);
		EnterRule(_localctx, 1082, RULE_handlerDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7518;
			Match(DECLARE_SYMBOL);
			State = 7519;
			_la = TokenStream.LA(1);
			if ( !(_la==CONTINUE_SYMBOL || _la==EXIT_SYMBOL || _la==UNDO_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7520;
			Match(HANDLER_SYMBOL);
			State = 7521;
			Match(FOR_SYMBOL);
			State = 7522;
			handlerCondition();
			State = 7527;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,894,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 7523;
					Match(COMMA_SYMBOL);
					State = 7524;
					handlerCondition();
					}
					}
				}
				State = 7529;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,894,Context);
			}
			State = 7530;
			compoundStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class HandlerConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SpConditionContext spCondition() {
			return GetRuleContext<SpConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLWARNING_SYMBOL() { return GetToken(MySqlParser.SQLWARNING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySqlParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQLEXCEPTION_SYMBOL() { return GetToken(MySqlParser.SQLEXCEPTION_SYMBOL, 0); }
		public HandlerConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_handlerCondition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterHandlerCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitHandlerCondition(this);
		}
	}

	[RuleVersion(0)]
	public HandlerConditionContext handlerCondition() {
		HandlerConditionContext _localctx = new HandlerConditionContext(Context, State);
		EnterRule(_localctx, 1084, RULE_handlerCondition);
		try {
			State = 7539;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,895,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7532;
				spCondition();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7533;
				identifier();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7534;
				Match(SQLWARNING_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7535;
				notRule();
				State = 7536;
				Match(FOUND_SYMBOL);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7538;
				Match(SQLEXCEPTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorDeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECLARE_SYMBOL() { return GetToken(MySqlParser.DECLARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_SYMBOL() { return GetToken(MySqlParser.CURSOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR_SYMBOL() { return GetToken(MySqlParser.FOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SelectStatementContext selectStatement() {
			return GetRuleContext<SelectStatementContext>(0);
		}
		public CursorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorDeclaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCursorDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCursorDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public CursorDeclarationContext cursorDeclaration() {
		CursorDeclarationContext _localctx = new CursorDeclarationContext(Context, State);
		EnterRule(_localctx, 1086, RULE_cursorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7541;
			Match(DECLARE_SYMBOL);
			State = 7542;
			identifier();
			State = 7543;
			Match(CURSOR_SYMBOL);
			State = 7544;
			Match(FOR_SYMBOL);
			State = 7545;
			selectStatement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IterateStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ITERATE_SYMBOL() { return GetToken(MySqlParser.ITERATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public IterateStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iterateStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIterateStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIterateStatement(this);
		}
	}

	[RuleVersion(0)]
	public IterateStatementContext iterateStatement() {
		IterateStatementContext _localctx = new IterateStatementContext(Context, State);
		EnterRule(_localctx, 1088, RULE_iterateStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7547;
			Match(ITERATE_SYMBOL);
			State = 7548;
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LeaveStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVE_SYMBOL() { return GetToken(MySqlParser.LEAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LabelRefContext labelRef() {
			return GetRuleContext<LabelRefContext>(0);
		}
		public LeaveStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_leaveStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLeaveStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLeaveStatement(this);
		}
	}

	[RuleVersion(0)]
	public LeaveStatementContext leaveStatement() {
		LeaveStatementContext _localctx = new LeaveStatementContext(Context, State);
		EnterRule(_localctx, 1090, RULE_leaveStatement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7550;
			Match(LEAVE_SYMBOL);
			State = 7551;
			labelRef();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GetDiagnosticsStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_SYMBOL() { return GetToken(MySqlParser.GET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySqlParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementInformationItemContext[] statementInformationItem() {
			return GetRuleContexts<StatementInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementInformationItemContext statementInformationItem(int i) {
			return GetRuleContext<StatementInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONDITION_SYMBOL() { return GetToken(MySqlParser.CONDITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionInformationItemContext[] conditionInformationItem() {
			return GetRuleContexts<ConditionInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConditionInformationItemContext conditionInformationItem(int i) {
			return GetRuleContext<ConditionInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySqlParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public GetDiagnosticsStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_getDiagnosticsStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGetDiagnosticsStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGetDiagnosticsStatement(this);
		}
	}

	[RuleVersion(0)]
	public GetDiagnosticsStatementContext getDiagnosticsStatement() {
		GetDiagnosticsStatementContext _localctx = new GetDiagnosticsStatementContext(Context, State);
		EnterRule(_localctx, 1092, RULE_getDiagnosticsStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7553;
			Match(GET_SYMBOL);
			State = 7555;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CURRENT_SYMBOL || _la==STACKED_SYMBOL) {
				{
				State = 7554;
				_la = TokenStream.LA(1);
				if ( !(_la==CURRENT_SYMBOL || _la==STACKED_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 7557;
			Match(DIAGNOSTICS_SYMBOL);
			State = 7576;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,899,Context) ) {
			case 1:
				{
				State = 7558;
				statementInformationItem();
				State = 7563;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7559;
					Match(COMMA_SYMBOL);
					State = 7560;
					statementInformationItem();
					}
					}
					State = 7565;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case 2:
				{
				State = 7566;
				Match(CONDITION_SYMBOL);
				State = 7567;
				signalAllowedExpr();
				State = 7568;
				conditionInformationItem();
				State = 7573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7569;
					Match(COMMA_SYMBOL);
					State = 7570;
					conditionInformationItem();
					}
					}
					State = 7575;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalAllowedExprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RvalueSystemOrUserVariableContext rvalueSystemOrUserVariable() {
			return GetRuleContext<RvalueSystemOrUserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public SignalAllowedExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalAllowedExpr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalAllowedExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalAllowedExpr(this);
		}
	}

	[RuleVersion(0)]
	public SignalAllowedExprContext signalAllowedExpr() {
		SignalAllowedExprContext _localctx = new SignalAllowedExprContext(Context, State);
		EnterRule(_localctx, 1094, RULE_signalAllowedExpr);
		try {
			State = 7581;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,900,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7578;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7579;
				rvalueSystemOrUserVariable();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7580;
				qualifiedIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySqlParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySqlParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public StatementInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statementInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStatementInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStatementInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public StatementInformationItemContext statementInformationItem() {
		StatementInformationItemContext _localctx = new StatementInformationItemContext(Context, State);
		EnterRule(_localctx, 1096, RULE_statementInformationItem);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7585;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,901,Context) ) {
			case 1:
				{
				State = 7583;
				userVariable();
				}
				break;
			case 2:
				{
				State = 7584;
				identifier();
				}
				break;
			}
			State = 7587;
			Match(EQUAL_OPERATOR);
			State = 7588;
			_la = TokenStream.LA(1);
			if ( !(_la==NUMBER_SYMBOL || _la==ROW_COUNT_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySqlParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		public ConditionInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_conditionInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConditionInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConditionInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public ConditionInformationItemContext conditionInformationItem() {
		ConditionInformationItemContext _localctx = new ConditionInformationItemContext(Context, State);
		EnterRule(_localctx, 1098, RULE_conditionInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7592;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,902,Context) ) {
			case 1:
				{
				State = 7590;
				userVariable();
				}
				break;
			case 2:
				{
				State = 7591;
				identifier();
				}
				break;
			}
			State = 7594;
			Match(EQUAL_OPERATOR);
			State = 7597;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CATALOG_NAME_SYMBOL:
			case CLASS_ORIGIN_SYMBOL:
			case COLUMN_NAME_SYMBOL:
			case CONSTRAINT_CATALOG_SYMBOL:
			case CONSTRAINT_NAME_SYMBOL:
			case CONSTRAINT_SCHEMA_SYMBOL:
			case CURSOR_NAME_SYMBOL:
			case MESSAGE_TEXT_SYMBOL:
			case MYSQL_ERRNO_SYMBOL:
			case SCHEMA_NAME_SYMBOL:
			case SUBCLASS_ORIGIN_SYMBOL:
			case TABLE_NAME_SYMBOL:
				{
				State = 7595;
				signalInformationItemName();
				}
				break;
			case RETURNED_SQLSTATE_SYMBOL:
				{
				State = 7596;
				Match(RETURNED_SQLSTATE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySqlParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySqlParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySqlParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySqlParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySqlParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySqlParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySqlParser.MYSQL_ERRNO_SYMBOL, 0); }
		public SignalInformationItemNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItemName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItemName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItemName(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemNameContext signalInformationItemName() {
		SignalInformationItemNameContext _localctx = new SignalInformationItemNameContext(Context, State);
		EnterRule(_localctx, 1100, RULE_signalInformationItemName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7599;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 98)) & ~0x3f) == 0 && ((1L << (_la - 98)) & 2251859943752705L) != 0) || _la==MESSAGE_TEXT_SYMBOL || _la==MYSQL_ERRNO_SYMBOL || _la==SCHEMA_NAME_SYMBOL || _la==SUBCLASS_ORIGIN_SYMBOL || _la==TABLE_NAME_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNAL_SYMBOL() { return GetToken(MySqlParser.SIGNAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public SignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalStatement(this);
		}
	}

	[RuleVersion(0)]
	public SignalStatementContext signalStatement() {
		SignalStatementContext _localctx = new SignalStatementContext(Context, State);
		EnterRule(_localctx, 1102, RULE_signalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7601;
			Match(SIGNAL_SYMBOL);
			State = 7604;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,904,Context) ) {
			case 1:
				{
				State = 7602;
				identifier();
				}
				break;
			case 2:
				{
				State = 7603;
				sqlstate();
				}
				break;
			}
			State = 7615;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 7606;
				Match(SET_SYMBOL);
				State = 7607;
				signalInformationItem();
				State = 7612;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7608;
					Match(COMMA_SYMBOL);
					State = 7609;
					signalInformationItem();
					}
					}
					State = 7614;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResignalStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESIGNAL_SYMBOL() { return GetToken(MySqlParser.RESIGNAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SqlstateContext sqlstate() {
			return GetRuleContext<SqlstateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext[] signalInformationItem() {
			return GetRuleContexts<SignalInformationItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemContext signalInformationItem(int i) {
			return GetRuleContext<SignalInformationItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ResignalStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resignalStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResignalStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResignalStatement(this);
		}
	}

	[RuleVersion(0)]
	public ResignalStatementContext resignalStatement() {
		ResignalStatementContext _localctx = new ResignalStatementContext(Context, State);
		EnterRule(_localctx, 1104, RULE_resignalStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7617;
			Match(RESIGNAL_SYMBOL);
			State = 7620;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,907,Context) ) {
			case 1:
				{
				State = 7618;
				identifier();
				}
				break;
			case 2:
				{
				State = 7619;
				sqlstate();
				}
				break;
			}
			State = 7631;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SET_SYMBOL) {
				{
				State = 7622;
				Match(SET_SYMBOL);
				State = 7623;
				signalInformationItem();
				State = 7628;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 7624;
					Match(COMMA_SYMBOL);
					State = 7625;
					signalInformationItem();
					}
					}
					State = 7630;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignalInformationItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignalInformationItemNameContext signalInformationItemName() {
			return GetRuleContext<SignalInformationItemNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SignalAllowedExprContext signalAllowedExpr() {
			return GetRuleContext<SignalAllowedExprContext>(0);
		}
		public SignalInformationItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signalInformationItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignalInformationItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignalInformationItem(this);
		}
	}

	[RuleVersion(0)]
	public SignalInformationItemContext signalInformationItem() {
		SignalInformationItemContext _localctx = new SignalInformationItemContext(Context, State);
		EnterRule(_localctx, 1106, RULE_signalInformationItem);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7633;
			signalInformationItemName();
			State = 7634;
			Match(EQUAL_OPERATOR);
			State = 7635;
			signalAllowedExpr();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorOpenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorOpenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorOpen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCursorOpen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCursorOpen(this);
		}
	}

	[RuleVersion(0)]
	public CursorOpenContext cursorOpen() {
		CursorOpenContext _localctx = new CursorOpenContext(Context, State);
		EnterRule(_localctx, 1108, RULE_cursorOpen);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7637;
			Match(OPEN_SYMBOL);
			State = 7638;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorCloseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySqlParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public CursorCloseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorClose; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCursorClose(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCursorClose(this);
		}
	}

	[RuleVersion(0)]
	public CursorCloseContext cursorClose() {
		CursorCloseContext _localctx = new CursorCloseContext(Context, State);
		EnterRule(_localctx, 1110, RULE_cursorClose);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7640;
			Match(CLOSE_SYMBOL);
			State = 7641;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CursorFetchContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FETCH_SYMBOL() { return GetToken(MySqlParser.FETCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INTO_SYMBOL() { return GetToken(MySqlParser.INTO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FROM_SYMBOL() { return GetToken(MySqlParser.FROM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySqlParser.NEXT_SYMBOL, 0); }
		public CursorFetchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_cursorFetch; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCursorFetch(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCursorFetch(this);
		}
	}

	[RuleVersion(0)]
	public CursorFetchContext cursorFetch() {
		CursorFetchContext _localctx = new CursorFetchContext(Context, State);
		EnterRule(_localctx, 1112, RULE_cursorFetch);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7643;
			Match(FETCH_SYMBOL);
			State = 7648;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,911,Context) ) {
			case 1:
				{
				State = 7645;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NEXT_SYMBOL) {
					{
					State = 7644;
					Match(NEXT_SYMBOL);
					}
				}

				State = 7647;
				Match(FROM_SYMBOL);
				}
				break;
			}
			State = 7650;
			identifier();
			State = 7651;
			Match(INTO_SYMBOL);
			State = 7652;
			identifierList();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScheduleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySqlParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySqlParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IntervalContext interval() {
			return GetRuleContext<IntervalContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySqlParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySqlParser.ENDS_SYMBOL, 0); }
		public ScheduleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schedule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSchedule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSchedule(this);
		}
	}

	[RuleVersion(0)]
	public ScheduleContext schedule() {
		ScheduleContext _localctx = new ScheduleContext(Context, State);
		EnterRule(_localctx, 1114, RULE_schedule);
		int _la;
		try {
			State = 7667;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7654;
				Match(AT_SYMBOL);
				State = 7655;
				expr(0);
				}
				break;
			case EVERY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7656;
				Match(EVERY_SYMBOL);
				State = 7657;
				expr(0);
				State = 7658;
				interval();
				State = 7661;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STARTS_SYMBOL) {
					{
					State = 7659;
					Match(STARTS_SYMBOL);
					State = 7660;
					expr(0);
					}
				}

				State = 7665;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ENDS_SYMBOL) {
					{
					State = 7663;
					Match(ENDS_SYMBOL);
					State = 7664;
					expr(0);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnNameContext columnName() {
			return GetRuleContext<ColumnNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldDefinitionContext fieldDefinition() {
			return GetRuleContext<FieldDefinitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckOrReferencesContext checkOrReferences() {
			return GetRuleContext<CheckOrReferencesContext>(0);
		}
		public ColumnDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnDefinition(this);
		}
	}

	[RuleVersion(0)]
	public ColumnDefinitionContext columnDefinition() {
		ColumnDefinitionContext _localctx = new ColumnDefinitionContext(Context, State);
		EnterRule(_localctx, 1116, RULE_columnDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7669;
			columnName();
			State = 7670;
			fieldDefinition();
			State = 7672;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,915,Context) ) {
			case 1:
				{
				State = 7671;
				checkOrReferences();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckOrReferencesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		public CheckOrReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkOrReferences; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckOrReferences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckOrReferences(this);
		}
	}

	[RuleVersion(0)]
	public CheckOrReferencesContext checkOrReferences() {
		CheckOrReferencesContext _localctx = new CheckOrReferencesContext(Context, State);
		EnterRule(_localctx, 1118, RULE_checkOrReferences);
		try {
			State = 7677;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,916,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7674;
				if (!(this.ServerVersion < 80016)) throw new FailedPredicateException(this, "this.ServerVersion < 80016");
				State = 7675;
				checkConstraint();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7676;
				references();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckConstraintContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECK_SYMBOL() { return GetToken(MySqlParser.CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		public CheckConstraintContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_checkConstraint; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCheckConstraint(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCheckConstraint(this);
		}
	}

	[RuleVersion(0)]
	public CheckConstraintContext checkConstraint() {
		CheckConstraintContext _localctx = new CheckConstraintContext(Context, State);
		EnterRule(_localctx, 1120, RULE_checkConstraint);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7679;
			Match(CHECK_SYMBOL);
			State = 7680;
			exprWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintEnforcementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySqlParser.ENFORCED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		public ConstraintEnforcementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintEnforcement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintEnforcement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintEnforcement(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintEnforcementContext constraintEnforcement() {
		ConstraintEnforcementContext _localctx = new ConstraintEnforcementContext(Context, State);
		EnterRule(_localctx, 1122, RULE_constraintEnforcement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7682;
			if (!( this.ServerVersion >= 80017)) throw new FailedPredicateException(this, " this.ServerVersion >= 80017");
			State = 7684;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==NOT_SYMBOL) {
				{
				State = 7683;
				Match(NOT_SYMBOL);
				}
			}

			State = 7686;
			Match(ENFORCED_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableConstraintDefContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public KeyListWithExpressionContext keyListWithExpression() {
			return GetRuleContext<KeyListWithExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameAndTypeContext indexNameAndType() {
			return GetRuleContext<IndexNameAndTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext[] indexOption() {
			return GetRuleContexts<IndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexOptionContext indexOption(int i) {
			return GetRuleContext<IndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULLTEXT_SYMBOL() { return GetToken(MySqlParser.FULLTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyOrIndexContext keyOrIndex() {
			return GetRuleContext<KeyOrIndexContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexNameContext indexName() {
			return GetRuleContext<IndexNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext[] fulltextIndexOption() {
			return GetRuleContexts<FulltextIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FulltextIndexOptionContext fulltextIndexOption(int i) {
			return GetRuleContext<FulltextIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPATIAL_SYMBOL() { return GetToken(MySqlParser.SPATIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext[] spatialIndexOption() {
			return GetRuleContexts<SpatialIndexOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SpatialIndexOptionContext spatialIndexOption(int i) {
			return GetRuleContext<SpatialIndexOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyListContext keyList() {
			return GetRuleContext<KeyListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReferencesContext references() {
			return GetRuleContext<ReferencesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOREIGN_SYMBOL() { return GetToken(MySqlParser.FOREIGN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		public TableConstraintDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableConstraintDef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableConstraintDef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableConstraintDef(this);
		}
	}

	[RuleVersion(0)]
	public TableConstraintDefContext tableConstraintDef() {
		TableConstraintDefContext _localctx = new TableConstraintDefContext(Context, State);
		EnterRule(_localctx, 1124, RULE_tableConstraintDef);
		int _la;
		try {
			int _alt;
			State = 7762;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INDEX_SYMBOL:
			case KEY_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7688;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INDEX_SYMBOL || _la==KEY_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 7690;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,918,Context) ) {
				case 1:
					{
					State = 7689;
					indexNameAndType();
					}
					break;
				}
				State = 7692;
				keyListWithExpression();
				State = 7696;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,919,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7693;
						indexOption();
						}
						}
					}
					State = 7698;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,919,Context);
				}
				}
				break;
			case FULLTEXT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7699;
				_localctx.type = Match(FULLTEXT_SYMBOL);
				State = 7701;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,920,Context) ) {
				case 1:
					{
					State = 7700;
					keyOrIndex();
					}
					break;
				}
				State = 7704;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,921,Context) ) {
				case 1:
					{
					State = 7703;
					indexName();
					}
					break;
				}
				State = 7706;
				keyListWithExpression();
				State = 7710;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,922,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7707;
						fulltextIndexOption();
						}
						}
					}
					State = 7712;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,922,Context);
				}
				}
				break;
			case SPATIAL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7713;
				_localctx.type = Match(SPATIAL_SYMBOL);
				State = 7715;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,923,Context) ) {
				case 1:
					{
					State = 7714;
					keyOrIndex();
					}
					break;
				}
				State = 7718;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,924,Context) ) {
				case 1:
					{
					State = 7717;
					indexName();
					}
					break;
				}
				State = 7720;
				keyListWithExpression();
				State = 7724;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,925,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7721;
						spatialIndexOption();
						}
						}
					}
					State = 7726;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,925,Context);
				}
				}
				break;
			case CHECK_SYMBOL:
			case CONSTRAINT_SYMBOL:
			case FOREIGN_SYMBOL:
			case PRIMARY_SYMBOL:
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7728;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 7727;
					constraintName();
					}
				}

				State = 7760;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case PRIMARY_SYMBOL:
				case UNIQUE_SYMBOL:
					{
					State = 7736;
					ErrorHandler.Sync(this);
					switch (TokenStream.LA(1)) {
					case PRIMARY_SYMBOL:
						{
						State = 7730;
						_localctx.type = Match(PRIMARY_SYMBOL);
						State = 7731;
						Match(KEY_SYMBOL);
						}
						break;
					case UNIQUE_SYMBOL:
						{
						State = 7732;
						_localctx.type = Match(UNIQUE_SYMBOL);
						State = 7734;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,927,Context) ) {
						case 1:
							{
							State = 7733;
							keyOrIndex();
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 7739;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,929,Context) ) {
					case 1:
						{
						State = 7738;
						indexNameAndType();
						}
						break;
					}
					State = 7741;
					keyListWithExpression();
					State = 7745;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,930,Context);
					while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							State = 7742;
							indexOption();
							}
							}
						}
						State = 7747;
						ErrorHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(TokenStream,930,Context);
					}
					}
					break;
				case FOREIGN_SYMBOL:
					{
					State = 7748;
					_localctx.type = Match(FOREIGN_SYMBOL);
					State = 7749;
					Match(KEY_SYMBOL);
					State = 7751;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,931,Context) ) {
					case 1:
						{
						State = 7750;
						indexName();
						}
						break;
					}
					State = 7753;
					keyList();
					State = 7754;
					references();
					}
					break;
				case CHECK_SYMBOL:
					{
					State = 7756;
					checkConstraint();
					State = 7758;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,932,Context) ) {
					case 1:
						{
						State = 7757;
						constraintEnforcement();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstraintNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ConstraintNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constraintName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterConstraintName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitConstraintName(this);
		}
	}

	[RuleVersion(0)]
	public ConstraintNameContext constraintName() {
		ConstraintNameContext _localctx = new ConstraintNameContext(Context, State);
		EnterRule(_localctx, 1126, RULE_constraintName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7764;
			Match(CONSTRAINT_SYMBOL);
			State = 7766;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,935,Context) ) {
			case 1:
				{
				State = 7765;
				identifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAttributeContext[] columnAttribute() {
			return GetRuleContexts<ColumnAttributeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnAttributeContext columnAttribute(int i) {
			return GetRuleContext<ColumnAttributeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATED_SYMBOL() { return GetToken(MySqlParser.GENERATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySqlParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIRTUAL_SYMBOL() { return GetToken(MySqlParser.VIRTUAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORED_SYMBOL() { return GetToken(MySqlParser.STORED_SYMBOL, 0); }
		public FieldDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldDefinition(this);
		}
	}

	[RuleVersion(0)]
	public FieldDefinitionContext fieldDefinition() {
		FieldDefinitionContext _localctx = new FieldDefinitionContext(Context, State);
		EnterRule(_localctx, 1128, RULE_fieldDefinition);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 7768;
			dataType();
			State = 7793;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,941,Context) ) {
			case 1:
				{
				State = 7772;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,936,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7769;
						columnAttribute();
						}
						}
					}
					State = 7774;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,936,Context);
				}
				}
				break;
			case 2:
				{
				State = 7776;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLLATE_SYMBOL) {
					{
					State = 7775;
					collate();
					}
				}

				State = 7780;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==GENERATED_SYMBOL) {
					{
					State = 7778;
					Match(GENERATED_SYMBOL);
					State = 7779;
					Match(ALWAYS_SYMBOL);
					}
				}

				State = 7782;
				Match(AS_SYMBOL);
				State = 7783;
				exprWithParentheses();
				State = 7785;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,939,Context) ) {
				case 1:
					{
					State = 7784;
					_la = TokenStream.LA(1);
					if ( !(_la==STORED_SYMBOL || _la==VIRTUAL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					break;
				}
				State = 7790;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,940,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 7787;
						columnAttribute();
						}
						}
					}
					State = 7792;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,940,Context);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnAttributeContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOT_SYMBOL() { return GetToken(MySqlParser.NOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySqlParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NowOrSignedLiteralContext nowOrSignedLiteral() {
			return GetRuleContext<NowOrSignedLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW_SYMBOL() { return GetToken(MySqlParser.NOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL() { return GetToken(MySqlParser.ON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TimeFunctionParametersContext timeFunctionParameters() {
			return GetRuleContext<TimeFunctionParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySqlParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySqlParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnFormatContext columnFormat() {
			return GetRuleContext<ColumnFormatContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySqlParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StorageMediaContext storageMedia() {
			return GetRuleContext<StorageMediaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySqlParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CheckConstraintContext checkConstraint() {
			return GetRuleContext<CheckConstraintContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintNameContext constraintName() {
			return GetRuleContext<ConstraintNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstraintEnforcementContext constraintEnforcement() {
			return GetRuleContext<ConstraintEnforcementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public JsonAttributeContext jsonAttribute() {
			return GetRuleContext<JsonAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		public ColumnAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnAttribute(this);
		}
	}

	[RuleVersion(0)]
	public ColumnAttributeContext columnAttribute() {
		ColumnAttributeContext _localctx = new ColumnAttributeContext(Context, State);
		EnterRule(_localctx, 1130, RULE_columnAttribute);
		int _la;
		try {
			State = 7856;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,950,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7796;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT_SYMBOL) {
					{
					State = 7795;
					Match(NOT_SYMBOL);
					}
				}

				State = 7798;
				nullLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7799;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 7800;
				Match(NOT_SYMBOL);
				State = 7801;
				Match(SECONDARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7802;
				_localctx.value = Match(DEFAULT_SYMBOL);
				State = 7806;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,943,Context) ) {
				case 1:
					{
					State = 7803;
					nowOrSignedLiteral();
					}
					break;
				case 2:
					{
					State = 7804;
					if (!(this.ServerVersion >= 80013)) throw new FailedPredicateException(this, "this.ServerVersion >= 80013");
					State = 7805;
					exprWithParentheses();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7808;
				_localctx.value = Match(ON_SYMBOL);
				State = 7809;
				Match(UPDATE_SYMBOL);
				State = 7810;
				Match(NOW_SYMBOL);
				State = 7812;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,944,Context) ) {
				case 1:
					{
					State = 7811;
					timeFunctionParameters();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7814;
				_localctx.value = Match(AUTO_INCREMENT_SYMBOL);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 7815;
				_localctx.value = Match(SERIAL_SYMBOL);
				State = 7816;
				Match(DEFAULT_SYMBOL);
				State = 7817;
				Match(VALUE_SYMBOL);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 7819;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 7818;
					Match(PRIMARY_SYMBOL);
					}
				}

				State = 7821;
				_localctx.value = Match(KEY_SYMBOL);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 7822;
				_localctx.value = Match(UNIQUE_SYMBOL);
				State = 7824;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,946,Context) ) {
				case 1:
					{
					State = 7823;
					Match(KEY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 7826;
				_localctx.value = Match(COMMENT_SYMBOL);
				State = 7827;
				textLiteral();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 7828;
				collate();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 7829;
				_localctx.value = Match(COLUMN_FORMAT_SYMBOL);
				State = 7830;
				columnFormat();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 7831;
				_localctx.value = Match(STORAGE_SYMBOL);
				State = 7832;
				storageMedia();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 7833;
				_localctx.value = Match(SRID_SYMBOL);
				State = 7834;
				real_ulonglong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 7835;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 7837;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==CONSTRAINT_SYMBOL) {
					{
					State = 7836;
					constraintName();
					}
				}

				State = 7839;
				checkConstraint();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 7840;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 7841;
				constraintEnforcement();
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 7842;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 7843;
				_localctx.value = Match(ENGINE_ATTRIBUTE_SYMBOL);
				State = 7845;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,948,Context) ) {
				case 1:
					{
					State = 7844;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7847;
				jsonAttribute();
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 7848;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 7849;
				_localctx.value = Match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				State = 7851;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,949,Context) ) {
				case 1:
					{
					State = 7850;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7853;
				jsonAttribute();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 7854;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 7855;
				visibility();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnFormatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySqlParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public ColumnFormatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnFormat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnFormat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnFormat(this);
		}
	}

	[RuleVersion(0)]
	public ColumnFormatContext columnFormat() {
		ColumnFormatContext _localctx = new ColumnFormatContext(Context, State);
		EnterRule(_localctx, 1132, RULE_columnFormat);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7858;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 167)) & ~0x3f) == 0 && ((1L << (_la - 167)) & 1152921504611041281L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StorageMediaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySqlParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public StorageMediaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_storageMedia; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStorageMedia(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStorageMedia(this);
		}
	}

	[RuleVersion(0)]
	public StorageMediaContext storageMedia() {
		StorageMediaContext _localctx = new StorageMediaContext(Context, State);
		EnterRule(_localctx, 1134, RULE_storageMedia);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7860;
			_la = TokenStream.LA(1);
			if ( !(_la==DEFAULT_SYMBOL || _la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NowContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOW_SYMBOL() { return GetToken(MySqlParser.NOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FunctionDatetimePrecisionContext functionDatetimePrecision() {
			return GetRuleContext<FunctionDatetimePrecisionContext>(0);
		}
		public NowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_now; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNow(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNow(this);
		}
	}

	[RuleVersion(0)]
	public NowContext now() {
		NowContext _localctx = new NowContext(Context, State);
		EnterRule(_localctx, 1136, RULE_now);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7862;
			Match(NOW_SYMBOL);
			State = 7863;
			functionDatetimePrecision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NowOrSignedLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NowContext now() {
			return GetRuleContext<NowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SignedLiteralOrNullContext signedLiteralOrNull() {
			return GetRuleContext<SignedLiteralOrNullContext>(0);
		}
		public NowOrSignedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nowOrSignedLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNowOrSignedLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNowOrSignedLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NowOrSignedLiteralContext nowOrSignedLiteral() {
		NowOrSignedLiteralContext _localctx = new NowOrSignedLiteralContext(Context, State);
		EnterRule(_localctx, 1138, RULE_nowOrSignedLiteral);
		try {
			State = 7867;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,951,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7865;
				now();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7866;
				signedLiteralOrNull();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GcolAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNIQUE_SYMBOL() { return GetToken(MySqlParser.UNIQUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIMARY_SYMBOL() { return GetToken(MySqlParser.PRIMARY_SYMBOL, 0); }
		public GcolAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_gcolAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterGcolAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitGcolAttribute(this);
		}
	}

	[RuleVersion(0)]
	public GcolAttributeContext gcolAttribute() {
		GcolAttributeContext _localctx = new GcolAttributeContext(Context, State);
		EnterRule(_localctx, 1140, RULE_gcolAttribute);
		int _la;
		try {
			State = 7883;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNIQUE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7869;
				Match(UNIQUE_SYMBOL);
				State = 7871;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==KEY_SYMBOL) {
					{
					State = 7870;
					Match(KEY_SYMBOL);
					}
				}

				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7873;
				Match(COMMENT_SYMBOL);
				State = 7874;
				textString();
				}
				break;
			case NOT2_SYMBOL:
			case NOT_SYMBOL:
			case NULL_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7876;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==NOT2_SYMBOL || _la==NOT_SYMBOL) {
					{
					State = 7875;
					notRule();
					}
				}

				State = 7878;
				Match(NULL_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
			case PRIMARY_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7880;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==PRIMARY_SYMBOL) {
					{
					State = 7879;
					Match(PRIMARY_SYMBOL);
					}
				}

				State = 7882;
				Match(KEY_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReferencesContext : ParserRuleContext {
		public IToken match;
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCES_SYMBOL() { return GetToken(MySqlParser.REFERENCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef() {
			return GetRuleContext<TableRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MATCH_SYMBOL() { return GetToken(MySqlParser.MATCH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ON_SYMBOL() { return GetTokens(MySqlParser.ON_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ON_SYMBOL(int i) {
			return GetToken(MySqlParser.ON_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteOptionContext[] deleteOption() {
			return GetRuleContexts<DeleteOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteOptionContext deleteOption(int i) {
			return GetRuleContext<DeleteOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPDATE_SYMBOL() { return GetToken(MySqlParser.UPDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELETE_SYMBOL() { return GetToken(MySqlParser.DELETE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySqlParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySqlParser.SIMPLE_SYMBOL, 0); }
		public ReferencesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_references; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReferences(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReferences(this);
		}
	}

	[RuleVersion(0)]
	public ReferencesContext references() {
		ReferencesContext _localctx = new ReferencesContext(Context, State);
		EnterRule(_localctx, 1142, RULE_references);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7885;
			Match(REFERENCES_SYMBOL);
			State = 7886;
			tableRef();
			State = 7888;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7887;
				identifierListWithParentheses();
				}
			}

			State = 7892;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MATCH_SYMBOL) {
				{
				State = 7890;
				Match(MATCH_SYMBOL);
				State = 7891;
				_localctx.match = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FULL_SYMBOL || _la==PARTIAL_SYMBOL || _la==SIMPLE_SYMBOL) ) {
					_localctx.match = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
			}

			State = 7910;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,960,Context) ) {
			case 1:
				{
				State = 7894;
				Match(ON_SYMBOL);
				State = 7895;
				_localctx.option = Match(UPDATE_SYMBOL);
				State = 7896;
				deleteOption();
				State = 7900;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 7897;
					Match(ON_SYMBOL);
					State = 7898;
					Match(DELETE_SYMBOL);
					State = 7899;
					deleteOption();
					}
				}

				}
				break;
			case 2:
				{
				State = 7902;
				Match(ON_SYMBOL);
				State = 7903;
				_localctx.option = Match(DELETE_SYMBOL);
				State = 7904;
				deleteOption();
				State = 7908;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ON_SYMBOL) {
					{
					State = 7905;
					Match(ON_SYMBOL);
					State = 7906;
					Match(UPDATE_SYMBOL);
					State = 7907;
					deleteOption();
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTRICT_SYMBOL() { return GetToken(MySqlParser.RESTRICT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADE_SYMBOL() { return GetToken(MySqlParser.CASCADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySqlParser.ACTION_SYMBOL, 0); }
		public DeleteOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_deleteOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDeleteOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDeleteOption(this);
		}
	}

	[RuleVersion(0)]
	public DeleteOptionContext deleteOption() {
		DeleteOptionContext _localctx = new DeleteOptionContext(Context, State);
		EnterRule(_localctx, 1144, RULE_deleteOption);
		int _la;
		try {
			State = 7919;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,961,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7912;
				_la = TokenStream.LA(1);
				if ( !(_la==CASCADE_SYMBOL || _la==RESTRICT_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7913;
				Match(SET_SYMBOL);
				State = 7914;
				nullLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7915;
				Match(SET_SYMBOL);
				State = 7916;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7917;
				Match(NO_SYMBOL);
				State = 7918;
				Match(ACTION_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext[] keyPart() {
			return GetRuleContexts<KeyPartContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext keyPart(int i) {
			return GetRuleContext<KeyPartContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public KeyListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyList(this);
		}
	}

	[RuleVersion(0)]
	public KeyListContext keyList() {
		KeyListContext _localctx = new KeyListContext(Context, State);
		EnterRule(_localctx, 1146, RULE_keyList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7921;
			Match(OPEN_PAR_SYMBOL);
			State = 7922;
			keyPart();
			State = 7927;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7923;
				Match(COMMA_SYMBOL);
				State = 7924;
				keyPart();
				}
				}
				State = 7929;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7930;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPart; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyPart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyPart(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartContext keyPart() {
		KeyPartContext _localctx = new KeyPartContext(Context, State);
		EnterRule(_localctx, 1148, RULE_keyPart);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7932;
			identifier();
			State = 7934;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 7933;
				fieldLength();
				}
			}

			State = 7937;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
				{
				State = 7936;
				direction();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyListWithExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartOrExpressionContext[] keyPartOrExpression() {
			return GetRuleContexts<KeyPartOrExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartOrExpressionContext keyPartOrExpression(int i) {
			return GetRuleContext<KeyPartOrExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public KeyListWithExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyListWithExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyListWithExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyListWithExpression(this);
		}
	}

	[RuleVersion(0)]
	public KeyListWithExpressionContext keyListWithExpression() {
		KeyListWithExpressionContext _localctx = new KeyListWithExpressionContext(Context, State);
		EnterRule(_localctx, 1150, RULE_keyListWithExpression);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7939;
			Match(OPEN_PAR_SYMBOL);
			State = 7940;
			keyPartOrExpression();
			State = 7945;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 7941;
				Match(COMMA_SYMBOL);
				State = 7942;
				keyPartOrExpression();
				}
				}
				State = 7947;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 7948;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyPartOrExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public KeyPartContext keyPart() {
			return GetRuleContext<KeyPartContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprWithParenthesesContext exprWithParentheses() {
			return GetRuleContext<ExprWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DirectionContext direction() {
			return GetRuleContext<DirectionContext>(0);
		}
		public KeyPartOrExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keyPartOrExpression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterKeyPartOrExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitKeyPartOrExpression(this);
		}
	}

	[RuleVersion(0)]
	public KeyPartOrExpressionContext keyPartOrExpression() {
		KeyPartOrExpressionContext _localctx = new KeyPartOrExpressionContext(Context, State);
		EnterRule(_localctx, 1152, RULE_keyPartOrExpression);
		int _la;
		try {
			State = 7956;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,967,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7950;
				keyPart();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7951;
				if (!(this.ServerVersion >= 80013)) throw new FailedPredicateException(this, "this.ServerVersion >= 80013");
				State = 7952;
				exprWithParentheses();
				State = 7954;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ASC_SYMBOL || _la==DESC_SYMBOL) {
					{
					State = 7953;
					direction();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeContext : ParserRuleContext {
		public IToken algorithm;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySqlParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySqlParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		public IndexTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexType(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeContext indexType() {
		IndexTypeContext _localctx = new IndexTypeContext(Context, State);
		EnterRule(_localctx, 1154, RULE_indexType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7958;
			_localctx.algorithm = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==BTREE_SYMBOL || _la==HASH_SYMBOL || _la==RTREE_SYMBOL) ) {
				_localctx.algorithm = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeClauseContext indexTypeClause() {
			return GetRuleContext<IndexTypeClauseContext>(0);
		}
		public IndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public IndexOptionContext indexOption() {
		IndexOptionContext _localctx = new IndexOptionContext(Context, State);
		EnterRule(_localctx, 1156, RULE_indexOption);
		try {
			State = 7962;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,968,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7960;
				commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7961;
				indexTypeClause();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CommonIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VisibilityContext visibility() {
			return GetRuleContext<VisibilityContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonAttributeContext jsonAttribute() {
			return GetRuleContext<JsonAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		public CommonIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commonIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCommonIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCommonIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public CommonIndexOptionContext commonIndexOption() {
		CommonIndexOptionContext _localctx = new CommonIndexOptionContext(Context, State);
		EnterRule(_localctx, 1158, RULE_commonIndexOption);
		int _la;
		try {
			State = 7984;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,972,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7964;
				Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 7966;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 7965;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 7968;
				ulong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7969;
				Match(COMMENT_SYMBOL);
				State = 7970;
				textLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 7971;
				visibility();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 7972;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 7973;
				Match(ENGINE_ATTRIBUTE_SYMBOL);
				State = 7975;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,970,Context) ) {
				case 1:
					{
					State = 7974;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7977;
				jsonAttribute();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 7978;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 7979;
				Match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				State = 7981;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,971,Context) ) {
				case 1:
					{
					State = 7980;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 7983;
				jsonAttribute();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VisibilityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySqlParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySqlParser.INVISIBLE_SYMBOL, 0); }
		public VisibilityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_visibility; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterVisibility(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitVisibility(this);
		}
	}

	[RuleVersion(0)]
	public VisibilityContext visibility() {
		VisibilityContext _localctx = new VisibilityContext(Context, State);
		EnterRule(_localctx, 1160, RULE_visibility);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7986;
			_la = TokenStream.LA(1);
			if ( !(_la==INVISIBLE_SYMBOL || _la==VISIBLE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexTypeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IndexTypeContext indexType() {
			return GetRuleContext<IndexTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USING_SYMBOL() { return GetToken(MySqlParser.USING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		public IndexTypeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexTypeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexTypeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexTypeClause(this);
		}
	}

	[RuleVersion(0)]
	public IndexTypeClauseContext indexTypeClause() {
		IndexTypeClauseContext _localctx = new IndexTypeClauseContext(Context, State);
		EnterRule(_localctx, 1162, RULE_indexTypeClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7988;
			_la = TokenStream.LA(1);
			if ( !(_la==TYPE_SYMBOL || _la==USING_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 7989;
			indexType();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FulltextIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySqlParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public FulltextIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fulltextIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFulltextIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFulltextIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public FulltextIndexOptionContext fulltextIndexOption() {
		FulltextIndexOptionContext _localctx = new FulltextIndexOptionContext(Context, State);
		EnterRule(_localctx, 1164, RULE_fulltextIndexOption);
		try {
			State = 7995;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,973,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 7991;
				commonIndexOption();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 7992;
				Match(WITH_SYMBOL);
				State = 7993;
				Match(PARSER_SYMBOL);
				State = 7994;
				identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SpatialIndexOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CommonIndexOptionContext commonIndexOption() {
			return GetRuleContext<CommonIndexOptionContext>(0);
		}
		public SpatialIndexOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spatialIndexOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSpatialIndexOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSpatialIndexOption(this);
		}
	}

	[RuleVersion(0)]
	public SpatialIndexOptionContext spatialIndexOption() {
		SpatialIndexOptionContext _localctx = new SpatialIndexOptionContext(Context, State);
		EnterRule(_localctx, 1166, RULE_spatialIndexOption);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7997;
			commonIndexOption();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(MySqlParser.Eof, 0); }
		public DataTypeDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataTypeDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataTypeDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataTypeDefinition(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeDefinitionContext dataTypeDefinition() {
		DataTypeDefinitionContext _localctx = new DataTypeDefinitionContext(Context, State);
		EnterRule(_localctx, 1168, RULE_dataTypeDefinition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 7999;
			dataType();
			State = 8000;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DataTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_SYMBOL() { return GetToken(MySqlParser.INT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYINT_SYMBOL() { return GetToken(MySqlParser.TINYINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SMALLINT_SYMBOL() { return GetToken(MySqlParser.SMALLINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMINT_SYMBOL() { return GetToken(MySqlParser.MEDIUMINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIGINT_SYMBOL() { return GetToken(MySqlParser.BIGINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldOptionsContext fieldOptions() {
			return GetRuleContext<FieldOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySqlParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySqlParser.DOUBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySqlParser.PRECISION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_SYMBOL() { return GetToken(MySqlParser.FLOAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_SYMBOL() { return GetToken(MySqlParser.DECIMAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMERIC_SYMBOL() { return GetToken(MySqlParser.NUMERIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FloatOptionsContext floatOptions() {
			return GetRuleContext<FloatOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySqlParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySqlParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySqlParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetWithOptBinaryContext charsetWithOptBinary() {
			return GetRuleContext<CharsetWithOptBinaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NcharContext nchar() {
			return GetRuleContext<NcharContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARYING_SYMBOL() { return GetToken(MySqlParser.VARYING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARCHAR_SYMBOL() { return GetToken(MySqlParser.VARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySqlParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySqlParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySqlParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARBINARY_SYMBOL() { return GetToken(MySqlParser.VARBINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeDatetimePrecisionContext typeDatetimePrecision() {
			return GetRuleContext<TypeDatetimePrecisionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYBLOB_SYMBOL() { return GetToken(MySqlParser.TINYBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOB_SYMBOL() { return GetToken(MySqlParser.BLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMBLOB_SYMBOL() { return GetToken(MySqlParser.MEDIUMBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGBLOB_SYMBOL() { return GetToken(MySqlParser.LONGBLOB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_SYMBOL() { return GetToken(MySqlParser.LONG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TINYTEXT_SYMBOL() { return GetToken(MySqlParser.TINYTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySqlParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUMTEXT_SYMBOL() { return GetToken(MySqlParser.MEDIUMTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONGTEXT_SYMBOL() { return GetToken(MySqlParser.LONGTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StringListContext stringList() {
			return GetRuleContext<StringListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySqlParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySqlParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySqlParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySqlParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		public DataTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dataType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDataType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDataType(this);
		}
	}

	[RuleVersion(0)]
	public DataTypeContext dataType() {
		DataTypeContext _localctx = new DataTypeContext(Context, State);
		EnterRule(_localctx, 1170, RULE_dataType);
		int _la;
		try {
			State = 8148;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1007,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8002;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BIGINT_SYMBOL || _la==INT_SYMBOL || _la==MEDIUMINT_SYMBOL || _la==SMALLINT_SYMBOL || _la==TINYINT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8004;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,974,Context) ) {
				case 1:
					{
					State = 8003;
					fieldLength();
					}
					break;
				}
				State = 8007;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,975,Context) ) {
				case 1:
					{
					State = 8006;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8014;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case REAL_SYMBOL:
					{
					State = 8009;
					_localctx.type = Match(REAL_SYMBOL);
					}
					break;
				case DOUBLE_SYMBOL:
					{
					State = 8010;
					_localctx.type = Match(DOUBLE_SYMBOL);
					State = 8012;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,976,Context) ) {
					case 1:
						{
						State = 8011;
						Match(PRECISION_SYMBOL);
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8017;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,978,Context) ) {
				case 1:
					{
					State = 8016;
					precision();
					}
					break;
				}
				State = 8020;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,979,Context) ) {
				case 1:
					{
					State = 8019;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8022;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 165)) & ~0x3f) == 0 && ((1L << (_la - 165)) & -4611686018427387903L) != 0) || _la==NUMERIC_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8024;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,980,Context) ) {
				case 1:
					{
					State = 8023;
					floatOptions();
					}
					break;
				}
				State = 8027;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,981,Context) ) {
				case 1:
					{
					State = 8026;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8029;
				_localctx.type = Match(BIT_SYMBOL);
				State = 8031;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,982,Context) ) {
				case 1:
					{
					State = 8030;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8033;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BOOLEAN_SYMBOL || _la==BOOL_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8034;
				_localctx.type = Match(CHAR_SYMBOL);
				State = 8036;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,983,Context) ) {
				case 1:
					{
					State = 8035;
					fieldLength();
					}
					break;
				}
				State = 8039;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,984,Context) ) {
				case 1:
					{
					State = 8038;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8041;
				nchar();
				State = 8043;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,985,Context) ) {
				case 1:
					{
					State = 8042;
					fieldLength();
					}
					break;
				}
				State = 8046;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,986,Context) ) {
				case 1:
					{
					State = 8045;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8048;
				_localctx.type = Match(BINARY_SYMBOL);
				State = 8050;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,987,Context) ) {
				case 1:
					{
					State = 8049;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8055;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CHAR_SYMBOL:
					{
					State = 8052;
					_localctx.type = Match(CHAR_SYMBOL);
					State = 8053;
					Match(VARYING_SYMBOL);
					}
					break;
				case VARCHAR_SYMBOL:
					{
					State = 8054;
					_localctx.type = Match(VARCHAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8057;
				fieldLength();
				State = 8059;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,989,Context) ) {
				case 1:
					{
					State = 8058;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8071;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,990,Context) ) {
				case 1:
					{
					State = 8061;
					_localctx.type = Match(NATIONAL_SYMBOL);
					State = 8062;
					Match(VARCHAR_SYMBOL);
					}
					break;
				case 2:
					{
					State = 8063;
					_localctx.type = Match(NVARCHAR_SYMBOL);
					}
					break;
				case 3:
					{
					State = 8064;
					_localctx.type = Match(NCHAR_SYMBOL);
					State = 8065;
					Match(VARCHAR_SYMBOL);
					}
					break;
				case 4:
					{
					State = 8066;
					_localctx.type = Match(NATIONAL_SYMBOL);
					State = 8067;
					Match(CHAR_SYMBOL);
					State = 8068;
					Match(VARYING_SYMBOL);
					}
					break;
				case 5:
					{
					State = 8069;
					_localctx.type = Match(NCHAR_SYMBOL);
					State = 8070;
					Match(VARYING_SYMBOL);
					}
					break;
				}
				State = 8073;
				fieldLength();
				State = 8075;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,991,Context) ) {
				case 1:
					{
					State = 8074;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8077;
				_localctx.type = Match(VARBINARY_SYMBOL);
				State = 8078;
				fieldLength();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8079;
				_localctx.type = Match(YEAR_SYMBOL);
				State = 8081;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,992,Context) ) {
				case 1:
					{
					State = 8080;
					fieldLength();
					}
					break;
				}
				State = 8084;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,993,Context) ) {
				case 1:
					{
					State = 8083;
					fieldOptions();
					}
					break;
				}
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8086;
				_localctx.type = Match(DATE_SYMBOL);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8087;
				_localctx.type = Match(TIME_SYMBOL);
				State = 8089;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,994,Context) ) {
				case 1:
					{
					State = 8088;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8091;
				_localctx.type = Match(TIMESTAMP_SYMBOL);
				State = 8093;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,995,Context) ) {
				case 1:
					{
					State = 8092;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8095;
				_localctx.type = Match(DATETIME_SYMBOL);
				State = 8097;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,996,Context) ) {
				case 1:
					{
					State = 8096;
					typeDatetimePrecision();
					}
					break;
				}
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8099;
				_localctx.type = Match(TINYBLOB_SYMBOL);
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8100;
				_localctx.type = Match(BLOB_SYMBOL);
				State = 8102;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,997,Context) ) {
				case 1:
					{
					State = 8101;
					fieldLength();
					}
					break;
				}
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8104;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==LONGBLOB_SYMBOL || _la==MEDIUMBLOB_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8105;
				_localctx.type = Match(LONG_SYMBOL);
				State = 8106;
				Match(VARBINARY_SYMBOL);
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8107;
				_localctx.type = Match(LONG_SYMBOL);
				State = 8111;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,998,Context) ) {
				case 1:
					{
					State = 8108;
					Match(CHAR_SYMBOL);
					State = 8109;
					Match(VARYING_SYMBOL);
					}
					break;
				case 2:
					{
					State = 8110;
					Match(VARCHAR_SYMBOL);
					}
					break;
				}
				State = 8114;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,999,Context) ) {
				case 1:
					{
					State = 8113;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8116;
				_localctx.type = Match(TINYTEXT_SYMBOL);
				State = 8118;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1000,Context) ) {
				case 1:
					{
					State = 8117;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 8120;
				_localctx.type = Match(TEXT_SYMBOL);
				State = 8122;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1001,Context) ) {
				case 1:
					{
					State = 8121;
					fieldLength();
					}
					break;
				}
				State = 8125;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1002,Context) ) {
				case 1:
					{
					State = 8124;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 8127;
				_localctx.type = Match(MEDIUMTEXT_SYMBOL);
				State = 8129;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1003,Context) ) {
				case 1:
					{
					State = 8128;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 8131;
				_localctx.type = Match(LONGTEXT_SYMBOL);
				State = 8133;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1004,Context) ) {
				case 1:
					{
					State = 8132;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 8135;
				_localctx.type = Match(ENUM_SYMBOL);
				State = 8136;
				stringList();
				State = 8138;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1005,Context) ) {
				case 1:
					{
					State = 8137;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 8140;
				_localctx.type = Match(SET_SYMBOL);
				State = 8141;
				stringList();
				State = 8143;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1006,Context) ) {
				case 1:
					{
					State = 8142;
					charsetWithOptBinary();
					}
					break;
				}
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 8145;
				_localctx.type = Match(SERIAL_SYMBOL);
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 8146;
				_localctx.type = Match(JSON_SYMBOL);
				}
				break;
			case 30:
				EnterOuterAlt(_localctx, 30);
				{
				State = 8147;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==GEOMETRYCOLLECTION_SYMBOL || _la==GEOMETRY_SYMBOL || _la==LINESTRING_SYMBOL || ((((_la - 375)) & ~0x3f) == 0 && ((1L << (_la - 375)) & 108086391056891911L) != 0)) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NcharContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySqlParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAR_SYMBOL() { return GetToken(MySqlParser.CHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySqlParser.NATIONAL_SYMBOL, 0); }
		public NcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nchar; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNchar(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNchar(this);
		}
	}

	[RuleVersion(0)]
	public NcharContext nchar() {
		NcharContext _localctx = new NcharContext(Context, State);
		EnterRule(_localctx, 1172, RULE_nchar);
		try {
			State = 8153;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NCHAR_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8150;
				_localctx.type = Match(NCHAR_SYMBOL);
				}
				break;
			case NATIONAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8151;
				_localctx.type = Match(NATIONAL_SYMBOL);
				State = 8152;
				Match(CHAR_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RealTypeContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REAL_SYMBOL() { return GetToken(MySqlParser.REAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_SYMBOL() { return GetToken(MySqlParser.DOUBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECISION_SYMBOL() { return GetToken(MySqlParser.PRECISION_SYMBOL, 0); }
		public RealTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_realType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRealType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRealType(this);
		}
	}

	[RuleVersion(0)]
	public RealTypeContext realType() {
		RealTypeContext _localctx = new RealTypeContext(Context, State);
		EnterRule(_localctx, 1174, RULE_realType);
		try {
			State = 8160;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case REAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8155;
				_localctx.type = Match(REAL_SYMBOL);
				}
				break;
			case DOUBLE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8156;
				_localctx.type = Match(DOUBLE_SYMBOL);
				State = 8158;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1009,Context) ) {
				case 1:
					{
					State = 8157;
					Match(PRECISION_SYMBOL);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldLengthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySqlParser.DECIMAL_NUMBER, 0); }
		public FieldLengthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldLength; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldLength(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldLength(this);
		}
	}

	[RuleVersion(0)]
	public FieldLengthContext fieldLength() {
		FieldLengthContext _localctx = new FieldLengthContext(Context, State);
		EnterRule(_localctx, 1176, RULE_fieldLength);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8162;
			Match(OPEN_PAR_SYMBOL);
			State = 8165;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1011,Context) ) {
			case 1:
				{
				State = 8163;
				real_ulonglong_number();
				}
				break;
			case 2:
				{
				State = 8164;
				Match(DECIMAL_NUMBER);
				}
				break;
			}
			State = 8167;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] SIGNED_SYMBOL() { return GetTokens(MySqlParser.SIGNED_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL(int i) {
			return GetToken(MySqlParser.SIGNED_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] UNSIGNED_SYMBOL() { return GetTokens(MySqlParser.UNSIGNED_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNSIGNED_SYMBOL(int i) {
			return GetToken(MySqlParser.UNSIGNED_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ZEROFILL_SYMBOL() { return GetTokens(MySqlParser.ZEROFILL_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZEROFILL_SYMBOL(int i) {
			return GetToken(MySqlParser.ZEROFILL_SYMBOL, i);
		}
		public FieldOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldOptions(this);
		}
	}

	[RuleVersion(0)]
	public FieldOptionsContext fieldOptions() {
		FieldOptionsContext _localctx = new FieldOptionsContext(Context, State);
		EnterRule(_localctx, 1178, RULE_fieldOptions);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8170;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8169;
					_la = TokenStream.LA(1);
					if ( !(_la==SIGNED_SYMBOL || _la==UNSIGNED_SYMBOL || _la==ZEROFILL_SYMBOL) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8172;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1012,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetWithOptBinaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AsciiContext ascii() {
			return GetRuleContext<AsciiContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnicodeContext unicode() {
			return GetRuleContext<UnicodeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySqlParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		public CharsetWithOptBinaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetWithOptBinary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetWithOptBinary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetWithOptBinary(this);
		}
	}

	[RuleVersion(0)]
	public CharsetWithOptBinaryContext charsetWithOptBinary() {
		CharsetWithOptBinaryContext _localctx = new CharsetWithOptBinaryContext(Context, State);
		EnterRule(_localctx, 1180, RULE_charsetWithOptBinary);
		try {
			State = 8188;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1015,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8174;
				ascii();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8175;
				unicode();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8176;
				Match(BYTE_SYMBOL);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8177;
				charset();
				State = 8178;
				charsetName();
				State = 8180;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1013,Context) ) {
				case 1:
					{
					State = 8179;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8182;
				Match(BINARY_SYMBOL);
				State = 8186;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1014,Context) ) {
				case 1:
					{
					State = 8183;
					charset();
					State = 8184;
					charsetName();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AsciiContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySqlParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		public AsciiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ascii; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterAscii(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitAscii(this);
		}
	}

	[RuleVersion(0)]
	public AsciiContext ascii() {
		AsciiContext _localctx = new AsciiContext(Context, State);
		EnterRule(_localctx, 1182, RULE_ascii);
		try {
			State = 8196;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ASCII_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8190;
				Match(ASCII_SYMBOL);
				State = 8192;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1016,Context) ) {
				case 1:
					{
					State = 8191;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8194;
				Match(BINARY_SYMBOL);
				State = 8195;
				Match(ASCII_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnicodeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySqlParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		public UnicodeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unicode; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUnicode(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUnicode(this);
		}
	}

	[RuleVersion(0)]
	public UnicodeContext unicode() {
		UnicodeContext _localctx = new UnicodeContext(Context, State);
		EnterRule(_localctx, 1184, RULE_unicode);
		try {
			State = 8204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case UNICODE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8198;
				Match(UNICODE_SYMBOL);
				State = 8200;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1018,Context) ) {
				case 1:
					{
					State = 8199;
					Match(BINARY_SYMBOL);
					}
					break;
				}
				}
				break;
			case BINARY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8202;
				Match(BINARY_SYMBOL);
				State = 8203;
				Match(UNICODE_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WsNumCodepointsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public WsNumCodepointsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_wsNumCodepoints; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWsNumCodepoints(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWsNumCodepoints(this);
		}
	}

	[RuleVersion(0)]
	public WsNumCodepointsContext wsNumCodepoints() {
		WsNumCodepointsContext _localctx = new WsNumCodepointsContext(Context, State);
		EnterRule(_localctx, 1186, RULE_wsNumCodepoints);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8206;
			Match(OPEN_PAR_SYMBOL);
			State = 8207;
			real_ulong_number();
			State = 8208;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDatetimePrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public TypeDatetimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDatetimePrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTypeDatetimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTypeDatetimePrecision(this);
		}
	}

	[RuleVersion(0)]
	public TypeDatetimePrecisionContext typeDatetimePrecision() {
		TypeDatetimePrecisionContext _localctx = new TypeDatetimePrecisionContext(Context, State);
		EnterRule(_localctx, 1188, RULE_typeDatetimePrecision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8210;
			Match(OPEN_PAR_SYMBOL);
			State = 8211;
			Match(INT_NUMBER);
			State = 8212;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionDatetimePrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public FunctionDatetimePrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionDatetimePrecision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionDatetimePrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionDatetimePrecision(this);
		}
	}

	[RuleVersion(0)]
	public FunctionDatetimePrecisionContext functionDatetimePrecision() {
		FunctionDatetimePrecisionContext _localctx = new FunctionDatetimePrecisionContext(Context, State);
		EnterRule(_localctx, 1190, RULE_functionDatetimePrecision);
		try {
			State = 8219;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1020,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8215;
				parentheses();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8216;
				Match(OPEN_PAR_SYMBOL);
				State = 8217;
				Match(INT_NUMBER);
				State = 8218;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public CharsetNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetName(this);
		}
	}

	[RuleVersion(0)]
	public CharsetNameContext charsetName() {
		CharsetNameContext _localctx = new CharsetNameContext(Context, State);
		EnterRule(_localctx, 1192, RULE_charsetName);
		try {
			State = 8225;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1021,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8221;
				textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8222;
				Match(BINARY_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8223;
				if (!(this.ServerVersion < 80011)) throw new FailedPredicateException(this, "this.ServerVersion < 80011");
				State = 8224;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollationNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINARY_SYMBOL() { return GetToken(MySqlParser.BINARY_SYMBOL, 0); }
		public CollationNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collationName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollationName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollationName(this);
		}
	}

	[RuleVersion(0)]
	public CollationNameContext collationName() {
		CollationNameContext _localctx = new CollationNameContext(Context, State);
		EnterRule(_localctx, 1194, RULE_collationName);
		try {
			State = 8232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1022,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8227;
				textOrIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8228;
				if (!(this.ServerVersion < 80011)) throw new FailedPredicateException(this, "this.ServerVersion < 80011");
				State = 8229;
				Match(DEFAULT_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8230;
				if (!(this.ServerVersion >= 80018)) throw new FailedPredicateException(this, "this.ServerVersion >= 80018");
				State = 8231;
				Match(BINARY_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public CreateTableOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptions(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsContext createTableOptions() {
		CreateTableOptionsContext _localctx = new CreateTableOptionsContext(Context, State);
		EnterRule(_localctx, 1196, RULE_createTableOptions);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8234;
			createTableOption();
			State = 8241;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1024,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8236;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1023,Context) ) {
					case 1:
						{
						State = 8235;
						Match(COMMA_SYMBOL);
						}
						break;
					}
					State = 8238;
					createTableOption();
					}
					}
				}
				State = 8243;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1024,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsEtcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionsContext createTableOptions() {
			return GetRuleContext<CreateTableOptionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreatePartitioningEtcContext createPartitioningEtc() {
			return GetRuleContext<CreatePartitioningEtcContext>(0);
		}
		public CreateTableOptionsEtcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptionsEtc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptionsEtc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptionsEtc(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsEtcContext createTableOptionsEtc() {
		CreateTableOptionsEtcContext _localctx = new CreateTableOptionsEtcContext(Context, State);
		EnterRule(_localctx, 1198, RULE_createTableOptionsEtc);
		try {
			State = 8249;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1026,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8244;
				createTableOptions();
				State = 8246;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1025,Context) ) {
				case 1:
					{
					State = 8245;
					createPartitioningEtc();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8248;
				createPartitioningEtc();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatePartitioningEtcContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionClauseContext partitionClause() {
			return GetRuleContext<PartitionClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DuplicateAsQeContext duplicateAsQe() {
			return GetRuleContext<DuplicateAsQeContext>(0);
		}
		public CreatePartitioningEtcContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createPartitioningEtc; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreatePartitioningEtc(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreatePartitioningEtc(this);
		}
	}

	[RuleVersion(0)]
	public CreatePartitioningEtcContext createPartitioningEtc() {
		CreatePartitioningEtcContext _localctx = new CreatePartitioningEtcContext(Context, State);
		EnterRule(_localctx, 1200, RULE_createPartitioningEtc);
		try {
			State = 8256;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1028,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8251;
				partitionClause();
				State = 8253;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1027,Context) ) {
				case 1:
					{
					State = 8252;
					duplicateAsQe();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8255;
				duplicateAsQe();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionsSpaceSeparatedContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext[] createTableOption() {
			return GetRuleContexts<CreateTableOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateTableOptionContext createTableOption(int i) {
			return GetRuleContext<CreateTableOptionContext>(i);
		}
		public CreateTableOptionsSpaceSeparatedContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOptionsSpaceSeparated; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOptionsSpaceSeparated(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOptionsSpaceSeparated(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionsSpaceSeparatedContext createTableOptionsSpaceSeparated() {
		CreateTableOptionsSpaceSeparatedContext _localctx = new CreateTableOptionsSpaceSeparatedContext(Context, State);
		EnterRule(_localctx, 1202, RULE_createTableOptionsSpaceSeparated);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8259;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8258;
					createTableOption();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8261;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1029,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateTableOptionContext : ParserRuleContext {
		public IToken option;
		public IToken format;
		public IToken method;
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public EqualContext equal() {
			return GetRuleContext<EqualContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UlonglongNumberContext ulonglongNumber() {
			return GetRuleContext<UlonglongNumberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySqlParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySqlParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySqlParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySqlParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySqlParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TernaryOptionContext ternaryOption() {
			return GetRuleContext<TernaryOptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySqlParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySqlParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySqlParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySqlParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySqlParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySqlParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySqlParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySqlParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySqlParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySqlParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TableRefListContext tableRefList() {
			return GetRuleContext<TableRefListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNION_SYMBOL() { return GetToken(MySqlParser.UNION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCharsetContext defaultCharset() {
			return GetRuleContext<DefaultCharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefaultCollationContext defaultCollation() {
			return GetRuleContext<DefaultCollationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySqlParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySqlParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public JsonAttributeContext jsonAttribute() {
			return GetRuleContext<JsonAttributeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TsOptionAutoextendSizeContext tsOptionAutoextendSize() {
			return GetRuleContext<TsOptionAutoextendSizeContext>(0);
		}
		public CreateTableOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createTableOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateTableOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateTableOption(this);
		}
	}

	[RuleVersion(0)]
	public CreateTableOptionContext createTableOption() {
		CreateTableOptionContext _localctx = new CreateTableOptionContext(Context, State);
		EnterRule(_localctx, 1204, RULE_createTableOption);
		int _la;
		try {
			State = 8403;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1055,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8263;
				_localctx.option = Match(ENGINE_SYMBOL);
				State = 8265;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1030,Context) ) {
				case 1:
					{
					State = 8264;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8267;
				engineRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8268;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 8269;
				_localctx.option = Match(SECONDARY_ENGINE_SYMBOL);
				State = 8271;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1031,Context) ) {
				case 1:
					{
					State = 8270;
					equal();
					}
					break;
				}
				State = 8275;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1032,Context) ) {
				case 1:
					{
					State = 8273;
					Match(NULL_SYMBOL);
					}
					break;
				case 2:
					{
					State = 8274;
					textOrIdentifier();
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8277;
				_localctx.option = Match(MAX_ROWS_SYMBOL);
				State = 8279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8278;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8281;
				ulonglongNumber();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8282;
				_localctx.option = Match(MIN_ROWS_SYMBOL);
				State = 8284;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8283;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8286;
				ulonglongNumber();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8287;
				_localctx.option = Match(AVG_ROW_LENGTH_SYMBOL);
				State = 8289;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8288;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8291;
				ulonglongNumber();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8292;
				_localctx.option = Match(PASSWORD_SYMBOL);
				State = 8294;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1036,Context) ) {
				case 1:
					{
					State = 8293;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8296;
				textStringLiteral();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 8297;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 8299;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1037,Context) ) {
				case 1:
					{
					State = 8298;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8301;
				textStringLiteral();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 8302;
				_localctx.option = Match(COMPRESSION_SYMBOL);
				State = 8304;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1038,Context) ) {
				case 1:
					{
					State = 8303;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8306;
				textString();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 8307;
				_localctx.option = Match(ENCRYPTION_SYMBOL);
				State = 8309;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1039,Context) ) {
				case 1:
					{
					State = 8308;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8311;
				textString();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 8312;
				_localctx.option = Match(AUTO_INCREMENT_SYMBOL);
				State = 8314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8313;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8316;
				ulonglongNumber();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 8317;
				_localctx.option = Match(PACK_KEYS_SYMBOL);
				State = 8319;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8318;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8321;
				ternaryOption();
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 8322;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 555)) & ~0x3f) == 0 && ((1L << (_la - 555)) & 7L) != 0)) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8324;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8323;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8326;
				ternaryOption();
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 8327;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==CHECKSUM_SYMBOL || _la==TABLE_CHECKSUM_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8329;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8328;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8331;
				ulong_number();
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 8332;
				_localctx.option = Match(DELAY_KEY_WRITE_SYMBOL);
				State = 8334;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8333;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8336;
				ulong_number();
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 8337;
				_localctx.option = Match(ROW_FORMAT_SYMBOL);
				State = 8339;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8338;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8341;
				_localctx.format = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 122)) & ~0x3f) == 0 && ((1L << (_la - 122)) & 35184372088837L) != 0) || _la==DYNAMIC_SYMBOL || _la==FIXED_SYMBOL || _la==REDUNDANT_SYMBOL) ) {
					_localctx.format = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 8342;
				_localctx.option = Match(UNION_SYMBOL);
				State = 8344;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8343;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8346;
				Match(OPEN_PAR_SYMBOL);
				State = 8347;
				tableRefList();
				State = 8348;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 8350;
				defaultCharset();
				}
				break;
			case 18:
				EnterOuterAlt(_localctx, 18);
				{
				State = 8351;
				defaultCollation();
				}
				break;
			case 19:
				EnterOuterAlt(_localctx, 19);
				{
				State = 8352;
				_localctx.option = Match(INSERT_METHOD_SYMBOL);
				State = 8354;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8353;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8356;
				_localctx.method = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==FIRST_SYMBOL || _la==LAST_SYMBOL || _la==NO_SYMBOL) ) {
					_localctx.method = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 20:
				EnterOuterAlt(_localctx, 20);
				{
				State = 8357;
				_localctx.option = Match(DATA_SYMBOL);
				State = 8358;
				Match(DIRECTORY_SYMBOL);
				State = 8360;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1048,Context) ) {
				case 1:
					{
					State = 8359;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8362;
				textString();
				}
				break;
			case 21:
				EnterOuterAlt(_localctx, 21);
				{
				State = 8363;
				_localctx.option = Match(INDEX_SYMBOL);
				State = 8364;
				Match(DIRECTORY_SYMBOL);
				State = 8366;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1049,Context) ) {
				case 1:
					{
					State = 8365;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8368;
				textString();
				}
				break;
			case 22:
				EnterOuterAlt(_localctx, 22);
				{
				State = 8369;
				_localctx.option = Match(TABLESPACE_SYMBOL);
				State = 8371;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1050,Context) ) {
				case 1:
					{
					State = 8370;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8373;
				identifier();
				}
				break;
			case 23:
				EnterOuterAlt(_localctx, 23);
				{
				State = 8374;
				_localctx.option = Match(STORAGE_SYMBOL);
				State = 8375;
				_la = TokenStream.LA(1);
				if ( !(_la==DISK_SYMBOL || _la==MEMORY_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 24:
				EnterOuterAlt(_localctx, 24);
				{
				State = 8376;
				_localctx.option = Match(CONNECTION_SYMBOL);
				State = 8378;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1051,Context) ) {
				case 1:
					{
					State = 8377;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8380;
				textString();
				}
				break;
			case 25:
				EnterOuterAlt(_localctx, 25);
				{
				State = 8381;
				_localctx.option = Match(KEY_BLOCK_SIZE_SYMBOL);
				State = 8383;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8382;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8385;
				ulonglongNumber();
				}
				break;
			case 26:
				EnterOuterAlt(_localctx, 26);
				{
				State = 8386;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 8387;
				_localctx.option = Match(START_SYMBOL);
				State = 8388;
				Match(TRANSACTION_SYMBOL);
				}
				break;
			case 27:
				EnterOuterAlt(_localctx, 27);
				{
				State = 8389;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 8390;
				_localctx.option = Match(ENGINE_ATTRIBUTE_SYMBOL);
				State = 8392;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1053,Context) ) {
				case 1:
					{
					State = 8391;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8394;
				jsonAttribute();
				}
				break;
			case 28:
				EnterOuterAlt(_localctx, 28);
				{
				State = 8395;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 8396;
				_localctx.option = Match(SECONDARY_ENGINE_ATTRIBUTE_SYMBOL);
				State = 8398;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1054,Context) ) {
				case 1:
					{
					State = 8397;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8400;
				jsonAttribute();
				}
				break;
			case 29:
				EnterOuterAlt(_localctx, 29);
				{
				State = 8401;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 8402;
				tsOptionAutoextendSize();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TernaryOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public TernaryOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ternaryOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTernaryOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTernaryOption(this);
		}
	}

	[RuleVersion(0)]
	public TernaryOptionContext ternaryOption() {
		TernaryOptionContext _localctx = new TernaryOptionContext(Context, State);
		EnterRule(_localctx, 1206, RULE_ternaryOption);
		try {
			State = 8407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
			case HEX_NUMBER:
			case DECIMAL_NUMBER:
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8405;
				ulong_number();
				}
				break;
			case DEFAULT_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8406;
				Match(DEFAULT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCollationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySqlParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public DefaultCollationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCollation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultCollation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultCollation(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCollationContext defaultCollation() {
		DefaultCollationContext _localctx = new DefaultCollationContext(Context, State);
		EnterRule(_localctx, 1208, RULE_defaultCollation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8410;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 8409;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 8412;
			Match(COLLATE_SYMBOL);
			State = 8414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1058,Context) ) {
			case 1:
				{
				State = 8413;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 8416;
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultEncryptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public DefaultEncryptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultEncryption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultEncryption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultEncryption(this);
		}
	}

	[RuleVersion(0)]
	public DefaultEncryptionContext defaultEncryption() {
		DefaultEncryptionContext _localctx = new DefaultEncryptionContext(Context, State);
		EnterRule(_localctx, 1210, RULE_defaultEncryption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8419;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 8418;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 8421;
			Match(ENCRYPTION_SYMBOL);
			State = 8423;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1060,Context) ) {
			case 1:
				{
				State = 8422;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 8425;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultCharsetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		public DefaultCharsetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultCharset; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefaultCharset(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefaultCharset(this);
		}
	}

	[RuleVersion(0)]
	public DefaultCharsetContext defaultCharset() {
		DefaultCharsetContext _localctx = new DefaultCharsetContext(Context, State);
		EnterRule(_localctx, 1212, RULE_defaultCharset);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8428;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT_SYMBOL) {
				{
				State = 8427;
				Match(DEFAULT_SYMBOL);
				}
			}

			State = 8430;
			charset();
			State = 8432;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1062,Context) ) {
			case 1:
				{
				State = 8431;
				Match(EQUAL_OPERATOR);
				}
				break;
			}
			State = 8434;
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionTypeDefContext partitionTypeDef() {
			return GetRuleContext<PartitionTypeDefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubPartitionsContext subPartitions() {
			return GetRuleContext<SubPartitionsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionsContext partitionDefinitions() {
			return GetRuleContext<PartitionDefinitionsContext>(0);
		}
		public PartitionClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionClause(this);
		}
	}

	[RuleVersion(0)]
	public PartitionClauseContext partitionClause() {
		PartitionClauseContext _localctx = new PartitionClauseContext(Context, State);
		EnterRule(_localctx, 1214, RULE_partitionClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8436;
			Match(PARTITION_SYMBOL);
			State = 8437;
			Match(BY_SYMBOL);
			State = 8438;
			partitionTypeDef();
			State = 8441;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1063,Context) ) {
			case 1:
				{
				State = 8439;
				Match(PARTITIONS_SYMBOL);
				State = 8440;
				real_ulong_number();
				}
				break;
			}
			State = 8444;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1064,Context) ) {
			case 1:
				{
				State = 8443;
				subPartitions();
				}
				break;
			}
			State = 8447;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1065,Context) ) {
			case 1:
				{
				State = 8446;
				partitionDefinitions();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionTypeDefContext : ParserRuleContext {
		public PartitionTypeDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionTypeDef; } }

		public PartitionTypeDefContext() { }
		public virtual void CopyFrom(PartitionTypeDefContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PartitionDefRangeListContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANGE_SYMBOL() { return GetToken(MySqlParser.RANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySqlParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefRangeListContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefRangeList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefRangeList(this);
		}
	}
	public partial class PartitionDefKeyContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySqlParser.LINEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		public PartitionDefKeyContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefKey(this);
		}
	}
	public partial class PartitionDefHashContext : PartitionTypeDefContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySqlParser.LINEAR_SYMBOL, 0); }
		public PartitionDefHashContext(PartitionTypeDefContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefHash(this);
		}
	}

	[RuleVersion(0)]
	public PartitionTypeDefContext partitionTypeDef() {
		PartitionTypeDefContext _localctx = new PartitionTypeDefContext(Context, State);
		EnterRule(_localctx, 1216, RULE_partitionTypeDef);
		int _la;
		try {
			State = 8482;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1072,Context) ) {
			case 1:
				_localctx = new PartitionDefKeyContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 8450;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 8449;
					Match(LINEAR_SYMBOL);
					}
				}

				State = 8452;
				Match(KEY_SYMBOL);
				State = 8454;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 8453;
					partitionKeyAlgorithm();
					}
				}

				State = 8456;
				Match(OPEN_PAR_SYMBOL);
				State = 8458;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1068,Context) ) {
				case 1:
					{
					State = 8457;
					identifierList();
					}
					break;
				}
				State = 8460;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 2:
				_localctx = new PartitionDefHashContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 8462;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LINEAR_SYMBOL) {
					{
					State = 8461;
					Match(LINEAR_SYMBOL);
					}
				}

				State = 8464;
				Match(HASH_SYMBOL);
				State = 8465;
				Match(OPEN_PAR_SYMBOL);
				State = 8466;
				bitExpr(0);
				State = 8467;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case 3:
				_localctx = new PartitionDefRangeListContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 8469;
				_la = TokenStream.LA(1);
				if ( !(_la==LIST_SYMBOL || _la==RANGE_SYMBOL) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8480;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 8470;
					Match(OPEN_PAR_SYMBOL);
					State = 8471;
					bitExpr(0);
					State = 8472;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				case COLUMNS_SYMBOL:
					{
					State = 8474;
					Match(COLUMNS_SYMBOL);
					State = 8475;
					Match(OPEN_PAR_SYMBOL);
					State = 8477;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1070,Context) ) {
					case 1:
						{
						State = 8476;
						identifierList();
						}
						break;
					}
					State = 8479;
					Match(CLOSE_PAR_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubPartitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySqlParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_SYMBOL() { return GetToken(MySqlParser.KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINEAR_SYMBOL() { return GetToken(MySqlParser.LINEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySqlParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
			return GetRuleContext<PartitionKeyAlgorithmContext>(0);
		}
		public SubPartitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subPartitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubPartitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubPartitions(this);
		}
	}

	[RuleVersion(0)]
	public SubPartitionsContext subPartitions() {
		SubPartitionsContext _localctx = new SubPartitionsContext(Context, State);
		EnterRule(_localctx, 1218, RULE_subPartitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8484;
			Match(SUBPARTITION_SYMBOL);
			State = 8485;
			Match(BY_SYMBOL);
			State = 8487;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LINEAR_SYMBOL) {
				{
				State = 8486;
				Match(LINEAR_SYMBOL);
				}
			}

			State = 8499;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case HASH_SYMBOL:
				{
				State = 8489;
				Match(HASH_SYMBOL);
				State = 8490;
				Match(OPEN_PAR_SYMBOL);
				State = 8491;
				bitExpr(0);
				State = 8492;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			case KEY_SYMBOL:
				{
				State = 8494;
				Match(KEY_SYMBOL);
				State = 8496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ALGORITHM_SYMBOL) {
					{
					State = 8495;
					partitionKeyAlgorithm();
					}
				}

				State = 8498;
				identifierListWithParentheses();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 8503;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1076,Context) ) {
			case 1:
				{
				State = 8501;
				Match(SUBPARTITIONS_SYMBOL);
				State = 8502;
				real_ulong_number();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionKeyAlgorithmContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		public PartitionKeyAlgorithmContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionKeyAlgorithm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionKeyAlgorithm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionKeyAlgorithm(this);
		}
	}

	[RuleVersion(0)]
	public PartitionKeyAlgorithmContext partitionKeyAlgorithm() {
		PartitionKeyAlgorithmContext _localctx = new PartitionKeyAlgorithmContext(Context, State);
		EnterRule(_localctx, 1220, RULE_partitionKeyAlgorithm);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8505;
			Match(ALGORITHM_SYMBOL);
			State = 8506;
			Match(EQUAL_OPERATOR);
			State = 8507;
			real_ulong_number();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext[] partitionDefinition() {
			return GetRuleContexts<PartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionDefinitionContext partitionDefinition(int i) {
			return GetRuleContext<PartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinitions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinitions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinitions(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionsContext partitionDefinitions() {
		PartitionDefinitionsContext _localctx = new PartitionDefinitionsContext(Context, State);
		EnterRule(_localctx, 1222, RULE_partitionDefinitions);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8509;
			Match(OPEN_PAR_SYMBOL);
			State = 8510;
			partitionDefinition();
			State = 8515;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8511;
				Match(COMMA_SYMBOL);
				State = 8512;
				partitionDefinition();
				}
				}
				State = 8517;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8518;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUES_SYMBOL() { return GetToken(MySqlParser.VALUES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySqlParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValuesInContext partitionValuesIn() {
			return GetRuleContext<PartitionValuesInContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext[] subpartitionDefinition() {
			return GetRuleContexts<SubpartitionDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SubpartitionDefinitionContext subpartitionDefinition(int i) {
			return GetRuleContext<SubpartitionDefinitionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext partitionValueItemListParen() {
			return GetRuleContext<PartitionValueItemListParenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySqlParser.MAXVALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public PartitionDefinitionContext partitionDefinition() {
		PartitionDefinitionContext _localctx = new PartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 1224, RULE_partitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8520;
			Match(PARTITION_SYMBOL);
			State = 8521;
			identifier();
			State = 8532;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1079,Context) ) {
			case 1:
				{
				State = 8522;
				Match(VALUES_SYMBOL);
				State = 8523;
				Match(LESS_SYMBOL);
				State = 8524;
				Match(THAN_SYMBOL);
				State = 8527;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case OPEN_PAR_SYMBOL:
					{
					State = 8525;
					partitionValueItemListParen();
					}
					break;
				case MAXVALUE_SYMBOL:
					{
					State = 8526;
					Match(MAXVALUE_SYMBOL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				State = 8529;
				Match(VALUES_SYMBOL);
				State = 8530;
				Match(IN_SYMBOL);
				State = 8531;
				partitionValuesIn();
				}
				break;
			}
			State = 8537;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & 1099512152065L) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				State = 8534;
				partitionOption();
				}
				}
				State = 8539;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8551;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==OPEN_PAR_SYMBOL) {
				{
				State = 8540;
				Match(OPEN_PAR_SYMBOL);
				State = 8541;
				subpartitionDefinition();
				State = 8546;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 8542;
					Match(COMMA_SYMBOL);
					State = 8543;
					subpartitionDefinition();
					}
					}
					State = 8548;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 8549;
				Match(CLOSE_PAR_SYMBOL);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValuesInContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext[] partitionValueItemListParen() {
			return GetRuleContexts<PartitionValueItemListParenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemListParenContext partitionValueItemListParen(int i) {
			return GetRuleContext<PartitionValueItemListParenContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PartitionValuesInContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValuesIn; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionValuesIn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionValuesIn(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValuesInContext partitionValuesIn() {
		PartitionValuesInContext _localctx = new PartitionValuesInContext(Context, State);
		EnterRule(_localctx, 1226, RULE_partitionValuesIn);
		int _la;
		try {
			State = 8565;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1084,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8553;
				partitionValueItemListParen();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8554;
				Match(OPEN_PAR_SYMBOL);
				State = 8555;
				partitionValueItemListParen();
				State = 8560;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA_SYMBOL) {
					{
					{
					State = 8556;
					Match(COMMA_SYMBOL);
					State = 8557;
					partitionValueItemListParen();
					}
					}
					State = 8562;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 8563;
				Match(CLOSE_PAR_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionOptionContext : ParserRuleContext {
		public IToken option;
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public EngineRefContext engineRef() {
			return GetRuleContext<EngineRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulong_numberContext real_ulong_number() {
			return GetRuleContext<Real_ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySqlParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySqlParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySqlParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEX_SYMBOL() { return GetToken(MySqlParser.INDEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		public PartitionOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionOption(this);
		}
	}

	[RuleVersion(0)]
	public PartitionOptionContext partitionOption() {
		PartitionOptionContext _localctx = new PartitionOptionContext(Context, State);
		EnterRule(_localctx, 1228, RULE_partitionOption);
		int _la;
		try {
			State = 8601;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TABLESPACE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8567;
				_localctx.option = Match(TABLESPACE_SYMBOL);
				State = 8569;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1085,Context) ) {
				case 1:
					{
					State = 8568;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8571;
				identifier();
				}
				break;
			case ENGINE_SYMBOL:
			case STORAGE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8573;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STORAGE_SYMBOL) {
					{
					State = 8572;
					Match(STORAGE_SYMBOL);
					}
				}

				State = 8575;
				_localctx.option = Match(ENGINE_SYMBOL);
				State = 8577;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1087,Context) ) {
				case 1:
					{
					State = 8576;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8579;
				engineRef();
				}
				break;
			case NODEGROUP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8580;
				_localctx.option = Match(NODEGROUP_SYMBOL);
				State = 8582;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8581;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8584;
				real_ulong_number();
				}
				break;
			case MAX_ROWS_SYMBOL:
			case MIN_ROWS_SYMBOL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8585;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==MAX_ROWS_SYMBOL || _la==MIN_ROWS_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8587;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EQUAL_OPERATOR) {
					{
					State = 8586;
					Match(EQUAL_OPERATOR);
					}
				}

				State = 8589;
				real_ulong_number();
				}
				break;
			case DATA_SYMBOL:
			case INDEX_SYMBOL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8590;
				_localctx.option = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==DATA_SYMBOL || _la==INDEX_SYMBOL) ) {
					_localctx.option = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 8591;
				Match(DIRECTORY_SYMBOL);
				State = 8593;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1090,Context) ) {
				case 1:
					{
					State = 8592;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8595;
				textLiteral();
				}
				break;
			case COMMENT_SYMBOL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8596;
				_localctx.option = Match(COMMENT_SYMBOL);
				State = 8598;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1091,Context) ) {
				case 1:
					{
					State = 8597;
					Match(EQUAL_OPERATOR);
					}
					break;
				}
				State = 8600;
				textLiteral();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SubpartitionDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySqlParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext[] partitionOption() {
			return GetRuleContexts<PartitionOptionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionOptionContext partitionOption(int i) {
			return GetRuleContext<PartitionOptionContext>(i);
		}
		public SubpartitionDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_subpartitionDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSubpartitionDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSubpartitionDefinition(this);
		}
	}

	[RuleVersion(0)]
	public SubpartitionDefinitionContext subpartitionDefinition() {
		SubpartitionDefinitionContext _localctx = new SubpartitionDefinitionContext(Context, State);
		EnterRule(_localctx, 1230, RULE_subpartitionDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8603;
			Match(SUBPARTITION_SYMBOL);
			State = 8604;
			textOrIdentifier();
			State = 8608;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMENT_SYMBOL || _la==DATA_SYMBOL || _la==ENGINE_SYMBOL || _la==INDEX_SYMBOL || ((((_la - 349)) & ~0x3f) == 0 && ((1L << (_la - 349)) & 1099512152065L) != 0) || _la==STORAGE_SYMBOL || _la==TABLESPACE_SYMBOL) {
				{
				{
				State = 8605;
				partitionOption();
				}
				}
				State = 8610;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemListParenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemContext[] partitionValueItem() {
			return GetRuleContexts<PartitionValueItemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public PartitionValueItemContext partitionValueItem(int i) {
			return GetRuleContext<PartitionValueItemContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public PartitionValueItemListParenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItemListParen; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItemListParen(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItemListParen(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemListParenContext partitionValueItemListParen() {
		PartitionValueItemListParenContext _localctx = new PartitionValueItemListParenContext(Context, State);
		EnterRule(_localctx, 1232, RULE_partitionValueItemListParen);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8611;
			Match(OPEN_PAR_SYMBOL);
			State = 8612;
			partitionValueItem();
			State = 8617;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8613;
				Match(COMMA_SYMBOL);
				State = 8614;
				partitionValueItem();
				}
				}
				State = 8619;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8620;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PartitionValueItemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public BitExprContext bitExpr() {
			return GetRuleContext<BitExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAXVALUE_SYMBOL() { return GetToken(MySqlParser.MAXVALUE_SYMBOL, 0); }
		public PartitionValueItemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_partitionValueItem; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPartitionValueItem(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPartitionValueItem(this);
		}
	}

	[RuleVersion(0)]
	public PartitionValueItemContext partitionValueItem() {
		PartitionValueItemContext _localctx = new PartitionValueItemContext(Context, State);
		EnterRule(_localctx, 1234, RULE_partitionValueItem);
		try {
			State = 8624;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1095,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8622;
				bitExpr(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8623;
				Match(MAXVALUE_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinerClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		public DefinerClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definerClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDefinerClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDefinerClause(this);
		}
	}

	[RuleVersion(0)]
	public DefinerClauseContext definerClause() {
		DefinerClauseContext _localctx = new DefinerClauseContext(Context, State);
		EnterRule(_localctx, 1236, RULE_definerClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8626;
			Match(DEFINER_SYMBOL);
			State = 8627;
			Match(EQUAL_OPERATOR);
			State = 8628;
			user();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySqlParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySqlParser.EXISTS_SYMBOL, 0); }
		public IfExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfExists(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsContext ifExists() {
		IfExistsContext _localctx = new IfExistsContext(Context, State);
		EnterRule(_localctx, 1238, RULE_ifExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8630;
			Match(IF_SYMBOL);
			State = 8631;
			Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfExistsIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IfExistsContext ifExists() {
			return GetRuleContext<IfExistsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PersistedVariableIdentifierContext persistedVariableIdentifier() {
			return GetRuleContext<PersistedVariableIdentifierContext>(0);
		}
		public IfExistsIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifExistsIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfExistsIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfExistsIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IfExistsIdentifierContext ifExistsIdentifier() {
		IfExistsIdentifierContext _localctx = new IfExistsIdentifierContext(Context, State);
		EnterRule(_localctx, 1240, RULE_ifExistsIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8633;
			ifExists();
			State = 8634;
			persistedVariableIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PersistedVariableIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public PersistedVariableIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_persistedVariableIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPersistedVariableIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPersistedVariableIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public PersistedVariableIdentifierContext persistedVariableIdentifier() {
		PersistedVariableIdentifierContext _localctx = new PersistedVariableIdentifierContext(Context, State);
		EnterRule(_localctx, 1242, RULE_persistedVariableIdentifier);
		try {
			State = 8643;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1097,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8636;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8637;
				if (!(this.ServerVersion >= 80032)) throw new FailedPredicateException(this, "this.ServerVersion >= 80032");
				State = 8641;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1096,Context) ) {
				case 1:
					{
					State = 8638;
					qualifiedIdentifier();
					}
					break;
				case 2:
					{
					State = 8639;
					Match(DEFAULT_SYMBOL);
					State = 8640;
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfNotExistsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF_SYMBOL() { return GetToken(MySqlParser.IF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public NotRuleContext notRule() {
			return GetRuleContext<NotRuleContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXISTS_SYMBOL() { return GetToken(MySqlParser.EXISTS_SYMBOL, 0); }
		public IfNotExistsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifNotExists; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIfNotExists(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIfNotExists(this);
		}
	}

	[RuleVersion(0)]
	public IfNotExistsContext ifNotExists() {
		IfNotExistsContext _localctx = new IfNotExistsContext(Context, State);
		EnterRule(_localctx, 1244, RULE_ifNotExists);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8645;
			Match(IF_SYMBOL);
			State = 8646;
			notRule();
			State = 8647;
			Match(EXISTS_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IgnoreUnknownUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SYMBOL() { return GetToken(MySqlParser.IGNORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySqlParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		public IgnoreUnknownUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ignoreUnknownUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIgnoreUnknownUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIgnoreUnknownUser(this);
		}
	}

	[RuleVersion(0)]
	public IgnoreUnknownUserContext ignoreUnknownUser() {
		IgnoreUnknownUserContext _localctx = new IgnoreUnknownUserContext(Context, State);
		EnterRule(_localctx, 1246, RULE_ignoreUnknownUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8649;
			Match(IGNORE_SYMBOL);
			State = 8650;
			Match(UNKNOWN_SYMBOL);
			State = 8651;
			Match(USER_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureParameterContext : ParserRuleContext {
		public IToken type;
		[System.Diagnostics.DebuggerNonUserCode] public FunctionParameterContext functionParameter() {
			return GetRuleContext<FunctionParameterContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN_SYMBOL() { return GetToken(MySqlParser.IN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OUT_SYMBOL() { return GetToken(MySqlParser.OUT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INOUT_SYMBOL() { return GetToken(MySqlParser.INOUT_SYMBOL, 0); }
		public ProcedureParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureParameter(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureParameterContext procedureParameter() {
		ProcedureParameterContext _localctx = new ProcedureParameterContext(Context, State);
		EnterRule(_localctx, 1248, RULE_procedureParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8654;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1098,Context) ) {
			case 1:
				{
				State = 8653;
				_localctx.type = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==INOUT_SYMBOL || _la==IN_SYMBOL || _la==OUT_SYMBOL) ) {
					_localctx.type = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
			State = 8656;
			functionParameter();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionParameterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParameterNameContext parameterName() {
			return GetRuleContext<ParameterNameContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeWithOptCollateContext typeWithOptCollate() {
			return GetRuleContext<TypeWithOptCollateContext>(0);
		}
		public FunctionParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionParameter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionParameter(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionParameter(this);
		}
	}

	[RuleVersion(0)]
	public FunctionParameterContext functionParameter() {
		FunctionParameterContext _localctx = new FunctionParameterContext(Context, State);
		EnterRule(_localctx, 1250, RULE_functionParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8658;
			parameterName();
			State = 8659;
			typeWithOptCollate();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CollateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATE_SYMBOL() { return GetToken(MySqlParser.COLLATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CollationNameContext collationName() {
			return GetRuleContext<CollationNameContext>(0);
		}
		public CollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_collate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCollate(this);
		}
	}

	[RuleVersion(0)]
	public CollateContext collate() {
		CollateContext _localctx = new CollateContext(Context, State);
		EnterRule(_localctx, 1252, RULE_collate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8661;
			Match(COLLATE_SYMBOL);
			State = 8662;
			collationName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeWithOptCollateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DataTypeContext dataType() {
			return GetRuleContext<DataTypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CollateContext collate() {
			return GetRuleContext<CollateContext>(0);
		}
		public TypeWithOptCollateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeWithOptCollate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTypeWithOptCollate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTypeWithOptCollate(this);
		}
	}

	[RuleVersion(0)]
	public TypeWithOptCollateContext typeWithOptCollate() {
		TypeWithOptCollateContext _localctx = new TypeWithOptCollateContext(Context, State);
		EnterRule(_localctx, 1254, RULE_typeWithOptCollate);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8664;
			dataType();
			State = 8666;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1099,Context) ) {
			case 1:
				{
				State = 8665;
				collate();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaIdentifierPairContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext[] schemaRef() {
			return GetRuleContexts<SchemaRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef(int i) {
			return GetRuleContext<SchemaRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public SchemaIdentifierPairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaIdentifierPair; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSchemaIdentifierPair(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSchemaIdentifierPair(this);
		}
	}

	[RuleVersion(0)]
	public SchemaIdentifierPairContext schemaIdentifierPair() {
		SchemaIdentifierPairContext _localctx = new SchemaIdentifierPairContext(Context, State);
		EnterRule(_localctx, 1256, RULE_schemaIdentifierPair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8668;
			Match(OPEN_PAR_SYMBOL);
			State = 8669;
			schemaRef();
			State = 8670;
			Match(COMMA_SYMBOL);
			State = 8671;
			schemaRef();
			State = 8672;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext[] viewRef() {
			return GetRuleContexts<ViewRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ViewRefContext viewRef(int i) {
			return GetRuleContext<ViewRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ViewRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewRefList(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefListContext viewRefList() {
		ViewRefListContext _localctx = new ViewRefListContext(Context, State);
		EnterRule(_localctx, 1258, RULE_viewRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8674;
			viewRef();
			State = 8679;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8675;
				Match(COMMA_SYMBOL);
				State = 8676;
				viewRef();
				}
				}
				State = 8681;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UpdateElementContext[] updateElement() {
			return GetRuleContexts<UpdateElementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UpdateElementContext updateElement(int i) {
			return GetRuleContext<UpdateElementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UpdateListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateList(this);
		}
	}

	[RuleVersion(0)]
	public UpdateListContext updateList() {
		UpdateListContext _localctx = new UpdateListContext(Context, State);
		EnterRule(_localctx, 1260, RULE_updateList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8682;
			updateElement();
			State = 8687;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1101,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8683;
					Match(COMMA_SYMBOL);
					State = 8684;
					updateElement();
					}
					}
				}
				State = 8689;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1101,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UpdateElementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_SYMBOL() { return GetToken(MySqlParser.DEFAULT_SYMBOL, 0); }
		public UpdateElementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_updateElement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUpdateElement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUpdateElement(this);
		}
	}

	[RuleVersion(0)]
	public UpdateElementContext updateElement() {
		UpdateElementContext _localctx = new UpdateElementContext(Context, State);
		EnterRule(_localctx, 1262, RULE_updateElement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8690;
			columnRef();
			State = 8691;
			Match(EQUAL_OPERATOR);
			State = 8694;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1102,Context) ) {
			case 1:
				{
				State = 8692;
				expr(0);
				}
				break;
			case 2:
				{
				State = 8693;
				Match(DEFAULT_SYMBOL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharsetClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CharsetContext charset() {
			return GetRuleContext<CharsetContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CharsetNameContext charsetName() {
			return GetRuleContext<CharsetNameContext>(0);
		}
		public CharsetClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_charsetClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCharsetClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCharsetClause(this);
		}
	}

	[RuleVersion(0)]
	public CharsetClauseContext charsetClause() {
		CharsetClauseContext _localctx = new CharsetClauseContext(Context, State);
		EnterRule(_localctx, 1264, RULE_charsetClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8696;
			charset();
			State = 8697;
			charsetName();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldsClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public FieldTermContext[] fieldTerm() {
			return GetRuleContexts<FieldTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FieldTermContext fieldTerm(int i) {
			return GetRuleContext<FieldTermContext>(i);
		}
		public FieldsClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldsClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldsClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldsClause(this);
		}
	}

	[RuleVersion(0)]
	public FieldsClauseContext fieldsClause() {
		FieldsClauseContext _localctx = new FieldsClauseContext(Context, State);
		EnterRule(_localctx, 1266, RULE_fieldsClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8699;
			Match(COLUMNS_SYMBOL);
			State = 8701;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8700;
					fieldTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8703;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1103,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySqlParser.TERMINATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCLOSED_SYMBOL() { return GetToken(MySqlParser.ENCLOSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONALLY_SYMBOL() { return GetToken(MySqlParser.OPTIONALLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPED_SYMBOL() { return GetToken(MySqlParser.ESCAPED_SYMBOL, 0); }
		public FieldTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldTerm(this);
		}
	}

	[RuleVersion(0)]
	public FieldTermContext fieldTerm() {
		FieldTermContext _localctx = new FieldTermContext(Context, State);
		EnterRule(_localctx, 1268, RULE_fieldTerm);
		int _la;
		try {
			State = 8717;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERMINATED_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8705;
				Match(TERMINATED_SYMBOL);
				State = 8706;
				Match(BY_SYMBOL);
				State = 8707;
				textString();
				}
				break;
			case ENCLOSED_SYMBOL:
			case OPTIONALLY_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8709;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==OPTIONALLY_SYMBOL) {
					{
					State = 8708;
					Match(OPTIONALLY_SYMBOL);
					}
				}

				State = 8711;
				Match(ENCLOSED_SYMBOL);
				State = 8712;
				Match(BY_SYMBOL);
				State = 8713;
				textString();
				}
				break;
			case ESCAPED_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8714;
				Match(ESCAPED_SYMBOL);
				State = 8715;
				Match(BY_SYMBOL);
				State = 8716;
				textString();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LinesClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINES_SYMBOL() { return GetToken(MySqlParser.LINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public LineTermContext[] lineTerm() {
			return GetRuleContexts<LineTermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public LineTermContext lineTerm(int i) {
			return GetRuleContext<LineTermContext>(i);
		}
		public LinesClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_linesClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLinesClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLinesClause(this);
		}
	}

	[RuleVersion(0)]
	public LinesClauseContext linesClause() {
		LinesClauseContext _localctx = new LinesClauseContext(Context, State);
		EnterRule(_localctx, 1270, RULE_linesClause);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8719;
			Match(LINES_SYMBOL);
			State = 8721;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 8720;
					lineTerm();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 8723;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1106,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineTermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATED_SYMBOL() { return GetToken(MySqlParser.TERMINATED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTING_SYMBOL() { return GetToken(MySqlParser.STARTING_SYMBOL, 0); }
		public LineTermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineTerm; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLineTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLineTerm(this);
		}
	}

	[RuleVersion(0)]
	public LineTermContext lineTerm() {
		LineTermContext _localctx = new LineTermContext(Context, State);
		EnterRule(_localctx, 1272, RULE_lineTerm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8725;
			_la = TokenStream.LA(1);
			if ( !(_la==STARTING_SYMBOL || _la==TERMINATED_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 8726;
			Match(BY_SYMBOL);
			State = 8727;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext[] user() {
			return GetRuleContexts<UserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user(int i) {
			return GetRuleContext<UserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public UserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserList(this);
		}
	}

	[RuleVersion(0)]
	public UserListContext userList() {
		UserListContext _localctx = new UserListContext(Context, State);
		EnterRule(_localctx, 1274, RULE_userList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8729;
			user();
			State = 8734;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1107,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8730;
					Match(COMMA_SYMBOL);
					State = 8731;
					user();
					}
					}
				}
				State = 8736;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1107,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext[] createUser() {
			return GetRuleContexts<CreateUserContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserContext createUser(int i) {
			return GetRuleContext<CreateUserContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public CreateUserListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserList(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserListContext createUserList() {
		CreateUserListContext _localctx = new CreateUserListContext(Context, State);
		EnterRule(_localctx, 1276, RULE_createUserList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 8737;
			createUser();
			State = 8742;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1108,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 8738;
					Match(COMMA_SYMBOL);
					State = 8739;
					createUser();
					}
					}
				}
				State = 8744;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1108,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserContext user() {
			return GetRuleContext<UserContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext identification() {
			return GetRuleContext<IdentificationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginContext identifiedWithPlugin() {
			return GetRuleContext<IdentifiedWithPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CreateUserWithMfaContext createUserWithMfa() {
			return GetRuleContext<CreateUserWithMfaContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public InitialAuthContext initialAuth() {
			return GetRuleContext<InitialAuthContext>(0);
		}
		public CreateUserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUser; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUser(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserContext createUser() {
		CreateUserContext _localctx = new CreateUserContext(Context, State);
		EnterRule(_localctx, 1278, RULE_createUser);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8745;
			user();
			State = 8755;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1111,Context) ) {
			case 1:
				{
				State = 8746;
				identification();
				State = 8748;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1109,Context) ) {
				case 1:
					{
					State = 8747;
					createUserWithMfa();
					}
					break;
				}
				}
				break;
			case 2:
				{
				State = 8750;
				identifiedWithPlugin();
				State = 8752;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1110,Context) ) {
				case 1:
					{
					State = 8751;
					initialAuth();
					}
					break;
				}
				}
				break;
			case 3:
				{
				State = 8754;
				createUserWithMfa();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateUserWithMfaContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AND_SYMBOL() { return GetTokens(MySqlParser.AND_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AND_SYMBOL(int i) {
			return GetToken(MySqlParser.AND_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext[] identification() {
			return GetRuleContexts<IdentificationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationContext identification(int i) {
			return GetRuleContext<IdentificationContext>(i);
		}
		public CreateUserWithMfaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createUserWithMfa; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterCreateUserWithMfa(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitCreateUserWithMfa(this);
		}
	}

	[RuleVersion(0)]
	public CreateUserWithMfaContext createUserWithMfa() {
		CreateUserWithMfaContext _localctx = new CreateUserWithMfaContext(Context, State);
		EnterRule(_localctx, 1280, RULE_createUserWithMfa);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8757;
			Match(AND_SYMBOL);
			State = 8758;
			identification();
			State = 8761;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1112,Context) ) {
			case 1:
				{
				State = 8759;
				Match(AND_SYMBOL);
				State = 8760;
				identification();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentificationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByPasswordContext identifiedByPassword() {
			return GetRuleContext<IdentifiedByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return GetRuleContext<IdentifiedByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginContext identifiedWithPlugin() {
			return GetRuleContext<IdentifiedWithPluginContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return GetRuleContext<IdentifiedWithPluginAsAuthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() {
			return GetRuleContext<IdentifiedWithPluginByPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() {
			return GetRuleContext<IdentifiedWithPluginByRandomPasswordContext>(0);
		}
		public IdentificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identification; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentification(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentification(this);
		}
	}

	[RuleVersion(0)]
	public IdentificationContext identification() {
		IdentificationContext _localctx = new IdentificationContext(Context, State);
		EnterRule(_localctx, 1282, RULE_identification);
		try {
			State = 8769;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1113,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8763;
				identifiedByPassword();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8764;
				identifiedByRandomPassword();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8765;
				identifiedWithPlugin();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 8766;
				identifiedWithPluginAsAuth();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 8767;
				identifiedWithPluginByPassword();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 8768;
				identifiedWithPluginByRandomPassword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedByPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public IdentifiedByPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedByPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedByPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedByPassword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedByPasswordContext identifiedByPassword() {
		IdentifiedByPasswordContext _localctx = new IdentifiedByPasswordContext(Context, State);
		EnterRule(_localctx, 1284, RULE_identifiedByPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8771;
			Match(IDENTIFIED_SYMBOL);
			State = 8772;
			Match(BY_SYMBOL);
			State = 8773;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedByRandomPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		public IdentifiedByRandomPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedByRandomPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedByRandomPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedByRandomPassword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
		IdentifiedByRandomPasswordContext _localctx = new IdentifiedByRandomPasswordContext(Context, State);
		EnterRule(_localctx, 1286, RULE_identifiedByRandomPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8775;
			Match(IDENTIFIED_SYMBOL);
			State = 8776;
			Match(BY_SYMBOL);
			State = 8777;
			Match(RANDOM_SYMBOL);
			State = 8778;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedWithPluginContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public IdentifiedWithPluginContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedWithPlugin; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedWithPlugin(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedWithPlugin(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedWithPluginContext identifiedWithPlugin() {
		IdentifiedWithPluginContext _localctx = new IdentifiedWithPluginContext(Context, State);
		EnterRule(_localctx, 1288, RULE_identifiedWithPlugin);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8780;
			Match(IDENTIFIED_SYMBOL);
			State = 8781;
			Match(WITH_SYMBOL);
			State = 8782;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedWithPluginAsAuthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public IdentifiedWithPluginAsAuthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedWithPluginAsAuth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedWithPluginAsAuth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedWithPluginAsAuth(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
		IdentifiedWithPluginAsAuthContext _localctx = new IdentifiedWithPluginAsAuthContext(Context, State);
		EnterRule(_localctx, 1290, RULE_identifiedWithPluginAsAuth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8784;
			Match(IDENTIFIED_SYMBOL);
			State = 8785;
			Match(WITH_SYMBOL);
			State = 8786;
			textOrIdentifier();
			State = 8787;
			Match(AS_SYMBOL);
			State = 8788;
			textStringHash();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedWithPluginByPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public IdentifiedWithPluginByPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedWithPluginByPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedWithPluginByPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedWithPluginByPassword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedWithPluginByPasswordContext identifiedWithPluginByPassword() {
		IdentifiedWithPluginByPasswordContext _localctx = new IdentifiedWithPluginByPasswordContext(Context, State);
		EnterRule(_localctx, 1292, RULE_identifiedWithPluginByPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8790;
			Match(IDENTIFIED_SYMBOL);
			State = 8791;
			Match(WITH_SYMBOL);
			State = 8792;
			textOrIdentifier();
			State = 8793;
			Match(BY_SYMBOL);
			State = 8794;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifiedWithPluginByRandomPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITH_SYMBOL() { return GetToken(MySqlParser.WITH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BY_SYMBOL() { return GetToken(MySqlParser.BY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		public IdentifiedWithPluginByRandomPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifiedWithPluginByRandomPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifiedWithPluginByRandomPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifiedWithPluginByRandomPassword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifiedWithPluginByRandomPasswordContext identifiedWithPluginByRandomPassword() {
		IdentifiedWithPluginByRandomPasswordContext _localctx = new IdentifiedWithPluginByRandomPasswordContext(Context, State);
		EnterRule(_localctx, 1294, RULE_identifiedWithPluginByRandomPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8796;
			Match(IDENTIFIED_SYMBOL);
			State = 8797;
			Match(WITH_SYMBOL);
			State = 8798;
			textOrIdentifier();
			State = 8799;
			Match(BY_SYMBOL);
			State = 8800;
			Match(RANDOM_SYMBOL);
			State = 8801;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InitialAuthContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SYMBOL() { return GetToken(MySqlParser.INITIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHENTICATION_SYMBOL() { return GetToken(MySqlParser.AUTHENTICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByRandomPasswordContext identifiedByRandomPassword() {
			return GetRuleContext<IdentifiedByRandomPasswordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedWithPluginAsAuthContext identifiedWithPluginAsAuth() {
			return GetRuleContext<IdentifiedWithPluginAsAuthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifiedByPasswordContext identifiedByPassword() {
			return GetRuleContext<IdentifiedByPasswordContext>(0);
		}
		public InitialAuthContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_initialAuth; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInitialAuth(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInitialAuth(this);
		}
	}

	[RuleVersion(0)]
	public InitialAuthContext initialAuth() {
		InitialAuthContext _localctx = new InitialAuthContext(Context, State);
		EnterRule(_localctx, 1296, RULE_initialAuth);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8803;
			Match(INITIAL_SYMBOL);
			State = 8804;
			Match(AUTHENTICATION_SYMBOL);
			State = 8808;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1114,Context) ) {
			case 1:
				{
				State = 8805;
				identifiedByRandomPassword();
				}
				break;
			case 2:
				{
				State = 8806;
				identifiedWithPluginAsAuth();
				}
				break;
			case 3:
				{
				State = 8807;
				identifiedByPassword();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RetainCurrentPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySqlParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		public RetainCurrentPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_retainCurrentPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRetainCurrentPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRetainCurrentPassword(this);
		}
	}

	[RuleVersion(0)]
	public RetainCurrentPasswordContext retainCurrentPassword() {
		RetainCurrentPasswordContext _localctx = new RetainCurrentPasswordContext(Context, State);
		EnterRule(_localctx, 1298, RULE_retainCurrentPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8810;
			Match(RETAIN_SYMBOL);
			State = 8811;
			Match(CURRENT_SYMBOL);
			State = 8812;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DiscardOldPasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySqlParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		public DiscardOldPasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_discardOldPassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDiscardOldPassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDiscardOldPassword(this);
		}
	}

	[RuleVersion(0)]
	public DiscardOldPasswordContext discardOldPassword() {
		DiscardOldPasswordContext _localctx = new DiscardOldPasswordContext(Context, State);
		EnterRule(_localctx, 1300, RULE_discardOldPassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8814;
			Match(DISCARD_SYMBOL);
			State = 8815;
			Match(OLD_SYMBOL);
			State = 8816;
			Match(PASSWORD_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserRegistrationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor() {
			return GetRuleContext<FactorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIATE_SYMBOL() { return GetToken(MySqlParser.INITIATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGISTRATION_SYMBOL() { return GetToken(MySqlParser.REGISTRATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNREGISTER_SYMBOL() { return GetToken(MySqlParser.UNREGISTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINISH_SYMBOL() { return GetToken(MySqlParser.FINISH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SET_SYMBOL() { return GetToken(MySqlParser.SET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHALLENGE_RESPONSE_SYMBOL() { return GetToken(MySqlParser.CHALLENGE_RESPONSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AS_SYMBOL() { return GetToken(MySqlParser.AS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringHashContext textStringHash() {
			return GetRuleContext<TextStringHashContext>(0);
		}
		public UserRegistrationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userRegistration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserRegistration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserRegistration(this);
		}
	}

	[RuleVersion(0)]
	public UserRegistrationContext userRegistration() {
		UserRegistrationContext _localctx = new UserRegistrationContext(Context, State);
		EnterRule(_localctx, 1302, RULE_userRegistration);
		try {
			State = 8833;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1115,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8818;
				factor();
				State = 8819;
				Match(INITIATE_SYMBOL);
				State = 8820;
				Match(REGISTRATION_SYMBOL);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8822;
				factor();
				State = 8823;
				Match(UNREGISTER_SYMBOL);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 8825;
				factor();
				State = 8826;
				Match(FINISH_SYMBOL);
				State = 8827;
				Match(REGISTRATION_SYMBOL);
				State = 8828;
				Match(SET_SYMBOL);
				State = 8829;
				Match(CHALLENGE_RESPONSE_SYMBOL);
				State = 8830;
				Match(AS_SYMBOL);
				State = 8831;
				textStringHash();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACTOR_SYMBOL() { return GetToken(MySqlParser.FACTOR_SYMBOL, 0); }
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 1304, RULE_factor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8835;
			numLiteral();
			State = 8836;
			Match(FACTOR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReplacePasswordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLACE_SYMBOL() { return GetToken(MySqlParser.REPLACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString() {
			return GetRuleContext<TextStringContext>(0);
		}
		public ReplacePasswordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_replacePassword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReplacePassword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReplacePassword(this);
		}
	}

	[RuleVersion(0)]
	public ReplacePasswordContext replacePassword() {
		ReplacePasswordContext _localctx = new ReplacePasswordContext(Context, State);
		EnterRule(_localctx, 1306, RULE_replacePassword);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8838;
			Match(REPLACE_SYMBOL);
			State = 8839;
			textString();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserIdentifierOrTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public UserVariableContext userVariable() {
			return GetRuleContext<UserVariableContext>(0);
		}
		public UserIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_userIdentifierOrText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUserIdentifierOrText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUserIdentifierOrText(this);
		}
	}

	[RuleVersion(0)]
	public UserIdentifierOrTextContext userIdentifierOrText() {
		UserIdentifierOrTextContext _localctx = new UserIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1308, RULE_userIdentifierOrText);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8841;
			textOrIdentifier();
			State = 8843;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1116,Context) ) {
			case 1:
				{
				State = 8842;
				userVariable();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UserContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UserIdentifierOrTextContext userIdentifierOrText() {
			return GetRuleContext<UserIdentifierOrTextContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_USER_SYMBOL() { return GetToken(MySqlParser.CURRENT_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParenthesesContext parentheses() {
			return GetRuleContext<ParenthesesContext>(0);
		}
		public UserContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_user; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUser(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUser(this);
		}
	}

	[RuleVersion(0)]
	public UserContext user() {
		UserContext _localctx = new UserContext(Context, State);
		EnterRule(_localctx, 1310, RULE_user);
		try {
			State = 8850;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1118,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8845;
				userIdentifierOrText();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8846;
				Match(CURRENT_USER_SYMBOL);
				State = 8848;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1117,Context) ) {
				case 1:
					{
					State = 8847;
					parentheses();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeClauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIKE_SYMBOL() { return GetToken(MySqlParser.LIKE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public LikeClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeClause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLikeClause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLikeClause(this);
		}
	}

	[RuleVersion(0)]
	public LikeClauseContext likeClause() {
		LikeClauseContext _localctx = new LikeClauseContext(Context, State);
		EnterRule(_localctx, 1312, RULE_likeClause);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8852;
			Match(LIKE_SYMBOL);
			State = 8853;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LikeOrWhereContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LikeClauseContext likeClause() {
			return GetRuleContext<LikeClauseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhereClauseContext whereClause() {
			return GetRuleContext<WhereClauseContext>(0);
		}
		public LikeOrWhereContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_likeOrWhere; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLikeOrWhere(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLikeOrWhere(this);
		}
	}

	[RuleVersion(0)]
	public LikeOrWhereContext likeOrWhere() {
		LikeOrWhereContext _localctx = new LikeOrWhereContext(Context, State);
		EnterRule(_localctx, 1314, RULE_likeOrWhere);
		try {
			State = 8857;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LIKE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8855;
				likeClause();
				}
				break;
			case WHERE_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8856;
				whereClause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OnlineOptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLINE_SYMBOL() { return GetToken(MySqlParser.ONLINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFLINE_SYMBOL() { return GetToken(MySqlParser.OFFLINE_SYMBOL, 0); }
		public OnlineOptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_onlineOption; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOnlineOption(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOnlineOption(this);
		}
	}

	[RuleVersion(0)]
	public OnlineOptionContext onlineOption() {
		OnlineOptionContext _localctx = new OnlineOptionContext(Context, State);
		EnterRule(_localctx, 1316, RULE_onlineOption);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8859;
			_la = TokenStream.LA(1);
			if ( !(_la==OFFLINE_SYMBOL || _la==ONLINE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NoWriteToBinLogContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WRITE_TO_BINLOG_SYMBOL() { return GetToken(MySqlParser.NO_WRITE_TO_BINLOG_SYMBOL, 0); }
		public NoWriteToBinLogContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_noWriteToBinLog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNoWriteToBinLog(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNoWriteToBinLog(this);
		}
	}

	[RuleVersion(0)]
	public NoWriteToBinLogContext noWriteToBinLog() {
		NoWriteToBinLogContext _localctx = new NoWriteToBinLogContext(Context, State);
		EnterRule(_localctx, 1318, RULE_noWriteToBinLog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8861;
			_la = TokenStream.LA(1);
			if ( !(_la==LOCAL_SYMBOL || _la==NO_WRITE_TO_BINLOG_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsePartitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListWithParenthesesContext identifierListWithParentheses() {
			return GetRuleContext<IdentifierListWithParenthesesContext>(0);
		}
		public UsePartitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usePartition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUsePartition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUsePartition(this);
		}
	}

	[RuleVersion(0)]
	public UsePartitionContext usePartition() {
		UsePartitionContext _localctx = new UsePartitionContext(Context, State);
		EnterRule(_localctx, 1320, RULE_usePartition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8863;
			Match(PARTITION_SYMBOL);
			State = 8864;
			identifierListWithParentheses();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FieldIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFieldIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFieldIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public FieldIdentifierContext fieldIdentifier() {
		FieldIdentifierContext _localctx = new FieldIdentifierContext(Context, State);
		EnterRule(_localctx, 1322, RULE_fieldIdentifier);
		try {
			State = 8871;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8866;
				dotIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8867;
				qualifiedIdentifier();
				State = 8869;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1120,Context) ) {
				case 1:
					{
					State = 8868;
					dotIdentifier();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnName(this);
		}
	}

	[RuleVersion(0)]
	public ColumnNameContext columnName() {
		ColumnNameContext _localctx = new ColumnNameContext(Context, State);
		EnterRule(_localctx, 1324, RULE_columnName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8873;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ColumnInternalRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefContext columnInternalRef() {
		ColumnInternalRefContext _localctx = new ColumnInternalRefContext(Context, State);
		EnterRule(_localctx, 1326, RULE_columnInternalRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8875;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnInternalRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext[] columnInternalRef() {
			return GetRuleContexts<ColumnInternalRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ColumnInternalRefContext columnInternalRef(int i) {
			return GetRuleContext<ColumnInternalRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public ColumnInternalRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnInternalRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnInternalRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnInternalRefList(this);
		}
	}

	[RuleVersion(0)]
	public ColumnInternalRefListContext columnInternalRefList() {
		ColumnInternalRefListContext _localctx = new ColumnInternalRefListContext(Context, State);
		EnterRule(_localctx, 1328, RULE_columnInternalRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8877;
			Match(OPEN_PAR_SYMBOL);
			State = 8878;
			columnInternalRef();
			State = 8883;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8879;
				Match(COMMA_SYMBOL);
				State = 8880;
				columnInternalRef();
				}
				}
				State = 8885;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 8886;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ColumnRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public ColumnRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_columnRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterColumnRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitColumnRef(this);
		}
	}

	[RuleVersion(0)]
	public ColumnRefContext columnRef() {
		ColumnRefContext _localctx = new ColumnRefContext(Context, State);
		EnterRule(_localctx, 1330, RULE_columnRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8888;
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InsertIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ColumnRefContext columnRef() {
			return GetRuleContext<ColumnRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableWildContext tableWild() {
			return GetRuleContext<TableWildContext>(0);
		}
		public InsertIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_insertIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInsertIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInsertIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public InsertIdentifierContext insertIdentifier() {
		InsertIdentifierContext _localctx = new InsertIdentifierContext(Context, State);
		EnterRule(_localctx, 1332, RULE_insertIdentifier);
		try {
			State = 8892;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1123,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8890;
				columnRef();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8891;
				tableWild();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IndexNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexName(this);
		}
	}

	[RuleVersion(0)]
	public IndexNameContext indexName() {
		IndexNameContext _localctx = new IndexNameContext(Context, State);
		EnterRule(_localctx, 1334, RULE_indexName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8894;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IndexRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldIdentifierContext fieldIdentifier() {
			return GetRuleContext<FieldIdentifierContext>(0);
		}
		public IndexRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_indexRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIndexRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIndexRef(this);
		}
	}

	[RuleVersion(0)]
	public IndexRefContext indexRef() {
		IndexRefContext _localctx = new IndexRefContext(Context, State);
		EnterRule(_localctx, 1336, RULE_indexRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8896;
			fieldIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableWildContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DOT_SYMBOL() { return GetTokens(MySqlParser.DOT_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL(int i) {
			return GetToken(MySqlParser.DOT_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		public TableWildContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableWild; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableWild(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableWild(this);
		}
	}

	[RuleVersion(0)]
	public TableWildContext tableWild() {
		TableWildContext _localctx = new TableWildContext(Context, State);
		EnterRule(_localctx, 1338, RULE_tableWild);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8898;
			identifier();
			State = 8899;
			Match(DOT_SYMBOL);
			State = 8903;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1124,Context) ) {
			case 1:
				{
				State = 8900;
				identifier();
				State = 8901;
				Match(DOT_SYMBOL);
				}
				break;
			}
			State = 8905;
			Match(MULT_OPERATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSchemaName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSchemaName(this);
		}
	}

	[RuleVersion(0)]
	public SchemaNameContext schemaName() {
		SchemaNameContext _localctx = new SchemaNameContext(Context, State);
		EnterRule(_localctx, 1340, RULE_schemaName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8907;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SchemaRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public SchemaRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schemaRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSchemaRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSchemaRef(this);
		}
	}

	[RuleVersion(0)]
	public SchemaRefContext schemaRef() {
		SchemaRefContext _localctx = new SchemaRefContext(Context, State);
		EnterRule(_localctx, 1342, RULE_schemaRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8909;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureName(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureNameContext procedureName() {
		ProcedureNameContext _localctx = new ProcedureNameContext(Context, State);
		EnterRule(_localctx, 1344, RULE_procedureName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8911;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProcedureRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public ProcedureRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_procedureRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterProcedureRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitProcedureRef(this);
		}
	}

	[RuleVersion(0)]
	public ProcedureRefContext procedureRef() {
		ProcedureRefContext _localctx = new ProcedureRefContext(Context, State);
		EnterRule(_localctx, 1346, RULE_procedureRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8913;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionName(this);
		}
	}

	[RuleVersion(0)]
	public FunctionNameContext functionName() {
		FunctionNameContext _localctx = new FunctionNameContext(Context, State);
		EnterRule(_localctx, 1348, RULE_functionName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8915;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public FunctionRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFunctionRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFunctionRef(this);
		}
	}

	[RuleVersion(0)]
	public FunctionRefContext functionRef() {
		FunctionRefContext _localctx = new FunctionRefContext(Context, State);
		EnterRule(_localctx, 1350, RULE_functionRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8917;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTriggerName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTriggerName(this);
		}
	}

	[RuleVersion(0)]
	public TriggerNameContext triggerName() {
		TriggerNameContext _localctx = new TriggerNameContext(Context, State);
		EnterRule(_localctx, 1352, RULE_triggerName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8919;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TriggerRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public TriggerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_triggerRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTriggerRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTriggerRef(this);
		}
	}

	[RuleVersion(0)]
	public TriggerRefContext triggerRef() {
		TriggerRefContext _localctx = new TriggerRefContext(Context, State);
		EnterRule(_localctx, 1354, RULE_triggerRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8921;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewName(this);
		}
	}

	[RuleVersion(0)]
	public ViewNameContext viewName() {
		ViewNameContext _localctx = new ViewNameContext(Context, State);
		EnterRule(_localctx, 1356, RULE_viewName);
		try {
			State = 8925;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1125,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8923;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8924;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ViewRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public ViewRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_viewRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterViewRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitViewRef(this);
		}
	}

	[RuleVersion(0)]
	public ViewRefContext viewRef() {
		ViewRefContext _localctx = new ViewRefContext(Context, State);
		EnterRule(_localctx, 1358, RULE_viewRef);
		try {
			State = 8929;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1126,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8927;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8928;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceName(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceNameContext tablespaceName() {
		TablespaceNameContext _localctx = new TablespaceNameContext(Context, State);
		EnterRule(_localctx, 1360, RULE_tablespaceName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8931;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TablespaceRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TablespaceRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tablespaceRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTablespaceRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTablespaceRef(this);
		}
	}

	[RuleVersion(0)]
	public TablespaceRefContext tablespaceRef() {
		TablespaceRefContext _localctx = new TablespaceRefContext(Context, State);
		EnterRule(_localctx, 1362, RULE_tablespaceRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8933;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupName(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupNameContext logfileGroupName() {
		LogfileGroupNameContext _localctx = new LogfileGroupNameContext(Context, State);
		EnterRule(_localctx, 1364, RULE_logfileGroupName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8935;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LogfileGroupRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public LogfileGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logfileGroupRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLogfileGroupRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLogfileGroupRef(this);
		}
	}

	[RuleVersion(0)]
	public LogfileGroupRefContext logfileGroupRef() {
		LogfileGroupRefContext _localctx = new LogfileGroupRefContext(Context, State);
		EnterRule(_localctx, 1366, RULE_logfileGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8937;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEventName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEventName(this);
		}
	}

	[RuleVersion(0)]
	public EventNameContext eventName() {
		EventNameContext _localctx = new EventNameContext(Context, State);
		EnterRule(_localctx, 1368, RULE_eventName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8939;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EventRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		public EventRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_eventRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEventRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEventRef(this);
		}
	}

	[RuleVersion(0)]
	public EventRefContext eventRef() {
		EventRefContext _localctx = new EventRefContext(Context, State);
		EnterRule(_localctx, 1370, RULE_eventRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8941;
			qualifiedIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UdfNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public UdfNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_udfName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUdfName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUdfName(this);
		}
	}

	[RuleVersion(0)]
	public UdfNameContext udfName() {
		UdfNameContext _localctx = new UdfNameContext(Context, State);
		EnterRule(_localctx, 1372, RULE_udfName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8943;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerName(this);
		}
	}

	[RuleVersion(0)]
	public ServerNameContext serverName() {
		ServerNameContext _localctx = new ServerNameContext(Context, State);
		EnterRule(_localctx, 1374, RULE_serverName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8945;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ServerRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public ServerRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_serverRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterServerRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitServerRef(this);
		}
	}

	[RuleVersion(0)]
	public ServerRefContext serverRef() {
		ServerRefContext _localctx = new ServerRefContext(Context, State);
		EnterRule(_localctx, 1376, RULE_serverRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8947;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EngineRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextOrIdentifierContext textOrIdentifier() {
			return GetRuleContext<TextOrIdentifierContext>(0);
		}
		public EngineRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engineRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEngineRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEngineRef(this);
		}
	}

	[RuleVersion(0)]
	public EngineRefContext engineRef() {
		EngineRefContext _localctx = new EngineRefContext(Context, State);
		EnterRule(_localctx, 1378, RULE_engineRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8949;
			textOrIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableName(this);
		}
	}

	[RuleVersion(0)]
	public TableNameContext tableName() {
		TableNameContext _localctx = new TableNameContext(Context, State);
		EnterRule(_localctx, 1380, RULE_tableName);
		try {
			State = 8953;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1127,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8951;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8952;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTableRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SchemaRefContext schemaRef() {
			return GetRuleContext<SchemaRefContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public FilterTableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTableRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFilterTableRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFilterTableRef(this);
		}
	}

	[RuleVersion(0)]
	public FilterTableRefContext filterTableRef() {
		FilterTableRefContext _localctx = new FilterTableRefContext(Context, State);
		EnterRule(_localctx, 1382, RULE_filterTableRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8955;
			schemaRef();
			State = 8956;
			dotIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefWithWildcardContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULT_OPERATOR() { return GetToken(MySqlParser.MULT_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefWithWildcardContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefWithWildcard; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableRefWithWildcard(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableRefWithWildcard(this);
		}
	}

	[RuleVersion(0)]
	public TableRefWithWildcardContext tableRefWithWildcard() {
		TableRefWithWildcardContext _localctx = new TableRefWithWildcardContext(Context, State);
		EnterRule(_localctx, 1384, RULE_tableRefWithWildcard);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8958;
			identifier();
			State = 8966;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1129,Context) ) {
			case 1:
				{
				State = 8959;
				Match(DOT_SYMBOL);
				State = 8960;
				Match(MULT_OPERATOR);
				}
				break;
			case 2:
				{
				State = 8961;
				dotIdentifier();
				State = 8964;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 8962;
					Match(DOT_SYMBOL);
					State = 8963;
					Match(MULT_OPERATOR);
					}
				}

				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public QualifiedIdentifierContext qualifiedIdentifier() {
			return GetRuleContext<QualifiedIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public TableRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableRef(this);
		}
	}

	[RuleVersion(0)]
	public TableRefContext tableRef() {
		TableRefContext _localctx = new TableRefContext(Context, State);
		EnterRule(_localctx, 1386, RULE_tableRef);
		try {
			State = 8970;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1130,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8968;
				qualifiedIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8969;
				dotIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext[] tableRef() {
			return GetRuleContexts<TableRefContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefContext tableRef(int i) {
			return GetRuleContext<TableRefContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableRefList(this);
		}
	}

	[RuleVersion(0)]
	public TableRefListContext tableRefList() {
		TableRefListContext _localctx = new TableRefListContext(Context, State);
		EnterRule(_localctx, 1388, RULE_tableRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8972;
			tableRef();
			State = 8977;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8973;
				Match(COMMA_SYMBOL);
				State = 8974;
				tableRef();
				}
				}
				State = 8979;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TableAliasRefListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TableRefWithWildcardContext[] tableRefWithWildcard() {
			return GetRuleContexts<TableRefWithWildcardContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TableRefWithWildcardContext tableRefWithWildcard(int i) {
			return GetRuleContext<TableRefWithWildcardContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TableAliasRefListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_tableAliasRefList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTableAliasRefList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTableAliasRefList(this);
		}
	}

	[RuleVersion(0)]
	public TableAliasRefListContext tableAliasRefList() {
		TableAliasRefListContext _localctx = new TableAliasRefListContext(Context, State);
		EnterRule(_localctx, 1390, RULE_tableAliasRefList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8980;
			tableRefWithWildcard();
			State = 8985;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 8981;
				Match(COMMA_SYMBOL);
				State = 8982;
				tableRefWithWildcard();
				}
				}
				State = 8987;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParameterNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ParameterNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameterName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterParameterName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitParameterName(this);
		}
	}

	[RuleVersion(0)]
	public ParameterNameContext parameterName() {
		ParameterNameContext _localctx = new ParameterNameContext(Context, State);
		EnterRule(_localctx, 1392, RULE_parameterName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8988;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		public LabelIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabelIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabelIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public LabelIdentifierContext labelIdentifier() {
		LabelIdentifierContext _localctx = new LabelIdentifierContext(Context, State);
		EnterRule(_localctx, 1394, RULE_labelIdentifier);
		try {
			State = 8992;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1133,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8990;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8991;
				labelKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelIdentifierContext labelIdentifier() {
			return GetRuleContext<LabelIdentifierContext>(0);
		}
		public LabelRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabelRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabelRef(this);
		}
	}

	[RuleVersion(0)]
	public LabelRefContext labelRef() {
		LabelRefContext _localctx = new LabelRefContext(Context, State);
		EnterRule(_localctx, 1396, RULE_labelRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 8994;
			labelIdentifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleKeywordContext roleKeyword() {
			return GetRuleContext<RoleKeywordContext>(0);
		}
		public RoleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierContext roleIdentifier() {
		RoleIdentifierContext _localctx = new RoleIdentifierContext(Context, State);
		EnterRule(_localctx, 1398, RULE_roleIdentifier);
		try {
			State = 8998;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1134,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 8996;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 8997;
				roleKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PluginRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public PluginRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pluginRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPluginRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPluginRef(this);
		}
	}

	[RuleVersion(0)]
	public PluginRefContext pluginRef() {
		PluginRefContext _localctx = new PluginRefContext(Context, State);
		EnterRule(_localctx, 1400, RULE_pluginRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9000;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ComponentRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public ComponentRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_componentRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterComponentRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitComponentRef(this);
		}
	}

	[RuleVersion(0)]
	public ComponentRefContext componentRef() {
		ComponentRefContext _localctx = new ComponentRefContext(Context, State);
		EnterRule(_localctx, 1402, RULE_componentRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9002;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceGroupRefContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ResourceGroupRefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceGroupRef; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterResourceGroupRef(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitResourceGroupRef(this);
		}
	}

	[RuleVersion(0)]
	public ResourceGroupRefContext resourceGroupRef() {
		ResourceGroupRefContext _localctx = new ResourceGroupRefContext(Context, State);
		EnterRule(_localctx, 1404, RULE_resourceGroupRef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9004;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WindowNameContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public WindowNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_windowName; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterWindowName(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitWindowName(this);
		}
	}

	[RuleVersion(0)]
	public WindowNameContext windowName() {
		WindowNameContext _localctx = new WindowNameContext(Context, State);
		EnterRule(_localctx, 1406, RULE_windowName);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9006;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PureIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(MySqlParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACK_TICK_QUOTED_ID() { return GetToken(MySqlParser.BACK_TICK_QUOTED_ID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySqlParser.DOUBLE_QUOTED_TEXT, 0); }
		public PureIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pureIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPureIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPureIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public PureIdentifierContext pureIdentifier() {
		PureIdentifierContext _localctx = new PureIdentifierContext(Context, State);
		EnterRule(_localctx, 1408, RULE_pureIdentifier);
		int _la;
		try {
			State = 9011;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1135,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9008;
				_la = TokenStream.LA(1);
				if ( !(_la==IDENTIFIER || _la==BACK_TICK_QUOTED_ID) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9009;
				if (!(this.IsPureIdentifier())) throw new FailedPredicateException(this, "this.IsPureIdentifier()");
				State = 9010;
				Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordContext identifierKeyword() {
			return GetRuleContext<IdentifierKeywordContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 1410, RULE_identifier);
		try {
			State = 9015;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1136,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9013;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9014;
				identifierKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public IdentifierListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierList(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListContext identifierList() {
		IdentifierListContext _localctx = new IdentifierListContext(Context, State);
		EnterRule(_localctx, 1412, RULE_identifierList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9017;
			identifier();
			State = 9022;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1137,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9018;
					Match(COMMA_SYMBOL);
					State = 9019;
					identifier();
					}
					}
				}
				State = 9024;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1137,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierListWithParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierListContext identifierList() {
			return GetRuleContext<IdentifierListContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public IdentifierListWithParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierListWithParentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierListWithParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierListWithParentheses(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierListWithParenthesesContext identifierListWithParentheses() {
		IdentifierListWithParenthesesContext _localctx = new IdentifierListWithParenthesesContext(Context, State);
		EnterRule(_localctx, 1414, RULE_identifierListWithParentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9025;
			Match(OPEN_PAR_SYMBOL);
			State = 9026;
			identifierList();
			State = 9027;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier() {
			return GetRuleContext<DotIdentifierContext>(0);
		}
		public QualifiedIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterQualifiedIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitQualifiedIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedIdentifierContext qualifiedIdentifier() {
		QualifiedIdentifierContext _localctx = new QualifiedIdentifierContext(Context, State);
		EnterRule(_localctx, 1416, RULE_qualifiedIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9029;
			identifier();
			State = 9031;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1138,Context) ) {
			case 1:
				{
				State = 9030;
				dotIdentifier();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SimpleIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext[] dotIdentifier() {
			return GetRuleContexts<DotIdentifierContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DotIdentifierContext dotIdentifier(int i) {
			return GetRuleContext<DotIdentifierContext>(i);
		}
		public SimpleIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_simpleIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSimpleIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSimpleIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public SimpleIdentifierContext simpleIdentifier() {
		SimpleIdentifierContext _localctx = new SimpleIdentifierContext(Context, State);
		EnterRule(_localctx, 1418, RULE_simpleIdentifier);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9033;
			identifier();
			State = 9038;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT_SYMBOL) {
				{
				State = 9034;
				dotIdentifier();
				State = 9036;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==DOT_SYMBOL) {
					{
					State = 9035;
					dotIdentifier();
					}
				}

				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DotIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public DotIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_dotIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterDotIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitDotIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public DotIdentifierContext dotIdentifier() {
		DotIdentifierContext _localctx = new DotIdentifierContext(Context, State);
		EnterRule(_localctx, 1420, RULE_dotIdentifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9040;
			Match(DOT_SYMBOL);
			State = 9041;
			identifier();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ulong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySqlParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySqlParser.FLOAT_NUMBER, 0); }
		public Ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUlong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUlong_number(this);
		}
	}

	[RuleVersion(0)]
	public Ulong_numberContext ulong_number() {
		Ulong_numberContext _localctx = new Ulong_numberContext(Context, State);
		EnterRule(_localctx, 1422, RULE_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9043;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 457396837154872L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		public Real_ulong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReal_ulong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReal_ulong_number(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulong_numberContext real_ulong_number() {
		Real_ulong_numberContext _localctx = new Real_ulong_numberContext(Context, State);
		EnterRule(_localctx, 1424, RULE_real_ulong_number);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9045;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 35184372088888L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UlonglongNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySqlParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySqlParser.FLOAT_NUMBER, 0); }
		public UlonglongNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ulonglongNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterUlonglongNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitUlonglongNumber(this);
		}
	}

	[RuleVersion(0)]
	public UlonglongNumberContext ulonglongNumber() {
		UlonglongNumberContext _localctx = new UlonglongNumberContext(Context, State);
		EnterRule(_localctx, 1426, RULE_ulonglongNumber);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9047;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 422212465066040L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Real_ulonglong_numberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		public Real_ulonglong_numberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_real_ulonglong_number; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterReal_ulonglong_number(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitReal_ulonglong_number(this);
		}
	}

	[RuleVersion(0)]
	public Real_ulonglong_numberContext real_ulonglong_number() {
		Real_ulonglong_numberContext _localctx = new Real_ulonglong_numberContext(Context, State);
		EnterRule(_localctx, 1428, RULE_real_ulonglong_number);
		try {
			State = 9054;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9049;
				Match(INT_NUMBER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9050;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 9051;
				Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9052;
				Match(ULONGLONG_NUMBER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9053;
				Match(LONG_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUS_OPERATOR() { return GetToken(MySqlParser.PLUS_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Ulong_numberContext ulong_number() {
			return GetRuleContext<Ulong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUS_OPERATOR() { return GetToken(MySqlParser.MINUS_OPERATOR, 0); }
		public SignedLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignedLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignedLiteral(this);
		}
	}

	[RuleVersion(0)]
	public SignedLiteralContext signedLiteral() {
		SignedLiteralContext _localctx = new SignedLiteralContext(Context, State);
		EnterRule(_localctx, 1430, RULE_signedLiteral);
		try {
			State = 9061;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1142,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9056;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9057;
				Match(PLUS_OPERATOR);
				State = 9058;
				ulong_number();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9059;
				Match(MINUS_OPERATOR);
				State = 9060;
				ulong_number();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedLiteralOrNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public SignedLiteralContext signedLiteral() {
			return GetRuleContext<SignedLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullAsLiteralContext nullAsLiteral() {
			return GetRuleContext<NullAsLiteralContext>(0);
		}
		public SignedLiteralOrNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedLiteralOrNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSignedLiteralOrNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSignedLiteralOrNull(this);
		}
	}

	[RuleVersion(0)]
	public SignedLiteralOrNullContext signedLiteralOrNull() {
		SignedLiteralOrNullContext _localctx = new SignedLiteralOrNullContext(Context, State);
		EnterRule(_localctx, 1432, RULE_signedLiteralOrNull);
		try {
			State = 9066;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1143,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9063;
				signedLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9064;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 9065;
				nullAsLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextLiteralContext textLiteral() {
			return GetRuleContext<TextLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NumLiteralContext numLiteral() {
			return GetRuleContext<NumLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TemporalLiteralContext temporalLiteral() {
			return GetRuleContext<TemporalLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullLiteralContext nullLiteral() {
			return GetRuleContext<NullLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BoolLiteralContext boolLiteral() {
			return GetRuleContext<BoolLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(MySqlParser.BIN_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySqlParser.UNDERSCORE_CHARSET, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 1434, RULE_literal);
		int _la;
		try {
			State = 9077;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1145,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9068;
				textLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9069;
				numLiteral();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9070;
				temporalLiteral();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9071;
				nullLiteral();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 9072;
				boolLiteral();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 9074;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==UNDERSCORE_CHARSET) {
					{
					State = 9073;
					Match(UNDERSCORE_CHARSET);
					}
				}

				State = 9076;
				_la = TokenStream.LA(1);
				if ( !(_la==HEX_NUMBER || _la==BIN_NUMBER) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralOrNullContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public NullAsLiteralContext nullAsLiteral() {
			return GetRuleContext<NullAsLiteralContext>(0);
		}
		public LiteralOrNullContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literalOrNull; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLiteralOrNull(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLiteralOrNull(this);
		}
	}

	[RuleVersion(0)]
	public LiteralOrNullContext literalOrNull() {
		LiteralOrNullContext _localctx = new LiteralOrNullContext(Context, State);
		EnterRule(_localctx, 1436, RULE_literalOrNull);
		try {
			State = 9082;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1146,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9079;
				literal();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9080;
				if (!(this.ServerVersion >= 80024)) throw new FailedPredicateException(this, "this.ServerVersion >= 80024");
				State = 9081;
				nullAsLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullAsLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		public NullAsLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullAsLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullAsLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullAsLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NullAsLiteralContext nullAsLiteral() {
		NullAsLiteralContext _localctx = new NullAsLiteralContext(Context, State);
		EnterRule(_localctx, 1438, RULE_nullAsLiteral);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9084;
			Match(NULL_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StringListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext[] textString() {
			return GetRuleContexts<TextStringContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringContext textString(int i) {
			return GetRuleContext<TextStringContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public StringListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stringList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStringList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStringList(this);
		}
	}

	[RuleVersion(0)]
	public StringListContext stringList() {
		StringListContext _localctx = new StringListContext(Context, State);
		EnterRule(_localctx, 1440, RULE_stringList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9086;
			Match(OPEN_PAR_SYMBOL);
			State = 9087;
			textString();
			State = 9092;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA_SYMBOL) {
				{
				{
				State = 9088;
				Match(COMMA_SYMBOL);
				State = 9089;
				textString();
				}
				}
				State = 9094;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 9095;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralContext : ParserRuleContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySqlParser.SINGLE_QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE_QUOTED_TEXT() { return GetToken(MySqlParser.DOUBLE_QUOTED_TEXT, 0); }
		public TextStringLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralContext textStringLiteral() {
		TextStringLiteralContext _localctx = new TextStringLiteralContext(Context, State);
		EnterRule(_localctx, 1442, RULE_textStringLiteral);
		try {
			State = 9100;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1148,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9097;
				_localctx.value = Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9098;
				if (!(this.IsTextStringLiteral())) throw new FailedPredicateException(this, "this.IsTextStringLiteral()");
				State = 9099;
				_localctx.value = Match(DOUBLE_QUOTED_TEXT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIN_NUMBER() { return GetToken(MySqlParser.BIN_NUMBER, 0); }
		public TextStringContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textString; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextString(this);
		}
	}

	[RuleVersion(0)]
	public TextStringContext textString() {
		TextStringContext _localctx = new TextStringContext(Context, State);
		EnterRule(_localctx, 1444, RULE_textString);
		try {
			State = 9105;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1149,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9102;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9103;
				Match(HEX_NUMBER);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9104;
				Match(BIN_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringHashContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HEX_NUMBER() { return GetToken(MySqlParser.HEX_NUMBER, 0); }
		public TextStringHashContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringHash; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextStringHash(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextStringHash(this);
		}
	}

	[RuleVersion(0)]
	public TextStringHashContext textStringHash() {
		TextStringHashContext _localctx = new TextStringHashContext(Context, State);
		EnterRule(_localctx, 1446, RULE_textStringHash);
		try {
			State = 9110;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1150,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9107;
				textStringLiteral();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9108;
				if (!(this.ServerVersion >= 80017)) throw new FailedPredicateException(this, "this.ServerVersion >= 80017");
				State = 9109;
				Match(HEX_NUMBER);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_TEXT() { return GetToken(MySqlParser.NCHAR_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDERSCORE_CHARSET() { return GetToken(MySqlParser.UNDERSCORE_CHARSET, 0); }
		public TextLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TextLiteralContext textLiteral() {
		TextLiteralContext _localctx = new TextLiteralContext(Context, State);
		EnterRule(_localctx, 1448, RULE_textLiteral);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9117;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1152,Context) ) {
			case 1:
				{
				State = 9113;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1151,Context) ) {
				case 1:
					{
					State = 9112;
					Match(UNDERSCORE_CHARSET);
					}
					break;
				}
				State = 9115;
				textStringLiteral();
				}
				break;
			case 2:
				{
				State = 9116;
				Match(NCHAR_TEXT);
				}
				break;
			}
			State = 9122;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1153,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9119;
					textStringLiteral();
					}
					}
				}
				State = 9124;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1153,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringNoLinebreakContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextStringNoLinebreakContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringNoLinebreak; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextStringNoLinebreak(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextStringNoLinebreak(this);
		}
	}

	[RuleVersion(0)]
	public TextStringNoLinebreakContext textStringNoLinebreak() {
		TextStringNoLinebreakContext _localctx = new TextStringNoLinebreakContext(Context, State);
		EnterRule(_localctx, 1450, RULE_textStringNoLinebreak);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9125;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextStringLiteralListContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext[] textStringLiteral() {
			return GetRuleContexts<TextStringLiteralContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral(int i) {
			return GetRuleContext<TextStringLiteralContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] COMMA_SYMBOL() { return GetTokens(MySqlParser.COMMA_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL(int i) {
			return GetToken(MySqlParser.COMMA_SYMBOL, i);
		}
		public TextStringLiteralListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textStringLiteralList; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextStringLiteralList(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextStringLiteralList(this);
		}
	}

	[RuleVersion(0)]
	public TextStringLiteralListContext textStringLiteralList() {
		TextStringLiteralListContext _localctx = new TextStringLiteralListContext(Context, State);
		EnterRule(_localctx, 1452, RULE_textStringLiteralList);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 9127;
			textStringLiteral();
			State = 9132;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1154,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 9128;
					Match(COMMA_SYMBOL);
					State = 9129;
					textStringLiteral();
					}
					}
				}
				State = 9134;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1154,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Int64LiteralContext int64Literal() {
			return GetRuleContext<Int64LiteralContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECIMAL_NUMBER() { return GetToken(MySqlParser.DECIMAL_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT_NUMBER() { return GetToken(MySqlParser.FLOAT_NUMBER, 0); }
		public NumLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNumLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNumLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NumLiteralContext numLiteral() {
		NumLiteralContext _localctx = new NumLiteralContext(Context, State);
		EnterRule(_localctx, 1454, RULE_numLiteral);
		try {
			State = 9138;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INT_NUMBER:
			case LONG_NUMBER:
			case ULONGLONG_NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9135;
				int64Literal();
				}
				break;
			case DECIMAL_NUMBER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9136;
				Match(DECIMAL_NUMBER);
				}
				break;
			case FLOAT_NUMBER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9137;
				Match(FLOAT_NUMBER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BoolLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUE_SYMBOL() { return GetToken(MySqlParser.TRUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FALSE_SYMBOL() { return GetToken(MySqlParser.FALSE_SYMBOL, 0); }
		public BoolLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_boolLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterBoolLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitBoolLiteral(this);
		}
	}

	[RuleVersion(0)]
	public BoolLiteralContext boolLiteral() {
		BoolLiteralContext _localctx = new BoolLiteralContext(Context, State);
		EnterRule(_localctx, 1456, RULE_boolLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9140;
			_la = TokenStream.LA(1);
			if ( !(_la==FALSE_SYMBOL || _la==TRUE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NullLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL_SYMBOL() { return GetToken(MySqlParser.NULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULL2_SYMBOL() { return GetToken(MySqlParser.NULL2_SYMBOL, 0); }
		public NullLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nullLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterNullLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitNullLiteral(this);
		}
	}

	[RuleVersion(0)]
	public NullLiteralContext nullLiteral() {
		NullLiteralContext _localctx = new NullLiteralContext(Context, State);
		EnterRule(_localctx, 1458, RULE_nullLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9142;
			_la = TokenStream.LA(1);
			if ( !(_la==NULL2_SYMBOL || _la==NULL_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Int64LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER() { return GetToken(MySqlParser.INT_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LONG_NUMBER() { return GetToken(MySqlParser.LONG_NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ULONGLONG_NUMBER() { return GetToken(MySqlParser.ULONGLONG_NUMBER, 0); }
		public Int64LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_int64Literal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterInt64Literal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitInt64Literal(this);
		}
	}

	[RuleVersion(0)]
	public Int64LiteralContext int64Literal() {
		Int64LiteralContext _localctx = new Int64LiteralContext(Context, State);
		EnterRule(_localctx, 1460, RULE_int64Literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9144;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 56L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TemporalLiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SINGLE_QUOTED_TEXT() { return GetToken(MySqlParser.SINGLE_QUOTED_TEXT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		public TemporalLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_temporalLiteral; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTemporalLiteral(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTemporalLiteral(this);
		}
	}

	[RuleVersion(0)]
	public TemporalLiteralContext temporalLiteral() {
		TemporalLiteralContext _localctx = new TemporalLiteralContext(Context, State);
		EnterRule(_localctx, 1462, RULE_temporalLiteral);
		try {
			State = 9152;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DATE_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9146;
				Match(DATE_SYMBOL);
				State = 9147;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIME_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9148;
				Match(TIME_SYMBOL);
				State = 9149;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			case TIMESTAMP_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9150;
				Match(TIMESTAMP_SYMBOL);
				State = 9151;
				Match(SINGLE_QUOTED_TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FieldLengthContext fieldLength() {
			return GetRuleContext<FieldLengthContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public FloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterFloatOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitFloatOptions(this);
		}
	}

	[RuleVersion(0)]
	public FloatOptionsContext floatOptions() {
		FloatOptionsContext _localctx = new FloatOptionsContext(Context, State);
		EnterRule(_localctx, 1464, RULE_floatOptions);
		try {
			State = 9156;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1157,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9154;
				fieldLength();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9155;
				precision();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StandardFloatOptionsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PrecisionContext precision() {
			return GetRuleContext<PrecisionContext>(0);
		}
		public StandardFloatOptionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_standardFloatOptions; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterStandardFloatOptions(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitStandardFloatOptions(this);
		}
	}

	[RuleVersion(0)]
	public StandardFloatOptionsContext standardFloatOptions() {
		StandardFloatOptionsContext _localctx = new StandardFloatOptionsContext(Context, State);
		EnterRule(_localctx, 1466, RULE_standardFloatOptions);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9158;
			precision();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrecisionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] INT_NUMBER() { return GetTokens(MySqlParser.INT_NUMBER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT_NUMBER(int i) {
			return GetToken(MySqlParser.INT_NUMBER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMA_SYMBOL() { return GetToken(MySqlParser.COMMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public PrecisionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_precision; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterPrecision(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitPrecision(this);
		}
	}

	[RuleVersion(0)]
	public PrecisionContext precision() {
		PrecisionContext _localctx = new PrecisionContext(Context, State);
		EnterRule(_localctx, 1468, RULE_precision);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9160;
			Match(OPEN_PAR_SYMBOL);
			State = 9161;
			Match(INT_NUMBER);
			State = 9162;
			Match(COMMA_SYMBOL);
			State = 9163;
			Match(INT_NUMBER);
			State = 9164;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextOrIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public TextOrIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_textOrIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterTextOrIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitTextOrIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public TextOrIdentifierContext textOrIdentifier() {
		TextOrIdentifierContext _localctx = new TextOrIdentifierContext(Context, State);
		EnterRule(_localctx, 1470, RULE_textOrIdentifier);
		try {
			State = 9168;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1158,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9166;
				identifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9167;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueIdentifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public LValueKeywordContext lValueKeyword() {
			return GetRuleContext<LValueKeywordContext>(0);
		}
		public LValueIdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueIdentifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLValueIdentifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLValueIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public LValueIdentifierContext lValueIdentifier() {
		LValueIdentifierContext _localctx = new LValueIdentifierContext(Context, State);
		EnterRule(_localctx, 1472, RULE_lValueIdentifier);
		try {
			State = 9172;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1159,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9170;
				pureIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9171;
				lValueKeyword();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleIdentifierOrTextContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleIdentifierContext roleIdentifier() {
			return GetRuleContext<RoleIdentifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public RoleIdentifierOrTextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleIdentifierOrText; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleIdentifierOrText(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleIdentifierOrText(this);
		}
	}

	[RuleVersion(0)]
	public RoleIdentifierOrTextContext roleIdentifierOrText() {
		RoleIdentifierOrTextContext _localctx = new RoleIdentifierOrTextContext(Context, State);
		EnterRule(_localctx, 1474, RULE_roleIdentifierOrText);
		try {
			State = 9176;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9174;
				roleIdentifier();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9175;
				textStringLiteral();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SizeNumberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Real_ulonglong_numberContext real_ulonglong_number() {
			return GetRuleContext<Real_ulonglong_numberContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public PureIdentifierContext pureIdentifier() {
			return GetRuleContext<PureIdentifierContext>(0);
		}
		public SizeNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sizeNumber; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSizeNumber(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSizeNumber(this);
		}
	}

	[RuleVersion(0)]
	public SizeNumberContext sizeNumber() {
		SizeNumberContext _localctx = new SizeNumberContext(Context, State);
		EnterRule(_localctx, 1476, RULE_sizeNumber);
		try {
			State = 9180;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9178;
				real_ulonglong_number();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9179;
				pureIdentifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAR_SYMBOL() { return GetToken(MySqlParser.OPEN_PAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAR_SYMBOL() { return GetToken(MySqlParser.CLOSE_PAR_SYMBOL, 0); }
		public ParenthesesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parentheses; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitParentheses(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesesContext parentheses() {
		ParenthesesContext _localctx = new ParenthesesContext(Context, State);
		EnterRule(_localctx, 1478, RULE_parentheses);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9182;
			Match(OPEN_PAR_SYMBOL);
			State = 9183;
			Match(CLOSE_PAR_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EqualContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EQUAL_OPERATOR() { return GetToken(MySqlParser.EQUAL_OPERATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OPERATOR() { return GetToken(MySqlParser.ASSIGN_OPERATOR, 0); }
		public EqualContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equal; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterEqual(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitEqual(this);
		}
	}

	[RuleVersion(0)]
	public EqualContext equal() {
		EqualContext _localctx = new EqualContext(Context, State);
		EnterRule(_localctx, 1480, RULE_equal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9185;
			_la = TokenStream.LA(1);
			if ( !(_la==EQUAL_OPERATOR || _la==ASSIGN_OPERATOR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OptionTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySqlParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		public OptionTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_optionType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterOptionType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitOptionType(this);
		}
	}

	[RuleVersion(0)]
	public OptionTypeContext optionType() {
		OptionTypeContext _localctx = new OptionTypeContext(Context, State);
		EnterRule(_localctx, 1482, RULE_optionType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9187;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RvalueSystemVariableTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		public RvalueSystemVariableTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rvalueSystemVariableType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRvalueSystemVariableType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRvalueSystemVariableType(this);
		}
	}

	[RuleVersion(0)]
	public RvalueSystemVariableTypeContext rvalueSystemVariableType() {
		RvalueSystemVariableTypeContext _localctx = new RvalueSystemVariableTypeContext(Context, State);
		EnterRule(_localctx, 1484, RULE_rvalueSystemVariableType);
		try {
			State = 9195;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case GLOBAL_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9189;
				Match(GLOBAL_SYMBOL);
				State = 9190;
				Match(DOT_SYMBOL);
				}
				break;
			case LOCAL_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9191;
				Match(LOCAL_SYMBOL);
				State = 9192;
				Match(DOT_SYMBOL);
				}
				break;
			case SESSION_SYMBOL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9193;
				Match(SESSION_SYMBOL);
				State = 9194;
				Match(DOT_SYMBOL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetVarIdentTypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOT_SYMBOL() { return GetToken(MySqlParser.DOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySqlParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		public SetVarIdentTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setVarIdentType; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterSetVarIdentType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitSetVarIdentType(this);
		}
	}

	[RuleVersion(0)]
	public SetVarIdentTypeContext setVarIdentType() {
		SetVarIdentTypeContext _localctx = new SetVarIdentTypeContext(Context, State);
		EnterRule(_localctx, 1486, RULE_setVarIdentType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9197;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 9198;
			Match(DOT_SYMBOL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class JsonAttributeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TextStringLiteralContext textStringLiteral() {
			return GetRuleContext<TextStringLiteralContext>(0);
		}
		public JsonAttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_jsonAttribute; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterJsonAttribute(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitJsonAttribute(this);
		}
	}

	[RuleVersion(0)]
	public JsonAttributeContext jsonAttribute() {
		JsonAttributeContext _localctx = new JsonAttributeContext(Context, State);
		EnterRule(_localctx, 1488, RULE_jsonAttribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9200;
			textStringLiteral();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LabelKeywordContext labelKeyword() {
			return GetRuleContext<LabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySqlParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySqlParser.RESTART_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public IdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeyword(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordContext identifierKeyword() {
		IdentifierKeywordContext _localctx = new IdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1490, RULE_identifierKeyword);
		try {
			State = 9218;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1165,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9202;
				if (!(this.ServerVersion < 80017)) throw new FailedPredicateException(this, "this.ServerVersion < 80017");
				State = 9209;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1163,Context) ) {
				case 1:
					{
					State = 9203;
					labelKeyword();
					}
					break;
				case 2:
					{
					State = 9204;
					roleOrIdentifierKeyword();
					}
					break;
				case 3:
					{
					State = 9205;
					Match(EXECUTE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 9206;
					Match(SHUTDOWN_SYMBOL);
					}
					break;
				case 5:
					{
					State = 9207;
					if (!(this.ServerVersion >= 80011)) throw new FailedPredicateException(this, "this.ServerVersion >= 80011");
					State = 9208;
					Match(RESTART_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9216;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1164,Context) ) {
				case 1:
					{
					State = 9211;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 9212;
					identifierKeywordsAmbiguous1RolesAndLabels();
					}
					break;
				case 3:
					{
					State = 9213;
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 4:
					{
					State = 9214;
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 5:
					{
					State = 9215;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous1RolesAndLabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXECUTE_SYMBOL() { return GetToken(MySqlParser.EXECUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTART_SYMBOL() { return GetToken(MySqlParser.RESTART_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHUTDOWN_SYMBOL() { return GetToken(MySqlParser.SHUTDOWN_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous1RolesAndLabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous1RolesAndLabels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
		IdentifierKeywordsAmbiguous1RolesAndLabelsContext _localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(Context, State);
		EnterRule(_localctx, 1492, RULE_identifierKeywordsAmbiguous1RolesAndLabels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9220;
			_la = TokenStream.LA(1);
			if ( !(_la==EXECUTE_SYMBOL || _la==SHUTDOWN_SYMBOL || _la==RESTART_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous2LabelsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySqlParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySqlParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySqlParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySqlParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySqlParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySqlParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySqlParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySqlParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySqlParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySqlParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySqlParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySqlParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySqlParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT_SYMBOL() { return GetToken(MySqlParser.IMPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySqlParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySqlParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySqlParser.PRECEDES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySqlParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySqlParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySqlParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySqlParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySqlParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySqlParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySqlParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySqlParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySqlParser.XA_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous2LabelsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous2Labels; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous2Labels(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous2Labels(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
		IdentifierKeywordsAmbiguous2LabelsContext _localctx = new IdentifierKeywordsAmbiguous2LabelsContext(Context, State);
		EnterRule(_localctx, 1494, RULE_identifierKeywordsAmbiguous2Labels);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9222;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 66)) & ~0x3f) == 0 && ((1L << (_la - 66)) & 45036683569136129L) != 0) || ((((_la - 134)) & ~0x3f) == 0 && ((1L << (_la - 134)) & 4612811919407972353L) != 0) || ((((_la - 229)) & ~0x3f) == 0 && ((1L << (_la - 229)) & 563224906825731L) != 0) || _la==LANGUAGE_SYMBOL || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & 10995116277761L) != 0) || ((((_la - 473)) & ~0x3f) == 0 && ((1L << (_la - 473)) & 22518006743572481L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -4602678819172646399L) != 0) || _la==XA_SYMBOL || _la==CLONE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySqlParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySqlParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySqlParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySqlParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public LabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_labelKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLabelKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLabelKeyword(this);
		}
	}

	[RuleVersion(0)]
	public LabelKeywordContext labelKeyword() {
		LabelKeywordContext _localctx = new LabelKeywordContext(Context, State);
		EnterRule(_localctx, 1496, RULE_labelKeyword);
		try {
			State = 9242;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1168,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9224;
				if (!(this.ServerVersion < 80017)) throw new FailedPredicateException(this, "this.ServerVersion < 80017");
				State = 9235;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1166,Context) ) {
				case 1:
					{
					State = 9225;
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 9226;
					Match(EVENT_SYMBOL);
					}
					break;
				case 3:
					{
					State = 9227;
					Match(FILE_SYMBOL);
					}
					break;
				case 4:
					{
					State = 9228;
					Match(NONE_SYMBOL);
					}
					break;
				case 5:
					{
					State = 9229;
					Match(PROCESS_SYMBOL);
					}
					break;
				case 6:
					{
					State = 9230;
					Match(PROXY_SYMBOL);
					}
					break;
				case 7:
					{
					State = 9231;
					Match(RELOAD_SYMBOL);
					}
					break;
				case 8:
					{
					State = 9232;
					Match(REPLICATION_SYMBOL);
					}
					break;
				case 9:
					{
					State = 9233;
					Match(RESOURCE_SYMBOL);
					}
					break;
				case 10:
					{
					State = 9234;
					Match(SUPER_SYMBOL);
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9240;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1167,Context) ) {
				case 1:
					{
					State = 9237;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 9238;
					identifierKeywordsAmbiguous3Roles();
					}
					break;
				case 3:
					{
					State = 9239;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous3RolesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENT_SYMBOL() { return GetToken(MySqlParser.EVENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_SYMBOL() { return GetToken(MySqlParser.FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NONE_SYMBOL() { return GetToken(MySqlParser.NONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESS_SYMBOL() { return GetToken(MySqlParser.PROCESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROXY_SYMBOL() { return GetToken(MySqlParser.PROXY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELOAD_SYMBOL() { return GetToken(MySqlParser.RELOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATION_SYMBOL() { return GetToken(MySqlParser.REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESOURCE_SYMBOL() { return GetToken(MySqlParser.RESOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySqlParser.SUPER_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous3RolesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous3Roles; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous3Roles(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous3Roles(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
		IdentifierKeywordsAmbiguous3RolesContext _localctx = new IdentifierKeywordsAmbiguous3RolesContext(Context, State);
		EnterRule(_localctx, 1498, RULE_identifierKeywordsAmbiguous3Roles);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9244;
			_la = TokenStream.LA(1);
			if ( !(_la==EVENT_SYMBOL || _la==FILE_SYMBOL || ((((_la - 390)) & ~0x3f) == 0 && ((1L << (_la - 390)) & 76561193665298433L) != 0) || _la==RELOAD_SYMBOL || _la==REPLICATION_SYMBOL || _la==SUPER_SYMBOL || _la==RESOURCE_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsUnambiguousContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySqlParser.ACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySqlParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySqlParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySqlParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySqlParser.ADMIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySqlParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySqlParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySqlParser.AGGREGATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySqlParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySqlParser.ANY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySqlParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTHENTICATION_SYMBOL() { return GetToken(MySqlParser.AUTHENTICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySqlParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySqlParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySqlParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySqlParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySqlParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySqlParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySqlParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySqlParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySqlParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySqlParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySqlParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySqlParser.BUCKETS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySqlParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySqlParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySqlParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHALLENGE_RESPONSE_SYMBOL() { return GetToken(MySqlParser.CHALLENGE_RESPONSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySqlParser.CHANGED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySqlParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySqlParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySqlParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySqlParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySqlParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySqlParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySqlParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySqlParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySqlParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySqlParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySqlParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySqlParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySqlParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySqlParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySqlParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySqlParser.CONCURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySqlParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySqlParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySqlParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySqlParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySqlParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySqlParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINITION_SYMBOL() { return GetToken(MySqlParser.DEFINITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySqlParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySqlParser.DESCRIPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySqlParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySqlParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySqlParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySqlParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySqlParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySqlParser.ENDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENFORCED_SYMBOL() { return GetToken(MySqlParser.ENFORCED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySqlParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySqlParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySqlParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySqlParser.ESCAPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySqlParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySqlParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCHANGE_SYMBOL() { return GetToken(MySqlParser.EXCHANGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySqlParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySqlParser.EXPANSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPIRE_SYMBOL() { return GetToken(MySqlParser.EXPIRE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySqlParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySqlParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FACTOR_SYMBOL() { return GetToken(MySqlParser.FACTOR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySqlParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySqlParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySqlParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FINISH_SYMBOL() { return GetToken(MySqlParser.FINISH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySqlParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySqlParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySqlParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySqlParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySqlParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySqlParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_MASTER_PUBLIC_KEY_SYMBOL() { return GetToken(MySqlParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_SOURCE_PUBLIC_KEY_SYMBOL() { return GetToken(MySqlParser.GET_SOURCE_PUBLIC_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySqlParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySqlParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTID_ONLY_SYMBOL() { return GetToken(MySqlParser.GTID_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySqlParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySqlParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySqlParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySqlParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySqlParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySqlParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySqlParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySqlParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SYMBOL() { return GetToken(MySqlParser.INITIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIATE_SYMBOL() { return GetToken(MySqlParser.INITIATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySqlParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySqlParser.INVISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySqlParser.INVOKER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySqlParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySqlParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySqlParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySqlParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySqlParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_VALUE_SYMBOL() { return GetToken(MySqlParser.JSON_VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEYRING_SYMBOL() { return GetToken(MySqlParser.KEYRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySqlParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySqlParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySqlParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySqlParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySqlParser.LOCKS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySqlParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySqlParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySqlParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySqlParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NETWORK_NAMESPACE_SYMBOL() { return GetToken(MySqlParser.NETWORK_NAMESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySqlParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySqlParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySqlParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySqlParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySqlParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySqlParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySqlParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySqlParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySqlParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySqlParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySqlParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySqlParser.MIGRATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySqlParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySqlParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySqlParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySqlParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySqlParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySqlParser.MUTEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySqlParser.MYSQL_ERRNO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySqlParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySqlParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySqlParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySqlParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySqlParser.NDBCLUSTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySqlParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySqlParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_SYMBOL() { return GetToken(MySqlParser.NEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySqlParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySqlParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySqlParser.NOWAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySqlParser.NO_WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySqlParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySqlParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySqlParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySqlParser.OFFSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OJ_SYMBOL() { return GetToken(MySqlParser.OJ_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySqlParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySqlParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONLY_SYMBOL() { return GetToken(MySqlParser.ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySqlParser.OPTIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySqlParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySqlParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySqlParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySqlParser.OTHERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySqlParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySqlParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySqlParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySqlParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySqlParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySqlParser.PARTITIONING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySqlParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySqlParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySqlParser.PLUGINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySqlParser.PLUGIN_DIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySqlParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySqlParser.PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySqlParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySqlParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySqlParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGE_CHECKS_USER_SYMBOL() { return GetToken(MySqlParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySqlParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySqlParser.PROFILES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySqlParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySqlParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySqlParser.READ_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySqlParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySqlParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySqlParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REFERENCE_SYMBOL() { return GetToken(MySqlParser.REFERENCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REGISTRATION_SYMBOL() { return GetToken(MySqlParser.REGISTRATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySqlParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySqlParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySqlParser.RELAY_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySqlParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL() { return GetToken(MySqlParser.ASSIGN_GTIDS_TO_ANONYMOUS_TRANSACTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySqlParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySqlParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICAS_SYMBOL() { return GetToken(MySqlParser.REPLICAS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICA_SYMBOL() { return GetToken(MySqlParser.REPLICA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySqlParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySqlParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySqlParser.RESTORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySqlParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySqlParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySqlParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNING_SYMBOL() { return GetToken(MySqlParser.RETURNING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySqlParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySqlParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySqlParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySqlParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySqlParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySqlParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySqlParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySqlParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySqlParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySqlParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySqlParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySqlParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySqlParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySqlParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySqlParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySqlParser.SIMPLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySqlParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySqlParser.SLOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySqlParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySqlParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySqlParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySqlParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_AUTO_POSITION_SYMBOL() { return GetToken(MySqlParser.SOURCE_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_BIND_SYMBOL() { return GetToken(MySqlParser.SOURCE_BIND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_COMPRESSION_ALGORITHM_SYMBOL() { return GetToken(MySqlParser.SOURCE_COMPRESSION_ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL() { return GetToken(MySqlParser.SOURCE_CONNECTION_AUTO_FAILOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_CONNECT_RETRY_SYMBOL() { return GetToken(MySqlParser.SOURCE_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_DELAY_SYMBOL() { return GetToken(MySqlParser.SOURCE_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySqlParser.SOURCE_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_HOST_SYMBOL() { return GetToken(MySqlParser.SOURCE_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.SOURCE_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_LOG_POS_SYMBOL() { return GetToken(MySqlParser.SOURCE_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PASSWORD_SYMBOL() { return GetToken(MySqlParser.SOURCE_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PORT_SYMBOL() { return GetToken(MySqlParser.SOURCE_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySqlParser.SOURCE_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_RETRY_COUNT_SYMBOL() { return GetToken(MySqlParser.SOURCE_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CAPATH_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CA_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CERT_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CIPHER_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CRLPATH_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_CRL_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_KEY_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL() { return GetToken(MySqlParser.SOURCE_SSL_VERIFY_SERVER_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySqlParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TLS_CIPHERSUITES_SYMBOL() { return GetToken(MySqlParser.SOURCE_TLS_CIPHERSUITES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_TLS_VERSION_SYMBOL() { return GetToken(MySqlParser.SOURCE_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_USER_SYMBOL() { return GetToken(MySqlParser.SOURCE_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL() { return GetToken(MySqlParser.SOURCE_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySqlParser.SQL_NO_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySqlParser.SQL_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySqlParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySqlParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySqlParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySqlParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySqlParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySqlParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ST_COLLECT_SYMBOL() { return GetToken(MySqlParser.ST_COLLECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySqlParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySqlParser.SUBJECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySqlParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySqlParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySqlParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySqlParser.SWAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySqlParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySqlParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySqlParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySqlParser.TEMPTABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySqlParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySqlParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySqlParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySqlParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD_SYMBOL() { return GetToken(MySqlParser.TIMESTAMPADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF_SYMBOL() { return GetToken(MySqlParser.TIMESTAMPDIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TLS_SYMBOL() { return GetToken(MySqlParser.TLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySqlParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_SYMBOL() { return GetToken(MySqlParser.TYPES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySqlParser.UNCOMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySqlParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySqlParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySqlParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNREGISTER_SYMBOL() { return GetToken(MySqlParser.UNREGISTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySqlParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySqlParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySqlParser.USE_FRM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALIDATION_SYMBOL() { return GetToken(MySqlParser.VALIDATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySqlParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySqlParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySqlParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySqlParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySqlParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySqlParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySqlParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WITHOUT_SYMBOL() { return GetToken(MySqlParser.WITHOUT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySqlParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySqlParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySqlParser.XID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySqlParser.XML_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ZONE_SYMBOL() { return GetToken(MySqlParser.ZONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARRAY_SYMBOL() { return GetToken(MySqlParser.ARRAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAILED_LOGIN_ATTEMPTS_SYMBOL() { return GetToken(MySqlParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMBER_SYMBOL() { return GetToken(MySqlParser.MEMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFF_SYMBOL() { return GetToken(MySqlParser.OFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_LOCK_TIME_SYMBOL() { return GetToken(MySqlParser.PASSWORD_LOCK_TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RANDOM_SYMBOL() { return GetToken(MySqlParser.RANDOM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.REQUIRE_ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() { return GetToken(MySqlParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STREAM_SYMBOL() { return GetToken(MySqlParser.STREAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BULK_SYMBOL() { return GetToken(MySqlParser.BULK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERATE_SYMBOL() { return GetToken(MySqlParser.GENERATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GTIDS_SYMBOL() { return GetToken(MySqlParser.GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOG_SYMBOL() { return GetToken(MySqlParser.LOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSE_TREE_SYMBOL() { return GetToken(MySqlParser.PARSE_TREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode S3_SYMBOL() { return GetToken(MySqlParser.S3_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BERNOULLI_SYMBOL() { return GetToken(MySqlParser.BERNOULLI_SYMBOL, 0); }
		public IdentifierKeywordsUnambiguousContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsUnambiguous; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsUnambiguous(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsUnambiguous(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
		IdentifierKeywordsUnambiguousContext _localctx = new IdentifierKeywordsUnambiguousContext(Context, State);
		EnterRule(_localctx, 1500, RULE_identifierKeywordsUnambiguous);
		int _la;
		try {
			State = 9251;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1169,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9246;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & 9086892652644541691L) != 0) || ((((_la - 114)) & ~0x3f) == 0 && ((1L << (_la - 114)) & -4412943208922816677L) != 0) || ((((_la - 178)) & ~0x3f) == 0 && ((1L << (_la - 178)) & -8429668761677951481L) != 0) || ((((_la - 243)) & ~0x3f) == 0 && ((1L << (_la - 243)) & 7283684567714153551L) != 0) || ((((_la - 310)) & ~0x3f) == 0 && ((1L << (_la - 310)) & 6223708532345118931L) != 0) || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & -8648045939034882561L) != 0) || ((((_la - 438)) & ~0x3f) == 0 && ((1L << (_la - 438)) & 8175298952803425509L) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & 4749773417287869291L) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & 8440016285667793983L) != 0) || ((((_la - 635)) & ~0x3f) == 0 && ((1L << (_la - 635)) & -9132393641699904475L) != 0) || ((((_la - 699)) & ~0x3f) == 0 && ((1L << (_la - 699)) & 8611416781445657001L) != 0) || ((((_la - 763)) & ~0x3f) == 0 && ((1L << (_la - 763)) & 2199023255551L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9247;
				if (!(this.ServerVersion >= 80019)) throw new FailedPredicateException(this, "this.ServerVersion >= 80019");
				State = 9248;
				_la = TokenStream.LA(1);
				if ( !(_la==TIMESTAMP_SYMBOL || _la==TIME_SYMBOL || ((((_la - 740)) & ~0x3f) == 0 && ((1L << (_la - 740)) & 16381L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9249;
				if (!(this.ServerVersion >= 80200)) throw new FailedPredicateException(this, "this.ServerVersion >= 80200");
				State = 9250;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 805)) & ~0x3f) == 0 && ((1L << (_la - 805)) & 2237L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrLabelKeywordContext roleOrLabelKeyword() {
			return GetRuleContext<RoleOrLabelKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
			return GetRuleContext<RoleOrIdentifierKeywordContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
			return GetRuleContext<IdentifierKeywordsAmbiguous4SystemVariablesContext>(0);
		}
		public RoleKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleKeywordContext roleKeyword() {
		RoleKeywordContext _localctx = new RoleKeywordContext(Context, State);
		EnterRule(_localctx, 1502, RULE_roleKeyword);
		try {
			State = 9263;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1172,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9253;
				if (!(this.ServerVersion < 80017)) throw new FailedPredicateException(this, "this.ServerVersion < 80017");
				State = 9256;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1170,Context) ) {
				case 1:
					{
					State = 9254;
					roleOrLabelKeyword();
					}
					break;
				case 2:
					{
					State = 9255;
					roleOrIdentifierKeyword();
					}
					break;
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9261;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1171,Context) ) {
				case 1:
					{
					State = 9258;
					identifierKeywordsUnambiguous();
					}
					break;
				case 2:
					{
					State = 9259;
					identifierKeywordsAmbiguous2Labels();
					}
					break;
				case 3:
					{
					State = 9260;
					identifierKeywordsAmbiguous4SystemVariables();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LValueKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsUnambiguousContext identifierKeywordsUnambiguous() {
			return GetRuleContext<IdentifierKeywordsUnambiguousContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous1RolesAndLabelsContext identifierKeywordsAmbiguous1RolesAndLabels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous1RolesAndLabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous2LabelsContext identifierKeywordsAmbiguous2Labels() {
			return GetRuleContext<IdentifierKeywordsAmbiguous2LabelsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IdentifierKeywordsAmbiguous3RolesContext identifierKeywordsAmbiguous3Roles() {
			return GetRuleContext<IdentifierKeywordsAmbiguous3RolesContext>(0);
		}
		public LValueKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lValueKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterLValueKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitLValueKeyword(this);
		}
	}

	[RuleVersion(0)]
	public LValueKeywordContext lValueKeyword() {
		LValueKeywordContext _localctx = new LValueKeywordContext(Context, State);
		EnterRule(_localctx, 1504, RULE_lValueKeyword);
		try {
			State = 9269;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1173,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9265;
				identifierKeywordsUnambiguous();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9266;
				identifierKeywordsAmbiguous1RolesAndLabels();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 9267;
				identifierKeywordsAmbiguous2Labels();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 9268;
				identifierKeywordsAmbiguous3Roles();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierKeywordsAmbiguous4SystemVariablesContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_SYMBOL() { return GetToken(MySqlParser.PERSIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PERSIST_ONLY_SYMBOL() { return GetToken(MySqlParser.PERSIST_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		public IdentifierKeywordsAmbiguous4SystemVariablesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifierKeywordsAmbiguous4SystemVariables; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitIdentifierKeywordsAmbiguous4SystemVariables(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierKeywordsAmbiguous4SystemVariablesContext identifierKeywordsAmbiguous4SystemVariables() {
		IdentifierKeywordsAmbiguous4SystemVariablesContext _localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(Context, State);
		EnterRule(_localctx, 1506, RULE_identifierKeywordsAmbiguous4SystemVariables);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9271;
			_la = TokenStream.LA(1);
			if ( !(_la==GLOBAL_SYMBOL || _la==LOCAL_SYMBOL || _la==SESSION_SYMBOL || _la==PERSIST_SYMBOL || _la==PERSIST_ONLY_SYMBOL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrIdentifierKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCOUNT_SYMBOL() { return GetToken(MySqlParser.ACCOUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASCII_SYMBOL() { return GetToken(MySqlParser.ASCII_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALWAYS_SYMBOL() { return GetToken(MySqlParser.ALWAYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BACKUP_SYMBOL() { return GetToken(MySqlParser.BACKUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BEGIN_SYMBOL() { return GetToken(MySqlParser.BEGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTE_SYMBOL() { return GetToken(MySqlParser.BYTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CACHE_SYMBOL() { return GetToken(MySqlParser.CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHARSET_SYMBOL() { return GetToken(MySqlParser.CHARSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHECKSUM_SYMBOL() { return GetToken(MySqlParser.CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLONE_SYMBOL() { return GetToken(MySqlParser.CLONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_SYMBOL() { return GetToken(MySqlParser.CLOSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMENT_SYMBOL() { return GetToken(MySqlParser.COMMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMIT_SYMBOL() { return GetToken(MySqlParser.COMMIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTAINS_SYMBOL() { return GetToken(MySqlParser.CONTAINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEALLOCATE_SYMBOL() { return GetToken(MySqlParser.DEALLOCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DO_SYMBOL() { return GetToken(MySqlParser.DO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode END_SYMBOL() { return GetToken(MySqlParser.END_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLUSH_SYMBOL() { return GetToken(MySqlParser.FLUSH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWS_SYMBOL() { return GetToken(MySqlParser.FOLLOWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FORMAT_SYMBOL() { return GetToken(MySqlParser.FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GROUP_REPLICATION_SYMBOL() { return GetToken(MySqlParser.GROUP_REPLICATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HANDLER_SYMBOL() { return GetToken(MySqlParser.HANDLER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HELP_SYMBOL() { return GetToken(MySqlParser.HELP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOST_SYMBOL() { return GetToken(MySqlParser.HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTALL_SYMBOL() { return GetToken(MySqlParser.INSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVISIBLE_SYMBOL() { return GetToken(MySqlParser.INVISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LANGUAGE_SYMBOL() { return GetToken(MySqlParser.LANGUAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_SYMBOL() { return GetToken(MySqlParser.NO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_SYMBOL() { return GetToken(MySqlParser.OPEN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONS_SYMBOL() { return GetToken(MySqlParser.OPTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OWNER_SYMBOL() { return GetToken(MySqlParser.OWNER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARSER_SYMBOL() { return GetToken(MySqlParser.PARSER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITION_SYMBOL() { return GetToken(MySqlParser.PARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PORT_SYMBOL() { return GetToken(MySqlParser.PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDES_SYMBOL() { return GetToken(MySqlParser.PRECEDES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREPARE_SYMBOL() { return GetToken(MySqlParser.PREPARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOVE_SYMBOL() { return GetToken(MySqlParser.REMOVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPAIR_SYMBOL() { return GetToken(MySqlParser.REPAIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESET_SYMBOL() { return GetToken(MySqlParser.RESET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESTORE_SYMBOL() { return GetToken(MySqlParser.RESTORE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLE_SYMBOL() { return GetToken(MySqlParser.ROLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLBACK_SYMBOL() { return GetToken(MySqlParser.ROLLBACK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SAVEPOINT_SYMBOL() { return GetToken(MySqlParser.SAVEPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_SYMBOL() { return GetToken(MySqlParser.SECONDARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_ENGINE_SYMBOL() { return GetToken(MySqlParser.SECONDARY_ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_LOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_LOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECONDARY_UNLOAD_SYMBOL() { return GetToken(MySqlParser.SECONDARY_UNLOAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECURITY_SYMBOL() { return GetToken(MySqlParser.SECURITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERVER_SYMBOL() { return GetToken(MySqlParser.SERVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIGNED_SYMBOL() { return GetToken(MySqlParser.SIGNED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOCKET_SYMBOL() { return GetToken(MySqlParser.SOCKET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLAVE_SYMBOL() { return GetToken(MySqlParser.SLAVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SONAME_SYMBOL() { return GetToken(MySqlParser.SONAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode START_SYMBOL() { return GetToken(MySqlParser.START_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STOP_SYMBOL() { return GetToken(MySqlParser.STOP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRUNCATE_SYMBOL() { return GetToken(MySqlParser.TRUNCATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNICODE_SYMBOL() { return GetToken(MySqlParser.UNICODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNINSTALL_SYMBOL() { return GetToken(MySqlParser.UNINSTALL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UPGRADE_SYMBOL() { return GetToken(MySqlParser.UPGRADE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VISIBLE_SYMBOL() { return GetToken(MySqlParser.VISIBLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WRAPPER_SYMBOL() { return GetToken(MySqlParser.WRAPPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XA_SYMBOL() { return GetToken(MySqlParser.XA_SYMBOL, 0); }
		public RoleOrIdentifierKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrIdentifierKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOrIdentifierKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOrIdentifierKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrIdentifierKeywordContext roleOrIdentifierKeyword() {
		RoleOrIdentifierKeywordContext _localctx = new RoleOrIdentifierKeywordContext(Context, State);
		EnterRule(_localctx, 1508, RULE_roleOrIdentifierKeyword);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9273;
			_la = TokenStream.LA(1);
			if ( !(((((_la - 50)) & ~0x3f) == 0 && ((1L << (_la - 50)) & 1197964097992328193L) != 0) || ((((_la - 119)) & ~0x3f) == 0 && ((1L << (_la - 119)) & 35184372121605L) != 0) || ((((_la - 184)) & ~0x3f) == 0 && ((1L << (_la - 184)) & 577692205326536705L) != 0) || ((((_la - 252)) & ~0x3f) == 0 && ((1L << (_la - 252)) & 70368811286569L) != 0) || ((((_la - 393)) & ~0x3f) == 0 && ((1L << (_la - 393)) & 11547170643969L) != 0) || ((((_la - 470)) & ~0x3f) == 0 && ((1L << (_la - 470)) & 7097956755589890057L) != 0) || ((((_la - 554)) & ~0x3f) == 0 && ((1L << (_la - 554)) & -4602678819172646399L) != 0) || ((((_la - 625)) & ~0x3f) == 0 && ((1L << (_la - 625)) & 2305957397077688321L) != 0) || ((((_la - 729)) & ~0x3f) == 0 && ((1L << (_la - 729)) & 15L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RoleOrLabelKeywordContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTION_SYMBOL() { return GetToken(MySqlParser.ACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACTIVE_SYMBOL() { return GetToken(MySqlParser.ACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADDDATE_SYMBOL() { return GetToken(MySqlParser.ADDDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AFTER_SYMBOL() { return GetToken(MySqlParser.AFTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGAINST_SYMBOL() { return GetToken(MySqlParser.AGAINST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AGGREGATE_SYMBOL() { return GetToken(MySqlParser.AGGREGATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALGORITHM_SYMBOL() { return GetToken(MySqlParser.ALGORITHM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ANY_SYMBOL() { return GetToken(MySqlParser.ANY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AT_SYMBOL() { return GetToken(MySqlParser.AT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO_INCREMENT_SYMBOL() { return GetToken(MySqlParser.AUTO_INCREMENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTOEXTEND_SIZE_SYMBOL() { return GetToken(MySqlParser.AUTOEXTEND_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_ROW_LENGTH_SYMBOL() { return GetToken(MySqlParser.AVG_ROW_LENGTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AVG_SYMBOL() { return GetToken(MySqlParser.AVG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BINLOG_SYMBOL() { return GetToken(MySqlParser.BINLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BIT_SYMBOL() { return GetToken(MySqlParser.BIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BLOCK_SYMBOL() { return GetToken(MySqlParser.BLOCK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_SYMBOL() { return GetToken(MySqlParser.BOOL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN_SYMBOL() { return GetToken(MySqlParser.BOOLEAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BTREE_SYMBOL() { return GetToken(MySqlParser.BTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BUCKETS_SYMBOL() { return GetToken(MySqlParser.BUCKETS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CASCADED_SYMBOL() { return GetToken(MySqlParser.CASCADED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CATALOG_NAME_SYMBOL() { return GetToken(MySqlParser.CATALOG_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHAIN_SYMBOL() { return GetToken(MySqlParser.CHAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANGED_SYMBOL() { return GetToken(MySqlParser.CHANGED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CHANNEL_SYMBOL() { return GetToken(MySqlParser.CHANNEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CIPHER_SYMBOL() { return GetToken(MySqlParser.CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLIENT_SYMBOL() { return GetToken(MySqlParser.CLIENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.CLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COALESCE_SYMBOL() { return GetToken(MySqlParser.COALESCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CODE_SYMBOL() { return GetToken(MySqlParser.CODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLLATION_SYMBOL() { return GetToken(MySqlParser.COLLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_NAME_SYMBOL() { return GetToken(MySqlParser.COLUMN_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMN_FORMAT_SYMBOL() { return GetToken(MySqlParser.COLUMN_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COLUMNS_SYMBOL() { return GetToken(MySqlParser.COLUMNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMMITTED_SYMBOL() { return GetToken(MySqlParser.COMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPACT_SYMBOL() { return GetToken(MySqlParser.COMPACT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPLETION_SYMBOL() { return GetToken(MySqlParser.COMPLETION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPONENT_SYMBOL() { return GetToken(MySqlParser.COMPONENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSED_SYMBOL() { return GetToken(MySqlParser.COMPRESSED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode COMPRESSION_SYMBOL() { return GetToken(MySqlParser.COMPRESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONCURRENT_SYMBOL() { return GetToken(MySqlParser.CONCURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONNECTION_SYMBOL() { return GetToken(MySqlParser.CONNECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSISTENT_SYMBOL() { return GetToken(MySqlParser.CONSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_CATALOG_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_CATALOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_SCHEMA_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_SCHEMA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONSTRAINT_NAME_SYMBOL() { return GetToken(MySqlParser.CONSTRAINT_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CONTEXT_SYMBOL() { return GetToken(MySqlParser.CONTEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CPU_SYMBOL() { return GetToken(MySqlParser.CPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURRENT_SYMBOL() { return GetToken(MySqlParser.CURRENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CURSOR_NAME_SYMBOL() { return GetToken(MySqlParser.CURSOR_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATA_SYMBOL() { return GetToken(MySqlParser.DATA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATAFILE_SYMBOL() { return GetToken(MySqlParser.DATAFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATETIME_SYMBOL() { return GetToken(MySqlParser.DATETIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE_SYMBOL() { return GetToken(MySqlParser.DATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DAY_SYMBOL() { return GetToken(MySqlParser.DAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFAULT_AUTH_SYMBOL() { return GetToken(MySqlParser.DEFAULT_AUTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEFINER_SYMBOL() { return GetToken(MySqlParser.DEFINER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DELAY_KEY_WRITE_SYMBOL() { return GetToken(MySqlParser.DELAY_KEY_WRITE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DESCRIPTION_SYMBOL() { return GetToken(MySqlParser.DESCRIPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIAGNOSTICS_SYMBOL() { return GetToken(MySqlParser.DIAGNOSTICS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DIRECTORY_SYMBOL() { return GetToken(MySqlParser.DIRECTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISABLE_SYMBOL() { return GetToken(MySqlParser.DISABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISCARD_SYMBOL() { return GetToken(MySqlParser.DISCARD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DISK_SYMBOL() { return GetToken(MySqlParser.DISK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUMPFILE_SYMBOL() { return GetToken(MySqlParser.DUMPFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DUPLICATE_SYMBOL() { return GetToken(MySqlParser.DUPLICATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DYNAMIC_SYMBOL() { return GetToken(MySqlParser.DYNAMIC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENCRYPTION_SYMBOL() { return GetToken(MySqlParser.ENCRYPTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENDS_SYMBOL() { return GetToken(MySqlParser.ENDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENUM_SYMBOL() { return GetToken(MySqlParser.ENUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_SYMBOL() { return GetToken(MySqlParser.ENGINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINES_SYMBOL() { return GetToken(MySqlParser.ENGINES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE_ATTRIBUTE_SYMBOL() { return GetToken(MySqlParser.ENGINE_ATTRIBUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERROR_SYMBOL() { return GetToken(MySqlParser.ERROR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ERRORS_SYMBOL() { return GetToken(MySqlParser.ERRORS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ESCAPE_SYMBOL() { return GetToken(MySqlParser.ESCAPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVENTS_SYMBOL() { return GetToken(MySqlParser.EVENTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EVERY_SYMBOL() { return GetToken(MySqlParser.EVERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXCLUDE_SYMBOL() { return GetToken(MySqlParser.EXCLUDE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPANSION_SYMBOL() { return GetToken(MySqlParser.EXPANSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXPORT_SYMBOL() { return GetToken(MySqlParser.EXPORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENDED_SYMBOL() { return GetToken(MySqlParser.EXTENDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode EXTENT_SIZE_SYMBOL() { return GetToken(MySqlParser.EXTENT_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAULTS_SYMBOL() { return GetToken(MySqlParser.FAULTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FAST_SYMBOL() { return GetToken(MySqlParser.FAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOLLOWING_SYMBOL() { return GetToken(MySqlParser.FOLLOWING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOUND_SYMBOL() { return GetToken(MySqlParser.FOUND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENABLE_SYMBOL() { return GetToken(MySqlParser.ENABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FULL_SYMBOL() { return GetToken(MySqlParser.FULL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILE_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.FILE_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FILTER_SYMBOL() { return GetToken(MySqlParser.FILTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIRST_SYMBOL() { return GetToken(MySqlParser.FIRST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FIXED_SYMBOL() { return GetToken(MySqlParser.FIXED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GENERAL_SYMBOL() { return GetToken(MySqlParser.GENERAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRY_SYMBOL() { return GetToken(MySqlParser.GEOMETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GEOMETRYCOLLECTION_SYMBOL() { return GetToken(MySqlParser.GEOMETRYCOLLECTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GET_FORMAT_SYMBOL() { return GetToken(MySqlParser.GET_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GRANTS_SYMBOL() { return GetToken(MySqlParser.GRANTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode GLOBAL_SYMBOL() { return GetToken(MySqlParser.GLOBAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HASH_SYMBOL() { return GetToken(MySqlParser.HASH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTOGRAM_SYMBOL() { return GetToken(MySqlParser.HISTOGRAM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HISTORY_SYMBOL() { return GetToken(MySqlParser.HISTORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOSTS_SYMBOL() { return GetToken(MySqlParser.HOSTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode HOUR_SYMBOL() { return GetToken(MySqlParser.HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIED_SYMBOL() { return GetToken(MySqlParser.IDENTIFIED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IGNORE_SERVER_IDS_SYMBOL() { return GetToken(MySqlParser.IGNORE_SERVER_IDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INVOKER_SYMBOL() { return GetToken(MySqlParser.INVOKER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INDEXES_SYMBOL() { return GetToken(MySqlParser.INDEXES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INITIAL_SIZE_SYMBOL() { return GetToken(MySqlParser.INITIAL_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSTANCE_SYMBOL() { return GetToken(MySqlParser.INSTANCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INACTIVE_SYMBOL() { return GetToken(MySqlParser.INACTIVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IO_SYMBOL() { return GetToken(MySqlParser.IO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IPC_SYMBOL() { return GetToken(MySqlParser.IPC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISOLATION_SYMBOL() { return GetToken(MySqlParser.ISOLATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ISSUER_SYMBOL() { return GetToken(MySqlParser.ISSUER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INSERT_METHOD_SYMBOL() { return GetToken(MySqlParser.INSERT_METHOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode JSON_SYMBOL() { return GetToken(MySqlParser.JSON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode KEY_BLOCK_SIZE_SYMBOL() { return GetToken(MySqlParser.KEY_BLOCK_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LAST_SYMBOL() { return GetToken(MySqlParser.LAST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEAVES_SYMBOL() { return GetToken(MySqlParser.LEAVES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LESS_SYMBOL() { return GetToken(MySqlParser.LESS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LEVEL_SYMBOL() { return GetToken(MySqlParser.LEVEL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LINESTRING_SYMBOL() { return GetToken(MySqlParser.LINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LIST_SYMBOL() { return GetToken(MySqlParser.LIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCAL_SYMBOL() { return GetToken(MySqlParser.LOCAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKED_SYMBOL() { return GetToken(MySqlParser.LOCKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOCKS_SYMBOL() { return GetToken(MySqlParser.LOCKS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGFILE_SYMBOL() { return GetToken(MySqlParser.LOGFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGS_SYMBOL() { return GetToken(MySqlParser.LOGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_ROWS_SYMBOL() { return GetToken(MySqlParser.MAX_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SYMBOL() { return GetToken(MySqlParser.MASTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HEARTBEAT_PERIOD_SYMBOL() { return GetToken(MySqlParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_HOST_SYMBOL() { return GetToken(MySqlParser.MASTER_HOST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PORT_SYMBOL() { return GetToken(MySqlParser.MASTER_PORT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_LOG_POS_SYMBOL() { return GetToken(MySqlParser.MASTER_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_USER_SYMBOL() { return GetToken(MySqlParser.MASTER_USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PASSWORD_SYMBOL() { return GetToken(MySqlParser.MASTER_PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_PUBLIC_KEY_PATH_SYMBOL() { return GetToken(MySqlParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_CONNECT_RETRY_SYMBOL() { return GetToken(MySqlParser.MASTER_CONNECT_RETRY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_RETRY_COUNT_SYMBOL() { return GetToken(MySqlParser.MASTER_RETRY_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_DELAY_SYMBOL() { return GetToken(MySqlParser.MASTER_DELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CA_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CA_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CAPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CAPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_TLS_VERSION_SYMBOL() { return GetToken(MySqlParser.MASTER_TLS_VERSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CERT_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CERT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CIPHER_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CIPHER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRL_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_CRLPATH_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_CRLPATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_SSL_KEY_SYMBOL() { return GetToken(MySqlParser.MASTER_SSL_KEY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MASTER_AUTO_POSITION_SYMBOL() { return GetToken(MySqlParser.MASTER_AUTO_POSITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_CONNECTIONS_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_QUERIES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_SIZE_SYMBOL() { return GetToken(MySqlParser.MAX_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_UPDATES_PER_HOUR_SYMBOL() { return GetToken(MySqlParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX_USER_CONNECTIONS_SYMBOL() { return GetToken(MySqlParser.MAX_USER_CONNECTIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEDIUM_SYMBOL() { return GetToken(MySqlParser.MEDIUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MEMORY_SYMBOL() { return GetToken(MySqlParser.MEMORY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MERGE_SYMBOL() { return GetToken(MySqlParser.MERGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MESSAGE_TEXT_SYMBOL() { return GetToken(MySqlParser.MESSAGE_TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MICROSECOND_SYMBOL() { return GetToken(MySqlParser.MICROSECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIGRATE_SYMBOL() { return GetToken(MySqlParser.MIGRATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MINUTE_SYMBOL() { return GetToken(MySqlParser.MINUTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN_ROWS_SYMBOL() { return GetToken(MySqlParser.MIN_ROWS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODIFY_SYMBOL() { return GetToken(MySqlParser.MODIFY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODE_SYMBOL() { return GetToken(MySqlParser.MODE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MONTH_SYMBOL() { return GetToken(MySqlParser.MONTH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTILINESTRING_SYMBOL() { return GetToken(MySqlParser.MULTILINESTRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOINT_SYMBOL() { return GetToken(MySqlParser.MULTIPOINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MULTIPOLYGON_SYMBOL() { return GetToken(MySqlParser.MULTIPOLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUTEX_SYMBOL() { return GetToken(MySqlParser.MUTEX_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MYSQL_ERRNO_SYMBOL() { return GetToken(MySqlParser.MYSQL_ERRNO_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME_SYMBOL() { return GetToken(MySqlParser.NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAMES_SYMBOL() { return GetToken(MySqlParser.NAMES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NATIONAL_SYMBOL() { return GetToken(MySqlParser.NATIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NCHAR_SYMBOL() { return GetToken(MySqlParser.NCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NDBCLUSTER_SYMBOL() { return GetToken(MySqlParser.NDBCLUSTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NESTED_SYMBOL() { return GetToken(MySqlParser.NESTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEVER_SYMBOL() { return GetToken(MySqlParser.NEVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEXT_SYMBOL() { return GetToken(MySqlParser.NEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEW_SYMBOL() { return GetToken(MySqlParser.NEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NO_WAIT_SYMBOL() { return GetToken(MySqlParser.NO_WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NODEGROUP_SYMBOL() { return GetToken(MySqlParser.NODEGROUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NULLS_SYMBOL() { return GetToken(MySqlParser.NULLS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NOWAIT_SYMBOL() { return GetToken(MySqlParser.NOWAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER_SYMBOL() { return GetToken(MySqlParser.NUMBER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NVARCHAR_SYMBOL() { return GetToken(MySqlParser.NVARCHAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OFFSET_SYMBOL() { return GetToken(MySqlParser.OFFSET_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OLD_SYMBOL() { return GetToken(MySqlParser.OLD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ONE_SYMBOL() { return GetToken(MySqlParser.ONE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPTIONAL_SYMBOL() { return GetToken(MySqlParser.OPTIONAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORDINALITY_SYMBOL() { return GetToken(MySqlParser.ORDINALITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ORGANIZATION_SYMBOL() { return GetToken(MySqlParser.ORGANIZATION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OTHERS_SYMBOL() { return GetToken(MySqlParser.OTHERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PACK_KEYS_SYMBOL() { return GetToken(MySqlParser.PACK_KEYS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PAGE_SYMBOL() { return GetToken(MySqlParser.PAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTIAL_SYMBOL() { return GetToken(MySqlParser.PARTIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONING_SYMBOL() { return GetToken(MySqlParser.PARTITIONING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARTITIONS_SYMBOL() { return GetToken(MySqlParser.PARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PASSWORD_SYMBOL() { return GetToken(MySqlParser.PASSWORD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PATH_SYMBOL() { return GetToken(MySqlParser.PATH_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PHASE_SYMBOL() { return GetToken(MySqlParser.PHASE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_DIR_SYMBOL() { return GetToken(MySqlParser.PLUGIN_DIR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGIN_SYMBOL() { return GetToken(MySqlParser.PLUGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PLUGINS_SYMBOL() { return GetToken(MySqlParser.PLUGINS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POINT_SYMBOL() { return GetToken(MySqlParser.POINT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode POLYGON_SYMBOL() { return GetToken(MySqlParser.POLYGON_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRECEDING_SYMBOL() { return GetToken(MySqlParser.PRECEDING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRESERVE_SYMBOL() { return GetToken(MySqlParser.PRESERVE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PREV_SYMBOL() { return GetToken(MySqlParser.PREV_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THREAD_PRIORITY_SYMBOL() { return GetToken(MySqlParser.THREAD_PRIORITY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRIVILEGES_SYMBOL() { return GetToken(MySqlParser.PRIVILEGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROCESSLIST_SYMBOL() { return GetToken(MySqlParser.PROCESSLIST_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILE_SYMBOL() { return GetToken(MySqlParser.PROFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PROFILES_SYMBOL() { return GetToken(MySqlParser.PROFILES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUARTER_SYMBOL() { return GetToken(MySqlParser.QUARTER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY_SYMBOL() { return GetToken(MySqlParser.QUERY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUICK_SYMBOL() { return GetToken(MySqlParser.QUICK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode READ_ONLY_SYMBOL() { return GetToken(MySqlParser.READ_ONLY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REBUILD_SYMBOL() { return GetToken(MySqlParser.REBUILD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RECOVER_SYMBOL() { return GetToken(MySqlParser.RECOVER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.REDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REDUNDANT_SYMBOL() { return GetToken(MySqlParser.REDUNDANT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_SYMBOL() { return GetToken(MySqlParser.RELAY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAYLOG_SYMBOL() { return GetToken(MySqlParser.RELAYLOG_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_FILE_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_FILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_LOG_POS_SYMBOL() { return GetToken(MySqlParser.RELAY_LOG_POS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RELAY_THREAD_SYMBOL() { return GetToken(MySqlParser.RELAY_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REMOTE_SYMBOL() { return GetToken(MySqlParser.REMOTE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REORGANIZE_SYMBOL() { return GetToken(MySqlParser.REORGANIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPEATABLE_SYMBOL() { return GetToken(MySqlParser.REPEATABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_DO_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_WILD_IGNORE_TABLE_SYMBOL() { return GetToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REPLICATE_REWRITE_DB_SYMBOL() { return GetToken(MySqlParser.REPLICATE_REWRITE_DB_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_RESOURCES_SYMBOL() { return GetToken(MySqlParser.USER_RESOURCES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESPECT_SYMBOL() { return GetToken(MySqlParser.RESPECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RESUME_SYMBOL() { return GetToken(MySqlParser.RESUME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETAIN_SYMBOL() { return GetToken(MySqlParser.RETAIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNED_SQLSTATE_SYMBOL() { return GetToken(MySqlParser.RETURNED_SQLSTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURNS_SYMBOL() { return GetToken(MySqlParser.RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REUSE_SYMBOL() { return GetToken(MySqlParser.REUSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REVERSE_SYMBOL() { return GetToken(MySqlParser.REVERSE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROLLUP_SYMBOL() { return GetToken(MySqlParser.ROLLUP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROTATE_SYMBOL() { return GetToken(MySqlParser.ROTATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROUTINE_SYMBOL() { return GetToken(MySqlParser.ROUTINE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_COUNT_SYMBOL() { return GetToken(MySqlParser.ROW_COUNT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ROW_FORMAT_SYMBOL() { return GetToken(MySqlParser.ROW_FORMAT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RTREE_SYMBOL() { return GetToken(MySqlParser.RTREE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEDULE_SYMBOL() { return GetToken(MySqlParser.SCHEDULE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SCHEMA_NAME_SYMBOL() { return GetToken(MySqlParser.SCHEMA_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SECOND_SYMBOL() { return GetToken(MySqlParser.SECOND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIAL_SYMBOL() { return GetToken(MySqlParser.SERIAL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SERIALIZABLE_SYMBOL() { return GetToken(MySqlParser.SERIALIZABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SESSION_SYMBOL() { return GetToken(MySqlParser.SESSION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHARE_SYMBOL() { return GetToken(MySqlParser.SHARE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SIMPLE_SYMBOL() { return GetToken(MySqlParser.SIMPLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SKIP_SYMBOL() { return GetToken(MySqlParser.SKIP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SLOW_SYMBOL() { return GetToken(MySqlParser.SLOW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SNAPSHOT_SYMBOL() { return GetToken(MySqlParser.SNAPSHOT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOUNDS_SYMBOL() { return GetToken(MySqlParser.SOUNDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SOURCE_SYMBOL() { return GetToken(MySqlParser.SOURCE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_AFTER_MTS_GAPS_SYMBOL() { return GetToken(MySqlParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BEFORE_GTIDS_SYMBOL() { return GetToken(MySqlParser.SQL_BEFORE_GTIDS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_BUFFER_RESULT_SYMBOL() { return GetToken(MySqlParser.SQL_BUFFER_RESULT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_NO_CACHE_SYMBOL() { return GetToken(MySqlParser.SQL_NO_CACHE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SQL_THREAD_SYMBOL() { return GetToken(MySqlParser.SQL_THREAD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SRID_SYMBOL() { return GetToken(MySqlParser.SRID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STACKED_SYMBOL() { return GetToken(MySqlParser.STACKED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STARTS_SYMBOL() { return GetToken(MySqlParser.STARTS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_AUTO_RECALC_SYMBOL() { return GetToken(MySqlParser.STATS_AUTO_RECALC_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_PERSISTENT_SYMBOL() { return GetToken(MySqlParser.STATS_PERSISTENT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATS_SAMPLE_PAGES_SYMBOL() { return GetToken(MySqlParser.STATS_SAMPLE_PAGES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STATUS_SYMBOL() { return GetToken(MySqlParser.STATUS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STORAGE_SYMBOL() { return GetToken(MySqlParser.STORAGE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_SYMBOL() { return GetToken(MySqlParser.STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBCLASS_ORIGIN_SYMBOL() { return GetToken(MySqlParser.SUBCLASS_ORIGIN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBDATE_SYMBOL() { return GetToken(MySqlParser.SUBDATE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBJECT_SYMBOL() { return GetToken(MySqlParser.SUBJECT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITION_SYMBOL() { return GetToken(MySqlParser.SUBPARTITION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUBPARTITIONS_SYMBOL() { return GetToken(MySqlParser.SUBPARTITIONS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUPER_SYMBOL() { return GetToken(MySqlParser.SUPER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SUSPEND_SYMBOL() { return GetToken(MySqlParser.SUSPEND_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWAPS_SYMBOL() { return GetToken(MySqlParser.SWAPS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SWITCHES_SYMBOL() { return GetToken(MySqlParser.SWITCHES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_NAME_SYMBOL() { return GetToken(MySqlParser.TABLE_NAME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLES_SYMBOL() { return GetToken(MySqlParser.TABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLE_CHECKSUM_SYMBOL() { return GetToken(MySqlParser.TABLE_CHECKSUM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TABLESPACE_SYMBOL() { return GetToken(MySqlParser.TABLESPACE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPORARY_SYMBOL() { return GetToken(MySqlParser.TEMPORARY_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEMPTABLE_SYMBOL() { return GetToken(MySqlParser.TEMPTABLE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT_SYMBOL() { return GetToken(MySqlParser.TEXT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode THAN_SYMBOL() { return GetToken(MySqlParser.THAN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIES_SYMBOL() { return GetToken(MySqlParser.TIES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRANSACTION_SYMBOL() { return GetToken(MySqlParser.TRANSACTION_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRIGGERS_SYMBOL() { return GetToken(MySqlParser.TRIGGERS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMP_SYMBOL() { return GetToken(MySqlParser.TIMESTAMP_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPADD_SYMBOL() { return GetToken(MySqlParser.TIMESTAMPADD_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIMESTAMPDIFF_SYMBOL() { return GetToken(MySqlParser.TIMESTAMPDIFF_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME_SYMBOL() { return GetToken(MySqlParser.TIME_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPES_SYMBOL() { return GetToken(MySqlParser.TYPES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TYPE_SYMBOL() { return GetToken(MySqlParser.TYPE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UDF_RETURNS_SYMBOL() { return GetToken(MySqlParser.UDF_RETURNS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNBOUNDED_SYMBOL() { return GetToken(MySqlParser.UNBOUNDED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNCOMMITTED_SYMBOL() { return GetToken(MySqlParser.UNCOMMITTED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDEFINED_SYMBOL() { return GetToken(MySqlParser.UNDEFINED_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDO_BUFFER_SIZE_SYMBOL() { return GetToken(MySqlParser.UNDO_BUFFER_SIZE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNDOFILE_SYMBOL() { return GetToken(MySqlParser.UNDOFILE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNKNOWN_SYMBOL() { return GetToken(MySqlParser.UNKNOWN_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode UNTIL_SYMBOL() { return GetToken(MySqlParser.UNTIL_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USER_SYMBOL() { return GetToken(MySqlParser.USER_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode USE_FRM_SYMBOL() { return GetToken(MySqlParser.USE_FRM_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLES_SYMBOL() { return GetToken(MySqlParser.VARIABLES_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VCPU_SYMBOL() { return GetToken(MySqlParser.VCPU_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIEW_SYMBOL() { return GetToken(MySqlParser.VIEW_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VALUE_SYMBOL() { return GetToken(MySqlParser.VALUE_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WARNINGS_SYMBOL() { return GetToken(MySqlParser.WARNINGS_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WAIT_SYMBOL() { return GetToken(MySqlParser.WAIT_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEEK_SYMBOL() { return GetToken(MySqlParser.WEEK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WORK_SYMBOL() { return GetToken(MySqlParser.WORK_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WEIGHT_STRING_SYMBOL() { return GetToken(MySqlParser.WEIGHT_STRING_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X509_SYMBOL() { return GetToken(MySqlParser.X509_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XID_SYMBOL() { return GetToken(MySqlParser.XID_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode XML_SYMBOL() { return GetToken(MySqlParser.XML_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode YEAR_SYMBOL() { return GetToken(MySqlParser.YEAR_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADMIN_SYMBOL() { return GetToken(MySqlParser.ADMIN_SYMBOL, 0); }
		public RoleOrLabelKeywordContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_roleOrLabelKeyword; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.EnterRoleOrLabelKeyword(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMySqlParserListener typedListener = listener as IMySqlParserListener;
			if (typedListener != null) typedListener.ExitRoleOrLabelKeyword(this);
		}
	}

	[RuleVersion(0)]
	public RoleOrLabelKeywordContext roleOrLabelKeyword() {
		RoleOrLabelKeywordContext _localctx = new RoleOrLabelKeywordContext(Context, State);
		EnterRule(_localctx, 1510, RULE_roleOrLabelKeyword);
		int _la;
		try {
			State = 9278;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1174,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 9275;
				_la = TokenStream.LA(1);
				if ( !(((((_la - 51)) & ~0x3f) == 0 && ((1L << (_la - 51)) & -5256386462840123267L) != 0) || ((((_la - 115)) & ~0x3f) == 0 && ((1L << (_la - 115)) & -2206471604461408339L) != 0) || ((((_la - 179)) & ~0x3f) == 0 && ((1L << (_la - 179)) & 4972508841280096003L) != 0) || ((((_la - 244)) & ~0x3f) == 0 && ((1L << (_la - 244)) & 3641842283857068591L) != 0) || ((((_la - 310)) & ~0x3f) == 0 && ((1L << (_la - 310)) & 6223708532345118939L) != 0) || ((((_la - 374)) & ~0x3f) == 0 && ((1L << (_la - 374)) & -8936355520825983489L) != 0) || ((((_la - 438)) & ~0x3f) == 0 && ((1L << (_la - 438)) & 8174173048601615589L) != 0) || ((((_la - 502)) & ~0x3f) == 0 && ((1L << (_la - 502)) & 4749773415677223275L) != 0) || ((((_la - 567)) & ~0x3f) == 0 && ((1L << (_la - 567)) & 8151794705609104959L) != 0) || ((((_la - 637)) & ~0x3f) == 0 && ((1L << (_la - 637)) & 6940555069192944905L) != 0) || ((((_la - 702)) & ~0x3f) == 0 && ((1L << (_la - 702)) & 72057652113112629L) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 9276;
				if (!(this.ServerVersion >= 80014)) throw new FailedPredicateException(this, "this.ServerVersion >= 80014");
				State = 9277;
				Match(ADMIN_SYMBOL);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return alterStatement_sempred((AlterStatementContext)_localctx, predIndex);
		case 15: return standaloneAlterCommands_sempred((StandaloneAlterCommandsContext)_localctx, predIndex);
		case 19: return alterListItem_sempred((AlterListItemContext)_localctx, predIndex);
		case 29: return alterTablespace_sempred((AlterTablespaceContext)_localctx, predIndex);
		case 34: return alterTablespaceOption_sempred((AlterTablespaceOptionContext)_localctx, predIndex);
		case 40: return alterInstanceStatement_sempred((AlterInstanceStatementContext)_localctx, predIndex);
		case 41: return createStatement_sempred((CreateStatementContext)_localctx, predIndex);
		case 43: return createDatabaseOption_sempred((CreateDatabaseOptionContext)_localctx, predIndex);
		case 54: return storedRoutineBody_sempred((StoredRoutineBodyContext)_localctx, predIndex);
		case 59: return routineOption_sempred((RoutineOptionContext)_localctx, predIndex);
		case 71: return tsDataFileName_sempred((TsDataFileNameContext)_localctx, predIndex);
		case 74: return tablespaceOption_sempred((TablespaceOptionContext)_localctx, predIndex);
		case 97: return dropStatement_sempred((DropStatementContext)_localctx, predIndex);
		case 118: return deleteStatement_sempred((DeleteStatementContext)_localctx, predIndex);
		case 132: return valuesReference_sempred((ValuesReferenceContext)_localctx, predIndex);
		case 137: return loadFrom_sempred((LoadFromContext)_localctx, predIndex);
		case 138: return loadSourceType_sempred((LoadSourceTypeContext)_localctx, predIndex);
		case 139: return sourceCount_sempred((SourceCountContext)_localctx, predIndex);
		case 140: return sourceOrder_sempred((SourceOrderContext)_localctx, predIndex);
		case 145: return loadAlgorithm_sempred((LoadAlgorithmContext)_localctx, predIndex);
		case 146: return loadParallel_sempred((LoadParallelContext)_localctx, predIndex);
		case 147: return loadMemory_sempred((LoadMemoryContext)_localctx, predIndex);
		case 150: return selectStatementWithInto_sempred((SelectStatementWithIntoContext)_localctx, predIndex);
		case 152: return queryExpressionBody_sempred((QueryExpressionBodyContext)_localctx, predIndex);
		case 154: return queryPrimary_sempred((QueryPrimaryContext)_localctx, predIndex);
		case 165: return qualifyClause_sempred((QualifyClauseContext)_localctx, predIndex);
		case 179: return groupByClause_sempred((GroupByClauseContext)_localctx, predIndex);
		case 189: return lockingClauseList_sempred((LockingClauseListContext)_localctx, predIndex);
		case 197: return tableReference_sempred((TableReferenceContext)_localctx, predIndex);
		case 203: return tableFactor_sempred((TableFactorContext)_localctx, predIndex);
		case 206: return derivedTable_sempred((DerivedTableContext)_localctx, predIndex);
		case 210: return jtColumn_sempred((JtColumnContext)_localctx, predIndex);
		case 217: return tableAlias_sempred((TableAliasContext)_localctx, predIndex);
		case 241: return masterOrBinaryLogsAndGtids_sempred((MasterOrBinaryLogsAndGtidsContext)_localctx, predIndex);
		case 244: return changeReplicationSource_sempred((ChangeReplicationSourceContext)_localctx, predIndex);
		case 247: return sourceDefinition_sempred((SourceDefinitionContext)_localctx, predIndex);
		case 307: return cloneStatement_sempred((CloneStatementContext)_localctx, predIndex);
		case 311: return alterUserStatement_sempred((AlterUserStatementContext)_localctx, predIndex);
		case 313: return alterUser_sempred((AlterUserContext)_localctx, predIndex);
		case 317: return createUserTail_sempred((CreateUserTailContext)_localctx, predIndex);
		case 322: return accountLockPasswordExpireOptions_sempred((AccountLockPasswordExpireOptionsContext)_localctx, predIndex);
		case 326: return grantTargetList_sempred((GrantTargetListContext)_localctx, predIndex);
		case 331: return versionedRequireClause_sempred((VersionedRequireClauseContext)_localctx, predIndex);
		case 333: return revokeStatement_sempred((RevokeStatementContext)_localctx, predIndex);
		case 337: return grantIdentifier_sempred((GrantIdentifierContext)_localctx, predIndex);
		case 340: return grantOption_sempred((GrantOptionContext)_localctx, predIndex);
		case 345: return histogramAutoUpdate_sempred((HistogramAutoUpdateContext)_localctx, predIndex);
		case 346: return histogramUpdateParam_sempred((HistogramUpdateParamContext)_localctx, predIndex);
		case 347: return histogramNumBuckets_sempred((HistogramNumBucketsContext)_localctx, predIndex);
		case 356: return installSetValueList_sempred((InstallSetValueListContext)_localctx, predIndex);
		case 358: return startOptionValueList_sempred((StartOptionValueListContext)_localctx, predIndex);
		case 363: return optionValueNoOptionType_sempred((OptionValueNoOptionTypeContext)_localctx, predIndex);
		case 374: return showParseTreeStatement_sempred((ShowParseTreeStatementContext)_localctx, predIndex);
		case 446: return utilityStatement_sempred((UtilityStatementContext)_localctx, predIndex);
		case 448: return explainStatement_sempred((ExplainStatementContext)_localctx, predIndex);
		case 449: return explainOptions_sempred((ExplainOptionsContext)_localctx, predIndex);
		case 455: return expr_sempred((ExprContext)_localctx, predIndex);
		case 456: return boolPri_sempred((BoolPriContext)_localctx, predIndex);
		case 458: return predicate_sempred((PredicateContext)_localctx, predIndex);
		case 460: return bitExpr_sempred((BitExprContext)_localctx, predIndex);
		case 461: return simpleExpr_sempred((SimpleExprContext)_localctx, predIndex);
		case 462: return arrayCast_sempred((ArrayCastContext)_localctx, predIndex);
		case 466: return windowFunctionCall_sempred((WindowFunctionCallContext)_localctx, predIndex);
		case 469: return tablesampleClause_sempred((TablesampleClauseContext)_localctx, predIndex);
		case 471: return leadLagInfo_sempred((LeadLagInfoContext)_localctx, predIndex);
		case 480: return runtimeFunctionCall_sempred((RuntimeFunctionCallContext)_localctx, predIndex);
		case 498: return lvalueVariable_sempred((LvalueVariableContext)_localctx, predIndex);
		case 503: return castType_sempred((CastTypeContext)_localctx, predIndex);
		case 559: return checkOrReferences_sempred((CheckOrReferencesContext)_localctx, predIndex);
		case 561: return constraintEnforcement_sempred((ConstraintEnforcementContext)_localctx, predIndex);
		case 565: return columnAttribute_sempred((ColumnAttributeContext)_localctx, predIndex);
		case 576: return keyPartOrExpression_sempred((KeyPartOrExpressionContext)_localctx, predIndex);
		case 579: return commonIndexOption_sempred((CommonIndexOptionContext)_localctx, predIndex);
		case 596: return charsetName_sempred((CharsetNameContext)_localctx, predIndex);
		case 597: return collationName_sempred((CollationNameContext)_localctx, predIndex);
		case 602: return createTableOption_sempred((CreateTableOptionContext)_localctx, predIndex);
		case 621: return persistedVariableIdentifier_sempred((PersistedVariableIdentifierContext)_localctx, predIndex);
		case 704: return pureIdentifier_sempred((PureIdentifierContext)_localctx, predIndex);
		case 714: return real_ulonglong_number_sempred((Real_ulonglong_numberContext)_localctx, predIndex);
		case 716: return signedLiteralOrNull_sempred((SignedLiteralOrNullContext)_localctx, predIndex);
		case 718: return literalOrNull_sempred((LiteralOrNullContext)_localctx, predIndex);
		case 721: return textStringLiteral_sempred((TextStringLiteralContext)_localctx, predIndex);
		case 723: return textStringHash_sempred((TextStringHashContext)_localctx, predIndex);
		case 745: return identifierKeyword_sempred((IdentifierKeywordContext)_localctx, predIndex);
		case 748: return labelKeyword_sempred((LabelKeywordContext)_localctx, predIndex);
		case 750: return identifierKeywordsUnambiguous_sempred((IdentifierKeywordsUnambiguousContext)_localctx, predIndex);
		case 751: return roleKeyword_sempred((RoleKeywordContext)_localctx, predIndex);
		case 755: return roleOrLabelKeyword_sempred((RoleOrLabelKeywordContext)_localctx, predIndex);
		}
		return true;
	}
	private bool alterStatement_sempred(AlterStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool standaloneAlterCommands_sempred(StandaloneAlterCommandsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool alterListItem_sempred(AlterListItemContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return this.ServerVersion >= 80017;
		case 3: return this.ServerVersion >= 80019;
		case 4: return this.ServerVersion >= 80014;
		case 5: return this.ServerVersion >= 80024;
		case 6: return this.ServerVersion >= 80017;
		case 7: return this.ServerVersion >= 80019;
		case 8: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool alterTablespace_sempred(AlterTablespaceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 9: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool alterTablespaceOption_sempred(AlterTablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool alterInstanceStatement_sempred(AlterInstanceStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 11: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool createStatement_sempred(CreateStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return this.ServerVersion >= 80011;
		case 13: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool createDatabaseOption_sempred(CreateDatabaseOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 14: return this.ServerVersion >= 80016;
		}
		return true;
	}
	private bool storedRoutineBody_sempred(StoredRoutineBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 15: return this.IsStoredRoutineBody();
		}
		return true;
	}
	private bool routineOption_sempred(RoutineOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return this.ServerVersion >= 80032;
		}
		return true;
	}
	private bool tsDataFileName_sempred(TsDataFileNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 17: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool tablespaceOption_sempred(TablespaceOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool dropStatement_sempred(DropStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return this.ServerVersion >= 80011;
		case 20: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool deleteStatement_sempred(DeleteStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return this.ServerVersion >= 80017;
		}
		return true;
	}
	private bool valuesReference_sempred(ValuesReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 22: return  this.ServerVersion >= 80018;
		}
		return true;
	}
	private bool loadFrom_sempred(LoadFromContext _localctx, int predIndex) {
		switch (predIndex) {
		case 23: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool loadSourceType_sempred(LoadSourceTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 24: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool sourceCount_sempred(SourceCountContext _localctx, int predIndex) {
		switch (predIndex) {
		case 25: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool sourceOrder_sempred(SourceOrderContext _localctx, int predIndex) {
		switch (predIndex) {
		case 26: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool loadAlgorithm_sempred(LoadAlgorithmContext _localctx, int predIndex) {
		switch (predIndex) {
		case 27: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool loadParallel_sempred(LoadParallelContext _localctx, int predIndex) {
		switch (predIndex) {
		case 28: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool loadMemory_sempred(LoadMemoryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 29: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool selectStatementWithInto_sempred(SelectStatementWithIntoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 30: return this.IsSelectStatementWithInto();
		}
		return true;
	}
	private bool queryExpressionBody_sempred(QueryExpressionBodyContext _localctx, int predIndex) {
		switch (predIndex) {
		case 31: return this.ServerVersion >= 80031;
		}
		return true;
	}
	private bool queryPrimary_sempred(QueryPrimaryContext _localctx, int predIndex) {
		switch (predIndex) {
		case 32: return this.ServerVersion >= 80019;
		case 33: return this.ServerVersion >= 80019;
		}
		return true;
	}
	private bool qualifyClause_sempred(QualifyClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 34: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool groupByClause_sempred(GroupByClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 35: return this.ServerVersion >= 80032;
		}
		return true;
	}
	private bool lockingClauseList_sempred(LockingClauseListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 36: return this.ServerVersion >= 80031;
		}
		return true;
	}
	private bool tableReference_sempred(TableReferenceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 37: return this.ServerVersion < 80017;
		}
		return true;
	}
	private bool tableFactor_sempred(TableFactorContext _localctx, int predIndex) {
		switch (predIndex) {
		case 38: return this.ServerVersion >= 80004;
		}
		return true;
	}
	private bool derivedTable_sempred(DerivedTableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 39: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool jtColumn_sempred(JtColumnContext _localctx, int predIndex) {
		switch (predIndex) {
		case 40: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool tableAlias_sempred(TableAliasContext _localctx, int predIndex) {
		switch (predIndex) {
		case 41: return this.ServerVersion < 80017;
		}
		return true;
	}
	private bool masterOrBinaryLogsAndGtids_sempred(MasterOrBinaryLogsAndGtidsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 42: return this.ServerVersion >= 80032;
		}
		return true;
	}
	private bool changeReplicationSource_sempred(ChangeReplicationSourceContext _localctx, int predIndex) {
		switch (predIndex) {
		case 43: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool sourceDefinition_sempred(SourceDefinitionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 44: return this.ServerVersion >= 80024;
		case 45: return this.ServerVersion >= 80024;
		case 46: return this.ServerVersion >= 80027;
		}
		return true;
	}
	private bool cloneStatement_sempred(CloneStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 47: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool alterUserStatement_sempred(AlterUserStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 48: return this.ServerVersion < 80014;
		case 49: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool alterUser_sempred(AlterUserContext _localctx, int predIndex) {
		switch (predIndex) {
		case 50: return this.ServerVersion < 80025;
		case 51: return this.ServerVersion >= 80025;
		}
		return true;
	}
	private bool createUserTail_sempred(CreateUserTailContext _localctx, int predIndex) {
		switch (predIndex) {
		case 52: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool accountLockPasswordExpireOptions_sempred(AccountLockPasswordExpireOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 53: return this.ServerVersion >= 80014;
		}
		return true;
	}
	private bool grantTargetList_sempred(GrantTargetListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 54: return this.ServerVersion < 80011;
		case 55: return this.ServerVersion >= 80011;
		}
		return true;
	}
	private bool versionedRequireClause_sempred(VersionedRequireClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 56: return this.ServerVersion < 80011;
		}
		return true;
	}
	private bool revokeStatement_sempred(RevokeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 57: return this.ServerVersion >= 80031;
		case 58: return this.ServerVersion >= 80031;
		}
		return true;
	}
	private bool grantIdentifier_sempred(GrantIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 59: return this.ServerVersion >= 80017;
		}
		return true;
	}
	private bool grantOption_sempred(GrantOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 60: return this.ServerVersion < 80011;
		}
		return true;
	}
	private bool histogramAutoUpdate_sempred(HistogramAutoUpdateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 61: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool histogramUpdateParam_sempred(HistogramUpdateParamContext _localctx, int predIndex) {
		switch (predIndex) {
		case 62: return this.ServerVersion >= 80031;
		}
		return true;
	}
	private bool histogramNumBuckets_sempred(HistogramNumBucketsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 63: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool installSetValueList_sempred(InstallSetValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 64: return this.ServerVersion >= 80032;
		}
		return true;
	}
	private bool startOptionValueList_sempred(StartOptionValueListContext _localctx, int predIndex) {
		switch (predIndex) {
		case 65: return this.ServerVersion < 80014;
		case 66: return this.ServerVersion >= 80018;
		}
		return true;
	}
	private bool optionValueNoOptionType_sempred(OptionValueNoOptionTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 67: return this.ServerVersion >= 80011;
		}
		return true;
	}
	private bool showParseTreeStatement_sempred(ShowParseTreeStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 68: return this.ServerVersion >= 80100;
		}
		return true;
	}
	private bool utilityStatement_sempred(UtilityStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 69: return this.ServerVersion >= 80011;
		}
		return true;
	}
	private bool explainStatement_sempred(ExplainStatementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 70: return this.ServerVersion >= 80032;
		}
		return true;
	}
	private bool explainOptions_sempred(ExplainOptionsContext _localctx, int predIndex) {
		switch (predIndex) {
		case 71: return this.ServerVersion >= 80032;
		case 72: return this.ServerVersion < 80012;
		case 73: return this.ServerVersion >= 80018;
		case 74: return this.ServerVersion >= 80019;
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 75: return Precpred(Context, 3);
		case 76: return Precpred(Context, 2);
		case 77: return Precpred(Context, 1);
		}
		return true;
	}
	private bool boolPri_sempred(BoolPriContext _localctx, int predIndex) {
		switch (predIndex) {
		case 78: return Precpred(Context, 3);
		case 79: return Precpred(Context, 2);
		case 80: return Precpred(Context, 1);
		}
		return true;
	}
	private bool predicate_sempred(PredicateContext _localctx, int predIndex) {
		switch (predIndex) {
		case 81: return this.ServerVersion >= 80017;
		}
		return true;
	}
	private bool bitExpr_sempred(BitExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 82: return Precpred(Context, 7);
		case 83: return Precpred(Context, 6);
		case 84: return Precpred(Context, 5);
		case 85: return Precpred(Context, 3);
		case 86: return Precpred(Context, 2);
		case 87: return Precpred(Context, 1);
		case 88: return Precpred(Context, 4);
		}
		return true;
	}
	private bool simpleExpr_sempred(SimpleExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 89: return Precpred(Context, 16);
		case 90: return Precpred(Context, 24);
		}
		return true;
	}
	private bool arrayCast_sempred(ArrayCastContext _localctx, int predIndex) {
		switch (predIndex) {
		case 91: return this.ServerVersion >= 80017;
		}
		return true;
	}
	private bool windowFunctionCall_sempred(WindowFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 92: return this.ServerVersion < 80024;
		}
		return true;
	}
	private bool tablesampleClause_sempred(TablesampleClauseContext _localctx, int predIndex) {
		switch (predIndex) {
		case 93: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool leadLagInfo_sempred(LeadLagInfoContext _localctx, int predIndex) {
		switch (predIndex) {
		case 94: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool runtimeFunctionCall_sempred(RuntimeFunctionCallContext _localctx, int predIndex) {
		switch (predIndex) {
		case 95: return this.ServerVersion >= 80032;
		case 96: return this.ServerVersion < 80011;
		}
		return true;
	}
	private bool lvalueVariable_sempred(LvalueVariableContext _localctx, int predIndex) {
		switch (predIndex) {
		case 97: return this.ServerVersion >= 80017;
		}
		return true;
	}
	private bool castType_sempred(CastTypeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 98: return this.ServerVersion >= 80024;
		case 99: return this.ServerVersion >= 80017;
		case 100: return this.ServerVersion >= 80017;
		case 101: return this.ServerVersion >= 80027;
		}
		return true;
	}
	private bool checkOrReferences_sempred(CheckOrReferencesContext _localctx, int predIndex) {
		switch (predIndex) {
		case 102: return this.ServerVersion < 80016;
		}
		return true;
	}
	private bool constraintEnforcement_sempred(ConstraintEnforcementContext _localctx, int predIndex) {
		switch (predIndex) {
		case 103: return  this.ServerVersion >= 80017;
		}
		return true;
	}
	private bool columnAttribute_sempred(ColumnAttributeContext _localctx, int predIndex) {
		switch (predIndex) {
		case 104: return this.ServerVersion >= 80014;
		case 105: return this.ServerVersion >= 80013;
		case 106: return this.ServerVersion >= 80017;
		case 107: return this.ServerVersion >= 80017;
		case 108: return this.ServerVersion >= 80024;
		case 109: return this.ServerVersion >= 80024;
		case 110: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool keyPartOrExpression_sempred(KeyPartOrExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 111: return this.ServerVersion >= 80013;
		}
		return true;
	}
	private bool commonIndexOption_sempred(CommonIndexOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 112: return this.ServerVersion >= 80024;
		case 113: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool charsetName_sempred(CharsetNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 114: return this.ServerVersion < 80011;
		}
		return true;
	}
	private bool collationName_sempred(CollationNameContext _localctx, int predIndex) {
		switch (predIndex) {
		case 115: return this.ServerVersion < 80011;
		case 116: return this.ServerVersion >= 80018;
		}
		return true;
	}
	private bool createTableOption_sempred(CreateTableOptionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 117: return this.ServerVersion >= 80014;
		case 118: return this.ServerVersion >= 80024;
		case 119: return this.ServerVersion >= 80024;
		case 120: return this.ServerVersion >= 80024;
		case 121: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool persistedVariableIdentifier_sempred(PersistedVariableIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 122: return this.ServerVersion >= 80032;
		}
		return true;
	}
	private bool pureIdentifier_sempred(PureIdentifierContext _localctx, int predIndex) {
		switch (predIndex) {
		case 123: return this.IsPureIdentifier();
		}
		return true;
	}
	private bool real_ulonglong_number_sempred(Real_ulonglong_numberContext _localctx, int predIndex) {
		switch (predIndex) {
		case 124: return this.ServerVersion >= 80017;
		}
		return true;
	}
	private bool signedLiteralOrNull_sempred(SignedLiteralOrNullContext _localctx, int predIndex) {
		switch (predIndex) {
		case 125: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool literalOrNull_sempred(LiteralOrNullContext _localctx, int predIndex) {
		switch (predIndex) {
		case 126: return this.ServerVersion >= 80024;
		}
		return true;
	}
	private bool textStringLiteral_sempred(TextStringLiteralContext _localctx, int predIndex) {
		switch (predIndex) {
		case 127: return this.IsTextStringLiteral();
		}
		return true;
	}
	private bool textStringHash_sempred(TextStringHashContext _localctx, int predIndex) {
		switch (predIndex) {
		case 128: return this.ServerVersion >= 80017;
		}
		return true;
	}
	private bool identifierKeyword_sempred(IdentifierKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 129: return this.ServerVersion < 80017;
		case 130: return this.ServerVersion >= 80011;
		}
		return true;
	}
	private bool labelKeyword_sempred(LabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 131: return this.ServerVersion < 80017;
		}
		return true;
	}
	private bool identifierKeywordsUnambiguous_sempred(IdentifierKeywordsUnambiguousContext _localctx, int predIndex) {
		switch (predIndex) {
		case 132: return this.ServerVersion >= 80019;
		case 133: return this.ServerVersion >= 80200;
		}
		return true;
	}
	private bool roleKeyword_sempred(RoleKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 134: return this.ServerVersion < 80017;
		}
		return true;
	}
	private bool roleOrLabelKeyword_sempred(RoleOrLabelKeywordContext _localctx, int predIndex) {
		switch (predIndex) {
		case 135: return this.ServerVersion >= 80014;
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,833,9281,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,
		7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,
		2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,
		2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,
		2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
		2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,
		2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
		2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,
		2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,
		2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,
		2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,
		2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,
		2,117,7,117,2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,
		2,123,7,123,2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,
		2,129,7,129,2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,
		2,135,7,135,2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,
		2,141,7,141,2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,
		2,147,7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
		2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,
		2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,
		2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,
		2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,
		2,177,7,177,2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,
		2,183,7,183,2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,
		2,189,7,189,2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,
		2,195,7,195,2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,
		2,201,7,201,2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,
		2,207,7,207,2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,
		2,213,7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
		2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,
		2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,
		2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,
		2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,
		2,243,7,243,2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,
		2,249,7,249,2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,
		2,255,7,255,2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,
		2,261,7,261,2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,
		2,267,7,267,2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,
		2,273,7,273,2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,
		2,279,7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
		2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,
		2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,
		2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,
		2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,
		2,309,7,309,2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,
		2,315,7,315,2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,
		2,321,7,321,2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,
		2,327,7,327,2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,
		2,333,7,333,2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,
		2,339,7,339,2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,
		2,345,7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,
		2,351,7,351,2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,
		2,357,7,357,2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,
		2,363,7,363,2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,
		2,369,7,369,2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,
		2,375,7,375,2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,
		2,381,7,381,2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,
		2,387,7,387,2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,
		2,393,7,393,2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,
		2,399,7,399,2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,
		2,405,7,405,2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,
		2,411,7,411,2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,
		2,417,7,417,2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,
		2,423,7,423,2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,
		2,429,7,429,2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,
		2,435,7,435,2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,
		2,441,7,441,2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,
		2,447,7,447,2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,
		2,453,7,453,2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,
		2,459,7,459,2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,
		2,465,7,465,2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,
		2,471,7,471,2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,
		2,477,7,477,2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,
		2,483,7,483,2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,
		2,489,7,489,2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,
		2,495,7,495,2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,
		2,501,7,501,2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,
		2,507,7,507,2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,
		2,513,7,513,2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,
		2,519,7,519,2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,
		2,525,7,525,2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,
		2,531,7,531,2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,
		2,537,7,537,2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,
		2,543,7,543,2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,
		2,549,7,549,2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,
		2,555,7,555,2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,
		2,561,7,561,2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,
		2,567,7,567,2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,
		2,573,7,573,2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,
		2,579,7,579,2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,
		2,585,7,585,2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,
		2,591,7,591,2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,
		2,597,7,597,2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,
		2,603,7,603,2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,
		2,609,7,609,2,610,7,610,2,611,7,611,2,612,7,612,2,613,7,613,2,614,7,614,
		2,615,7,615,2,616,7,616,2,617,7,617,2,618,7,618,2,619,7,619,2,620,7,620,
		2,621,7,621,2,622,7,622,2,623,7,623,2,624,7,624,2,625,7,625,2,626,7,626,
		2,627,7,627,2,628,7,628,2,629,7,629,2,630,7,630,2,631,7,631,2,632,7,632,
		2,633,7,633,2,634,7,634,2,635,7,635,2,636,7,636,2,637,7,637,2,638,7,638,
		2,639,7,639,2,640,7,640,2,641,7,641,2,642,7,642,2,643,7,643,2,644,7,644,
		2,645,7,645,2,646,7,646,2,647,7,647,2,648,7,648,2,649,7,649,2,650,7,650,
		2,651,7,651,2,652,7,652,2,653,7,653,2,654,7,654,2,655,7,655,2,656,7,656,
		2,657,7,657,2,658,7,658,2,659,7,659,2,660,7,660,2,661,7,661,2,662,7,662,
		2,663,7,663,2,664,7,664,2,665,7,665,2,666,7,666,2,667,7,667,2,668,7,668,
		2,669,7,669,2,670,7,670,2,671,7,671,2,672,7,672,2,673,7,673,2,674,7,674,
		2,675,7,675,2,676,7,676,2,677,7,677,2,678,7,678,2,679,7,679,2,680,7,680,
		2,681,7,681,2,682,7,682,2,683,7,683,2,684,7,684,2,685,7,685,2,686,7,686,
		2,687,7,687,2,688,7,688,2,689,7,689,2,690,7,690,2,691,7,691,2,692,7,692,
		2,693,7,693,2,694,7,694,2,695,7,695,2,696,7,696,2,697,7,697,2,698,7,698,
		2,699,7,699,2,700,7,700,2,701,7,701,2,702,7,702,2,703,7,703,2,704,7,704,
		2,705,7,705,2,706,7,706,2,707,7,707,2,708,7,708,2,709,7,709,2,710,7,710,
		2,711,7,711,2,712,7,712,2,713,7,713,2,714,7,714,2,715,7,715,2,716,7,716,
		2,717,7,717,2,718,7,718,2,719,7,719,2,720,7,720,2,721,7,721,2,722,7,722,
		2,723,7,723,2,724,7,724,2,725,7,725,2,726,7,726,2,727,7,727,2,728,7,728,
		2,729,7,729,2,730,7,730,2,731,7,731,2,732,7,732,2,733,7,733,2,734,7,734,
		2,735,7,735,2,736,7,736,2,737,7,737,2,738,7,738,2,739,7,739,2,740,7,740,
		2,741,7,741,2,742,7,742,2,743,7,743,2,744,7,744,2,745,7,745,2,746,7,746,
		2,747,7,747,2,748,7,748,2,749,7,749,2,750,7,750,2,751,7,751,2,752,7,752,
		2,753,7,753,2,754,7,754,2,755,7,755,1,0,5,0,1514,8,0,10,0,12,0,1517,9,
		0,1,0,1,0,1,1,1,1,3,1,1523,8,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
		1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1603,
		8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,1611,8,3,1,3,1,3,1,3,3,3,1616,8,3,1,3,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,1626,8,3,1,4,1,4,1,4,4,4,1631,8,4,11,4,
		12,4,1632,1,5,1,5,1,5,1,5,3,5,1639,8,5,1,5,3,5,1642,8,5,1,6,3,6,1645,8,
		6,1,6,1,6,1,6,1,6,1,6,3,6,1652,8,6,1,6,1,6,1,6,3,6,1657,8,6,1,6,3,6,1660,
		8,6,1,6,1,6,1,6,3,6,1665,8,6,1,6,1,6,1,6,1,6,3,6,1671,8,6,3,6,1673,8,6,
		1,6,1,6,3,6,1677,8,6,1,6,1,6,3,6,1681,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
		3,7,1690,8,7,1,8,1,8,3,8,1694,8,8,1,8,5,8,1697,8,8,10,8,12,8,1700,9,8,
		1,9,1,9,1,9,3,9,1705,8,9,1,10,1,10,1,10,1,10,1,11,3,11,1712,8,11,1,11,
		1,11,1,11,3,11,1717,8,11,1,12,1,12,1,12,3,12,1722,8,12,1,12,1,12,1,12,
		1,12,1,12,3,12,1729,8,12,1,12,3,12,1732,8,12,1,13,1,13,1,13,1,13,3,13,
		1738,8,13,1,13,3,13,1741,8,13,1,14,1,14,1,14,5,14,1746,8,14,10,14,12,14,
		1749,9,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,1758,8,15,1,16,1,16,
		1,16,3,16,1763,8,16,1,16,1,16,1,16,3,16,1768,8,16,1,16,1,16,1,16,1,16,
		1,16,1,16,3,16,1776,8,16,1,16,1,16,1,16,1,16,3,16,1782,8,16,1,16,1,16,
		3,16,1786,8,16,1,16,1,16,1,16,3,16,1791,8,16,1,16,1,16,1,16,1,16,1,16,
		5,16,1798,8,16,10,16,12,16,1801,9,16,1,16,1,16,1,16,3,16,1806,8,16,1,16,
		1,16,5,16,1810,8,16,10,16,12,16,1813,9,16,1,16,1,16,1,16,3,16,1818,8,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1827,8,16,1,16,1,16,1,16,1,16,
		3,16,1833,8,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1842,8,16,1,16,
		1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,3,16,1854,8,16,1,17,1,17,
		3,17,1858,8,17,1,17,1,17,1,17,1,17,3,17,1864,8,17,5,17,1866,8,17,10,17,
		12,17,1869,9,17,1,18,1,18,1,18,3,18,1874,8,18,1,19,1,19,3,19,1878,8,19,
		1,19,1,19,1,19,3,19,1883,8,19,1,19,3,19,1886,8,19,1,19,1,19,1,19,1,19,
		3,19,1892,8,19,1,19,1,19,1,19,1,19,3,19,1898,8,19,1,19,1,19,1,19,1,19,
		3,19,1904,8,19,1,19,1,19,3,19,1908,8,19,1,19,1,19,1,19,3,19,1913,8,19,
		1,19,1,19,3,19,1917,8,19,1,19,1,19,3,19,1921,8,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1937,8,19,1,19,
		1,19,1,19,1,19,1,19,1,19,3,19,1945,8,19,1,19,1,19,1,19,1,19,1,19,1,19,
		3,19,1953,8,19,1,19,1,19,1,19,1,19,1,19,3,19,1960,8,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,1987,8,19,1,19,1,19,1,19,
		1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,3,19,2002,8,19,1,19,
		3,19,2005,8,19,1,19,1,19,1,19,1,19,3,19,2011,8,19,1,20,1,20,1,20,3,20,
		2016,8,20,1,21,1,21,1,22,1,22,3,22,2022,8,22,1,22,1,22,1,22,3,22,2027,
		8,22,5,22,2029,8,22,10,22,12,22,2032,9,22,1,23,1,23,3,23,2036,8,23,1,23,
		1,23,3,23,2040,8,23,1,24,1,24,3,24,2044,8,24,1,24,1,24,3,24,2048,8,24,
		1,25,1,25,3,25,2052,8,25,1,25,1,25,3,25,2056,8,25,3,25,2058,8,25,1,26,
		1,26,1,26,1,27,1,27,1,27,1,28,1,28,3,28,2068,8,28,1,29,1,29,1,29,1,29,
		1,29,1,29,3,29,2076,8,29,1,29,1,29,1,29,1,29,1,29,3,29,2083,8,29,1,30,
		1,30,1,30,1,30,1,30,1,30,3,30,2091,8,30,1,31,1,31,3,31,2095,8,31,1,31,
		5,31,2098,8,31,10,31,12,31,2101,9,31,1,32,1,32,1,33,1,33,3,33,2107,8,33,
		1,33,5,33,2110,8,33,10,33,12,33,2113,9,33,1,34,1,34,3,34,2117,8,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,2127,8,34,1,35,1,35,3,35,2131,
		8,35,1,35,1,35,1,35,3,35,2136,8,35,1,36,3,36,2139,8,36,1,36,3,36,2142,
		8,36,1,36,3,36,2145,8,36,1,36,1,36,1,36,1,36,1,37,3,37,2152,8,37,1,37,
		1,37,1,37,1,38,1,38,3,38,2159,8,38,1,39,1,39,3,39,2163,8,39,1,39,1,39,
		1,39,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
		1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,2188,8,40,3,40,2190,8,40,1,40,
		1,40,1,40,1,40,1,40,1,40,3,40,2198,8,40,3,40,2200,8,40,1,41,1,41,1,41,
		1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,
		1,41,3,41,2220,8,41,1,42,1,42,3,42,2224,8,42,1,42,1,42,5,42,2228,8,42,
		10,42,12,42,2231,9,42,1,43,1,43,1,43,1,43,3,43,2237,8,43,1,44,3,44,2240,
		8,44,1,44,1,44,3,44,2244,8,44,1,44,1,44,1,44,1,44,1,44,3,44,2251,8,44,
		1,44,3,44,2254,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,2263,8,44,
		1,45,1,45,1,45,5,45,2268,8,45,10,45,12,45,2271,9,45,1,46,1,46,3,46,2275,
		8,46,1,47,3,47,2278,8,47,1,47,1,47,1,48,3,48,2283,8,48,1,48,1,48,1,49,
		1,49,3,49,2289,8,49,1,49,3,49,2292,8,49,1,50,1,50,3,50,2296,8,50,1,51,
		1,51,1,51,1,51,3,51,2302,8,51,1,51,3,51,2305,8,51,1,51,1,51,1,52,3,52,
		2310,8,52,1,52,1,52,3,52,2314,8,52,1,52,1,52,1,52,1,52,1,52,5,52,2321,
		8,52,10,52,12,52,2324,9,52,3,52,2326,8,52,1,52,1,52,5,52,2330,8,52,10,
		52,12,52,2333,9,52,1,52,1,52,1,53,1,53,3,53,2339,8,53,1,54,1,54,1,54,1,
		54,3,54,2345,8,54,1,55,3,55,2348,8,55,1,55,1,55,3,55,2352,8,55,1,55,1,
		55,1,55,1,55,1,55,5,55,2359,8,55,10,55,12,55,2362,9,55,3,55,2364,8,55,
		1,55,1,55,1,55,1,55,5,55,2370,8,55,10,55,12,55,2373,9,55,1,55,1,55,1,56,
		3,56,2378,8,56,1,56,1,56,3,56,2382,8,56,1,56,1,56,1,56,1,56,1,56,1,56,
		1,57,1,57,3,57,2392,8,57,1,57,3,57,2395,8,57,1,58,4,58,2398,8,58,11,58,
		12,58,2399,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2408,8,59,1,59,1,59,1,59,
		1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,3,59,2423,8,59,1,60,
		3,60,2426,8,60,1,60,3,60,2429,8,60,1,60,1,60,1,60,3,60,2434,8,60,1,60,
		1,60,5,60,2438,8,60,10,60,12,60,2441,9,60,1,60,1,60,1,60,1,60,1,60,5,60,
		2448,8,60,10,60,12,60,2451,9,60,1,60,1,60,1,60,1,60,1,60,5,60,2458,8,60,
		10,60,12,60,2461,9,60,3,60,2463,8,60,1,60,3,60,2466,8,60,1,61,1,61,3,61,
		2470,8,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2478,8,61,1,62,1,62,1,62,
		1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,2491,8,63,1,64,1,64,3,64,
		2495,8,64,1,64,5,64,2498,8,64,10,64,12,64,2501,9,64,1,65,1,65,1,65,1,65,
		1,65,1,65,3,65,2509,8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,
		1,67,1,67,1,67,1,67,5,67,2524,8,67,10,67,12,67,2527,9,67,1,67,1,67,1,68,
		1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
		2545,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,2554,8,69,1,69,3,69,
		2557,8,69,1,70,1,70,1,70,1,70,1,70,1,70,3,70,2565,8,70,1,71,1,71,1,71,
		1,71,1,71,3,71,2572,8,71,3,71,2574,8,71,1,72,1,72,1,72,1,73,1,73,3,73,
		2581,8,73,1,73,5,73,2584,8,73,10,73,12,73,2587,9,73,1,74,1,74,1,74,1,74,
		1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,2600,8,74,1,75,1,75,3,75,2604,
		8,75,1,75,1,75,1,76,1,76,3,76,2610,8,76,1,76,1,76,1,77,1,77,3,77,2616,
		8,77,1,77,1,77,1,78,1,78,3,78,2622,8,78,1,78,1,78,1,79,1,79,3,79,2628,
		8,79,1,79,1,79,1,80,1,80,3,80,2634,8,80,1,80,1,80,1,81,3,81,2639,8,81,
		1,81,1,81,3,81,2643,8,81,1,81,1,81,1,82,1,82,1,83,1,83,3,83,2651,8,83,
		1,83,1,83,1,84,1,84,3,84,2657,8,84,1,84,1,84,1,85,1,85,3,85,2663,8,85,
		1,85,1,85,1,86,1,86,3,86,2669,8,86,1,86,1,86,1,87,3,87,2674,8,87,1,87,
		3,87,2677,8,87,1,87,3,87,2680,8,87,1,87,1,87,1,87,1,87,1,88,1,88,1,88,
		3,88,2689,8,88,1,88,3,88,2692,8,88,1,89,1,89,1,89,1,89,1,90,1,90,1,90,
		1,90,1,91,3,91,2703,8,91,1,91,1,91,3,91,2707,8,91,1,91,1,91,1,91,1,91,
		1,91,1,91,1,91,1,91,1,91,3,91,2718,8,91,1,91,1,91,1,92,1,92,1,92,1,93,
		3,93,2726,8,93,1,93,1,93,3,93,2730,8,93,1,93,1,93,1,93,1,93,1,93,1,93,
		1,93,3,93,2739,8,93,1,93,3,93,2742,8,93,1,93,1,93,1,93,1,93,3,93,2748,
		8,93,3,93,2750,8,93,1,93,1,93,3,93,2754,8,93,1,93,1,93,1,93,1,94,1,94,
		3,94,2761,8,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,2772,
		8,95,10,95,12,95,2775,9,95,1,95,1,95,1,95,1,95,3,95,2781,8,95,1,95,1,95,
		5,95,2785,8,95,10,95,12,95,2788,9,95,3,95,2790,8,95,1,96,1,96,1,96,1,96,
		1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,3,96,2807,8,96,
		1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,
		1,97,1,97,1,97,3,97,2826,8,97,1,98,1,98,3,98,2830,8,98,1,98,1,98,1,99,
		1,99,3,99,2836,8,99,1,99,1,99,1,100,1,100,3,100,2842,8,100,1,100,1,100,
		1,101,1,101,3,101,2848,8,101,1,101,1,101,1,102,3,102,2853,8,102,1,102,
		1,102,1,102,1,102,1,102,3,102,2860,8,102,1,103,1,103,1,103,1,103,1,103,
		3,103,2867,8,103,1,103,5,103,2870,8,103,10,103,12,103,2873,9,103,3,103,
		2875,8,103,1,104,1,104,3,104,2879,8,104,1,105,1,105,3,105,2883,8,105,1,
		105,1,105,1,106,3,106,2888,8,106,1,106,1,106,3,106,2892,8,106,1,106,1,
		106,3,106,2896,8,106,1,107,1,107,1,107,1,107,3,107,2902,8,107,1,107,5,
		107,2905,8,107,10,107,12,107,2908,9,107,3,107,2910,8,107,1,108,1,108,3,
		108,2914,8,108,1,108,1,108,1,109,1,109,3,109,2920,8,109,1,109,1,109,3,
		109,2924,8,109,1,110,1,110,3,110,2928,8,110,1,110,1,110,1,111,1,111,1,
		111,1,111,3,111,2936,8,111,1,111,1,111,1,112,1,112,1,112,1,112,3,112,2944,
		8,112,1,113,1,113,1,113,1,113,1,113,5,113,2951,8,113,10,113,12,113,2954,
		9,113,1,114,1,114,1,114,1,114,1,115,1,115,3,115,2962,8,115,1,115,1,115,
		1,116,1,116,1,116,1,116,1,116,1,117,1,117,1,117,1,117,3,117,2975,8,117,
		1,117,3,117,2978,8,117,1,118,3,118,2981,8,118,1,118,1,118,5,118,2985,8,
		118,10,118,12,118,2988,9,118,1,118,1,118,1,118,1,118,1,118,3,118,2995,
		8,118,1,118,1,118,1,118,3,118,3000,8,118,1,118,3,118,3003,8,118,1,118,
		3,118,3006,8,118,1,118,3,118,3009,8,118,1,118,3,118,3012,8,118,3,118,3014,
		8,118,1,118,1,118,1,118,1,118,3,118,3020,8,118,3,118,3022,8,118,1,119,
		1,119,1,119,1,119,1,119,1,120,1,120,1,121,1,121,1,121,1,122,1,122,1,122,
		1,122,3,122,3038,8,122,1,122,1,122,1,122,1,122,1,122,3,122,3045,8,122,
		1,122,3,122,3048,8,122,3,122,3050,8,122,3,122,3052,8,122,1,123,1,123,1,
		123,1,123,1,123,1,123,1,123,1,123,3,123,3062,8,123,3,123,3064,8,123,1,
		124,1,124,3,124,3068,8,124,1,124,3,124,3071,8,124,1,124,3,124,3074,8,124,
		1,124,1,124,3,124,3078,8,124,1,124,1,124,3,124,3082,8,124,1,124,1,124,
		1,124,3,124,3087,8,124,1,124,3,124,3090,8,124,1,124,3,124,3093,8,124,1,
		125,1,125,1,126,1,126,3,126,3099,8,126,1,126,3,126,3102,8,126,1,126,1,
		126,1,127,1,127,1,127,5,127,3109,8,127,10,127,12,127,3112,9,127,1,128,
		1,128,1,128,1,129,1,129,1,129,1,129,3,129,3121,8,129,1,129,3,129,3124,
		8,129,1,129,3,129,3127,8,129,1,130,1,130,3,130,3131,8,130,1,130,1,130,
		1,130,1,130,3,130,3137,8,130,1,130,5,130,3140,8,130,10,130,12,130,3143,
		9,130,1,131,1,131,3,131,3147,8,131,1,131,1,131,1,131,3,131,3152,8,131,
		5,131,3154,8,131,10,131,12,131,3157,9,131,1,132,1,132,1,132,1,132,3,132,
		3163,8,132,1,133,1,133,1,133,1,133,1,133,1,133,1,134,1,134,1,134,3,134,
		3174,8,134,1,134,3,134,3177,8,134,1,134,3,134,3180,8,134,1,134,3,134,3183,
		8,134,1,134,1,134,3,134,3187,8,134,1,134,3,134,3190,8,134,1,134,3,134,
		3193,8,134,1,134,1,134,1,134,1,134,3,134,3199,8,134,1,134,3,134,3202,8,
		134,1,134,3,134,3205,8,134,1,134,3,134,3208,8,134,1,134,3,134,3211,8,134,
		1,134,1,134,3,134,3215,8,134,1,134,3,134,3218,8,134,1,134,3,134,3221,8,
		134,1,135,1,135,1,136,1,136,1,137,1,137,1,137,1,138,1,138,1,138,3,138,
		3233,8,138,1,139,1,139,1,139,1,139,1,139,1,139,3,139,3241,8,139,1,140,
		1,140,1,140,1,140,1,140,1,140,1,141,1,141,1,141,1,141,1,141,1,142,1,142,
		1,142,3,142,3257,8,142,1,142,3,142,3260,8,142,1,142,1,142,3,142,3264,8,
		142,1,143,1,143,3,143,3268,8,143,1,143,1,143,1,144,1,144,1,144,1,144,1,
		144,3,144,3277,8,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,1,144,3,
		144,3287,8,144,5,144,3289,8,144,10,144,12,144,3292,9,144,1,145,1,145,1,
		145,1,145,1,145,1,146,1,146,1,146,1,146,1,146,1,147,1,147,1,147,1,147,
		1,147,1,148,1,148,3,148,3311,8,148,1,148,3,148,3314,8,148,1,148,1,148,
		3,148,3318,8,148,1,148,1,148,1,148,1,148,3,148,3324,8,148,1,149,1,149,
		3,149,3328,8,149,1,149,3,149,3331,8,149,1,150,1,150,1,150,1,150,1,150,
		1,150,1,150,3,150,3340,8,150,1,150,1,150,1,150,1,150,1,150,1,150,1,150,
		1,150,3,150,3350,8,150,1,151,3,151,3353,8,151,1,151,1,151,3,151,3357,8,
		151,1,151,3,151,3360,8,151,1,152,1,152,3,152,3364,8,152,1,152,1,152,1,
		152,3,152,3369,8,152,1,152,3,152,3372,8,152,1,152,5,152,3375,8,152,10,
		152,12,152,3378,9,152,1,153,1,153,1,153,3,153,3383,8,153,1,153,1,153,1,
		154,1,154,1,154,1,154,1,154,3,154,3392,8,154,1,155,1,155,5,155,3396,8,
		155,10,155,12,155,3399,9,155,1,155,1,155,3,155,3403,8,155,1,155,3,155,
		3406,8,155,1,155,3,155,3409,8,155,1,155,3,155,3412,8,155,1,155,3,155,3415,
		8,155,1,155,3,155,3418,8,155,1,155,3,155,3421,8,155,1,156,1,156,1,157,
		1,157,1,158,1,158,1,158,1,159,1,159,1,159,1,160,1,160,1,160,3,160,3436,
		8,160,1,161,1,161,3,161,3440,8,161,1,162,1,162,1,162,1,162,3,162,3446,
		8,162,1,162,3,162,3449,8,162,1,162,3,162,3452,8,162,1,162,1,162,1,162,
		1,162,3,162,3458,8,162,1,162,1,162,1,162,3,162,3463,8,162,5,162,3465,8,
		162,10,162,12,162,3468,9,162,3,162,3470,8,162,1,163,1,163,1,163,1,163,
		1,163,3,163,3477,8,163,3,163,3479,8,163,1,163,1,163,1,164,1,164,1,164,
		1,165,1,165,1,165,1,165,1,166,1,166,1,166,1,166,5,166,3494,8,166,10,166,
		12,166,3497,9,166,1,167,1,167,1,167,1,167,1,168,1,168,1,168,1,168,1,169,
		3,169,3508,8,169,1,169,1,169,1,169,3,169,3513,8,169,1,169,3,169,3516,8,
		169,1,169,3,169,3519,8,169,1,170,1,170,1,170,3,170,3524,8,170,1,171,1,
		171,1,172,1,172,3,172,3530,8,172,1,173,1,173,1,173,1,173,1,173,1,173,1,
		173,1,173,1,173,1,173,1,173,1,173,1,173,1,173,3,173,3546,8,173,1,174,1,
		174,1,174,1,174,1,174,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
		1,175,1,175,1,175,1,175,1,175,3,175,3566,8,175,1,176,1,176,1,176,1,176,
		1,176,1,176,1,176,3,176,3575,8,176,1,177,1,177,3,177,3579,8,177,1,177,
		1,177,1,177,5,177,3584,8,177,10,177,12,177,3587,9,177,1,178,1,178,3,178,
		3591,8,178,1,178,1,178,1,178,1,179,1,179,1,179,1,179,3,179,3600,8,179,
		1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,3,179,3610,8,179,1,180,
		1,180,1,180,1,181,1,181,1,181,1,181,1,182,1,182,1,183,1,183,1,183,3,183,
		3624,8,183,1,184,1,184,1,184,5,184,3629,8,184,10,184,12,184,3632,9,184,
		1,185,1,185,1,185,1,185,5,185,3638,8,185,10,185,12,185,3641,9,185,1,186,
		1,186,1,186,1,187,1,187,1,187,3,187,3649,8,187,1,187,1,187,1,188,1,188,
		3,188,3655,8,188,1,189,1,189,4,189,3659,8,189,11,189,12,189,3660,1,190,
		1,190,1,190,1,190,3,190,3667,8,190,1,190,3,190,3670,8,190,1,190,1,190,
		1,190,1,190,3,190,3676,8,190,1,191,1,191,1,192,1,192,1,192,3,192,3683,
		8,192,1,193,1,193,3,193,3687,8,193,1,193,1,193,5,193,3691,8,193,10,193,
		12,193,3694,9,193,1,194,1,194,1,194,3,194,3699,8,194,3,194,3701,8,194,
		1,195,3,195,3704,8,195,1,195,1,195,3,195,3708,8,195,1,196,1,196,1,196,
		1,197,1,197,1,197,1,197,1,197,3,197,3718,8,197,1,197,1,197,1,197,3,197,
		3723,8,197,1,197,5,197,3726,8,197,10,197,12,197,3729,9,197,1,198,1,198,
		5,198,3733,8,198,10,198,12,198,3736,9,198,1,199,1,199,1,199,1,199,1,199,
		1,199,3,199,3744,8,199,1,199,1,199,1,199,1,199,1,199,1,199,3,199,3752,
		8,199,1,199,1,199,1,199,3,199,3757,8,199,1,200,1,200,3,200,3761,8,200,
		1,200,1,200,1,200,1,200,3,200,3767,8,200,1,200,3,200,3770,8,200,1,201,
		3,201,3773,8,201,1,201,1,201,3,201,3777,8,201,1,202,1,202,3,202,3781,8,
		202,1,202,1,202,1,203,1,203,1,203,1,203,1,203,1,203,3,203,3791,8,203,1,
		204,1,204,3,204,3795,8,204,1,204,3,204,3798,8,204,1,204,3,204,3801,8,204,
		1,204,3,204,3804,8,204,1,205,1,205,1,205,3,205,3809,8,205,1,205,1,205,
		1,206,1,206,3,206,3815,8,206,1,206,3,206,3818,8,206,1,206,1,206,1,206,
		1,206,3,206,3824,8,206,1,206,3,206,3827,8,206,3,206,3829,8,206,1,207,1,
		207,1,207,3,207,3834,8,207,1,207,1,207,1,208,1,208,1,208,1,208,1,208,1,
		208,1,208,1,208,3,208,3846,8,208,1,209,1,209,1,209,1,209,1,209,5,209,3853,
		8,209,10,209,12,209,3856,9,209,1,209,1,209,1,210,1,210,1,210,1,210,1,210,
		1,210,1,210,1,210,3,210,3868,8,210,1,210,3,210,3871,8,210,1,210,1,210,
		1,210,3,210,3876,8,210,1,210,1,210,1,210,1,210,1,210,3,210,3883,8,210,
		1,211,1,211,3,211,3887,8,211,1,211,3,211,3890,8,211,1,212,1,212,1,212,
		1,212,3,212,3896,8,212,1,213,1,213,1,213,1,213,1,214,1,214,1,214,1,214,
		1,215,1,215,1,215,1,215,3,215,3910,8,215,1,216,1,216,1,217,1,217,1,217,
		3,217,3917,8,217,1,217,1,217,1,218,1,218,1,218,5,218,3924,8,218,10,218,
		12,218,3927,9,218,1,219,1,219,1,219,3,219,3932,8,219,1,219,1,219,1,219,
		1,219,1,219,1,219,1,219,3,219,3941,8,219,1,219,1,219,3,219,3945,8,219,
		1,219,1,219,3,219,3949,8,219,1,220,1,220,1,221,1,221,1,222,1,222,1,222,
		1,222,3,222,3959,8,222,3,222,3961,8,222,1,223,1,223,1,223,1,223,1,223,
		1,223,3,223,3969,8,223,1,224,1,224,1,224,5,224,3974,8,224,10,224,12,224,
		3977,9,224,1,225,1,225,3,225,3981,8,225,1,226,3,226,3984,8,226,1,226,1,
		226,3,226,3988,8,226,1,226,3,226,3991,8,226,1,226,1,226,1,226,1,226,3,
		226,3997,8,226,1,226,3,226,4000,8,226,1,226,3,226,4003,8,226,1,227,1,227,
		1,227,1,227,3,227,4009,8,227,1,228,1,228,1,228,5,228,4014,8,228,10,228,
		12,228,4017,9,228,1,228,1,228,3,228,4021,8,228,1,228,1,228,3,228,4025,
		8,228,1,228,3,228,4028,8,228,1,228,3,228,4031,8,228,1,228,3,228,4034,8,
		228,3,228,4036,8,228,1,229,1,229,3,229,4040,8,229,1,230,1,230,1,230,1,
		230,1,230,3,230,4047,8,230,1,231,1,231,1,231,1,231,3,231,4053,8,231,1,
		231,1,231,3,231,4057,8,231,1,231,1,231,1,231,3,231,4062,8,231,1,231,3,
		231,4065,8,231,1,231,3,231,4068,8,231,1,231,3,231,4071,8,231,3,231,4073,
		8,231,1,231,1,231,1,231,3,231,4078,8,231,1,232,1,232,1,232,1,232,1,232,
		5,232,4085,8,232,10,232,12,232,4088,9,232,1,232,1,232,1,232,1,232,1,232,
		1,232,3,232,4096,8,232,1,233,1,233,3,233,4100,8,233,1,233,1,233,1,234,
		1,234,3,234,4106,8,234,1,234,3,234,4109,8,234,1,234,3,234,4112,8,234,1,
		235,1,235,1,235,1,235,3,235,4118,8,235,1,235,1,235,1,235,1,235,1,235,3,
		235,4125,8,235,3,235,4127,8,235,1,235,1,235,1,235,1,235,1,235,1,235,3,
		235,4135,8,235,1,235,1,235,1,235,1,235,3,235,4141,8,235,3,235,4143,8,235,
		1,236,1,236,1,236,1,237,1,237,1,237,1,237,1,237,3,237,4153,8,237,3,237,
		4155,8,237,1,238,1,238,1,238,1,238,1,238,1,238,1,238,5,238,4164,8,238,
		10,238,12,238,4167,9,238,1,238,1,238,1,238,3,238,4172,8,238,1,238,1,238,
		1,238,1,238,1,238,3,238,4179,8,238,1,239,1,239,1,239,1,239,1,239,1,239,
		3,239,4187,8,239,1,240,1,240,3,240,4191,8,240,1,240,1,240,3,240,4195,8,
		240,1,240,3,240,4198,8,240,3,240,4200,8,240,1,241,1,241,1,241,1,241,1,
		241,1,241,3,241,4208,8,241,1,242,1,242,1,242,1,243,1,243,1,243,1,243,3,
		243,4217,8,243,1,243,1,243,1,243,1,244,1,244,1,244,1,244,3,244,4226,8,
		244,1,245,1,245,1,245,1,245,1,245,3,245,4233,8,245,1,246,1,246,1,246,5,
		246,4238,8,246,10,246,12,246,4241,9,246,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,1,247,
		1,247,1,247,1,247,3,247,4371,8,247,1,248,1,248,1,249,1,249,1,250,1,250,
		1,251,1,251,1,252,1,252,1,253,1,253,1,254,1,254,1,255,1,255,1,256,1,256,
		1,257,1,257,1,258,1,258,1,259,1,259,1,260,1,260,1,261,1,261,1,262,1,262,
		1,263,1,263,1,264,1,264,1,265,1,265,1,266,1,266,1,267,1,267,1,268,1,268,
		1,269,1,269,1,270,1,270,1,271,1,271,1,272,1,272,1,273,1,273,3,273,4425,
		8,273,1,274,1,274,1,275,1,275,1,275,3,275,4432,8,275,1,276,1,276,3,276,
		4436,8,276,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,1,277,
		1,277,1,277,1,277,1,277,3,277,4452,8,277,1,278,1,278,1,279,1,279,1,280,
		1,280,1,280,1,280,5,280,4462,8,280,10,280,12,280,4465,9,280,3,280,4467,
		8,280,1,280,1,280,1,281,1,281,1,281,1,281,1,281,1,281,5,281,4477,8,281,
		10,281,12,281,4480,9,281,1,281,3,281,4483,8,281,1,282,1,282,1,282,1,282,
		3,282,4489,8,282,1,282,1,282,1,282,1,282,1,282,3,282,4496,8,282,1,282,
		1,282,1,282,1,282,1,282,3,282,4503,8,282,1,282,1,282,1,282,1,282,1,282,
		3,282,4510,8,282,1,282,1,282,1,282,1,282,1,282,3,282,4517,8,282,1,282,
		1,282,1,282,1,282,1,282,3,282,4524,8,282,1,282,1,282,1,282,1,282,1,282,
		3,282,4531,8,282,1,282,3,282,4534,8,282,1,283,1,283,1,283,5,283,4539,8,
		283,10,283,12,283,4542,9,283,1,284,1,284,1,284,5,284,4547,8,284,10,284,
		12,284,4550,9,284,1,285,1,285,1,285,5,285,4555,8,285,10,285,12,285,4558,
		9,285,1,286,1,286,1,287,1,287,1,287,5,287,4565,8,287,10,287,12,287,4568,
		9,287,1,288,1,288,1,288,3,288,4573,8,288,1,288,1,288,3,288,4577,8,288,
		1,288,3,288,4580,8,288,1,288,3,288,4583,8,288,1,288,3,288,4586,8,288,1,
		288,3,288,4589,8,288,1,288,3,288,4592,8,288,1,289,1,289,1,289,3,289,4597,
		8,289,1,289,3,289,4600,8,289,1,290,1,290,1,290,1,290,1,290,3,290,4607,
		8,290,1,290,1,290,5,290,4611,8,290,10,290,12,290,4614,9,290,1,291,1,291,
		1,291,1,291,1,292,1,292,1,292,1,292,1,293,1,293,1,293,1,293,1,294,1,294,
		1,294,1,294,1,295,1,295,1,295,5,295,4635,8,295,10,295,12,295,4638,9,295,
		1,296,1,296,1,297,1,297,3,297,4644,8,297,1,297,3,297,4647,8,297,1,297,
		1,297,1,298,1,298,1,298,5,298,4654,8,298,10,298,12,298,4657,9,298,1,299,
		1,299,1,299,3,299,4662,8,299,1,300,1,300,1,300,1,300,1,301,1,301,1,301,
		1,301,1,302,1,302,1,302,1,302,1,303,1,303,1,304,1,304,1,304,1,304,1,304,
		3,304,4683,8,304,1,304,1,304,1,304,1,304,3,304,4689,8,304,1,305,1,305,
		1,305,1,305,3,305,4695,8,305,1,306,1,306,1,306,5,306,4700,8,306,10,306,
		12,306,4703,9,306,1,307,1,307,1,307,1,307,1,307,3,307,4710,8,307,1,307,
		1,307,1,307,1,307,3,307,4716,8,307,1,307,1,307,1,307,1,307,1,307,1,307,
		1,307,1,307,1,307,1,307,3,307,4728,8,307,3,307,4730,8,307,1,308,1,308,
		1,308,1,308,3,308,4736,8,308,1,308,1,308,3,308,4740,8,308,3,308,4742,8,
		308,1,309,1,309,3,309,4746,8,309,1,309,1,309,1,310,1,310,1,310,1,310,1,
		310,1,310,1,310,3,310,4757,8,310,1,311,1,311,1,311,3,311,4762,8,311,1,
		311,1,311,1,311,1,311,3,311,4768,8,311,1,311,1,311,1,311,1,311,1,311,3,
		311,4775,8,311,1,311,3,311,4778,8,311,1,311,3,311,4781,8,311,1,311,1,311,
		1,311,1,311,3,311,4787,8,311,3,311,4789,8,311,1,311,1,311,1,311,1,311,
		1,311,1,311,3,311,4797,8,311,1,311,3,311,4800,8,311,3,311,4802,8,311,3,
		311,4804,8,311,1,312,1,312,1,312,5,312,4809,8,312,10,312,12,312,4812,9,
		312,1,313,1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,313,4822,8,313,1,
		313,3,313,4825,8,313,3,313,4827,8,313,1,313,1,313,3,313,4831,8,313,1,313,
		1,313,1,313,3,313,4836,8,313,3,313,4838,8,313,1,313,1,313,1,313,3,313,
		4843,8,313,1,313,1,313,1,313,1,313,3,313,4849,8,313,1,313,3,313,4852,8,
		313,3,313,4854,8,313,1,313,1,313,3,313,4858,8,313,1,313,3,313,4861,8,313,
		1,313,1,313,1,313,1,313,1,313,1,313,1,313,3,313,4870,8,313,1,313,1,313,
		1,313,1,313,1,313,1,313,1,313,3,313,4879,8,313,1,313,1,313,1,313,1,313,
		3,313,4885,8,313,3,313,4887,8,313,3,313,4889,8,313,1,314,1,314,1,314,1,
		314,1,314,1,314,1,314,3,314,4898,8,314,1,314,1,314,3,314,4902,8,314,1,
		314,1,314,1,314,1,314,3,314,4908,8,314,1,314,3,314,4911,8,314,3,314,4913,
		8,314,1,314,1,314,1,314,1,314,1,314,1,314,1,314,1,314,1,314,3,314,4924,
		8,314,1,314,1,314,1,314,3,314,4929,8,314,1,314,1,314,1,314,3,314,4934,
		8,314,1,314,1,314,1,314,1,314,3,314,4940,8,314,3,314,4942,8,314,1,314,
		1,314,3,314,4946,8,314,3,314,4948,8,314,1,315,1,315,1,315,1,316,1,316,
		1,316,3,316,4956,8,316,1,316,1,316,3,316,4960,8,316,1,316,1,316,1,317,
		3,317,4965,8,317,1,317,3,317,4968,8,317,1,317,5,317,4971,8,317,10,317,
		12,317,4974,9,317,1,317,1,317,3,317,4978,8,317,1,318,1,318,1,318,1,318,
		3,318,4984,8,318,1,319,1,319,1,319,1,319,1,320,1,320,1,320,3,320,4993,
		8,320,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,1,321,4,321,5004,
		8,321,11,321,12,321,5005,1,322,1,322,1,322,1,322,1,322,1,322,1,322,1,322,
		1,322,1,322,3,322,5018,8,322,1,322,1,322,1,322,3,322,5023,8,322,1,322,
		1,322,1,322,1,322,1,322,1,322,3,322,5031,8,322,1,322,1,322,1,322,1,322,
		3,322,5037,8,322,3,322,5039,8,322,1,322,1,322,1,322,1,322,1,322,3,322,
		5046,8,322,3,322,5048,8,322,1,323,1,323,1,323,1,323,1,323,3,323,5055,8,
		323,1,324,1,324,1,324,3,324,5060,8,324,1,324,1,324,1,325,1,325,1,325,1,
		325,1,325,1,325,1,325,3,325,5071,8,325,1,325,1,325,1,325,3,325,5076,8,
		325,3,325,5078,8,325,1,325,1,325,3,325,5082,8,325,1,325,1,325,1,325,1,
		325,3,325,5088,8,325,1,325,3,325,5091,8,325,1,325,3,325,5094,8,325,1,325,
		1,325,1,325,1,325,1,325,1,325,1,325,1,325,3,325,5104,8,325,3,325,5106,
		8,325,1,326,1,326,1,326,1,326,3,326,5112,8,326,1,327,1,327,1,327,1,328,
		1,328,1,328,1,329,1,329,1,329,1,329,1,329,3,329,5125,8,329,1,329,1,329,
		3,329,5129,8,329,1,330,1,330,1,330,3,330,5134,8,330,1,331,1,331,1,331,
		1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,1,332,5,332,5149,
		8,332,10,332,12,332,5152,9,332,1,333,1,333,1,333,3,333,5157,8,333,1,333,
		1,333,1,333,1,333,1,333,1,333,1,333,3,333,5166,8,333,1,333,1,333,1,333,
		1,333,1,333,1,333,3,333,5174,8,333,1,333,1,333,3,333,5178,8,333,1,333,
		1,333,1,333,1,333,3,333,5184,8,333,1,333,1,333,1,333,1,333,1,333,1,333,
		1,333,1,333,3,333,5194,8,333,1,333,1,333,3,333,5198,8,333,1,334,1,334,
		1,335,1,335,1,335,5,335,5205,8,335,10,335,12,335,5208,9,335,1,336,1,336,
		3,336,5212,8,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,3,336,5221,
		8,336,3,336,5223,8,336,1,336,1,336,3,336,5227,8,336,1,336,1,336,1,336,
		1,336,1,336,1,336,1,336,1,336,1,336,3,336,5238,8,336,1,336,1,336,1,336,
		1,336,1,336,3,336,5245,8,336,1,336,1,336,1,336,1,336,3,336,5251,8,336,
		1,336,1,336,3,336,5255,8,336,1,337,1,337,1,337,3,337,5260,8,337,1,337,
		1,337,1,337,3,337,5265,8,337,1,337,1,337,1,337,1,337,1,337,1,337,3,337,
		5273,8,337,1,338,1,338,3,338,5277,8,338,1,338,5,338,5280,8,338,10,338,
		12,338,5283,9,338,1,339,1,339,1,339,1,339,1,339,1,339,3,339,5291,8,339,
		1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,1,340,3,340,
		5304,8,340,3,340,5306,8,340,1,341,1,341,1,341,1,341,1,341,1,341,1,341,
		1,341,1,341,1,341,1,341,1,341,3,341,5320,8,341,1,341,1,341,1,341,1,341,
		1,341,1,341,1,341,3,341,5329,8,341,3,341,5331,8,341,1,342,1,342,1,342,
		5,342,5336,8,342,10,342,12,342,5339,9,342,1,343,1,343,3,343,5343,8,343,
		1,344,1,344,3,344,5347,8,344,1,344,1,344,1,344,3,344,5352,8,344,1,344,
		1,344,1,344,1,344,5,344,5358,8,344,10,344,12,344,5361,9,344,1,344,1,344,
		1,344,1,344,3,344,5367,8,344,1,344,1,344,3,344,5371,8,344,1,344,1,344,
		1,344,1,344,3,344,5377,8,344,1,344,1,344,1,344,5,344,5382,8,344,10,344,
		12,344,5385,9,344,3,344,5387,8,344,1,345,1,345,1,345,1,345,1,346,3,346,
		5394,8,346,1,346,3,346,5397,8,346,1,346,1,346,1,346,1,346,3,346,5403,8,
		346,1,347,1,347,1,347,1,347,1,347,1,348,1,348,1,348,1,348,1,348,1,348,
		1,348,1,348,1,348,1,348,3,348,5420,8,348,1,349,1,349,1,349,3,349,5425,
		8,349,1,350,1,350,1,351,1,351,1,351,1,351,1,351,1,351,1,351,5,351,5436,
		8,351,10,351,12,351,5439,9,351,3,351,5441,8,351,1,352,1,352,1,352,1,352,
		1,352,1,352,1,352,1,352,1,352,3,352,5452,8,352,3,352,5454,8,352,1,353,
		1,353,1,354,1,354,3,354,5460,8,354,1,355,1,355,1,355,1,355,1,355,1,356,
		1,356,1,356,1,356,1,356,5,356,5472,8,356,10,356,12,356,5475,9,356,1,357,
		1,357,1,357,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
		1,358,3,358,5491,8,358,1,358,1,358,1,358,3,358,5496,8,358,1,358,3,358,
		5499,8,358,1,358,1,358,3,358,5503,8,358,1,358,3,358,5506,8,358,1,358,1,
		358,1,358,1,358,1,358,1,358,3,358,5514,8,358,1,358,1,358,1,358,1,358,3,
		358,5520,8,358,1,358,1,358,1,358,3,358,5525,8,358,1,358,3,358,5528,8,358,
		3,358,5530,8,358,1,359,1,359,3,359,5534,8,359,1,359,1,359,1,359,3,359,
		5539,8,359,3,359,5541,8,359,1,360,1,360,1,360,1,361,1,361,1,361,1,361,
		1,361,1,361,1,361,3,361,5553,8,361,1,362,1,362,5,362,5557,8,362,10,362,
		12,362,5560,9,362,1,363,1,363,1,363,1,363,1,363,1,363,1,363,1,363,1,363,
		1,363,1,363,1,363,1,363,1,363,1,363,3,363,5577,8,363,1,363,1,363,3,363,
		5581,8,363,3,363,5583,8,363,1,364,1,364,1,364,1,364,1,364,1,364,3,364,
		5591,8,364,1,365,1,365,1,365,1,365,1,365,3,365,5598,8,365,1,366,1,366,
		1,366,1,366,1,367,1,367,1,367,1,367,1,367,1,367,1,367,3,367,5611,8,367,
		1,368,1,368,1,368,3,368,5616,8,368,1,369,1,369,3,369,5620,8,369,1,369,
		1,369,3,369,5624,8,369,1,369,3,369,5627,8,369,1,370,1,370,3,370,5631,8,
		370,1,370,1,370,3,370,5635,8,370,1,370,3,370,5638,8,370,1,371,1,371,1,
		371,3,371,5643,8,371,1,371,3,371,5646,8,371,1,372,1,372,1,372,1,372,3,
		372,5652,8,372,1,372,3,372,5655,8,372,1,373,1,373,1,373,1,373,3,373,5661,
		8,373,1,373,3,373,5664,8,373,1,374,1,374,1,374,1,374,1,374,1,375,1,375,
		1,375,1,376,1,376,1,376,1,376,1,376,1,377,1,377,1,377,1,377,1,377,1,378,
		1,378,1,378,1,378,1,378,1,379,1,379,3,379,5691,8,379,1,379,1,379,1,379,
		1,379,3,379,5697,8,379,1,379,3,379,5700,8,379,1,380,1,380,1,380,1,380,
		1,381,1,381,1,381,1,381,1,381,1,382,1,382,1,382,1,382,1,382,3,382,5716,
		8,382,1,383,1,383,1,383,1,383,1,383,3,383,5723,8,383,1,383,1,383,3,383,
		5727,8,383,1,383,3,383,5730,8,383,1,383,3,383,5733,8,383,1,384,1,384,1,
		384,1,384,1,384,3,384,5740,8,384,1,384,1,384,3,384,5744,8,384,1,384,3,
		384,5747,8,384,1,384,3,384,5750,8,384,1,385,1,385,3,385,5754,8,385,1,385,
		1,385,1,385,1,385,3,385,5760,8,385,1,385,3,385,5763,8,385,1,386,1,386,
		3,386,5767,8,386,1,386,1,386,1,387,1,387,1,387,1,387,1,387,1,387,1,387,
		1,388,1,388,1,388,1,388,1,388,1,388,1,388,1,389,1,389,1,389,3,389,5788,
		8,389,1,390,1,390,1,390,3,390,5793,8,390,1,391,1,391,1,391,1,392,1,392,
		1,392,3,392,5801,8,392,1,392,1,392,1,392,3,392,5806,8,392,1,392,3,392,
		5809,8,392,1,393,1,393,3,393,5813,8,393,1,393,1,393,3,393,5817,8,393,1,
		394,1,394,3,394,5821,8,394,1,394,1,394,1,395,1,395,3,395,5827,8,395,1,
		395,1,395,3,395,5831,8,395,1,396,1,396,1,396,3,396,5836,8,396,1,397,1,
		397,1,397,3,397,5841,8,397,1,398,1,398,1,398,1,399,1,399,1,399,1,399,1,
		399,1,399,3,399,5852,8,399,3,399,5854,8,399,1,400,1,400,1,400,1,400,3,
		400,5860,8,400,1,400,1,400,1,401,1,401,1,401,1,401,1,401,1,402,1,402,1,
		402,1,402,1,402,1,403,1,403,1,403,1,403,1,404,1,404,1,404,1,404,3,404,
		5882,8,404,1,405,1,405,1,405,1,405,1,405,1,406,1,406,1,406,1,406,1,406,
		1,407,1,407,1,407,1,407,1,407,1,408,1,408,1,408,1,408,1,408,3,408,5904,
		8,408,1,409,1,409,1,409,1,409,1,409,3,409,5911,8,409,1,410,1,410,1,410,
		1,410,1,410,1,410,1,411,1,411,1,411,1,411,1,411,1,411,1,412,1,412,1,412,
		1,412,1,412,1,413,1,413,1,413,1,413,1,413,1,414,1,414,1,414,3,414,5938,
		8,414,3,414,5940,8,414,1,415,1,415,3,415,5944,8,415,1,416,1,416,1,417,
		1,417,1,417,1,418,1,418,1,418,5,418,5954,8,418,10,418,12,418,5957,9,418,
		1,419,1,419,1,419,1,419,1,419,1,419,1,419,3,419,5966,8,419,1,420,1,420,
		1,420,1,420,1,420,1,420,1,420,1,420,3,420,5976,8,420,1,420,1,420,3,420,
		5980,8,420,1,420,1,420,1,420,1,420,5,420,5986,8,420,10,420,12,420,5989,
		9,420,3,420,5991,8,420,1,420,1,420,3,420,5995,8,420,1,420,1,420,1,420,
		1,420,1,420,1,420,1,420,3,420,6004,8,420,1,421,1,421,3,421,6008,8,421,
		1,422,1,422,1,422,5,422,6013,8,422,10,422,12,422,6016,9,422,1,423,1,423,
		3,423,6020,8,423,1,424,1,424,1,424,1,424,1,424,1,424,3,424,6028,8,424,
		1,425,1,425,1,425,3,425,6033,8,425,1,425,1,425,1,426,1,426,3,426,6039,
		8,426,1,427,1,427,1,427,5,427,6044,8,427,10,427,12,427,6047,9,427,1,428,
		1,428,3,428,6051,8,428,1,428,1,428,1,428,1,428,3,428,6057,8,428,1,428,
		3,428,6060,8,428,1,429,1,429,1,430,1,430,1,430,1,430,1,430,1,430,3,430,
		6070,8,430,3,430,6072,8,430,1,431,1,431,1,431,1,431,1,431,3,431,6079,8,
		431,1,432,1,432,1,432,3,432,6084,8,432,1,432,1,432,3,432,6088,8,432,1,
		432,3,432,6091,8,432,1,433,1,433,1,433,5,433,6096,8,433,10,433,12,433,
		6099,9,433,1,434,1,434,3,434,6103,8,434,1,434,1,434,3,434,6107,8,434,1,
		435,1,435,1,435,1,435,1,435,1,436,1,436,1,436,1,436,3,436,6118,8,436,1,
		437,1,437,1,437,1,437,1,437,1,437,3,437,6126,8,437,1,437,1,437,3,437,6130,
		8,437,1,437,3,437,6133,8,437,1,437,3,437,6136,8,437,1,438,1,438,3,438,
		6140,8,438,1,438,1,438,3,438,6144,8,438,1,438,5,438,6147,8,438,10,438,
		12,438,6150,9,438,1,439,1,439,1,439,3,439,6155,8,439,1,440,1,440,3,440,
		6159,8,440,1,440,1,440,1,441,1,441,1,442,1,442,1,442,1,442,1,442,3,442,
		6170,8,442,1,442,3,442,6173,8,442,1,442,3,442,6176,8,442,1,442,3,442,6179,
		8,442,1,443,1,443,1,443,1,443,1,443,1,443,3,443,6187,8,443,1,444,1,444,
		3,444,6191,8,444,1,444,5,444,6194,8,444,10,444,12,444,6197,9,444,1,445,
		1,445,1,445,1,445,1,445,3,445,6204,8,445,1,446,1,446,1,446,1,446,1,446,
		1,446,3,446,6212,8,446,1,447,1,447,1,447,1,447,3,447,6218,8,447,1,448,
		1,448,3,448,6222,8,448,1,448,1,448,1,448,1,448,3,448,6228,8,448,1,448,
		1,448,1,449,1,449,1,449,1,449,1,449,3,449,6237,8,449,1,449,1,449,1,449,
		1,449,1,449,1,449,1,449,1,449,1,449,3,449,6248,8,449,1,450,1,450,1,450,
		1,450,1,450,1,450,1,450,1,450,3,450,6258,8,450,1,451,1,451,1,451,1,451,
		1,451,1,451,3,451,6266,8,451,1,452,1,452,1,452,1,453,1,453,1,453,1,454,
		1,454,1,455,1,455,1,455,1,455,3,455,6280,8,455,1,455,3,455,6283,8,455,
		1,455,1,455,3,455,6287,8,455,1,455,1,455,1,455,1,455,1,455,1,455,1,455,
		1,455,1,455,5,455,6298,8,455,10,455,12,455,6301,9,455,1,456,1,456,1,456,
		1,456,1,456,1,456,3,456,6309,8,456,1,456,1,456,1,456,1,456,1,456,1,456,
		1,456,1,456,1,456,1,456,5,456,6321,8,456,10,456,12,456,6324,9,456,1,457,
		1,457,1,458,1,458,3,458,6330,8,458,1,458,1,458,1,458,1,458,3,458,6336,
		8,458,1,458,1,458,1,458,1,458,3,458,6342,8,458,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,3,459,6351,8,459,1,459,1,459,1,459,1,459,1,459,1,459,
		1,459,1,459,1,459,3,459,6362,8,459,1,459,1,459,3,459,6366,8,459,1,460,
		1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,
		1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,1,460,
		1,460,1,460,5,460,6395,8,460,10,460,12,460,6398,9,460,1,461,1,461,1,461,
		3,461,6403,8,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
		1,461,1,461,1,461,1,461,1,461,1,461,3,461,6420,8,461,1,461,1,461,1,461,
		1,461,1,461,3,461,6427,8,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
		1,461,1,461,1,461,1,461,1,461,3,461,6441,8,461,1,461,1,461,1,461,1,461,
		1,461,1,461,1,461,1,461,1,461,3,461,6452,8,461,1,461,1,461,1,461,3,461,
		6457,8,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,
		6468,8,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,6478,
		8,461,1,461,1,461,1,461,4,461,6483,8,461,11,461,12,461,6484,1,461,3,461,
		6488,8,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
		1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,
		1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,1,461,3,461,6522,
		8,461,1,461,1,461,1,461,1,461,1,461,1,461,5,461,6530,8,461,10,461,12,461,
		6533,9,461,1,462,1,462,1,462,1,463,1,463,1,463,1,463,3,463,6542,8,463,
		1,464,1,464,1,464,3,464,6547,8,464,1,464,1,464,1,464,3,464,6552,8,464,
		1,464,1,464,1,464,1,464,1,464,3,464,6559,8,464,1,464,1,464,1,464,1,464,
		3,464,6565,8,464,1,464,1,464,1,464,3,464,6570,8,464,1,464,1,464,1,464,
		3,464,6575,8,464,1,464,1,464,1,464,1,464,3,464,6581,8,464,1,464,1,464,
		3,464,6585,8,464,1,464,1,464,1,464,3,464,6590,8,464,1,464,1,464,1,464,
		3,464,6595,8,464,1,464,1,464,1,464,1,464,1,464,3,464,6602,8,464,1,464,
		1,464,1,464,1,464,1,464,1,464,3,464,6610,8,464,1,464,1,464,1,464,3,464,
		6615,8,464,1,464,1,464,3,464,6619,8,464,1,464,1,464,3,464,6623,8,464,1,
		464,1,464,3,464,6627,8,464,3,464,6629,8,464,1,465,1,465,1,465,1,465,1,
		465,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,
		3,466,6647,8,466,1,466,1,466,1,466,1,466,1,466,1,466,3,466,6655,8,466,
		1,466,1,466,3,466,6659,8,466,1,466,1,466,1,466,1,466,1,466,3,466,6666,
		8,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,1,466,3,466,
		6678,8,466,1,466,3,466,6681,8,466,1,466,1,466,3,466,6685,8,466,1,467,1,
		467,1,468,1,468,1,468,1,468,1,468,1,468,3,468,6695,8,468,1,469,1,469,1,
		469,1,469,1,469,1,469,1,469,1,470,1,470,1,470,3,470,6707,8,470,1,471,1,
		471,1,471,1,471,1,471,3,471,6714,8,471,1,471,1,471,3,471,6718,8,471,1,
		472,1,472,3,472,6722,8,472,1,473,1,473,1,473,1,473,1,473,1,473,3,473,6730,
		8,473,1,474,1,474,1,474,1,475,1,475,1,475,1,475,1,475,3,475,6740,8,475,
		1,475,1,475,1,475,1,475,1,475,1,475,1,475,3,475,6749,8,475,3,475,6751,
		8,475,1,476,3,476,6754,8,476,1,476,1,476,1,477,1,477,1,477,1,477,1,477,
		3,477,6763,8,477,1,478,1,478,1,478,5,478,6768,8,478,10,478,12,478,6771,
		9,478,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,
		6783,8,479,1,479,1,479,1,479,3,479,6788,8,479,1,480,1,480,1,480,1,480,
		1,480,3,480,6795,8,480,1,480,1,480,1,480,1,480,3,480,6801,8,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,4,480,6825,8,480,
		11,480,12,480,6826,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,
		6837,8,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,6869,8,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,3,480,6888,8,480,1,480,1,480,1,480,1,480,3,480,
		6894,8,480,1,480,1,480,3,480,6898,8,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		3,480,6929,8,480,1,480,1,480,1,480,1,480,3,480,6935,8,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,6947,8,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,3,480,6960,
		8,480,1,480,1,480,3,480,6964,8,480,1,480,1,480,3,480,6968,8,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,3,480,6996,8,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,3,480,7046,8,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,3,480,7056,8,480,1,480,1,480,1,480,1,480,1,480,1,480,
		1,480,1,480,1,480,1,480,3,480,7068,8,480,1,480,1,480,1,480,3,480,7073,
		8,480,1,481,1,481,1,481,1,482,1,482,1,482,3,482,7081,8,482,1,482,1,482,
		1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,1,482,
		1,482,1,482,1,482,1,482,3,482,7101,8,482,1,483,1,483,3,483,7105,8,483,
		1,483,1,483,1,484,1,484,1,485,1,485,1,485,1,485,1,485,1,485,1,485,1,485,
		5,485,7119,8,485,10,485,12,485,7122,9,485,3,485,7124,8,485,1,486,1,486,
		1,486,3,486,7129,8,486,1,486,3,486,7132,8,486,1,487,1,487,1,488,1,488,
		1,488,1,488,1,488,3,488,7141,8,488,1,488,1,488,3,488,7145,8,488,1,488,
		1,488,1,488,1,488,3,488,7151,8,488,1,488,1,488,1,488,1,488,3,488,7157,
		8,488,1,488,1,488,3,488,7161,8,488,1,488,1,488,1,489,1,489,1,489,1,489,
		1,489,1,489,1,489,3,489,7172,8,489,1,489,1,489,1,489,1,489,3,489,7178,
		8,489,3,489,7180,8,489,1,489,1,489,1,490,1,490,1,490,3,490,7187,8,490,
		1,490,1,490,1,490,1,490,1,490,3,490,7194,8,490,1,490,1,490,3,490,7198,
		8,490,1,491,1,491,1,491,5,491,7203,8,491,10,491,12,491,7206,9,491,1,492,
		1,492,3,492,7210,8,492,1,493,1,493,3,493,7214,8,493,1,494,1,494,1,494,
		3,494,7219,8,494,1,495,1,495,1,495,3,495,7224,8,495,1,496,1,496,1,496,
		1,496,1,497,1,497,1,498,1,498,3,498,7234,8,498,1,498,1,498,1,498,3,498,
		7239,8,498,3,498,7241,8,498,1,498,1,498,3,498,7245,8,498,1,499,1,499,3,
		499,7249,8,499,1,500,1,500,1,500,1,501,1,501,1,501,1,502,1,502,1,502,1,
		503,1,503,3,503,7262,8,503,1,503,1,503,3,503,7266,8,503,1,503,3,503,7269,
		8,503,1,503,1,503,3,503,7273,8,503,1,503,1,503,3,503,7277,8,503,1,503,
		1,503,3,503,7281,8,503,1,503,1,503,1,503,1,503,1,503,3,503,7288,8,503,
		1,503,1,503,3,503,7292,8,503,1,503,1,503,3,503,7296,8,503,1,503,1,503,
		1,503,1,503,1,503,1,503,3,503,7304,8,503,1,503,1,503,3,503,7308,8,503,
		1,504,1,504,1,504,5,504,7313,8,504,10,504,12,504,7316,9,504,1,505,1,505,
		1,505,3,505,7321,8,505,1,506,1,506,1,507,1,507,1,508,1,508,3,508,7329,
		8,508,1,509,1,509,1,510,1,510,1,510,1,510,1,511,1,511,1,511,1,511,1,512,
		1,512,1,512,1,512,1,513,1,513,1,513,5,513,7348,8,513,10,513,12,513,7351,
		9,513,1,514,1,514,3,514,7355,8,514,1,515,1,515,1,515,5,515,7360,8,515,
		10,515,12,515,7363,9,515,1,516,1,516,1,517,1,517,1,517,1,517,1,518,1,518,
		1,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,1,518,3,518,
		7384,8,518,1,519,1,519,1,519,1,520,1,520,1,520,1,520,1,520,1,521,1,521,
		1,521,1,521,1,521,1,521,3,521,7400,8,521,1,522,1,522,1,522,1,523,1,523,
		1,523,4,523,7408,8,523,11,523,12,523,7409,1,524,1,524,3,524,7414,8,524,
		1,524,1,524,1,524,4,524,7419,8,524,11,524,12,524,7420,1,524,3,524,7424,
		8,524,1,524,1,524,1,524,1,525,1,525,1,525,1,526,1,526,1,526,3,526,7435,
		8,526,1,527,1,527,1,528,1,528,1,528,1,529,1,529,3,529,7444,8,529,1,529,
		3,529,7447,8,529,1,529,1,529,1,530,1,530,1,530,3,530,7454,8,530,1,531,
		1,531,1,531,3,531,7459,8,531,1,532,1,532,1,532,1,532,1,532,1,533,1,533,
		1,533,1,533,1,533,1,533,1,533,1,534,1,534,1,534,1,534,1,534,1,534,1,534,
		1,535,1,535,1,535,4,535,7483,8,535,11,535,12,535,7484,1,536,1,536,1,536,
		1,536,3,536,7491,8,536,1,537,1,537,1,537,1,537,3,537,7497,8,537,1,537,
		1,537,3,537,7501,8,537,1,538,1,538,1,538,1,538,1,538,1,538,1,539,1,539,
		3,539,7511,8,539,1,540,1,540,3,540,7515,8,540,1,540,1,540,1,541,1,541,
		1,541,1,541,1,541,1,541,1,541,5,541,7526,8,541,10,541,12,541,7529,9,541,
		1,541,1,541,1,542,1,542,1,542,1,542,1,542,1,542,1,542,3,542,7540,8,542,
		1,543,1,543,1,543,1,543,1,543,1,543,1,544,1,544,1,544,1,545,1,545,1,545,
		1,546,1,546,3,546,7556,8,546,1,546,1,546,1,546,1,546,5,546,7562,8,546,
		10,546,12,546,7565,9,546,1,546,1,546,1,546,1,546,1,546,5,546,7572,8,546,
		10,546,12,546,7575,9,546,3,546,7577,8,546,1,547,1,547,1,547,3,547,7582,
		8,547,1,548,1,548,3,548,7586,8,548,1,548,1,548,1,548,1,549,1,549,3,549,
		7593,8,549,1,549,1,549,1,549,3,549,7598,8,549,1,550,1,550,1,551,1,551,
		1,551,3,551,7605,8,551,1,551,1,551,1,551,1,551,5,551,7611,8,551,10,551,
		12,551,7614,9,551,3,551,7616,8,551,1,552,1,552,1,552,3,552,7621,8,552,
		1,552,1,552,1,552,1,552,5,552,7627,8,552,10,552,12,552,7630,9,552,3,552,
		7632,8,552,1,553,1,553,1,553,1,553,1,554,1,554,1,554,1,555,1,555,1,555,
		1,556,1,556,3,556,7646,8,556,1,556,3,556,7649,8,556,1,556,1,556,1,556,
		1,556,1,557,1,557,1,557,1,557,1,557,1,557,1,557,3,557,7662,8,557,1,557,
		1,557,3,557,7666,8,557,3,557,7668,8,557,1,558,1,558,1,558,3,558,7673,8,
		558,1,559,1,559,1,559,3,559,7678,8,559,1,560,1,560,1,560,1,561,1,561,3,
		561,7685,8,561,1,561,1,561,1,562,1,562,3,562,7691,8,562,1,562,1,562,5,
		562,7695,8,562,10,562,12,562,7698,9,562,1,562,1,562,3,562,7702,8,562,1,
		562,3,562,7705,8,562,1,562,1,562,5,562,7709,8,562,10,562,12,562,7712,9,
		562,1,562,1,562,3,562,7716,8,562,1,562,3,562,7719,8,562,1,562,1,562,5,
		562,7723,8,562,10,562,12,562,7726,9,562,1,562,3,562,7729,8,562,1,562,1,
		562,1,562,1,562,3,562,7735,8,562,3,562,7737,8,562,1,562,3,562,7740,8,562,
		1,562,1,562,5,562,7744,8,562,10,562,12,562,7747,9,562,1,562,1,562,1,562,
		3,562,7752,8,562,1,562,1,562,1,562,1,562,1,562,3,562,7759,8,562,3,562,
		7761,8,562,3,562,7763,8,562,1,563,1,563,3,563,7767,8,563,1,564,1,564,5,
		564,7771,8,564,10,564,12,564,7774,9,564,1,564,3,564,7777,8,564,1,564,1,
		564,3,564,7781,8,564,1,564,1,564,1,564,3,564,7786,8,564,1,564,5,564,7789,
		8,564,10,564,12,564,7792,9,564,3,564,7794,8,564,1,565,3,565,7797,8,565,
		1,565,1,565,1,565,1,565,1,565,1,565,1,565,1,565,3,565,7807,8,565,1,565,
		1,565,1,565,1,565,3,565,7813,8,565,1,565,1,565,1,565,1,565,1,565,3,565,
		7820,8,565,1,565,1,565,1,565,3,565,7825,8,565,1,565,1,565,1,565,1,565,
		1,565,1,565,1,565,1,565,1,565,1,565,1,565,3,565,7838,8,565,1,565,1,565,
		1,565,1,565,1,565,1,565,3,565,7846,8,565,1,565,1,565,1,565,1,565,3,565,
		7852,8,565,1,565,1,565,1,565,3,565,7857,8,565,1,566,1,566,1,567,1,567,
		1,568,1,568,1,568,1,569,1,569,3,569,7868,8,569,1,570,1,570,3,570,7872,
		8,570,1,570,1,570,1,570,3,570,7877,8,570,1,570,1,570,3,570,7881,8,570,
		1,570,3,570,7884,8,570,1,571,1,571,1,571,3,571,7889,8,571,1,571,1,571,
		3,571,7893,8,571,1,571,1,571,1,571,1,571,1,571,1,571,3,571,7901,8,571,
		1,571,1,571,1,571,1,571,1,571,1,571,3,571,7909,8,571,3,571,7911,8,571,
		1,572,1,572,1,572,1,572,1,572,1,572,1,572,3,572,7920,8,572,1,573,1,573,
		1,573,1,573,5,573,7926,8,573,10,573,12,573,7929,9,573,1,573,1,573,1,574,
		1,574,3,574,7935,8,574,1,574,3,574,7938,8,574,1,575,1,575,1,575,1,575,
		5,575,7944,8,575,10,575,12,575,7947,9,575,1,575,1,575,1,576,1,576,1,576,
		1,576,3,576,7955,8,576,3,576,7957,8,576,1,577,1,577,1,578,1,578,3,578,
		7963,8,578,1,579,1,579,3,579,7967,8,579,1,579,1,579,1,579,1,579,1,579,
		1,579,1,579,3,579,7976,8,579,1,579,1,579,1,579,1,579,3,579,7982,8,579,
		1,579,3,579,7985,8,579,1,580,1,580,1,581,1,581,1,581,1,582,1,582,1,582,
		1,582,3,582,7996,8,582,1,583,1,583,1,584,1,584,1,584,1,585,1,585,3,585,
		8005,8,585,1,585,3,585,8008,8,585,1,585,1,585,1,585,3,585,8013,8,585,3,
		585,8015,8,585,1,585,3,585,8018,8,585,1,585,3,585,8021,8,585,1,585,1,585,
		3,585,8025,8,585,1,585,3,585,8028,8,585,1,585,1,585,3,585,8032,8,585,1,
		585,1,585,1,585,3,585,8037,8,585,1,585,3,585,8040,8,585,1,585,1,585,3,
		585,8044,8,585,1,585,3,585,8047,8,585,1,585,1,585,3,585,8051,8,585,1,585,
		1,585,1,585,3,585,8056,8,585,1,585,1,585,3,585,8060,8,585,1,585,1,585,
		1,585,1,585,1,585,1,585,1,585,1,585,1,585,1,585,3,585,8072,8,585,1,585,
		1,585,3,585,8076,8,585,1,585,1,585,1,585,1,585,3,585,8082,8,585,1,585,
		3,585,8085,8,585,1,585,1,585,1,585,3,585,8090,8,585,1,585,1,585,3,585,
		8094,8,585,1,585,1,585,3,585,8098,8,585,1,585,1,585,1,585,3,585,8103,8,
		585,1,585,1,585,1,585,1,585,1,585,1,585,1,585,3,585,8112,8,585,1,585,3,
		585,8115,8,585,1,585,1,585,3,585,8119,8,585,1,585,1,585,3,585,8123,8,585,
		1,585,3,585,8126,8,585,1,585,1,585,3,585,8130,8,585,1,585,1,585,3,585,
		8134,8,585,1,585,1,585,1,585,3,585,8139,8,585,1,585,1,585,1,585,3,585,
		8144,8,585,1,585,1,585,1,585,3,585,8149,8,585,1,586,1,586,1,586,3,586,
		8154,8,586,1,587,1,587,1,587,3,587,8159,8,587,3,587,8161,8,587,1,588,1,
		588,1,588,3,588,8166,8,588,1,588,1,588,1,589,4,589,8171,8,589,11,589,12,
		589,8172,1,590,1,590,1,590,1,590,1,590,1,590,3,590,8181,8,590,1,590,1,
		590,1,590,1,590,3,590,8187,8,590,3,590,8189,8,590,1,591,1,591,3,591,8193,
		8,591,1,591,1,591,3,591,8197,8,591,1,592,1,592,3,592,8201,8,592,1,592,
		1,592,3,592,8205,8,592,1,593,1,593,1,593,1,593,1,594,1,594,1,594,1,594,
		1,595,1,595,1,595,1,595,1,595,3,595,8220,8,595,1,596,1,596,1,596,1,596,
		3,596,8226,8,596,1,597,1,597,1,597,1,597,1,597,3,597,8233,8,597,1,598,
		1,598,3,598,8237,8,598,1,598,5,598,8240,8,598,10,598,12,598,8243,9,598,
		1,599,1,599,3,599,8247,8,599,1,599,3,599,8250,8,599,1,600,1,600,3,600,
		8254,8,600,1,600,3,600,8257,8,600,1,601,4,601,8260,8,601,11,601,12,601,
		8261,1,602,1,602,3,602,8266,8,602,1,602,1,602,1,602,1,602,3,602,8272,8,
		602,1,602,1,602,3,602,8276,8,602,1,602,1,602,3,602,8280,8,602,1,602,1,
		602,1,602,3,602,8285,8,602,1,602,1,602,1,602,3,602,8290,8,602,1,602,1,
		602,1,602,3,602,8295,8,602,1,602,1,602,1,602,3,602,8300,8,602,1,602,1,
		602,1,602,3,602,8305,8,602,1,602,1,602,1,602,3,602,8310,8,602,1,602,1,
		602,1,602,3,602,8315,8,602,1,602,1,602,1,602,3,602,8320,8,602,1,602,1,
		602,1,602,3,602,8325,8,602,1,602,1,602,1,602,3,602,8330,8,602,1,602,1,
		602,1,602,3,602,8335,8,602,1,602,1,602,1,602,3,602,8340,8,602,1,602,1,
		602,1,602,3,602,8345,8,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,1,
		602,3,602,8355,8,602,1,602,1,602,1,602,1,602,3,602,8361,8,602,1,602,1,
		602,1,602,1,602,3,602,8367,8,602,1,602,1,602,1,602,3,602,8372,8,602,1,
		602,1,602,1,602,1,602,1,602,3,602,8379,8,602,1,602,1,602,1,602,3,602,8384,
		8,602,1,602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,8393,8,602,1,602,
		1,602,1,602,1,602,3,602,8399,8,602,1,602,1,602,1,602,3,602,8404,8,602,
		1,603,1,603,3,603,8408,8,603,1,604,3,604,8411,8,604,1,604,1,604,3,604,
		8415,8,604,1,604,1,604,1,605,3,605,8420,8,605,1,605,1,605,3,605,8424,8,
		605,1,605,1,605,1,606,3,606,8429,8,606,1,606,1,606,3,606,8433,8,606,1,
		606,1,606,1,607,1,607,1,607,1,607,1,607,3,607,8442,8,607,1,607,3,607,8445,
		8,607,1,607,3,607,8448,8,607,1,608,3,608,8451,8,608,1,608,1,608,3,608,
		8455,8,608,1,608,1,608,3,608,8459,8,608,1,608,1,608,3,608,8463,8,608,1,
		608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,1,608,
		1,608,3,608,8478,8,608,1,608,3,608,8481,8,608,3,608,8483,8,608,1,609,1,
		609,1,609,3,609,8488,8,609,1,609,1,609,1,609,1,609,1,609,1,609,1,609,3,
		609,8497,8,609,1,609,3,609,8500,8,609,1,609,1,609,3,609,8504,8,609,1,610,
		1,610,1,610,1,610,1,611,1,611,1,611,1,611,5,611,8514,8,611,10,611,12,611,
		8517,9,611,1,611,1,611,1,612,1,612,1,612,1,612,1,612,1,612,1,612,3,612,
		8528,8,612,1,612,1,612,1,612,3,612,8533,8,612,1,612,5,612,8536,8,612,10,
		612,12,612,8539,9,612,1,612,1,612,1,612,1,612,5,612,8545,8,612,10,612,
		12,612,8548,9,612,1,612,1,612,3,612,8552,8,612,1,613,1,613,1,613,1,613,
		1,613,5,613,8559,8,613,10,613,12,613,8562,9,613,1,613,1,613,3,613,8566,
		8,613,1,614,1,614,3,614,8570,8,614,1,614,1,614,3,614,8574,8,614,1,614,
		1,614,3,614,8578,8,614,1,614,1,614,1,614,3,614,8583,8,614,1,614,1,614,
		1,614,3,614,8588,8,614,1,614,1,614,1,614,1,614,3,614,8594,8,614,1,614,
		1,614,1,614,3,614,8599,8,614,1,614,3,614,8602,8,614,1,615,1,615,1,615,
		5,615,8607,8,615,10,615,12,615,8610,9,615,1,616,1,616,1,616,1,616,5,616,
		8616,8,616,10,616,12,616,8619,9,616,1,616,1,616,1,617,1,617,3,617,8625,
		8,617,1,618,1,618,1,618,1,618,1,619,1,619,1,619,1,620,1,620,1,620,1,621,
		1,621,1,621,1,621,1,621,3,621,8642,8,621,3,621,8644,8,621,1,622,1,622,
		1,622,1,622,1,623,1,623,1,623,1,623,1,624,3,624,8655,8,624,1,624,1,624,
		1,625,1,625,1,625,1,626,1,626,1,626,1,627,1,627,3,627,8667,8,627,1,628,
		1,628,1,628,1,628,1,628,1,628,1,629,1,629,1,629,5,629,8678,8,629,10,629,
		12,629,8681,9,629,1,630,1,630,1,630,5,630,8686,8,630,10,630,12,630,8689,
		9,630,1,631,1,631,1,631,1,631,3,631,8695,8,631,1,632,1,632,1,632,1,633,
		1,633,4,633,8702,8,633,11,633,12,633,8703,1,634,1,634,1,634,1,634,3,634,
		8710,8,634,1,634,1,634,1,634,1,634,1,634,1,634,3,634,8718,8,634,1,635,
		1,635,4,635,8722,8,635,11,635,12,635,8723,1,636,1,636,1,636,1,636,1,637,
		1,637,1,637,5,637,8733,8,637,10,637,12,637,8736,9,637,1,638,1,638,1,638,
		5,638,8741,8,638,10,638,12,638,8744,9,638,1,639,1,639,1,639,3,639,8749,
		8,639,1,639,1,639,3,639,8753,8,639,1,639,3,639,8756,8,639,1,640,1,640,
		1,640,1,640,3,640,8762,8,640,1,641,1,641,1,641,1,641,1,641,1,641,3,641,
		8770,8,641,1,642,1,642,1,642,1,642,1,643,1,643,1,643,1,643,1,643,1,644,
		1,644,1,644,1,644,1,645,1,645,1,645,1,645,1,645,1,645,1,646,1,646,1,646,
		1,646,1,646,1,646,1,647,1,647,1,647,1,647,1,647,1,647,1,647,1,648,1,648,
		1,648,1,648,1,648,3,648,8809,8,648,1,649,1,649,1,649,1,649,1,650,1,650,
		1,650,1,650,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,1,651,
		1,651,1,651,1,651,1,651,1,651,3,651,8834,8,651,1,652,1,652,1,652,1,653,
		1,653,1,653,1,654,1,654,3,654,8844,8,654,1,655,1,655,1,655,3,655,8849,
		8,655,3,655,8851,8,655,1,656,1,656,1,656,1,657,1,657,3,657,8858,8,657,
		1,658,1,658,1,659,1,659,1,660,1,660,1,660,1,661,1,661,1,661,3,661,8870,
		8,661,3,661,8872,8,661,1,662,1,662,1,663,1,663,1,664,1,664,1,664,1,664,
		5,664,8882,8,664,10,664,12,664,8885,9,664,1,664,1,664,1,665,1,665,1,666,
		1,666,3,666,8893,8,666,1,667,1,667,1,668,1,668,1,669,1,669,1,669,1,669,
		1,669,3,669,8904,8,669,1,669,1,669,1,670,1,670,1,671,1,671,1,672,1,672,
		1,673,1,673,1,674,1,674,1,675,1,675,1,676,1,676,1,677,1,677,1,678,1,678,
		3,678,8926,8,678,1,679,1,679,3,679,8930,8,679,1,680,1,680,1,681,1,681,
		1,682,1,682,1,683,1,683,1,684,1,684,1,685,1,685,1,686,1,686,1,687,1,687,
		1,688,1,688,1,689,1,689,1,690,1,690,3,690,8954,8,690,1,691,1,691,1,691,
		1,692,1,692,1,692,1,692,1,692,1,692,3,692,8965,8,692,3,692,8967,8,692,
		1,693,1,693,3,693,8971,8,693,1,694,1,694,1,694,5,694,8976,8,694,10,694,
		12,694,8979,9,694,1,695,1,695,1,695,5,695,8984,8,695,10,695,12,695,8987,
		9,695,1,696,1,696,1,697,1,697,3,697,8993,8,697,1,698,1,698,1,699,1,699,
		3,699,8999,8,699,1,700,1,700,1,701,1,701,1,702,1,702,1,703,1,703,1,704,
		1,704,1,704,3,704,9012,8,704,1,705,1,705,3,705,9016,8,705,1,706,1,706,
		1,706,5,706,9021,8,706,10,706,12,706,9024,9,706,1,707,1,707,1,707,1,707,
		1,708,1,708,3,708,9032,8,708,1,709,1,709,1,709,3,709,9037,8,709,3,709,
		9039,8,709,1,710,1,710,1,710,1,711,1,711,1,712,1,712,1,713,1,713,1,714,
		1,714,1,714,1,714,1,714,3,714,9055,8,714,1,715,1,715,1,715,1,715,1,715,
		3,715,9062,8,715,1,716,1,716,1,716,3,716,9067,8,716,1,717,1,717,1,717,
		1,717,1,717,1,717,3,717,9075,8,717,1,717,3,717,9078,8,717,1,718,1,718,
		1,718,3,718,9083,8,718,1,719,1,719,1,720,1,720,1,720,1,720,5,720,9091,
		8,720,10,720,12,720,9094,9,720,1,720,1,720,1,721,1,721,1,721,3,721,9101,
		8,721,1,722,1,722,1,722,3,722,9106,8,722,1,723,1,723,1,723,3,723,9111,
		8,723,1,724,3,724,9114,8,724,1,724,1,724,3,724,9118,8,724,1,724,5,724,
		9121,8,724,10,724,12,724,9124,9,724,1,725,1,725,1,726,1,726,1,726,5,726,
		9131,8,726,10,726,12,726,9134,9,726,1,727,1,727,1,727,3,727,9139,8,727,
		1,728,1,728,1,729,1,729,1,730,1,730,1,731,1,731,1,731,1,731,1,731,1,731,
		3,731,9153,8,731,1,732,1,732,3,732,9157,8,732,1,733,1,733,1,734,1,734,
		1,734,1,734,1,734,1,734,1,735,1,735,3,735,9169,8,735,1,736,1,736,3,736,
		9173,8,736,1,737,1,737,3,737,9177,8,737,1,738,1,738,3,738,9181,8,738,1,
		739,1,739,1,739,1,740,1,740,1,741,1,741,1,742,1,742,1,742,1,742,1,742,
		1,742,3,742,9196,8,742,1,743,1,743,1,743,1,744,1,744,1,745,1,745,1,745,
		1,745,1,745,1,745,1,745,3,745,9210,8,745,1,745,1,745,1,745,1,745,1,745,
		3,745,9217,8,745,3,745,9219,8,745,1,746,1,746,1,747,1,747,1,748,1,748,
		1,748,1,748,1,748,1,748,1,748,1,748,1,748,1,748,1,748,3,748,9236,8,748,
		1,748,1,748,1,748,3,748,9241,8,748,3,748,9243,8,748,1,749,1,749,1,750,
		1,750,1,750,1,750,1,750,3,750,9252,8,750,1,751,1,751,1,751,3,751,9257,
		8,751,1,751,1,751,1,751,3,751,9262,8,751,3,751,9264,8,751,1,752,1,752,
		1,752,1,752,3,752,9270,8,752,1,753,1,753,1,754,1,754,1,755,1,755,1,755,
		3,755,9279,8,755,1,755,0,4,910,912,920,922,756,0,2,4,6,8,10,12,14,16,18,
		20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
		68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
		112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,
		148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,
		184,186,188,190,192,194,196,198,200,202,204,206,208,210,212,214,216,218,
		220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,
		256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,
		292,294,296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
		328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,
		364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,
		400,402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,
		436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,
		472,474,476,478,480,482,484,486,488,490,492,494,496,498,500,502,504,506,
		508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,
		544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,
		580,582,584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,
		616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,
		652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,
		688,690,692,694,696,698,700,702,704,706,708,710,712,714,716,718,720,722,
		724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,
		760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,
		796,798,800,802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,
		832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,
		868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900,902,
		904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,
		940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,
		976,978,980,982,984,986,988,990,992,994,996,998,1000,1002,1004,1006,1008,
		1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,
		1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,
		1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,
		1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,
		1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,
		1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,
		1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,
		1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,
		1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,
		1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,
		1290,1292,1294,1296,1298,1300,1302,1304,1306,1308,1310,1312,1314,1316,
		1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,1344,
		1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,1368,1370,1372,
		1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,1398,1400,
		1402,1404,1406,1408,1410,1412,1414,1416,1418,1420,1422,1424,1426,1428,
		1430,1432,1434,1436,1438,1440,1442,1444,1446,1448,1450,1452,1454,1456,
		1458,1460,1462,1464,1466,1468,1470,1472,1474,1476,1478,1480,1482,1484,
		1486,1488,1490,1492,1494,1496,1498,1500,1502,1504,1506,1508,1510,0,176,
		1,0,731,732,2,0,64,64,600,600,2,0,94,94,489,489,1,0,654,655,2,0,52,52,
		185,185,1,0,733,734,2,0,95,95,313,313,2,0,178,178,193,193,2,0,265,265,
		476,476,4,0,165,165,281,281,456,456,567,567,2,0,169,169,282,282,2,0,459,
		459,614,614,2,0,394,394,647,647,3,0,360,360,588,588,612,612,2,0,54,54,
		74,74,3,0,172,172,275,275,624,624,2,0,230,230,434,434,2,0,582,582,584,
		584,3,0,265,265,322,322,450,450,2,0,226,226,388,388,4,0,226,226,299,299,
		388,388,438,438,2,0,6,6,9,12,3,0,170,170,256,256,322,322,1,0,636,637,2,
		0,154,154,662,662,2,0,126,126,322,322,2,0,806,806,812,812,2,0,309,309,
		501,501,2,0,170,170,322,322,2,0,672,672,804,804,6,0,58,58,181,181,256,
		256,543,545,547,547,566,566,2,0,29,29,401,401,2,0,3,5,44,44,3,0,451,451,
		501,501,692,692,2,0,142,142,498,498,2,0,65,65,173,173,2,0,521,521,624,
		624,2,0,303,303,496,496,2,0,141,141,272,272,2,0,58,58,181,181,2,0,231,
		231,265,265,2,0,269,269,296,296,2,0,405,405,658,658,3,0,277,277,582,582,
		584,584,2,0,75,75,554,554,2,0,292,292,490,490,2,0,78,78,342,342,2,0,323,
		323,767,767,2,0,327,327,773,773,2,0,324,324,768,768,2,0,344,344,791,791,
		2,0,330,330,776,776,2,0,331,331,777,777,2,0,325,325,770,770,2,0,332,332,
		779,779,2,0,326,326,771,771,2,0,340,340,780,780,2,0,334,334,781,781,2,
		0,333,333,782,782,2,0,336,336,784,784,2,0,337,337,785,785,2,0,338,338,
		786,786,2,0,339,339,787,787,2,0,341,341,788,788,2,0,343,343,790,790,2,
		0,747,747,789,789,2,0,335,335,783,783,2,0,721,721,778,778,2,0,722,722,
		766,766,2,0,345,345,772,772,2,0,744,744,769,769,2,0,745,745,792,792,3,
		0,402,402,752,753,807,807,2,0,328,328,774,774,2,0,329,329,775,775,2,0,
		540,540,542,542,2,0,467,467,549,549,2,0,527,527,763,763,2,0,164,164,185,
		185,3,0,390,390,550,550,659,659,2,0,315,315,621,621,2,0,167,167,728,728,
		3,0,239,239,441,441,584,584,4,0,275,275,461,461,512,512,624,624,13,0,172,
		172,185,185,206,206,209,209,223,223,269,269,442,442,446,446,469,469,523,
		523,576,576,604,604,626,626,4,0,500,500,583,583,628,628,645,645,2,0,140,
		140,185,185,2,0,167,167,390,390,2,0,216,216,450,450,1,0,814,815,5,0,101,
		101,216,216,220,220,358,358,450,450,3,0,216,216,450,450,629,629,2,0,247,
		247,667,667,2,0,120,120,611,611,2,0,236,236,283,283,2,0,268,269,294,294,
		6,0,58,58,139,139,287,287,359,359,534,534,578,578,2,0,128,128,449,449,
		4,0,258,258,440,440,558,558,627,627,5,0,78,78,199,199,201,201,241,241,
		528,528,2,0,628,628,719,719,2,0,173,174,214,214,3,0,219,219,606,606,620,
		620,2,0,23,23,62,62,2,0,26,26,413,413,2,0,58,58,63,63,2,0,6,6,8,13,3,0,
		16,18,182,182,373,373,1,0,14,15,1,0,21,22,2,0,14,15,20,20,2,0,80,81,83,
		83,2,0,351,351,369,369,5,0,559,559,562,562,575,575,641,641,644,644,4,0,
		687,688,701,701,703,703,705,705,2,0,693,693,695,695,2,0,690,690,694,694,
		2,0,226,226,299,299,2,0,719,719,816,816,2,0,265,265,704,704,2,0,53,53,
		569,569,1,0,156,157,1,0,594,595,4,0,155,155,158,158,593,593,596,596,4,
		0,244,244,310,310,375,377,430,431,2,0,1,1,391,391,2,0,1,1,19,19,5,0,159,
		162,259,261,365,366,509,509,664,664,9,0,163,163,262,262,362,362,367,367,
		374,374,448,448,510,510,649,649,665,665,3,0,136,136,211,211,615,615,2,
		0,144,144,551,551,2,0,397,397,502,502,10,0,98,98,108,108,117,117,131,133,
		149,149,361,361,379,379,508,508,568,568,586,586,2,0,565,565,646,646,3,
		0,167,167,189,189,227,227,3,0,167,167,180,180,359,359,3,0,237,237,421,
		421,526,526,3,0,89,89,253,253,505,505,1,0,670,671,2,0,609,609,631,631,
		5,0,77,77,281,281,356,356,529,529,598,598,3,0,165,165,227,228,398,398,
		1,0,86,87,2,0,318,318,355,355,4,0,244,245,310,310,375,377,430,431,3,0,
		525,525,622,622,666,666,1,0,555,557,2,0,105,105,585,585,6,0,122,122,124,
		124,167,167,189,189,227,227,460,460,3,0,226,226,299,299,393,393,2,0,180,
		180,359,359,2,0,311,311,451,451,2,0,349,349,368,368,2,0,154,154,269,269,
		3,0,273,273,283,283,416,416,2,0,552,552,589,589,2,0,400,400,404,404,2,
		0,313,313,395,395,2,0,821,821,823,823,3,0,3,5,45,45,47,48,2,0,3,5,45,45,
		2,0,3,5,47,48,1,0,45,46,2,0,219,219,606,606,2,0,43,43,396,396,1,0,3,5,
		1,0,6,7,5,0,247,247,313,313,517,517,667,667,682,682,3,0,209,209,523,523,
		723,723,32,0,66,66,75,75,91,92,103,103,105,105,119,119,121,121,134,134,
		164,164,184,184,196,196,229,230,252,252,255,255,267,267,278,278,298,298,
		393,393,434,434,436,436,473,473,486,486,497,497,506,506,525,525,527,527,
		554,554,563,563,607,607,616,617,660,660,686,686,9,0,206,206,223,223,390,
		390,442,442,446,446,469,469,477,477,576,576,718,718,157,0,50,51,53,57,
		60,60,63,63,68,73,79,79,82,82,85,87,89,89,95,95,98,99,101,102,107,112,
		114,115,117,118,120,120,122,126,128,129,131,133,135,135,139,139,144,144,
		149,149,153,155,158,158,163,163,168,169,171,171,176,180,187,189,193,193,
		195,195,197,202,204,205,207,208,212,213,215,217,220,221,224,227,234,235,
		237,237,241,241,243,246,249,249,253,253,257,258,262,263,266,266,268,268,
		271,271,276,277,282,282,286,287,289,290,293,293,295,295,299,299,301,301,
		304,305,310,311,314,314,316,317,323,323,325,340,342,345,347,350,352,353,
		358,362,364,364,367,368,370,370,372,372,374,382,384,389,394,394,397,397,
		399,399,401,401,403,403,405,406,409,409,417,423,425,432,437,438,440,440,
		443,445,448,450,453,453,457,460,463,467,470,470,472,472,474,474,478,484,
		488,488,490,492,494,494,498,500,502,503,505,505,507,508,510,511,515,516,
		518,518,521,521,526,526,528,528,530,534,540,542,544,544,546,546,549,549,
		551,551,553,553,555,558,564,564,567,572,577,579,582,583,585,588,590,591,
		593,596,602,603,608,609,611,614,620,620,623,623,625,625,627,629,635,635,
		637,637,640,640,645,645,647,650,655,657,659,659,661,662,665,665,668,671,
		673,673,678,680,683,684,689,689,691,691,698,699,702,702,704,704,706,707,
		711,717,720,722,724,734,736,739,741,741,744,747,754,757,759,761,763,803,
		4,0,593,593,596,596,740,740,742,753,4,0,805,805,807,810,812,812,816,816,
		54,0,50,50,60,60,66,66,73,73,75,75,91,92,103,103,105,105,110,110,119,119,
		121,121,134,134,164,164,184,184,196,196,229,230,234,234,243,243,252,252,
		255,255,257,257,278,278,298,298,393,393,406,406,409,409,417,417,420,420,
		424,424,432,432,434,434,436,436,470,470,473,473,486,486,488,488,497,497,
		506,506,511,511,518,518,525,525,527,527,531,532,554,554,563,563,607,607,
		616,617,625,625,657,657,660,660,668,668,670,671,686,686,729,732,148,0,
		51,51,53,57,63,63,68,72,79,79,82,82,85,87,89,89,95,95,98,99,101,102,107,
		109,111,112,114,115,117,118,120,120,122,126,128,129,131,133,135,135,139,
		139,144,144,149,149,153,155,158,158,163,163,168,169,171,171,176,180,187,
		189,193,193,195,195,197,202,204,205,207,207,212,212,215,217,220,221,224,
		227,235,235,237,237,241,241,244,247,249,249,253,253,258,258,262,263,266,
		266,268,268,271,271,276,277,282,282,286,287,289,290,293,293,295,295,299,
		299,301,301,304,305,310,311,313,314,316,317,323,323,325,340,342,345,347,
		350,352,353,358,362,364,364,367,368,370,370,372,372,374,382,384,389,394,
		394,397,397,399,399,401,401,403,403,418,419,421,423,425,431,437,438,440,
		440,443,445,448,450,453,453,457,460,463,467,472,472,474,474,478,484,490,
		492,494,494,498,500,502,503,505,505,507,508,510,510,515,517,521,521,526,
		526,528,528,530,530,533,534,540,542,544,544,546,546,549,549,551,551,553,
		553,555,558,564,564,567,572,576,579,582,583,585,588,590,591,593,596,602,
		603,608,614,620,620,623,623,627,629,637,637,640,640,645,645,647,650,656,
		656,659,659,661,662,665,665,673,673,678,680,683,685,689,689,691,691,698,
		699,702,702,704,704,706,707,711,717,720,721,725,726,728,728,733,734,736,
		737,758,758,10346,0,1515,1,0,0,0,2,1522,1,0,0,0,4,1602,1,0,0,0,6,1604,
		1,0,0,0,8,1627,1,0,0,0,10,1641,1,0,0,0,12,1644,1,0,0,0,14,1682,1,0,0,0,
		16,1691,1,0,0,0,18,1704,1,0,0,0,20,1706,1,0,0,0,22,1711,1,0,0,0,24,1731,
		1,0,0,0,26,1740,1,0,0,0,28,1742,1,0,0,0,30,1757,1,0,0,0,32,1853,1,0,0,
		0,34,1857,1,0,0,0,36,1873,1,0,0,0,38,2010,1,0,0,0,40,2015,1,0,0,0,42,2017,
		1,0,0,0,44,2019,1,0,0,0,46,2033,1,0,0,0,48,2041,1,0,0,0,50,2057,1,0,0,
		0,52,2059,1,0,0,0,54,2062,1,0,0,0,56,2067,1,0,0,0,58,2069,1,0,0,0,60,2084,
		1,0,0,0,62,2092,1,0,0,0,64,2102,1,0,0,0,66,2104,1,0,0,0,68,2126,1,0,0,
		0,70,2135,1,0,0,0,72,2138,1,0,0,0,74,2151,1,0,0,0,76,2156,1,0,0,0,78,2160,
		1,0,0,0,80,2199,1,0,0,0,82,2201,1,0,0,0,84,2221,1,0,0,0,86,2236,1,0,0,
		0,88,2239,1,0,0,0,90,2264,1,0,0,0,92,2274,1,0,0,0,94,2277,1,0,0,0,96,2282,
		1,0,0,0,98,2291,1,0,0,0,100,2293,1,0,0,0,102,2297,1,0,0,0,104,2309,1,0,
		0,0,106,2338,1,0,0,0,108,2344,1,0,0,0,110,2347,1,0,0,0,112,2377,1,0,0,
		0,114,2394,1,0,0,0,116,2397,1,0,0,0,118,2422,1,0,0,0,120,2425,1,0,0,0,
		122,2477,1,0,0,0,124,2479,1,0,0,0,126,2483,1,0,0,0,128,2492,1,0,0,0,130,
		2508,1,0,0,0,132,2510,1,0,0,0,134,2518,1,0,0,0,136,2544,1,0,0,0,138,2546,
		1,0,0,0,140,2558,1,0,0,0,142,2573,1,0,0,0,144,2575,1,0,0,0,146,2578,1,
		0,0,0,148,2599,1,0,0,0,150,2601,1,0,0,0,152,2607,1,0,0,0,154,2613,1,0,
		0,0,156,2619,1,0,0,0,158,2625,1,0,0,0,160,2631,1,0,0,0,162,2638,1,0,0,
		0,164,2646,1,0,0,0,166,2648,1,0,0,0,168,2654,1,0,0,0,170,2660,1,0,0,0,
		172,2666,1,0,0,0,174,2673,1,0,0,0,176,2691,1,0,0,0,178,2693,1,0,0,0,180,
		2697,1,0,0,0,182,2702,1,0,0,0,184,2721,1,0,0,0,186,2725,1,0,0,0,188,2758,
		1,0,0,0,190,2789,1,0,0,0,192,2806,1,0,0,0,194,2808,1,0,0,0,196,2827,1,
		0,0,0,198,2833,1,0,0,0,200,2839,1,0,0,0,202,2845,1,0,0,0,204,2852,1,0,
		0,0,206,2861,1,0,0,0,208,2878,1,0,0,0,210,2880,1,0,0,0,212,2887,1,0,0,
		0,214,2897,1,0,0,0,216,2911,1,0,0,0,218,2917,1,0,0,0,220,2925,1,0,0,0,
		222,2931,1,0,0,0,224,2939,1,0,0,0,226,2945,1,0,0,0,228,2955,1,0,0,0,230,
		2959,1,0,0,0,232,2965,1,0,0,0,234,2970,1,0,0,0,236,2980,1,0,0,0,238,3023,
		1,0,0,0,240,3028,1,0,0,0,242,3030,1,0,0,0,244,3033,1,0,0,0,246,3063,1,
		0,0,0,248,3065,1,0,0,0,250,3094,1,0,0,0,252,3101,1,0,0,0,254,3105,1,0,
		0,0,256,3113,1,0,0,0,258,3126,1,0,0,0,260,3128,1,0,0,0,262,3146,1,0,0,
		0,264,3158,1,0,0,0,266,3164,1,0,0,0,268,3170,1,0,0,0,270,3222,1,0,0,0,
		272,3224,1,0,0,0,274,3226,1,0,0,0,276,3232,1,0,0,0,278,3234,1,0,0,0,280,
		3242,1,0,0,0,282,3248,1,0,0,0,284,3256,1,0,0,0,286,3265,1,0,0,0,288,3276,
		1,0,0,0,290,3293,1,0,0,0,292,3298,1,0,0,0,294,3303,1,0,0,0,296,3308,1,
		0,0,0,298,3330,1,0,0,0,300,3349,1,0,0,0,302,3352,1,0,0,0,304,3363,1,0,
		0,0,306,3379,1,0,0,0,308,3391,1,0,0,0,310,3393,1,0,0,0,312,3422,1,0,0,
		0,314,3424,1,0,0,0,316,3426,1,0,0,0,318,3429,1,0,0,0,320,3432,1,0,0,0,
		322,3439,1,0,0,0,324,3441,1,0,0,0,326,3471,1,0,0,0,328,3482,1,0,0,0,330,
		3485,1,0,0,0,332,3489,1,0,0,0,334,3498,1,0,0,0,336,3502,1,0,0,0,338,3507,
		1,0,0,0,340,3520,1,0,0,0,342,3525,1,0,0,0,344,3529,1,0,0,0,346,3545,1,
		0,0,0,348,3547,1,0,0,0,350,3565,1,0,0,0,352,3567,1,0,0,0,354,3576,1,0,
		0,0,356,3588,1,0,0,0,358,3609,1,0,0,0,360,3611,1,0,0,0,362,3614,1,0,0,
		0,364,3618,1,0,0,0,366,3620,1,0,0,0,368,3625,1,0,0,0,370,3633,1,0,0,0,
		372,3642,1,0,0,0,374,3645,1,0,0,0,376,3654,1,0,0,0,378,3656,1,0,0,0,380,
		3675,1,0,0,0,382,3677,1,0,0,0,384,3682,1,0,0,0,386,3686,1,0,0,0,388,3700,
		1,0,0,0,390,3703,1,0,0,0,392,3709,1,0,0,0,394,3722,1,0,0,0,396,3730,1,
		0,0,0,398,3756,1,0,0,0,400,3769,1,0,0,0,402,3776,1,0,0,0,404,3778,1,0,
		0,0,406,3790,1,0,0,0,408,3792,1,0,0,0,410,3805,1,0,0,0,412,3828,1,0,0,
		0,414,3830,1,0,0,0,416,3837,1,0,0,0,418,3847,1,0,0,0,420,3882,1,0,0,0,
		422,3889,1,0,0,0,424,3895,1,0,0,0,426,3897,1,0,0,0,428,3901,1,0,0,0,430,
		3909,1,0,0,0,432,3911,1,0,0,0,434,3916,1,0,0,0,436,3920,1,0,0,0,438,3948,
		1,0,0,0,440,3950,1,0,0,0,442,3952,1,0,0,0,444,3960,1,0,0,0,446,3962,1,
		0,0,0,448,3970,1,0,0,0,450,3980,1,0,0,0,452,3983,1,0,0,0,454,4008,1,0,
		0,0,456,4035,1,0,0,0,458,4037,1,0,0,0,460,4046,1,0,0,0,462,4077,1,0,0,
		0,464,4095,1,0,0,0,466,4097,1,0,0,0,468,4111,1,0,0,0,470,4113,1,0,0,0,
		472,4144,1,0,0,0,474,4147,1,0,0,0,476,4178,1,0,0,0,478,4180,1,0,0,0,480,
		4199,1,0,0,0,482,4207,1,0,0,0,484,4209,1,0,0,0,486,4212,1,0,0,0,488,4225,
		1,0,0,0,490,4227,1,0,0,0,492,4234,1,0,0,0,494,4370,1,0,0,0,496,4372,1,
		0,0,0,498,4374,1,0,0,0,500,4376,1,0,0,0,502,4378,1,0,0,0,504,4380,1,0,
		0,0,506,4382,1,0,0,0,508,4384,1,0,0,0,510,4386,1,0,0,0,512,4388,1,0,0,
		0,514,4390,1,0,0,0,516,4392,1,0,0,0,518,4394,1,0,0,0,520,4396,1,0,0,0,
		522,4398,1,0,0,0,524,4400,1,0,0,0,526,4402,1,0,0,0,528,4404,1,0,0,0,530,
		4406,1,0,0,0,532,4408,1,0,0,0,534,4410,1,0,0,0,536,4412,1,0,0,0,538,4414,
		1,0,0,0,540,4416,1,0,0,0,542,4418,1,0,0,0,544,4420,1,0,0,0,546,4424,1,
		0,0,0,548,4426,1,0,0,0,550,4431,1,0,0,0,552,4435,1,0,0,0,554,4451,1,0,
		0,0,556,4453,1,0,0,0,558,4455,1,0,0,0,560,4457,1,0,0,0,562,4470,1,0,0,
		0,564,4533,1,0,0,0,566,4535,1,0,0,0,568,4543,1,0,0,0,570,4551,1,0,0,0,
		572,4559,1,0,0,0,574,4561,1,0,0,0,576,4569,1,0,0,0,578,4593,1,0,0,0,580,
		4606,1,0,0,0,582,4615,1,0,0,0,584,4619,1,0,0,0,586,4623,1,0,0,0,588,4627,
		1,0,0,0,590,4631,1,0,0,0,592,4639,1,0,0,0,594,4646,1,0,0,0,596,4650,1,
		0,0,0,598,4661,1,0,0,0,600,4663,1,0,0,0,602,4667,1,0,0,0,604,4671,1,0,
		0,0,606,4675,1,0,0,0,608,4688,1,0,0,0,610,4690,1,0,0,0,612,4696,1,0,0,
		0,614,4704,1,0,0,0,616,4741,1,0,0,0,618,4743,1,0,0,0,620,4756,1,0,0,0,
		622,4758,1,0,0,0,624,4805,1,0,0,0,626,4888,1,0,0,0,628,4947,1,0,0,0,630,
		4949,1,0,0,0,632,4952,1,0,0,0,634,4964,1,0,0,0,636,4983,1,0,0,0,638,4985,
		1,0,0,0,640,4989,1,0,0,0,642,4994,1,0,0,0,644,5047,1,0,0,0,646,5054,1,
		0,0,0,648,5056,1,0,0,0,650,5063,1,0,0,0,652,5111,1,0,0,0,654,5113,1,0,
		0,0,656,5116,1,0,0,0,658,5119,1,0,0,0,660,5130,1,0,0,0,662,5135,1,0,0,
		0,664,5138,1,0,0,0,666,5153,1,0,0,0,668,5199,1,0,0,0,670,5201,1,0,0,0,
		672,5254,1,0,0,0,674,5272,1,0,0,0,676,5274,1,0,0,0,678,5290,1,0,0,0,680,
		5305,1,0,0,0,682,5330,1,0,0,0,684,5332,1,0,0,0,686,5340,1,0,0,0,688,5386,
		1,0,0,0,690,5388,1,0,0,0,692,5402,1,0,0,0,694,5404,1,0,0,0,696,5419,1,
		0,0,0,698,5424,1,0,0,0,700,5426,1,0,0,0,702,5428,1,0,0,0,704,5442,1,0,
		0,0,706,5455,1,0,0,0,708,5459,1,0,0,0,710,5461,1,0,0,0,712,5466,1,0,0,
		0,714,5476,1,0,0,0,716,5529,1,0,0,0,718,5540,1,0,0,0,720,5542,1,0,0,0,
		722,5545,1,0,0,0,724,5558,1,0,0,0,726,5582,1,0,0,0,728,5590,1,0,0,0,730,
		5597,1,0,0,0,732,5599,1,0,0,0,734,5610,1,0,0,0,736,5612,1,0,0,0,738,5617,
		1,0,0,0,740,5628,1,0,0,0,742,5639,1,0,0,0,744,5647,1,0,0,0,746,5656,1,
		0,0,0,748,5665,1,0,0,0,750,5670,1,0,0,0,752,5673,1,0,0,0,754,5678,1,0,
		0,0,756,5683,1,0,0,0,758,5688,1,0,0,0,760,5701,1,0,0,0,762,5705,1,0,0,
		0,764,5710,1,0,0,0,766,5717,1,0,0,0,768,5734,1,0,0,0,770,5751,1,0,0,0,
		772,5764,1,0,0,0,774,5770,1,0,0,0,776,5777,1,0,0,0,778,5784,1,0,0,0,780,
		5789,1,0,0,0,782,5794,1,0,0,0,784,5797,1,0,0,0,786,5810,1,0,0,0,788,5818,
		1,0,0,0,790,5824,1,0,0,0,792,5832,1,0,0,0,794,5837,1,0,0,0,796,5842,1,
		0,0,0,798,5845,1,0,0,0,800,5855,1,0,0,0,802,5863,1,0,0,0,804,5868,1,0,
		0,0,806,5873,1,0,0,0,808,5877,1,0,0,0,810,5883,1,0,0,0,812,5888,1,0,0,
		0,814,5893,1,0,0,0,816,5898,1,0,0,0,818,5905,1,0,0,0,820,5912,1,0,0,0,
		822,5918,1,0,0,0,824,5924,1,0,0,0,826,5929,1,0,0,0,828,5939,1,0,0,0,830,
		5943,1,0,0,0,832,5945,1,0,0,0,834,5947,1,0,0,0,836,5950,1,0,0,0,838,5965,
		1,0,0,0,840,6003,1,0,0,0,842,6007,1,0,0,0,844,6009,1,0,0,0,846,6017,1,
		0,0,0,848,6021,1,0,0,0,850,6029,1,0,0,0,852,6038,1,0,0,0,854,6040,1,0,
		0,0,856,6059,1,0,0,0,858,6061,1,0,0,0,860,6063,1,0,0,0,862,6078,1,0,0,
		0,864,6090,1,0,0,0,866,6092,1,0,0,0,868,6100,1,0,0,0,870,6108,1,0,0,0,
		872,6117,1,0,0,0,874,6119,1,0,0,0,876,6137,1,0,0,0,878,6151,1,0,0,0,880,
		6156,1,0,0,0,882,6162,1,0,0,0,884,6164,1,0,0,0,886,6180,1,0,0,0,888,6188,
		1,0,0,0,890,6198,1,0,0,0,892,6211,1,0,0,0,894,6213,1,0,0,0,896,6219,1,
		0,0,0,898,6247,1,0,0,0,900,6257,1,0,0,0,902,6265,1,0,0,0,904,6267,1,0,
		0,0,906,6270,1,0,0,0,908,6273,1,0,0,0,910,6286,1,0,0,0,912,6302,1,0,0,
		0,914,6325,1,0,0,0,916,6327,1,0,0,0,918,6365,1,0,0,0,920,6367,1,0,0,0,
		922,6521,1,0,0,0,924,6534,1,0,0,0,926,6541,1,0,0,0,928,6628,1,0,0,0,930,
		6630,1,0,0,0,932,6684,1,0,0,0,934,6686,1,0,0,0,936,6694,1,0,0,0,938,6696,
		1,0,0,0,940,6703,1,0,0,0,942,6708,1,0,0,0,944,6721,1,0,0,0,946,6729,1,
		0,0,0,948,6731,1,0,0,0,950,6750,1,0,0,0,952,6753,1,0,0,0,954,6762,1,0,
		0,0,956,6764,1,0,0,0,958,6787,1,0,0,0,960,7072,1,0,0,0,962,7074,1,0,0,
		0,964,7100,1,0,0,0,966,7102,1,0,0,0,968,7108,1,0,0,0,970,7110,1,0,0,0,
		972,7125,1,0,0,0,974,7133,1,0,0,0,976,7135,1,0,0,0,978,7164,1,0,0,0,980,
		7197,1,0,0,0,982,7199,1,0,0,0,984,7207,1,0,0,0,986,7213,1,0,0,0,988,7218,
		1,0,0,0,990,7223,1,0,0,0,992,7225,1,0,0,0,994,7229,1,0,0,0,996,7244,1,
		0,0,0,998,7246,1,0,0,0,1000,7250,1,0,0,0,1002,7253,1,0,0,0,1004,7256,1,
		0,0,0,1006,7307,1,0,0,0,1008,7309,1,0,0,0,1010,7320,1,0,0,0,1012,7322,
		1,0,0,0,1014,7324,1,0,0,0,1016,7328,1,0,0,0,1018,7330,1,0,0,0,1020,7332,
		1,0,0,0,1022,7336,1,0,0,0,1024,7340,1,0,0,0,1026,7344,1,0,0,0,1028,7352,
		1,0,0,0,1030,7356,1,0,0,0,1032,7364,1,0,0,0,1034,7366,1,0,0,0,1036,7383,
		1,0,0,0,1038,7385,1,0,0,0,1040,7388,1,0,0,0,1042,7393,1,0,0,0,1044,7401,
		1,0,0,0,1046,7407,1,0,0,0,1048,7411,1,0,0,0,1050,7428,1,0,0,0,1052,7431,
		1,0,0,0,1054,7436,1,0,0,0,1056,7438,1,0,0,0,1058,7441,1,0,0,0,1060,7450,
		1,0,0,0,1062,7458,1,0,0,0,1064,7460,1,0,0,0,1066,7465,1,0,0,0,1068,7472,
		1,0,0,0,1070,7482,1,0,0,0,1072,7490,1,0,0,0,1074,7492,1,0,0,0,1076,7502,
		1,0,0,0,1078,7510,1,0,0,0,1080,7512,1,0,0,0,1082,7518,1,0,0,0,1084,7539,
		1,0,0,0,1086,7541,1,0,0,0,1088,7547,1,0,0,0,1090,7550,1,0,0,0,1092,7553,
		1,0,0,0,1094,7581,1,0,0,0,1096,7585,1,0,0,0,1098,7592,1,0,0,0,1100,7599,
		1,0,0,0,1102,7601,1,0,0,0,1104,7617,1,0,0,0,1106,7633,1,0,0,0,1108,7637,
		1,0,0,0,1110,7640,1,0,0,0,1112,7643,1,0,0,0,1114,7667,1,0,0,0,1116,7669,
		1,0,0,0,1118,7677,1,0,0,0,1120,7679,1,0,0,0,1122,7682,1,0,0,0,1124,7762,
		1,0,0,0,1126,7764,1,0,0,0,1128,7768,1,0,0,0,1130,7856,1,0,0,0,1132,7858,
		1,0,0,0,1134,7860,1,0,0,0,1136,7862,1,0,0,0,1138,7867,1,0,0,0,1140,7883,
		1,0,0,0,1142,7885,1,0,0,0,1144,7919,1,0,0,0,1146,7921,1,0,0,0,1148,7932,
		1,0,0,0,1150,7939,1,0,0,0,1152,7956,1,0,0,0,1154,7958,1,0,0,0,1156,7962,
		1,0,0,0,1158,7984,1,0,0,0,1160,7986,1,0,0,0,1162,7988,1,0,0,0,1164,7995,
		1,0,0,0,1166,7997,1,0,0,0,1168,7999,1,0,0,0,1170,8148,1,0,0,0,1172,8153,
		1,0,0,0,1174,8160,1,0,0,0,1176,8162,1,0,0,0,1178,8170,1,0,0,0,1180,8188,
		1,0,0,0,1182,8196,1,0,0,0,1184,8204,1,0,0,0,1186,8206,1,0,0,0,1188,8210,
		1,0,0,0,1190,8219,1,0,0,0,1192,8225,1,0,0,0,1194,8232,1,0,0,0,1196,8234,
		1,0,0,0,1198,8249,1,0,0,0,1200,8256,1,0,0,0,1202,8259,1,0,0,0,1204,8403,
		1,0,0,0,1206,8407,1,0,0,0,1208,8410,1,0,0,0,1210,8419,1,0,0,0,1212,8428,
		1,0,0,0,1214,8436,1,0,0,0,1216,8482,1,0,0,0,1218,8484,1,0,0,0,1220,8505,
		1,0,0,0,1222,8509,1,0,0,0,1224,8520,1,0,0,0,1226,8565,1,0,0,0,1228,8601,
		1,0,0,0,1230,8603,1,0,0,0,1232,8611,1,0,0,0,1234,8624,1,0,0,0,1236,8626,
		1,0,0,0,1238,8630,1,0,0,0,1240,8633,1,0,0,0,1242,8643,1,0,0,0,1244,8645,
		1,0,0,0,1246,8649,1,0,0,0,1248,8654,1,0,0,0,1250,8658,1,0,0,0,1252,8661,
		1,0,0,0,1254,8664,1,0,0,0,1256,8668,1,0,0,0,1258,8674,1,0,0,0,1260,8682,
		1,0,0,0,1262,8690,1,0,0,0,1264,8696,1,0,0,0,1266,8699,1,0,0,0,1268,8717,
		1,0,0,0,1270,8719,1,0,0,0,1272,8725,1,0,0,0,1274,8729,1,0,0,0,1276,8737,
		1,0,0,0,1278,8745,1,0,0,0,1280,8757,1,0,0,0,1282,8769,1,0,0,0,1284,8771,
		1,0,0,0,1286,8775,1,0,0,0,1288,8780,1,0,0,0,1290,8784,1,0,0,0,1292,8790,
		1,0,0,0,1294,8796,1,0,0,0,1296,8803,1,0,0,0,1298,8810,1,0,0,0,1300,8814,
		1,0,0,0,1302,8833,1,0,0,0,1304,8835,1,0,0,0,1306,8838,1,0,0,0,1308,8841,
		1,0,0,0,1310,8850,1,0,0,0,1312,8852,1,0,0,0,1314,8857,1,0,0,0,1316,8859,
		1,0,0,0,1318,8861,1,0,0,0,1320,8863,1,0,0,0,1322,8871,1,0,0,0,1324,8873,
		1,0,0,0,1326,8875,1,0,0,0,1328,8877,1,0,0,0,1330,8888,1,0,0,0,1332,8892,
		1,0,0,0,1334,8894,1,0,0,0,1336,8896,1,0,0,0,1338,8898,1,0,0,0,1340,8907,
		1,0,0,0,1342,8909,1,0,0,0,1344,8911,1,0,0,0,1346,8913,1,0,0,0,1348,8915,
		1,0,0,0,1350,8917,1,0,0,0,1352,8919,1,0,0,0,1354,8921,1,0,0,0,1356,8925,
		1,0,0,0,1358,8929,1,0,0,0,1360,8931,1,0,0,0,1362,8933,1,0,0,0,1364,8935,
		1,0,0,0,1366,8937,1,0,0,0,1368,8939,1,0,0,0,1370,8941,1,0,0,0,1372,8943,
		1,0,0,0,1374,8945,1,0,0,0,1376,8947,1,0,0,0,1378,8949,1,0,0,0,1380,8953,
		1,0,0,0,1382,8955,1,0,0,0,1384,8958,1,0,0,0,1386,8970,1,0,0,0,1388,8972,
		1,0,0,0,1390,8980,1,0,0,0,1392,8988,1,0,0,0,1394,8992,1,0,0,0,1396,8994,
		1,0,0,0,1398,8998,1,0,0,0,1400,9000,1,0,0,0,1402,9002,1,0,0,0,1404,9004,
		1,0,0,0,1406,9006,1,0,0,0,1408,9011,1,0,0,0,1410,9015,1,0,0,0,1412,9017,
		1,0,0,0,1414,9025,1,0,0,0,1416,9029,1,0,0,0,1418,9033,1,0,0,0,1420,9040,
		1,0,0,0,1422,9043,1,0,0,0,1424,9045,1,0,0,0,1426,9047,1,0,0,0,1428,9054,
		1,0,0,0,1430,9061,1,0,0,0,1432,9066,1,0,0,0,1434,9077,1,0,0,0,1436,9082,
		1,0,0,0,1438,9084,1,0,0,0,1440,9086,1,0,0,0,1442,9100,1,0,0,0,1444,9105,
		1,0,0,0,1446,9110,1,0,0,0,1448,9117,1,0,0,0,1450,9125,1,0,0,0,1452,9127,
		1,0,0,0,1454,9138,1,0,0,0,1456,9140,1,0,0,0,1458,9142,1,0,0,0,1460,9144,
		1,0,0,0,1462,9152,1,0,0,0,1464,9156,1,0,0,0,1466,9158,1,0,0,0,1468,9160,
		1,0,0,0,1470,9168,1,0,0,0,1472,9172,1,0,0,0,1474,9176,1,0,0,0,1476,9180,
		1,0,0,0,1478,9182,1,0,0,0,1480,9185,1,0,0,0,1482,9187,1,0,0,0,1484,9195,
		1,0,0,0,1486,9197,1,0,0,0,1488,9200,1,0,0,0,1490,9218,1,0,0,0,1492,9220,
		1,0,0,0,1494,9222,1,0,0,0,1496,9242,1,0,0,0,1498,9244,1,0,0,0,1500,9251,
		1,0,0,0,1502,9263,1,0,0,0,1504,9269,1,0,0,0,1506,9271,1,0,0,0,1508,9273,
		1,0,0,0,1510,9278,1,0,0,0,1512,1514,3,2,1,0,1513,1512,1,0,0,0,1514,1517,
		1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,0,0,1517,1515,
		1,0,0,0,1518,1519,5,0,0,1,1519,1,1,0,0,0,1520,1523,3,4,2,0,1521,1523,3,
		458,229,0,1522,1520,1,0,0,0,1522,1521,1,0,0,0,1523,1524,1,0,0,0,1524,1525,
		5,30,0,0,1525,3,1,0,0,0,1526,1603,3,6,3,0,1527,1603,3,82,41,0,1528,1603,
		3,194,97,0,1529,1603,3,226,113,0,1530,1603,3,230,115,0,1531,1603,3,232,
		116,0,1532,1603,3,234,117,0,1533,1603,3,236,118,0,1534,1603,3,242,121,
		0,1535,1603,3,244,122,0,1536,1603,3,248,124,0,1537,1603,3,268,134,0,1538,
		1603,3,296,148,0,1539,1603,3,298,149,0,1540,1603,3,452,226,0,1541,1603,
		3,454,227,0,1542,1603,3,476,238,0,1543,1603,3,608,304,0,1544,1603,3,614,
		307,0,1545,1603,3,620,310,0,1546,1603,3,688,344,0,1547,1603,3,702,351,
		0,1548,1603,3,704,352,0,1549,1603,3,714,357,0,1550,1603,3,736,368,0,1551,
		1603,3,738,369,0,1552,1603,3,740,370,0,1553,1603,3,742,371,0,1554,1603,
		3,744,372,0,1555,1603,3,746,373,0,1556,1603,3,748,374,0,1557,1603,3,750,
		375,0,1558,1603,3,752,376,0,1559,1603,3,754,377,0,1560,1603,3,756,378,
		0,1561,1603,3,758,379,0,1562,1603,3,760,380,0,1563,1603,3,762,381,0,1564,
		1603,3,764,382,0,1565,1603,3,766,383,0,1566,1603,3,768,384,0,1567,1603,
		3,770,385,0,1568,1603,3,772,386,0,1569,1603,3,774,387,0,1570,1603,3,776,
		388,0,1571,1603,3,778,389,0,1572,1603,3,780,390,0,1573,1603,3,782,391,
		0,1574,1603,3,784,392,0,1575,1603,3,786,393,0,1576,1603,3,788,394,0,1577,
		1603,3,790,395,0,1578,1603,3,792,396,0,1579,1603,3,794,397,0,1580,1603,
		3,796,398,0,1581,1603,3,798,399,0,1582,1603,3,800,400,0,1583,1603,3,802,
		401,0,1584,1603,3,804,402,0,1585,1603,3,806,403,0,1586,1603,3,808,404,
		0,1587,1603,3,810,405,0,1588,1603,3,812,406,0,1589,1603,3,814,407,0,1590,
		1603,3,816,408,0,1591,1603,3,818,409,0,1592,1603,3,820,410,0,1593,1603,
		3,822,411,0,1594,1603,3,824,412,0,1595,1603,3,826,413,0,1596,1603,3,872,
		436,0,1597,1603,3,840,420,0,1598,1603,3,892,446,0,1599,1603,3,1092,546,
		0,1600,1603,3,1102,551,0,1601,1603,3,1104,552,0,1602,1526,1,0,0,0,1602,
		1527,1,0,0,0,1602,1528,1,0,0,0,1602,1529,1,0,0,0,1602,1530,1,0,0,0,1602,
		1531,1,0,0,0,1602,1532,1,0,0,0,1602,1533,1,0,0,0,1602,1534,1,0,0,0,1602,
		1535,1,0,0,0,1602,1536,1,0,0,0,1602,1537,1,0,0,0,1602,1538,1,0,0,0,1602,
		1539,1,0,0,0,1602,1540,1,0,0,0,1602,1541,1,0,0,0,1602,1542,1,0,0,0,1602,
		1543,1,0,0,0,1602,1544,1,0,0,0,1602,1545,1,0,0,0,1602,1546,1,0,0,0,1602,
		1547,1,0,0,0,1602,1548,1,0,0,0,1602,1549,1,0,0,0,1602,1550,1,0,0,0,1602,
		1551,1,0,0,0,1602,1552,1,0,0,0,1602,1553,1,0,0,0,1602,1554,1,0,0,0,1602,
		1555,1,0,0,0,1602,1556,1,0,0,0,1602,1557,1,0,0,0,1602,1558,1,0,0,0,1602,
		1559,1,0,0,0,1602,1560,1,0,0,0,1602,1561,1,0,0,0,1602,1562,1,0,0,0,1602,
		1563,1,0,0,0,1602,1564,1,0,0,0,1602,1565,1,0,0,0,1602,1566,1,0,0,0,1602,
		1567,1,0,0,0,1602,1568,1,0,0,0,1602,1569,1,0,0,0,1602,1570,1,0,0,0,1602,
		1571,1,0,0,0,1602,1572,1,0,0,0,1602,1573,1,0,0,0,1602,1574,1,0,0,0,1602,
		1575,1,0,0,0,1602,1576,1,0,0,0,1602,1577,1,0,0,0,1602,1578,1,0,0,0,1602,
		1579,1,0,0,0,1602,1580,1,0,0,0,1602,1581,1,0,0,0,1602,1582,1,0,0,0,1602,
		1583,1,0,0,0,1602,1584,1,0,0,0,1602,1585,1,0,0,0,1602,1586,1,0,0,0,1602,
		1587,1,0,0,0,1602,1588,1,0,0,0,1602,1589,1,0,0,0,1602,1590,1,0,0,0,1602,
		1591,1,0,0,0,1602,1592,1,0,0,0,1602,1593,1,0,0,0,1602,1594,1,0,0,0,1602,
		1595,1,0,0,0,1602,1596,1,0,0,0,1602,1597,1,0,0,0,1602,1598,1,0,0,0,1602,
		1599,1,0,0,0,1602,1600,1,0,0,0,1602,1601,1,0,0,0,1603,5,1,0,0,0,1604,1625,
		5,59,0,0,1605,1626,3,22,11,0,1606,1626,3,8,4,0,1607,1608,5,441,0,0,1608,
		1610,3,1346,673,0,1609,1611,3,116,58,0,1610,1609,1,0,0,0,1610,1611,1,0,
		0,0,1611,1626,1,0,0,0,1612,1613,5,239,0,0,1613,1615,3,1350,675,0,1614,
		1616,3,116,58,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1626,1,0,0,0,
		1617,1626,3,72,36,0,1618,1626,3,12,6,0,1619,1626,3,58,29,0,1620,1621,4,
		3,0,0,1621,1626,3,60,30,0,1622,1626,3,14,7,0,1623,1626,3,20,10,0,1624,
		1626,3,80,40,0,1625,1605,1,0,0,0,1625,1606,1,0,0,0,1625,1607,1,0,0,0,1625,
		1612,1,0,0,0,1625,1617,1,0,0,0,1625,1618,1,0,0,0,1625,1619,1,0,0,0,1625,
		1620,1,0,0,0,1625,1622,1,0,0,0,1625,1623,1,0,0,0,1625,1624,1,0,0,0,1626,
		7,1,0,0,0,1627,1628,5,151,0,0,1628,1630,3,1342,671,0,1629,1631,3,10,5,
		0,1630,1629,1,0,0,0,1631,1632,1,0,0,0,1632,1630,1,0,0,0,1632,1633,1,0,
		0,0,1633,9,1,0,0,0,1634,1642,3,86,43,0,1635,1636,5,454,0,0,1636,1638,5,
		405,0,0,1637,1639,5,6,0,0,1638,1637,1,0,0,0,1638,1639,1,0,0,0,1639,1640,
		1,0,0,0,1640,1642,3,1206,603,0,1641,1634,1,0,0,0,1641,1635,1,0,0,0,1642,
		11,1,0,0,0,1643,1645,3,1236,618,0,1644,1643,1,0,0,0,1644,1645,1,0,0,0,
		1645,1646,1,0,0,0,1646,1647,5,206,0,0,1647,1651,3,1370,685,0,1648,1649,
		5,402,0,0,1649,1650,5,507,0,0,1650,1652,3,1114,557,0,1651,1648,1,0,0,0,
		1651,1652,1,0,0,0,1652,1659,1,0,0,0,1653,1654,5,402,0,0,1654,1656,5,123,
		0,0,1655,1657,5,391,0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,
		1,0,0,0,1658,1660,5,437,0,0,1659,1653,1,0,0,0,1659,1660,1,0,0,0,1660,1664,
		1,0,0,0,1661,1662,5,471,0,0,1662,1663,5,600,0,0,1663,1665,3,1410,705,0,
		1664,1661,1,0,0,0,1664,1665,1,0,0,0,1665,1672,1,0,0,0,1666,1673,5,193,
		0,0,1667,1670,5,178,0,0,1668,1669,5,402,0,0,1669,1671,3,606,303,0,1670,
		1668,1,0,0,0,1670,1671,1,0,0,0,1671,1673,1,0,0,0,1672,1666,1,0,0,0,1672,
		1667,1,0,0,0,1672,1673,1,0,0,0,1673,1676,1,0,0,0,1674,1675,5,119,0,0,1675,
		1677,3,1448,724,0,1676,1674,1,0,0,0,1676,1677,1,0,0,0,1677,1680,1,0,0,
		0,1678,1679,5,184,0,0,1679,1681,3,1036,518,0,1680,1678,1,0,0,0,1680,1681,
		1,0,0,0,1681,13,1,0,0,0,1682,1683,5,316,0,0,1683,1684,5,250,0,0,1684,1685,
		3,1366,683,0,1685,1686,5,52,0,0,1686,1687,5,613,0,0,1687,1689,3,1448,724,
		0,1688,1690,3,16,8,0,1689,1688,1,0,0,0,1689,1690,1,0,0,0,1690,15,1,0,0,
		0,1691,1698,3,18,9,0,1692,1694,5,29,0,0,1693,1692,1,0,0,0,1693,1694,1,
		0,0,0,1694,1695,1,0,0,0,1695,1697,3,18,9,0,1696,1693,1,0,0,0,1697,1700,
		1,0,0,0,1698,1696,1,0,0,0,1698,1699,1,0,0,0,1699,17,1,0,0,0,1700,1698,
		1,0,0,0,1701,1705,3,150,75,0,1702,1705,3,162,81,0,1703,1705,3,164,82,0,
		1704,1701,1,0,0,0,1704,1702,1,0,0,0,1704,1703,1,0,0,0,1705,19,1,0,0,0,
		1706,1707,5,518,0,0,1707,1708,3,1376,688,0,1708,1709,3,134,67,0,1709,21,
		1,0,0,0,1710,1712,3,1316,658,0,1711,1710,1,0,0,0,1711,1712,1,0,0,0,1712,
		1713,1,0,0,0,1713,1714,5,584,0,0,1714,1716,3,1386,693,0,1715,1717,3,24,
		12,0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,23,1,0,0,0,1718,1721,3,26,
		13,0,1719,1722,3,1214,607,0,1720,1722,3,54,27,0,1721,1719,1,0,0,0,1721,
		1720,1,0,0,0,1721,1722,1,0,0,0,1722,1732,1,0,0,0,1723,1732,3,1214,607,
		0,1724,1732,3,54,27,0,1725,1726,3,28,14,0,1726,1727,5,29,0,0,1727,1729,
		1,0,0,0,1728,1725,1,0,0,0,1728,1729,1,0,0,0,1729,1730,1,0,0,0,1730,1732,
		3,30,15,0,1731,1718,1,0,0,0,1731,1723,1,0,0,0,1731,1724,1,0,0,0,1731,1728,
		1,0,0,0,1732,25,1,0,0,0,1733,1741,3,28,14,0,1734,1735,3,28,14,0,1735,1736,
		5,29,0,0,1736,1738,1,0,0,0,1737,1734,1,0,0,0,1737,1738,1,0,0,0,1738,1739,
		1,0,0,0,1739,1741,3,34,17,0,1740,1733,1,0,0,0,1740,1737,1,0,0,0,1741,27,
		1,0,0,0,1742,1747,3,36,18,0,1743,1744,5,29,0,0,1744,1746,3,36,18,0,1745,
		1743,1,0,0,0,1746,1749,1,0,0,0,1747,1745,1,0,0,0,1747,1748,1,0,0,0,1748,
		29,1,0,0,0,1749,1747,1,0,0,0,1750,1751,5,179,0,0,1751,1758,5,583,0,0,1752,
		1753,5,267,0,0,1753,1758,5,583,0,0,1754,1758,3,32,16,0,1755,1756,4,15,
		1,0,1756,1758,7,0,0,0,1757,1750,1,0,0,0,1757,1752,1,0,0,0,1757,1754,1,
		0,0,0,1757,1755,1,0,0,0,1758,31,1,0,0,0,1759,1760,5,52,0,0,1760,1762,5,
		424,0,0,1761,1763,3,1318,659,0,1762,1761,1,0,0,0,1762,1763,1,0,0,0,1763,
		1767,1,0,0,0,1764,1768,3,1222,611,0,1765,1766,5,423,0,0,1766,1768,3,1424,
		712,0,1767,1764,1,0,0,0,1767,1765,1,0,0,0,1768,1854,1,0,0,0,1769,1770,
		5,185,0,0,1770,1771,5,424,0,0,1771,1854,3,1412,706,0,1772,1773,5,457,0,
		0,1773,1775,5,424,0,0,1774,1776,3,1318,659,0,1775,1774,1,0,0,0,1775,1776,
		1,0,0,0,1776,1777,1,0,0,0,1777,1854,3,56,28,0,1778,1779,5,407,0,0,1779,
		1781,5,424,0,0,1780,1782,3,1318,659,0,1781,1780,1,0,0,0,1781,1782,1,0,
		0,0,1782,1783,1,0,0,0,1783,1785,3,56,28,0,1784,1786,3,1318,659,0,1785,
		1784,1,0,0,0,1785,1786,1,0,0,0,1786,1854,1,0,0,0,1787,1788,5,61,0,0,1788,
		1790,5,424,0,0,1789,1791,3,1318,659,0,1790,1789,1,0,0,0,1790,1791,1,0,
		0,0,1791,1792,1,0,0,0,1792,1854,3,56,28,0,1793,1794,5,106,0,0,1794,1795,
		5,424,0,0,1795,1799,3,56,28,0,1796,1798,3,698,349,0,1797,1796,1,0,0,0,
		1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,1854,1,0,0,
		0,1801,1799,1,0,0,0,1802,1803,5,473,0,0,1803,1805,5,424,0,0,1804,1806,
		3,1318,659,0,1805,1804,1,0,0,0,1805,1806,1,0,0,0,1806,1807,1,0,0,0,1807,
		1811,3,56,28,0,1808,1810,3,700,350,0,1809,1808,1,0,0,0,1810,1813,1,0,0,
		0,1811,1809,1,0,0,0,1811,1812,1,0,0,0,1812,1854,1,0,0,0,1813,1811,1,0,
		0,0,1814,1815,5,111,0,0,1815,1817,5,424,0,0,1816,1818,3,1318,659,0,1817,
		1816,1,0,0,0,1817,1818,1,0,0,0,1818,1819,1,0,0,0,1819,1854,3,1424,712,
		0,1820,1821,5,607,0,0,1821,1822,5,424,0,0,1822,1854,3,56,28,0,1823,1824,
		5,472,0,0,1824,1826,5,424,0,0,1825,1827,3,1318,659,0,1826,1825,1,0,0,0,
		1826,1827,1,0,0,0,1827,1832,1,0,0,0,1828,1829,3,1412,706,0,1829,1830,5,
		280,0,0,1830,1831,3,1222,611,0,1831,1833,1,0,0,0,1832,1828,1,0,0,0,1832,
		1833,1,0,0,0,1833,1854,1,0,0,0,1834,1835,5,208,0,0,1835,1836,5,424,0,0,
		1836,1837,3,1410,705,0,1837,1838,5,654,0,0,1838,1839,5,584,0,0,1839,1841,
		3,1386,693,0,1840,1842,3,52,26,0,1841,1840,1,0,0,0,1841,1842,1,0,0,0,1842,
		1854,1,0,0,0,1843,1844,5,179,0,0,1844,1845,5,424,0,0,1845,1846,3,56,28,
		0,1846,1847,5,583,0,0,1847,1854,1,0,0,0,1848,1849,5,267,0,0,1849,1850,
		5,424,0,0,1850,1851,3,56,28,0,1851,1852,5,583,0,0,1852,1854,1,0,0,0,1853,
		1759,1,0,0,0,1853,1769,1,0,0,0,1853,1772,1,0,0,0,1853,1778,1,0,0,0,1853,
		1787,1,0,0,0,1853,1793,1,0,0,0,1853,1802,1,0,0,0,1853,1814,1,0,0,0,1853,
		1820,1,0,0,0,1853,1823,1,0,0,0,1853,1834,1,0,0,0,1853,1843,1,0,0,0,1853,
		1848,1,0,0,0,1854,33,1,0,0,0,1855,1858,3,38,19,0,1856,1858,3,1202,601,
		0,1857,1855,1,0,0,0,1857,1856,1,0,0,0,1858,1867,1,0,0,0,1859,1863,5,29,
		0,0,1860,1864,3,38,19,0,1861,1864,3,36,18,0,1862,1864,3,1202,601,0,1863,
		1860,1,0,0,0,1863,1861,1,0,0,0,1863,1862,1,0,0,0,1864,1866,1,0,0,0,1865,
		1859,1,0,0,0,1866,1869,1,0,0,0,1867,1865,1,0,0,0,1867,1868,1,0,0,0,1868,
		35,1,0,0,0,1869,1867,1,0,0,0,1870,1874,3,46,23,0,1871,1874,3,48,24,0,1872,
		1874,3,52,26,0,1873,1870,1,0,0,0,1873,1871,1,0,0,0,1873,1872,1,0,0,0,1874,
		37,1,0,0,0,1875,1877,5,52,0,0,1876,1878,5,116,0,0,1877,1876,1,0,0,0,1877,
		1878,1,0,0,0,1878,1891,1,0,0,0,1879,1880,3,1410,705,0,1880,1882,3,1128,
		564,0,1881,1883,3,1118,559,0,1882,1881,1,0,0,0,1882,1883,1,0,0,0,1883,
		1885,1,0,0,0,1884,1886,3,40,20,0,1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,
		1892,1,0,0,0,1887,1888,5,32,0,0,1888,1889,3,90,45,0,1889,1890,5,33,0,0,
		1890,1892,1,0,0,0,1891,1879,1,0,0,0,1891,1887,1,0,0,0,1892,2011,1,0,0,
		0,1893,1894,5,52,0,0,1894,2011,3,1124,562,0,1895,1897,5,100,0,0,1896,1898,
		5,116,0,0,1897,1896,1,0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1900,
		3,1326,663,0,1900,1901,3,1410,705,0,1901,1903,3,1128,564,0,1902,1904,3,
		40,20,0,1903,1902,1,0,0,0,1903,1904,1,0,0,0,1904,2011,1,0,0,0,1905,1907,
		5,372,0,0,1906,1908,5,116,0,0,1907,1906,1,0,0,0,1907,1908,1,0,0,0,1908,
		1909,1,0,0,0,1909,1910,3,1326,663,0,1910,1912,3,1128,564,0,1911,1913,3,
		40,20,0,1912,1911,1,0,0,0,1912,1913,1,0,0,0,1913,2011,1,0,0,0,1914,1936,
		5,185,0,0,1915,1917,5,116,0,0,1916,1915,1,0,0,0,1916,1917,1,0,0,0,1917,
		1918,1,0,0,0,1918,1920,3,1326,663,0,1919,1921,3,42,21,0,1920,1919,1,0,
		0,0,1920,1921,1,0,0,0,1921,1937,1,0,0,0,1922,1923,5,232,0,0,1923,1924,
		5,296,0,0,1924,1937,3,1326,663,0,1925,1926,5,439,0,0,1926,1937,5,296,0,
		0,1927,1928,3,442,221,0,1928,1929,3,1336,668,0,1929,1937,1,0,0,0,1930,
		1931,4,19,2,0,1931,1932,5,106,0,0,1932,1937,3,1410,705,0,1933,1934,4,19,
		3,0,1934,1935,5,130,0,0,1935,1937,3,1410,705,0,1936,1916,1,0,0,0,1936,
		1922,1,0,0,0,1936,1925,1,0,0,0,1936,1927,1,0,0,0,1936,1930,1,0,0,0,1936,
		1933,1,0,0,0,1937,2011,1,0,0,0,1938,1939,5,178,0,0,1939,2011,5,294,0,0,
		1940,1941,5,193,0,0,1941,2011,5,294,0,0,1942,1944,5,59,0,0,1943,1945,5,
		116,0,0,1944,1943,1,0,0,0,1944,1945,1,0,0,0,1945,1946,1,0,0,0,1946,1959,
		3,1326,663,0,1947,1948,5,520,0,0,1948,1952,5,167,0,0,1949,1950,4,19,4,
		0,1950,1953,3,1022,511,0,1951,1953,3,1432,716,0,1952,1949,1,0,0,0,1952,
		1951,1,0,0,0,1953,1960,1,0,0,0,1954,1955,5,185,0,0,1955,1960,5,167,0,0,
		1956,1957,4,19,5,0,1957,1958,5,520,0,0,1958,1960,3,1160,580,0,1959,1947,
		1,0,0,0,1959,1954,1,0,0,0,1959,1956,1,0,0,0,1960,2011,1,0,0,0,1961,1962,
		5,59,0,0,1962,1963,5,269,0,0,1963,1964,3,1336,668,0,1964,1965,3,1160,580,
		0,1965,2011,1,0,0,0,1966,1967,4,19,6,0,1967,1968,5,59,0,0,1968,1969,5,
		106,0,0,1969,1970,3,1410,705,0,1970,1971,3,1122,561,0,1971,2011,1,0,0,
		0,1972,1973,4,19,7,0,1973,1974,5,59,0,0,1974,1975,5,130,0,0,1975,1976,
		3,1410,705,0,1976,1977,3,1122,561,0,1977,2011,1,0,0,0,1978,1979,5,471,
		0,0,1979,1980,5,116,0,0,1980,1981,3,1326,663,0,1981,1982,5,600,0,0,1982,
		1983,3,1410,705,0,1983,2011,1,0,0,0,1984,1986,5,471,0,0,1985,1987,7,1,
		0,0,1986,1985,1,0,0,0,1986,1987,1,0,0,0,1987,1988,1,0,0,0,1988,2011,3,
		1380,690,0,1989,1990,5,471,0,0,1990,1991,3,442,221,0,1991,1992,3,1336,
		668,0,1992,1993,5,600,0,0,1993,1994,3,1334,667,0,1994,2011,1,0,0,0,1995,
		1996,5,137,0,0,1996,1997,5,600,0,0,1997,2001,3,1010,505,0,1998,1999,4,
		19,8,0,1999,2002,5,167,0,0,2000,2002,3,1192,596,0,2001,1998,1,0,0,0,2001,
		2000,1,0,0,0,2002,2004,1,0,0,0,2003,2005,3,1252,626,0,2004,2003,1,0,0,
		0,2004,2005,1,0,0,0,2005,2011,1,0,0,0,2006,2011,5,231,0,0,2007,2008,5,
		412,0,0,2008,2009,5,90,0,0,2009,2011,3,44,22,0,2010,1875,1,0,0,0,2010,
		1893,1,0,0,0,2010,1895,1,0,0,0,2010,1905,1,0,0,0,2010,1914,1,0,0,0,2010,
		1938,1,0,0,0,2010,1940,1,0,0,0,2010,1942,1,0,0,0,2010,1961,1,0,0,0,2010,
		1966,1,0,0,0,2010,1972,1,0,0,0,2010,1978,1,0,0,0,2010,1984,1,0,0,0,2010,
		1989,1,0,0,0,2010,1995,1,0,0,0,2010,2006,1,0,0,0,2010,2007,1,0,0,0,2011,
		39,1,0,0,0,2012,2013,5,54,0,0,2013,2016,3,1410,705,0,2014,2016,5,226,0,
		0,2015,2012,1,0,0,0,2015,2014,1,0,0,0,2016,41,1,0,0,0,2017,2018,7,2,0,
		0,2018,43,1,0,0,0,2019,2021,3,1410,705,0,2020,2022,3,364,182,0,2021,2020,
		1,0,0,0,2021,2022,1,0,0,0,2022,2030,1,0,0,0,2023,2024,5,29,0,0,2024,2026,
		3,1410,705,0,2025,2027,3,364,182,0,2026,2025,1,0,0,0,2026,2027,1,0,0,0,
		2027,2029,1,0,0,0,2028,2023,1,0,0,0,2029,2032,1,0,0,0,2030,2028,1,0,0,
		0,2030,2031,1,0,0,0,2031,45,1,0,0,0,2032,2030,1,0,0,0,2033,2035,5,57,0,
		0,2034,2036,5,6,0,0,2035,2034,1,0,0,0,2035,2036,1,0,0,0,2036,2039,1,0,
		0,0,2037,2040,5,167,0,0,2038,2040,3,1410,705,0,2039,2037,1,0,0,0,2039,
		2038,1,0,0,0,2040,47,1,0,0,0,2041,2043,5,315,0,0,2042,2044,5,6,0,0,2043,
		2042,1,0,0,0,2043,2044,1,0,0,0,2044,2047,1,0,0,0,2045,2048,5,167,0,0,2046,
		2048,3,1410,705,0,2047,2045,1,0,0,0,2047,2046,1,0,0,0,2048,49,1,0,0,0,
		2049,2051,3,46,23,0,2050,2052,3,48,24,0,2051,2050,1,0,0,0,2051,2052,1,
		0,0,0,2052,2058,1,0,0,0,2053,2055,3,48,24,0,2054,2056,3,46,23,0,2055,2054,
		1,0,0,0,2055,2056,1,0,0,0,2056,2058,1,0,0,0,2057,2049,1,0,0,0,2057,2053,
		1,0,0,0,2058,51,1,0,0,0,2059,2060,7,3,0,0,2060,2061,5,635,0,0,2061,53,
		1,0,0,0,2062,2063,5,470,0,0,2063,2064,5,422,0,0,2064,55,1,0,0,0,2065,2068,
		5,58,0,0,2066,2068,3,1412,706,0,2067,2065,1,0,0,0,2067,2066,1,0,0,0,2068,
		57,1,0,0,0,2069,2070,5,583,0,0,2070,2082,3,1362,681,0,2071,2072,7,4,0,
		0,2072,2073,5,153,0,0,2073,2075,3,1448,724,0,2074,2076,3,66,33,0,2075,
		2074,1,0,0,0,2075,2076,1,0,0,0,2076,2083,1,0,0,0,2077,2078,5,471,0,0,2078,
		2079,5,600,0,0,2079,2083,3,1410,705,0,2080,2081,4,29,9,0,2081,2083,3,66,
		33,0,2082,2071,1,0,0,0,2082,2077,1,0,0,0,2082,2080,1,0,0,0,2083,59,1,0,
		0,0,2084,2085,5,615,0,0,2085,2086,5,583,0,0,2086,2087,3,1362,681,0,2087,
		2088,5,520,0,0,2088,2090,7,5,0,0,2089,2091,3,62,31,0,2090,2089,1,0,0,0,
		2090,2091,1,0,0,0,2091,61,1,0,0,0,2092,2099,3,64,32,0,2093,2095,5,29,0,
		0,2094,2093,1,0,0,0,2094,2095,1,0,0,0,2095,2096,1,0,0,0,2096,2098,3,64,
		32,0,2097,2094,1,0,0,0,2098,2101,1,0,0,0,2099,2097,1,0,0,0,2099,2100,1,
		0,0,0,2100,63,1,0,0,0,2101,2099,1,0,0,0,2102,2103,3,162,81,0,2103,65,1,
		0,0,0,2104,2111,3,68,34,0,2105,2107,5,29,0,0,2106,2105,1,0,0,0,2106,2107,
		1,0,0,0,2107,2108,1,0,0,0,2108,2110,3,68,34,0,2109,2106,1,0,0,0,2110,2113,
		1,0,0,0,2111,2109,1,0,0,0,2111,2112,1,0,0,0,2112,67,1,0,0,0,2113,2111,
		1,0,0,0,2114,2116,5,271,0,0,2115,2117,5,6,0,0,2116,2115,1,0,0,0,2116,2117,
		1,0,0,0,2117,2118,1,0,0,0,2118,2127,3,1476,738,0,2119,2127,3,154,77,0,
		2120,2127,3,156,78,0,2121,2127,3,162,81,0,2122,2127,3,164,82,0,2123,2127,
		3,170,85,0,2124,2125,4,34,10,0,2125,2127,3,172,86,0,2126,2114,1,0,0,0,
		2126,2119,1,0,0,0,2126,2120,1,0,0,0,2126,2121,1,0,0,0,2126,2122,1,0,0,
		0,2126,2123,1,0,0,0,2126,2124,1,0,0,0,2127,69,1,0,0,0,2128,2130,5,271,
		0,0,2129,2131,5,6,0,0,2130,2129,1,0,0,0,2130,2131,1,0,0,0,2131,2132,1,
		0,0,0,2132,2136,3,1476,738,0,2133,2136,3,154,77,0,2134,2136,3,156,78,0,
		2135,2128,1,0,0,0,2135,2133,1,0,0,0,2135,2134,1,0,0,0,2136,71,1,0,0,0,
		2137,2139,3,178,89,0,2138,2137,1,0,0,0,2138,2139,1,0,0,0,2139,2141,1,0,
		0,0,2140,2142,3,1236,618,0,2141,2140,1,0,0,0,2141,2142,1,0,0,0,2142,2144,
		1,0,0,0,2143,2145,3,180,90,0,2144,2143,1,0,0,0,2144,2145,1,0,0,0,2145,
		2146,1,0,0,0,2146,2147,5,645,0,0,2147,2148,3,1358,679,0,2148,2149,3,74,
		37,0,2149,73,1,0,0,0,2150,2152,3,1328,664,0,2151,2150,1,0,0,0,2151,2152,
		1,0,0,0,2152,2153,1,0,0,0,2153,2154,5,64,0,0,2154,2155,3,76,38,0,2155,
		75,1,0,0,0,2156,2158,3,100,50,0,2157,2159,3,78,39,0,2158,2157,1,0,0,0,
		2158,2159,1,0,0,0,2159,77,1,0,0,0,2160,2162,5,654,0,0,2161,2163,7,6,0,
		0,2162,2161,1,0,0,0,2162,2163,1,0,0,0,2163,2164,1,0,0,0,2164,2165,5,106,
		0,0,2165,2166,5,410,0,0,2166,79,1,0,0,0,2167,2168,5,277,0,0,2168,2169,
		5,499,0,0,2169,2170,3,1470,735,0,2170,2171,5,342,0,0,2171,2172,5,296,0,
		0,2172,2200,1,0,0,0,2173,2197,4,40,11,0,2174,2175,5,469,0,0,2175,2189,
		5,756,0,0,2176,2177,5,393,0,0,2177,2178,5,497,0,0,2178,2179,5,402,0,0,
		2179,2190,5,201,0,0,2180,2181,5,233,0,0,2181,2182,5,102,0,0,2182,2187,
		3,1410,705,0,2183,2184,5,393,0,0,2184,2185,5,497,0,0,2185,2186,5,402,0,
		0,2186,2188,5,201,0,0,2187,2183,1,0,0,0,2187,2188,1,0,0,0,2188,2190,1,
		0,0,0,2189,2176,1,0,0,0,2189,2180,1,0,0,0,2190,2198,1,0,0,0,2191,2192,
		7,7,0,0,2192,2193,3,1410,705,0,2193,2194,3,1410,705,0,2194,2198,1,0,0,
		0,2195,2196,5,469,0,0,2196,2198,5,794,0,0,2197,2174,1,0,0,0,2197,2191,
		1,0,0,0,2197,2195,1,0,0,0,2198,2200,1,0,0,0,2199,2167,1,0,0,0,2199,2173,
		1,0,0,0,2200,81,1,0,0,0,2201,2219,5,140,0,0,2202,2220,3,84,42,0,2203,2220,
		3,88,44,0,2204,2220,3,110,55,0,2205,2220,3,104,52,0,2206,2220,3,112,56,
		0,2207,2220,3,126,63,0,2208,2220,3,174,87,0,2209,2220,3,182,91,0,2210,
		2220,3,120,60,0,2211,2220,3,132,66,0,2212,2220,3,138,69,0,2213,2220,3,
		186,93,0,2214,2220,3,188,94,0,2215,2216,4,41,12,0,2216,2220,3,190,95,0,
		2217,2218,4,41,13,0,2218,2220,3,140,70,0,2219,2202,1,0,0,0,2219,2203,1,
		0,0,0,2219,2204,1,0,0,0,2219,2205,1,0,0,0,2219,2206,1,0,0,0,2219,2207,
		1,0,0,0,2219,2208,1,0,0,0,2219,2209,1,0,0,0,2219,2210,1,0,0,0,2219,2211,
		1,0,0,0,2219,2212,1,0,0,0,2219,2213,1,0,0,0,2219,2214,1,0,0,0,2219,2215,
		1,0,0,0,2219,2217,1,0,0,0,2220,83,1,0,0,0,2221,2223,5,151,0,0,2222,2224,
		3,1244,622,0,2223,2222,1,0,0,0,2223,2224,1,0,0,0,2224,2225,1,0,0,0,2225,
		2229,3,1340,670,0,2226,2228,3,86,43,0,2227,2226,1,0,0,0,2228,2231,1,0,
		0,0,2229,2227,1,0,0,0,2229,2230,1,0,0,0,2230,85,1,0,0,0,2231,2229,1,0,
		0,0,2232,2237,3,1212,606,0,2233,2237,3,1208,604,0,2234,2235,4,43,14,0,
		2235,2237,3,1210,605,0,2236,2232,1,0,0,0,2236,2233,1,0,0,0,2236,2234,1,
		0,0,0,2237,87,1,0,0,0,2238,2240,5,587,0,0,2239,2238,1,0,0,0,2239,2240,
		1,0,0,0,2240,2241,1,0,0,0,2241,2243,5,584,0,0,2242,2244,3,1244,622,0,2243,
		2242,1,0,0,0,2243,2244,1,0,0,0,2244,2245,1,0,0,0,2245,2262,3,1380,690,
		0,2246,2247,5,32,0,0,2247,2248,3,90,45,0,2248,2249,5,33,0,0,2249,2251,
		1,0,0,0,2250,2246,1,0,0,0,2250,2251,1,0,0,0,2251,2253,1,0,0,0,2252,2254,
		3,1198,599,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2263,1,0,0,0,2255,
		2256,5,306,0,0,2256,2263,3,1386,693,0,2257,2258,5,32,0,0,2258,2259,5,306,
		0,0,2259,2260,3,1386,693,0,2260,2261,5,33,0,0,2261,2263,1,0,0,0,2262,2250,
		1,0,0,0,2262,2255,1,0,0,0,2262,2257,1,0,0,0,2263,89,1,0,0,0,2264,2269,
		3,92,46,0,2265,2266,5,29,0,0,2266,2268,3,92,46,0,2267,2265,1,0,0,0,2268,
		2271,1,0,0,0,2269,2267,1,0,0,0,2269,2270,1,0,0,0,2270,91,1,0,0,0,2271,
		2269,1,0,0,0,2272,2275,3,1116,558,0,2273,2275,3,1124,562,0,2274,2272,1,
		0,0,0,2274,2273,1,0,0,0,2275,93,1,0,0,0,2276,2278,7,8,0,0,2277,2276,1,
		0,0,0,2277,2278,1,0,0,0,2278,2279,1,0,0,0,2279,2280,3,96,48,0,2280,95,
		1,0,0,0,2281,2283,5,64,0,0,2282,2281,1,0,0,0,2282,2283,1,0,0,0,2283,2284,
		1,0,0,0,2284,2285,3,100,50,0,2285,97,1,0,0,0,2286,2288,3,302,151,0,2287,
		2289,3,378,189,0,2288,2287,1,0,0,0,2288,2289,1,0,0,0,2289,2292,1,0,0,0,
		2290,2292,3,306,153,0,2291,2286,1,0,0,0,2291,2290,1,0,0,0,2292,99,1,0,
		0,0,2293,2295,3,302,151,0,2294,2296,3,378,189,0,2295,2294,1,0,0,0,2295,
		2296,1,0,0,0,2296,101,1,0,0,0,2297,2301,5,140,0,0,2298,2302,3,104,52,0,
		2299,2302,3,110,55,0,2300,2302,3,112,56,0,2301,2298,1,0,0,0,2301,2299,
		1,0,0,0,2301,2300,1,0,0,0,2302,2304,1,0,0,0,2303,2305,5,30,0,0,2304,2303,
		1,0,0,0,2304,2305,1,0,0,0,2305,2306,1,0,0,0,2306,2307,5,0,0,1,2307,103,
		1,0,0,0,2308,2310,3,1236,618,0,2309,2308,1,0,0,0,2309,2310,1,0,0,0,2310,
		2311,1,0,0,0,2311,2313,5,441,0,0,2312,2314,3,1244,622,0,2313,2312,1,0,
		0,0,2313,2314,1,0,0,0,2314,2315,1,0,0,0,2315,2316,3,1344,672,0,2316,2325,
		5,32,0,0,2317,2322,3,1248,624,0,2318,2319,5,29,0,0,2319,2321,3,1248,624,
		0,2320,2318,1,0,0,0,2321,2324,1,0,0,0,2322,2320,1,0,0,0,2322,2323,1,0,
		0,0,2323,2326,1,0,0,0,2324,2322,1,0,0,0,2325,2317,1,0,0,0,2325,2326,1,
		0,0,0,2326,2327,1,0,0,0,2327,2331,5,33,0,0,2328,2330,3,114,57,0,2329,2328,
		1,0,0,0,2330,2333,1,0,0,0,2331,2329,1,0,0,0,2331,2332,1,0,0,0,2332,2334,
		1,0,0,0,2333,2331,1,0,0,0,2334,2335,3,108,54,0,2335,105,1,0,0,0,2336,2339,
		3,1442,721,0,2337,2339,5,826,0,0,2338,2336,1,0,0,0,2338,2337,1,0,0,0,2339,
		107,1,0,0,0,2340,2345,3,1036,518,0,2341,2342,4,54,15,0,2342,2343,5,64,
		0,0,2343,2345,3,106,53,0,2344,2340,1,0,0,0,2344,2341,1,0,0,0,2345,109,
		1,0,0,0,2346,2348,3,1236,618,0,2347,2346,1,0,0,0,2347,2348,1,0,0,0,2348,
		2349,1,0,0,0,2349,2351,5,239,0,0,2350,2352,3,1244,622,0,2351,2350,1,0,
		0,0,2351,2352,1,0,0,0,2352,2353,1,0,0,0,2353,2354,3,1348,674,0,2354,2363,
		5,32,0,0,2355,2360,3,1250,625,0,2356,2357,5,29,0,0,2357,2359,3,1250,625,
		0,2358,2356,1,0,0,0,2359,2362,1,0,0,0,2360,2358,1,0,0,0,2360,2361,1,0,
		0,0,2361,2364,1,0,0,0,2362,2360,1,0,0,0,2363,2355,1,0,0,0,2363,2364,1,
		0,0,0,2364,2365,1,0,0,0,2365,2366,5,33,0,0,2366,2367,5,492,0,0,2367,2371,
		3,1254,627,0,2368,2370,3,114,57,0,2369,2368,1,0,0,0,2370,2373,1,0,0,0,
		2371,2369,1,0,0,0,2371,2372,1,0,0,0,2372,2374,1,0,0,0,2373,2371,1,0,0,
		0,2374,2375,3,108,54,0,2375,111,1,0,0,0,2376,2378,5,56,0,0,2377,2376,1,
		0,0,0,2377,2378,1,0,0,0,2378,2379,1,0,0,0,2379,2381,5,239,0,0,2380,2382,
		3,1244,622,0,2381,2380,1,0,0,0,2381,2382,1,0,0,0,2382,2383,1,0,0,0,2383,
		2384,3,1372,686,0,2384,2385,5,492,0,0,2385,2386,7,9,0,0,2386,2387,5,532,
		0,0,2387,2388,3,1448,724,0,2388,113,1,0,0,0,2389,2395,3,118,59,0,2390,
		2392,5,391,0,0,2391,2390,1,0,0,0,2391,2392,1,0,0,0,2392,2393,1,0,0,0,2393,
		2395,5,175,0,0,2394,2389,1,0,0,0,2394,2391,1,0,0,0,2395,115,1,0,0,0,2396,
		2398,3,114,57,0,2397,2396,1,0,0,0,2398,2399,1,0,0,0,2399,2397,1,0,0,0,
		2399,2400,1,0,0,0,2400,117,1,0,0,0,2401,2402,5,119,0,0,2402,2423,3,1448,
		724,0,2403,2407,5,298,0,0,2404,2408,5,548,0,0,2405,2406,4,59,16,0,2406,
		2408,3,1410,705,0,2407,2404,1,0,0,0,2407,2405,1,0,0,0,2408,2423,1,0,0,
		0,2409,2410,5,393,0,0,2410,2423,5,548,0,0,2411,2412,5,134,0,0,2412,2423,
		5,548,0,0,2413,2414,5,452,0,0,2414,2415,5,548,0,0,2415,2423,5,154,0,0,
		2416,2417,5,371,0,0,2417,2418,5,548,0,0,2418,2423,5,154,0,0,2419,2420,
		5,548,0,0,2420,2421,5,511,0,0,2421,2423,7,10,0,0,2422,2401,1,0,0,0,2422,
		2403,1,0,0,0,2422,2409,1,0,0,0,2422,2411,1,0,0,0,2422,2413,1,0,0,0,2422,
		2416,1,0,0,0,2422,2419,1,0,0,0,2423,119,1,0,0,0,2424,2426,3,1316,658,0,
		2425,2424,1,0,0,0,2425,2426,1,0,0,0,2426,2462,1,0,0,0,2427,2429,5,619,
		0,0,2428,2427,1,0,0,0,2428,2429,1,0,0,0,2429,2430,1,0,0,0,2430,2431,5,
		269,0,0,2431,2433,3,1334,667,0,2432,2434,3,1162,581,0,2433,2432,1,0,0,
		0,2433,2434,1,0,0,0,2434,2435,1,0,0,0,2435,2439,3,124,62,0,2436,2438,3,
		1156,578,0,2437,2436,1,0,0,0,2438,2441,1,0,0,0,2439,2437,1,0,0,0,2439,
		2440,1,0,0,0,2440,2463,1,0,0,0,2441,2439,1,0,0,0,2442,2443,5,238,0,0,2443,
		2444,5,269,0,0,2444,2445,3,1334,667,0,2445,2449,3,124,62,0,2446,2448,3,
		1164,582,0,2447,2446,1,0,0,0,2448,2451,1,0,0,0,2449,2447,1,0,0,0,2449,
		2450,1,0,0,0,2450,2463,1,0,0,0,2451,2449,1,0,0,0,2452,2453,5,535,0,0,2453,
		2454,5,269,0,0,2454,2455,3,1334,667,0,2455,2459,3,124,62,0,2456,2458,3,
		1166,583,0,2457,2456,1,0,0,0,2458,2461,1,0,0,0,2459,2457,1,0,0,0,2459,
		2460,1,0,0,0,2460,2463,1,0,0,0,2461,2459,1,0,0,0,2462,2428,1,0,0,0,2462,
		2442,1,0,0,0,2462,2452,1,0,0,0,2463,2465,1,0,0,0,2464,2466,3,50,25,0,2465,
		2464,1,0,0,0,2465,2466,1,0,0,0,2466,121,1,0,0,0,2467,2478,3,1334,667,0,
		2468,2470,3,1334,667,0,2469,2468,1,0,0,0,2469,2470,1,0,0,0,2470,2471,1,
		0,0,0,2471,2472,5,631,0,0,2472,2478,3,1154,577,0,2473,2474,3,1334,667,
		0,2474,2475,5,609,0,0,2475,2476,3,1154,577,0,2476,2478,1,0,0,0,2477,2467,
		1,0,0,0,2477,2469,1,0,0,0,2477,2473,1,0,0,0,2478,123,1,0,0,0,2479,2480,
		5,402,0,0,2480,2481,3,1386,693,0,2481,2482,3,1150,575,0,2482,125,1,0,0,
		0,2483,2484,5,316,0,0,2484,2485,5,250,0,0,2485,2486,3,1364,682,0,2486,
		2487,5,52,0,0,2487,2488,5,613,0,0,2488,2490,3,1448,724,0,2489,2491,3,128,
		64,0,2490,2489,1,0,0,0,2490,2491,1,0,0,0,2491,127,1,0,0,0,2492,2499,3,
		130,65,0,2493,2495,5,29,0,0,2494,2493,1,0,0,0,2494,2495,1,0,0,0,2495,2496,
		1,0,0,0,2496,2498,3,130,65,0,2497,2494,1,0,0,0,2498,2501,1,0,0,0,2499,
		2497,1,0,0,0,2499,2500,1,0,0,0,2500,129,1,0,0,0,2501,2499,1,0,0,0,2502,
		2509,3,150,75,0,2503,2509,3,152,76,0,2504,2509,3,160,80,0,2505,2509,3,
		162,81,0,2506,2509,3,164,82,0,2507,2509,3,166,83,0,2508,2502,1,0,0,0,2508,
		2503,1,0,0,0,2508,2504,1,0,0,0,2508,2505,1,0,0,0,2508,2506,1,0,0,0,2508,
		2507,1,0,0,0,2509,131,1,0,0,0,2510,2511,5,518,0,0,2511,2512,3,1374,687,
		0,2512,2513,5,232,0,0,2513,2514,5,154,0,0,2514,2515,5,657,0,0,2515,2516,
		3,1470,735,0,2516,2517,3,134,67,0,2517,133,1,0,0,0,2518,2519,5,409,0,0,
		2519,2520,5,32,0,0,2520,2525,3,136,68,0,2521,2522,5,29,0,0,2522,2524,3,
		136,68,0,2523,2521,1,0,0,0,2524,2527,1,0,0,0,2525,2523,1,0,0,0,2525,2526,
		1,0,0,0,2526,2528,1,0,0,0,2527,2525,1,0,0,0,2528,2529,5,33,0,0,2529,135,
		1,0,0,0,2530,2531,5,257,0,0,2531,2545,3,1448,724,0,2532,2533,5,151,0,0,
		2533,2545,3,1448,724,0,2534,2535,5,628,0,0,2535,2545,3,1448,724,0,2536,
		2537,5,425,0,0,2537,2545,3,1448,724,0,2538,2539,5,531,0,0,2539,2545,3,
		1448,724,0,2540,2541,5,417,0,0,2541,2545,3,1448,724,0,2542,2543,5,432,
		0,0,2543,2545,3,1422,711,0,2544,2530,1,0,0,0,2544,2532,1,0,0,0,2544,2534,
		1,0,0,0,2544,2536,1,0,0,0,2544,2538,1,0,0,0,2544,2540,1,0,0,0,2544,2542,
		1,0,0,0,2545,137,1,0,0,0,2546,2547,5,583,0,0,2547,2548,3,1360,680,0,2548,
		2553,3,142,71,0,2549,2550,5,630,0,0,2550,2551,5,316,0,0,2551,2552,5,250,
		0,0,2552,2554,3,1366,683,0,2553,2549,1,0,0,0,2553,2554,1,0,0,0,2554,2556,
		1,0,0,0,2555,2557,3,146,73,0,2556,2555,1,0,0,0,2556,2557,1,0,0,0,2557,
		139,1,0,0,0,2558,2559,5,615,0,0,2559,2560,5,583,0,0,2560,2561,3,1360,680,
		0,2561,2562,5,52,0,0,2562,2564,3,144,72,0,2563,2565,3,62,31,0,2564,2563,
		1,0,0,0,2564,2565,1,0,0,0,2565,141,1,0,0,0,2566,2567,5,52,0,0,2567,2574,
		3,144,72,0,2568,2571,4,71,17,0,2569,2570,5,52,0,0,2570,2572,3,144,72,0,
		2571,2569,1,0,0,0,2571,2572,1,0,0,0,2572,2574,1,0,0,0,2573,2566,1,0,0,
		0,2573,2568,1,0,0,0,2574,143,1,0,0,0,2575,2576,5,153,0,0,2576,2577,3,1448,
		724,0,2577,145,1,0,0,0,2578,2585,3,148,74,0,2579,2581,5,29,0,0,2580,2579,
		1,0,0,0,2580,2581,1,0,0,0,2581,2582,1,0,0,0,2582,2584,3,148,74,0,2583,
		2580,1,0,0,0,2584,2587,1,0,0,0,2585,2583,1,0,0,0,2585,2586,1,0,0,0,2586,
		147,1,0,0,0,2587,2585,1,0,0,0,2588,2600,3,150,75,0,2589,2600,3,154,77,
		0,2590,2600,3,156,78,0,2591,2600,3,158,79,0,2592,2600,3,160,80,0,2593,
		2600,3,162,81,0,2594,2600,3,164,82,0,2595,2600,3,166,83,0,2596,2600,3,
		168,84,0,2597,2598,4,74,18,0,2598,2600,3,170,85,0,2599,2588,1,0,0,0,2599,
		2589,1,0,0,0,2599,2590,1,0,0,0,2599,2591,1,0,0,0,2599,2592,1,0,0,0,2599,
		2593,1,0,0,0,2599,2594,1,0,0,0,2599,2595,1,0,0,0,2599,2596,1,0,0,0,2599,
		2597,1,0,0,0,2600,149,1,0,0,0,2601,2603,5,271,0,0,2602,2604,5,6,0,0,2603,
		2602,1,0,0,0,2603,2604,1,0,0,0,2604,2605,1,0,0,0,2605,2606,3,1476,738,
		0,2606,151,1,0,0,0,2607,2609,7,11,0,0,2608,2610,5,6,0,0,2609,2608,1,0,
		0,0,2609,2610,1,0,0,0,2610,2611,1,0,0,0,2611,2612,3,1476,738,0,2612,153,
		1,0,0,0,2613,2615,5,69,0,0,2614,2616,5,6,0,0,2615,2614,1,0,0,0,2615,2616,
		1,0,0,0,2616,2617,1,0,0,0,2617,2618,3,1476,738,0,2618,155,1,0,0,0,2619,
		2621,5,350,0,0,2620,2622,5,6,0,0,2621,2620,1,0,0,0,2621,2622,1,0,0,0,2622,
		2623,1,0,0,0,2623,2624,3,1476,738,0,2624,157,1,0,0,0,2625,2627,5,217,0,
		0,2626,2628,5,6,0,0,2627,2626,1,0,0,0,2627,2628,1,0,0,0,2628,2629,1,0,
		0,0,2629,2630,3,1476,738,0,2630,159,1,0,0,0,2631,2633,5,389,0,0,2632,2634,
		5,6,0,0,2633,2632,1,0,0,0,2633,2634,1,0,0,0,2634,2635,1,0,0,0,2635,2636,
		3,1424,712,0,2636,161,1,0,0,0,2637,2639,5,564,0,0,2638,2637,1,0,0,0,2638,
		2639,1,0,0,0,2639,2640,1,0,0,0,2640,2642,5,199,0,0,2641,2643,5,6,0,0,2642,
		2641,1,0,0,0,2642,2643,1,0,0,0,2643,2644,1,0,0,0,2644,2645,3,1378,689,
		0,2645,163,1,0,0,0,2646,2647,7,12,0,0,2647,165,1,0,0,0,2648,2650,5,119,
		0,0,2649,2651,5,6,0,0,2650,2649,1,0,0,0,2650,2651,1,0,0,0,2651,2652,1,
		0,0,0,2652,2653,3,1448,724,0,2653,167,1,0,0,0,2654,2656,5,224,0,0,2655,
		2657,5,6,0,0,2656,2655,1,0,0,0,2656,2657,1,0,0,0,2657,2658,1,0,0,0,2658,
		2659,3,1476,738,0,2659,169,1,0,0,0,2660,2662,5,195,0,0,2661,2663,5,6,0,
		0,2662,2661,1,0,0,0,2662,2663,1,0,0,0,2663,2664,1,0,0,0,2664,2665,3,1442,
		721,0,2665,171,1,0,0,0,2666,2668,5,199,0,0,2667,2669,5,6,0,0,2668,2667,
		1,0,0,0,2668,2669,1,0,0,0,2669,2670,1,0,0,0,2670,2671,3,1488,744,0,2671,
		173,1,0,0,0,2672,2674,3,176,88,0,2673,2672,1,0,0,0,2673,2674,1,0,0,0,2674,
		2676,1,0,0,0,2675,2677,3,1236,618,0,2676,2675,1,0,0,0,2676,2677,1,0,0,
		0,2677,2679,1,0,0,0,2678,2680,3,180,90,0,2679,2678,1,0,0,0,2679,2680,1,
		0,0,0,2680,2681,1,0,0,0,2681,2682,5,645,0,0,2682,2683,3,1356,678,0,2683,
		2684,3,74,37,0,2684,175,1,0,0,0,2685,2686,5,413,0,0,2686,2688,5,476,0,
		0,2687,2689,3,178,89,0,2688,2687,1,0,0,0,2688,2689,1,0,0,0,2689,2692,1,
		0,0,0,2690,2692,3,178,89,0,2691,2685,1,0,0,0,2691,2690,1,0,0,0,2692,177,
		1,0,0,0,2693,2694,5,57,0,0,2694,2695,5,6,0,0,2695,2696,7,13,0,0,2696,179,
		1,0,0,0,2697,2698,5,548,0,0,2698,2699,5,511,0,0,2699,2700,7,10,0,0,2700,
		181,1,0,0,0,2701,2703,3,1236,618,0,2702,2701,1,0,0,0,2702,2703,1,0,0,0,
		2703,2704,1,0,0,0,2704,2706,5,604,0,0,2705,2707,3,1244,622,0,2706,2705,
		1,0,0,0,2706,2707,1,0,0,0,2707,2708,1,0,0,0,2708,2709,3,1352,676,0,2709,
		2710,7,14,0,0,2710,2711,7,15,0,0,2711,2712,5,402,0,0,2712,2713,3,1386,
		693,0,2713,2714,5,233,0,0,2714,2715,5,190,0,0,2715,2717,5,504,0,0,2716,
		2718,3,184,92,0,2717,2716,1,0,0,0,2717,2718,1,0,0,0,2718,2719,1,0,0,0,
		2719,2720,3,1036,518,0,2720,183,1,0,0,0,2721,2722,7,16,0,0,2722,2723,3,
		1470,735,0,2723,185,1,0,0,0,2724,2726,3,1236,618,0,2725,2724,1,0,0,0,2725,
		2726,1,0,0,0,2726,2727,1,0,0,0,2727,2729,5,206,0,0,2728,2730,3,1244,622,
		0,2729,2728,1,0,0,0,2729,2730,1,0,0,0,2730,2731,1,0,0,0,2731,2732,3,1368,
		684,0,2732,2733,5,402,0,0,2733,2734,5,507,0,0,2734,2741,3,1114,557,0,2735,
		2736,5,402,0,0,2736,2738,5,123,0,0,2737,2739,5,391,0,0,2738,2737,1,0,0,
		0,2738,2739,1,0,0,0,2739,2740,1,0,0,0,2740,2742,5,437,0,0,2741,2735,1,
		0,0,0,2741,2742,1,0,0,0,2742,2749,1,0,0,0,2743,2750,5,193,0,0,2744,2747,
		5,178,0,0,2745,2746,5,402,0,0,2746,2748,3,606,303,0,2747,2745,1,0,0,0,
		2747,2748,1,0,0,0,2748,2750,1,0,0,0,2749,2743,1,0,0,0,2749,2744,1,0,0,
		0,2749,2750,1,0,0,0,2750,2753,1,0,0,0,2751,2752,5,119,0,0,2752,2754,3,
		1448,724,0,2753,2751,1,0,0,0,2753,2754,1,0,0,0,2754,2755,1,0,0,0,2755,
		2756,5,184,0,0,2756,2757,3,1036,518,0,2757,187,1,0,0,0,2758,2760,5,668,
		0,0,2759,2761,3,1244,622,0,2760,2759,1,0,0,0,2760,2761,1,0,0,0,2761,2762,
		1,0,0,0,2762,2763,3,684,342,0,2763,189,1,0,0,0,2764,2765,5,413,0,0,2765,
		2766,5,476,0,0,2766,2767,5,535,0,0,2767,2768,5,727,0,0,2768,2769,5,719,
		0,0,2769,2773,3,1428,714,0,2770,2772,3,192,96,0,2771,2770,1,0,0,0,2772,
		2775,1,0,0,0,2773,2771,1,0,0,0,2773,2774,1,0,0,0,2774,2790,1,0,0,0,2775,
		2773,1,0,0,0,2776,2777,5,535,0,0,2777,2778,5,727,0,0,2778,2780,5,719,0,
		0,2779,2781,3,1244,622,0,2780,2779,1,0,0,0,2780,2781,1,0,0,0,2781,2782,
		1,0,0,0,2782,2786,3,1428,714,0,2783,2785,3,192,96,0,2784,2783,1,0,0,0,
		2785,2788,1,0,0,0,2786,2784,1,0,0,0,2786,2787,1,0,0,0,2787,2790,1,0,0,
		0,2788,2786,1,0,0,0,2789,2764,1,0,0,0,2789,2776,1,0,0,0,2790,191,1,0,0,
		0,2791,2792,5,381,0,0,2792,2793,5,590,0,0,2793,2807,3,1450,725,0,2794,
		2795,5,724,0,0,2795,2796,5,590,0,0,2796,2807,3,1450,725,0,2797,2798,5,
		726,0,0,2798,2799,3,1450,725,0,2799,2800,5,263,0,0,2800,2801,5,90,0,0,
		2801,2802,3,1428,714,0,2802,2807,1,0,0,0,2803,2804,5,725,0,0,2804,2805,
		5,590,0,0,2805,2807,3,1450,725,0,2806,2791,1,0,0,0,2806,2794,1,0,0,0,2806,
		2797,1,0,0,0,2806,2803,1,0,0,0,2807,193,1,0,0,0,2808,2825,5,185,0,0,2809,
		2826,3,196,98,0,2810,2826,3,198,99,0,2811,2826,3,200,100,0,2812,2826,3,
		202,101,0,2813,2826,3,204,102,0,2814,2826,3,206,103,0,2815,2826,3,210,
		105,0,2816,2826,3,212,106,0,2817,2826,3,214,107,0,2818,2826,3,216,108,
		0,2819,2826,3,218,109,0,2820,2826,3,220,110,0,2821,2822,4,97,19,0,2822,
		2826,3,222,111,0,2823,2824,4,97,20,0,2824,2826,3,224,112,0,2825,2809,1,
		0,0,0,2825,2810,1,0,0,0,2825,2811,1,0,0,0,2825,2812,1,0,0,0,2825,2813,
		1,0,0,0,2825,2814,1,0,0,0,2825,2815,1,0,0,0,2825,2816,1,0,0,0,2825,2817,
		1,0,0,0,2825,2818,1,0,0,0,2825,2819,1,0,0,0,2825,2820,1,0,0,0,2825,2821,
		1,0,0,0,2825,2823,1,0,0,0,2826,195,1,0,0,0,2827,2829,5,151,0,0,2828,2830,
		3,1238,619,0,2829,2828,1,0,0,0,2829,2830,1,0,0,0,2830,2831,1,0,0,0,2831,
		2832,3,1342,671,0,2832,197,1,0,0,0,2833,2835,5,206,0,0,2834,2836,3,1238,
		619,0,2835,2834,1,0,0,0,2835,2836,1,0,0,0,2836,2837,1,0,0,0,2837,2838,
		3,1370,685,0,2838,199,1,0,0,0,2839,2841,5,239,0,0,2840,2842,3,1238,619,
		0,2841,2840,1,0,0,0,2841,2842,1,0,0,0,2842,2843,1,0,0,0,2843,2844,3,1350,
		675,0,2844,201,1,0,0,0,2845,2847,5,441,0,0,2846,2848,3,1238,619,0,2847,
		2846,1,0,0,0,2847,2848,1,0,0,0,2848,2849,1,0,0,0,2849,2850,3,1346,673,
		0,2850,203,1,0,0,0,2851,2853,3,1316,658,0,2852,2851,1,0,0,0,2852,2853,
		1,0,0,0,2853,2854,1,0,0,0,2854,2855,5,269,0,0,2855,2856,3,1336,668,0,2856,
		2857,5,402,0,0,2857,2859,3,1386,693,0,2858,2860,3,50,25,0,2859,2858,1,
		0,0,0,2859,2860,1,0,0,0,2860,205,1,0,0,0,2861,2862,5,316,0,0,2862,2863,
		5,250,0,0,2863,2874,3,1366,683,0,2864,2871,3,208,104,0,2865,2867,5,29,
		0,0,2866,2865,1,0,0,0,2866,2867,1,0,0,0,2867,2868,1,0,0,0,2868,2870,3,
		208,104,0,2869,2866,1,0,0,0,2870,2873,1,0,0,0,2871,2869,1,0,0,0,2871,2872,
		1,0,0,0,2872,2875,1,0,0,0,2873,2871,1,0,0,0,2874,2864,1,0,0,0,2874,2875,
		1,0,0,0,2875,207,1,0,0,0,2876,2879,3,164,82,0,2877,2879,3,162,81,0,2878,
		2876,1,0,0,0,2878,2877,1,0,0,0,2879,209,1,0,0,0,2880,2882,5,518,0,0,2881,
		2883,3,1238,619,0,2882,2881,1,0,0,0,2882,2883,1,0,0,0,2883,2884,1,0,0,
		0,2884,2885,3,1376,688,0,2885,211,1,0,0,0,2886,2888,5,587,0,0,2887,2886,
		1,0,0,0,2887,2888,1,0,0,0,2888,2889,1,0,0,0,2889,2891,7,17,0,0,2890,2892,
		3,1238,619,0,2891,2890,1,0,0,0,2891,2892,1,0,0,0,2892,2893,1,0,0,0,2893,
		2895,3,1388,694,0,2894,2896,7,2,0,0,2895,2894,1,0,0,0,2895,2896,1,0,0,
		0,2896,213,1,0,0,0,2897,2898,5,583,0,0,2898,2909,3,1362,681,0,2899,2906,
		3,208,104,0,2900,2902,5,29,0,0,2901,2900,1,0,0,0,2901,2902,1,0,0,0,2902,
		2903,1,0,0,0,2903,2905,3,208,104,0,2904,2901,1,0,0,0,2905,2908,1,0,0,0,
		2906,2904,1,0,0,0,2906,2907,1,0,0,0,2907,2910,1,0,0,0,2908,2906,1,0,0,
		0,2909,2899,1,0,0,0,2909,2910,1,0,0,0,2910,215,1,0,0,0,2911,2913,5,604,
		0,0,2912,2914,3,1238,619,0,2913,2912,1,0,0,0,2913,2914,1,0,0,0,2914,2915,
		1,0,0,0,2915,2916,3,1354,677,0,2916,217,1,0,0,0,2917,2919,5,645,0,0,2918,
		2920,3,1238,619,0,2919,2918,1,0,0,0,2919,2920,1,0,0,0,2920,2921,1,0,0,
		0,2921,2923,3,1258,629,0,2922,2924,7,2,0,0,2923,2922,1,0,0,0,2923,2924,
		1,0,0,0,2924,219,1,0,0,0,2925,2927,5,668,0,0,2926,2928,3,1238,619,0,2927,
		2926,1,0,0,0,2927,2928,1,0,0,0,2928,2929,1,0,0,0,2929,2930,3,684,342,0,
		2930,221,1,0,0,0,2931,2932,5,535,0,0,2932,2933,5,727,0,0,2933,2935,5,719,
		0,0,2934,2936,3,1238,619,0,2935,2934,1,0,0,0,2935,2936,1,0,0,0,2936,2937,
		1,0,0,0,2937,2938,3,1428,714,0,2938,223,1,0,0,0,2939,2940,5,615,0,0,2940,
		2941,5,583,0,0,2941,2943,3,1362,681,0,2942,2944,3,62,31,0,2943,2942,1,
		0,0,0,2943,2944,1,0,0,0,2944,225,1,0,0,0,2945,2946,5,471,0,0,2946,2947,
		7,17,0,0,2947,2952,3,228,114,0,2948,2949,5,29,0,0,2949,2951,3,228,114,
		0,2950,2948,1,0,0,0,2951,2954,1,0,0,0,2952,2950,1,0,0,0,2952,2953,1,0,
		0,0,2953,227,1,0,0,0,2954,2952,1,0,0,0,2955,2956,3,1386,693,0,2956,2957,
		5,600,0,0,2957,2958,3,1380,690,0,2958,229,1,0,0,0,2959,2961,5,607,0,0,
		2960,2962,5,584,0,0,2961,2960,1,0,0,0,2961,2962,1,0,0,0,2962,2963,1,0,
		0,0,2963,2964,3,1386,693,0,2964,231,1,0,0,0,2965,2966,5,267,0,0,2966,2967,
		5,584,0,0,2967,2968,5,236,0,0,2968,2969,3,1452,726,0,2969,233,1,0,0,0,
		2970,2971,5,93,0,0,2971,2977,3,1346,673,0,2972,2974,5,32,0,0,2973,2975,
		3,1008,504,0,2974,2973,1,0,0,0,2974,2975,1,0,0,0,2975,2976,1,0,0,0,2976,
		2978,5,33,0,0,2977,2972,1,0,0,0,2977,2978,1,0,0,0,2978,235,1,0,0,0,2979,
		2981,3,354,177,0,2980,2979,1,0,0,0,2980,2981,1,0,0,0,2981,2982,1,0,0,0,
		2982,2986,5,172,0,0,2983,2985,3,240,120,0,2984,2983,1,0,0,0,2985,2988,
		1,0,0,0,2986,2984,1,0,0,0,2986,2987,1,0,0,0,2987,3021,1,0,0,0,2988,2986,
		1,0,0,0,2989,3013,5,236,0,0,2990,2991,3,1390,695,0,2991,2992,5,631,0,0,
		2992,2994,3,368,184,0,2993,2995,3,392,196,0,2994,2993,1,0,0,0,2994,2995,
		1,0,0,0,2995,3014,1,0,0,0,2996,2999,3,1386,693,0,2997,2998,4,118,21,0,
		2998,3000,3,434,217,0,2999,2997,1,0,0,0,2999,3000,1,0,0,0,3000,3002,1,
		0,0,0,3001,3003,3,238,119,0,3002,3001,1,0,0,0,3002,3003,1,0,0,0,3003,3005,
		1,0,0,0,3004,3006,3,392,196,0,3005,3004,1,0,0,0,3005,3006,1,0,0,0,3006,
		3008,1,0,0,0,3007,3009,3,362,181,0,3008,3007,1,0,0,0,3008,3009,1,0,0,0,
		3009,3011,1,0,0,0,3010,3012,3,318,159,0,3011,3010,1,0,0,0,3011,3012,1,
		0,0,0,3012,3014,1,0,0,0,3013,2990,1,0,0,0,3013,2996,1,0,0,0,3014,3022,
		1,0,0,0,3015,3016,3,1390,695,0,3016,3017,5,236,0,0,3017,3019,3,368,184,
		0,3018,3020,3,392,196,0,3019,3018,1,0,0,0,3019,3020,1,0,0,0,3020,3022,
		1,0,0,0,3021,2989,1,0,0,0,3021,3015,1,0,0,0,3022,237,1,0,0,0,3023,3024,
		5,424,0,0,3024,3025,5,32,0,0,3025,3026,3,1412,706,0,3026,3027,5,33,0,0,
		3027,239,1,0,0,0,3028,3029,7,18,0,0,3029,241,1,0,0,0,3030,3031,5,184,0,
		0,3031,3032,3,386,193,0,3032,243,1,0,0,0,3033,3051,5,252,0,0,3034,3035,
		3,1386,693,0,3035,3037,5,406,0,0,3036,3038,3,434,217,0,3037,3036,1,0,0,
		0,3037,3038,1,0,0,0,3038,3052,1,0,0,0,3039,3049,3,1410,705,0,3040,3050,
		5,110,0,0,3041,3042,5,454,0,0,3042,3044,3,246,123,0,3043,3045,3,392,196,
		0,3044,3043,1,0,0,0,3044,3045,1,0,0,0,3045,3047,1,0,0,0,3046,3048,3,316,
		158,0,3047,3046,1,0,0,0,3047,3048,1,0,0,0,3048,3050,1,0,0,0,3049,3040,
		1,0,0,0,3049,3041,1,0,0,0,3050,3052,1,0,0,0,3051,3034,1,0,0,0,3051,3039,
		1,0,0,0,3052,245,1,0,0,0,3053,3064,7,19,0,0,3054,3061,3,1410,705,0,3055,
		3062,7,20,0,0,3056,3057,7,21,0,0,3057,3058,5,32,0,0,3058,3059,3,262,131,
		0,3059,3060,5,33,0,0,3060,3062,1,0,0,0,3061,3055,1,0,0,0,3061,3056,1,0,
		0,0,3062,3064,1,0,0,0,3063,3053,1,0,0,0,3063,3054,1,0,0,0,3064,247,1,0,
		0,0,3065,3067,5,275,0,0,3066,3068,3,250,125,0,3067,3066,1,0,0,0,3067,3068,
		1,0,0,0,3068,3070,1,0,0,0,3069,3071,5,265,0,0,3070,3069,1,0,0,0,3070,3071,
		1,0,0,0,3071,3073,1,0,0,0,3072,3074,5,280,0,0,3073,3072,1,0,0,0,3073,3074,
		1,0,0,0,3074,3075,1,0,0,0,3075,3077,3,1386,693,0,3076,3078,3,1320,660,
		0,3077,3076,1,0,0,0,3077,3078,1,0,0,0,3078,3089,1,0,0,0,3079,3081,3,252,
		126,0,3080,3082,3,264,132,0,3081,3080,1,0,0,0,3081,3082,1,0,0,0,3082,3090,
		1,0,0,0,3083,3084,5,520,0,0,3084,3086,3,1260,630,0,3085,3087,3,264,132,
		0,3086,3085,1,0,0,0,3086,3087,1,0,0,0,3087,3090,1,0,0,0,3088,3090,3,258,
		129,0,3089,3079,1,0,0,0,3089,3083,1,0,0,0,3089,3088,1,0,0,0,3090,3092,
		1,0,0,0,3091,3093,3,266,133,0,3092,3091,1,0,0,0,3092,3093,1,0,0,0,3093,
		249,1,0,0,0,3094,3095,7,22,0,0,3095,251,1,0,0,0,3096,3098,5,32,0,0,3097,
		3099,3,254,127,0,3098,3097,1,0,0,0,3098,3099,1,0,0,0,3099,3100,1,0,0,0,
		3100,3102,5,33,0,0,3101,3096,1,0,0,0,3101,3102,1,0,0,0,3102,3103,1,0,0,
		0,3103,3104,3,256,128,0,3104,253,1,0,0,0,3105,3110,3,1332,666,0,3106,3107,
		5,29,0,0,3107,3109,3,1332,666,0,3108,3106,1,0,0,0,3109,3112,1,0,0,0,3110,
		3108,1,0,0,0,3110,3111,1,0,0,0,3111,255,1,0,0,0,3112,3110,1,0,0,0,3113,
		3114,7,23,0,0,3114,3115,3,260,130,0,3115,257,1,0,0,0,3116,3127,3,302,151,
		0,3117,3127,3,306,153,0,3118,3120,5,32,0,0,3119,3121,3,254,127,0,3120,
		3119,1,0,0,0,3120,3121,1,0,0,0,3121,3122,1,0,0,0,3122,3124,5,33,0,0,3123,
		3118,1,0,0,0,3123,3124,1,0,0,0,3124,3125,1,0,0,0,3125,3127,3,100,50,0,
		3126,3116,1,0,0,0,3126,3117,1,0,0,0,3126,3123,1,0,0,0,3127,259,1,0,0,0,
		3128,3130,5,32,0,0,3129,3131,3,262,131,0,3130,3129,1,0,0,0,3130,3131,1,
		0,0,0,3131,3132,1,0,0,0,3132,3141,5,33,0,0,3133,3134,5,29,0,0,3134,3136,
		5,32,0,0,3135,3137,3,262,131,0,3136,3135,1,0,0,0,3136,3137,1,0,0,0,3137,
		3138,1,0,0,0,3138,3140,5,33,0,0,3139,3133,1,0,0,0,3140,3143,1,0,0,0,3141,
		3139,1,0,0,0,3141,3142,1,0,0,0,3142,261,1,0,0,0,3143,3141,1,0,0,0,3144,
		3147,3,910,455,0,3145,3147,5,167,0,0,3146,3144,1,0,0,0,3146,3145,1,0,0,
		0,3147,3155,1,0,0,0,3148,3151,5,29,0,0,3149,3152,3,910,455,0,3150,3152,
		5,167,0,0,3151,3149,1,0,0,0,3151,3150,1,0,0,0,3152,3154,1,0,0,0,3153,3148,
		1,0,0,0,3154,3157,1,0,0,0,3155,3153,1,0,0,0,3155,3156,1,0,0,0,3156,263,
		1,0,0,0,3157,3155,1,0,0,0,3158,3159,4,132,22,0,3159,3160,5,64,0,0,3160,
		3162,3,1410,705,0,3161,3163,3,1328,664,0,3162,3161,1,0,0,0,3162,3163,1,
		0,0,0,3163,265,1,0,0,0,3164,3165,5,402,0,0,3165,3166,5,188,0,0,3166,3167,
		5,296,0,0,3167,3168,5,624,0,0,3168,3169,3,1260,630,0,3169,267,1,0,0,0,
		3170,3171,5,312,0,0,3171,3173,3,270,135,0,3172,3174,3,272,136,0,3173,3172,
		1,0,0,0,3173,3174,1,0,0,0,3174,3176,1,0,0,0,3175,3177,3,274,137,0,3176,
		3175,1,0,0,0,3176,3177,1,0,0,0,3177,3179,1,0,0,0,3178,3180,5,313,0,0,3179,
		3178,1,0,0,0,3179,3180,1,0,0,0,3180,3182,1,0,0,0,3181,3183,3,276,138,0,
		3182,3181,1,0,0,0,3182,3183,1,0,0,0,3183,3184,1,0,0,0,3184,3186,3,1442,
		721,0,3185,3187,3,278,139,0,3186,3185,1,0,0,0,3186,3187,1,0,0,0,3187,3189,
		1,0,0,0,3188,3190,3,280,140,0,3189,3188,1,0,0,0,3189,3190,1,0,0,0,3190,
		3192,1,0,0,0,3191,3193,7,8,0,0,3192,3191,1,0,0,0,3192,3193,1,0,0,0,3193,
		3194,1,0,0,0,3194,3195,5,280,0,0,3195,3196,5,584,0,0,3196,3198,3,1386,
		693,0,3197,3199,3,1320,660,0,3198,3197,1,0,0,0,3198,3199,1,0,0,0,3199,
		3201,1,0,0,0,3200,3202,3,1264,632,0,3201,3200,1,0,0,0,3201,3202,1,0,0,
		0,3202,3204,1,0,0,0,3203,3205,3,282,141,0,3204,3203,1,0,0,0,3204,3205,
		1,0,0,0,3205,3207,1,0,0,0,3206,3208,3,1266,633,0,3207,3206,1,0,0,0,3207,
		3208,1,0,0,0,3208,3210,1,0,0,0,3209,3211,3,1270,635,0,3210,3209,1,0,0,
		0,3210,3211,1,0,0,0,3211,3212,1,0,0,0,3212,3214,3,284,142,0,3213,3215,
		3,292,146,0,3214,3213,1,0,0,0,3214,3215,1,0,0,0,3215,3217,1,0,0,0,3216,
		3218,3,294,147,0,3217,3216,1,0,0,0,3217,3218,1,0,0,0,3218,3220,1,0,0,0,
		3219,3221,3,290,145,0,3220,3219,1,0,0,0,3220,3221,1,0,0,0,3221,269,1,0,
		0,0,3222,3223,7,24,0,0,3223,271,1,0,0,0,3224,3225,7,25,0,0,3225,273,1,
		0,0,0,3226,3227,4,137,23,0,3227,3228,5,236,0,0,3228,275,1,0,0,0,3229,3233,
		5,270,0,0,3230,3231,4,138,24,0,3231,3233,7,26,0,0,3232,3229,1,0,0,0,3232,
		3230,1,0,0,0,3233,277,1,0,0,0,3234,3240,4,139,25,0,3235,3236,5,138,0,0,
		3236,3241,5,3,0,0,3237,3238,3,1408,704,0,3238,3239,5,3,0,0,3239,3241,1,
		0,0,0,3240,3235,1,0,0,0,3240,3237,1,0,0,0,3241,279,1,0,0,0,3242,3243,4,
		140,26,0,3243,3244,5,283,0,0,3244,3245,5,439,0,0,3245,3246,5,296,0,0,3246,
		3247,5,412,0,0,3247,281,1,0,0,0,3248,3249,5,501,0,0,3249,3250,5,263,0,
		0,3250,3251,5,90,0,0,3251,3252,3,1444,722,0,3252,283,1,0,0,0,3253,3254,
		5,265,0,0,3254,3255,5,3,0,0,3255,3257,7,27,0,0,3256,3253,1,0,0,0,3256,
		3257,1,0,0,0,3257,3259,1,0,0,0,3258,3260,3,286,143,0,3259,3258,1,0,0,0,
		3259,3260,1,0,0,0,3260,3263,1,0,0,0,3261,3262,5,520,0,0,3262,3264,3,1260,
		630,0,3263,3261,1,0,0,0,3263,3264,1,0,0,0,3264,285,1,0,0,0,3265,3267,5,
		32,0,0,3266,3268,3,288,144,0,3267,3266,1,0,0,0,3267,3268,1,0,0,0,3268,
		3269,1,0,0,0,3269,3270,5,33,0,0,3270,287,1,0,0,0,3271,3277,3,1330,665,
		0,3272,3273,5,39,0,0,3273,3277,3,1470,735,0,3274,3275,5,41,0,0,3275,3277,
		3,1470,735,0,3276,3271,1,0,0,0,3276,3272,1,0,0,0,3276,3274,1,0,0,0,3277,
		3290,1,0,0,0,3278,3286,5,29,0,0,3279,3287,3,1330,665,0,3280,3281,5,39,
		0,0,3281,3287,3,1470,735,0,3282,3287,5,40,0,0,3283,3284,5,41,0,0,3284,
		3287,3,1470,735,0,3285,3287,5,42,0,0,3286,3279,1,0,0,0,3286,3280,1,0,0,
		0,3286,3282,1,0,0,0,3286,3283,1,0,0,0,3286,3285,1,0,0,0,3287,3289,1,0,
		0,0,3288,3278,1,0,0,0,3289,3292,1,0,0,0,3290,3288,1,0,0,0,3290,3291,1,
		0,0,0,3291,289,1,0,0,0,3292,3290,1,0,0,0,3293,3294,4,145,27,0,3294,3295,
		5,57,0,0,3295,3296,5,6,0,0,3296,3297,5,805,0,0,3297,291,1,0,0,0,3298,3299,
		4,146,28,0,3299,3300,5,811,0,0,3300,3301,5,6,0,0,3301,3302,5,3,0,0,3302,
		293,1,0,0,0,3303,3304,4,147,29,0,3304,3305,5,359,0,0,3305,3306,5,6,0,0,
		3306,3307,3,1476,738,0,3307,295,1,0,0,0,3308,3310,5,476,0,0,3309,3311,
		7,28,0,0,3310,3309,1,0,0,0,3310,3311,1,0,0,0,3311,3313,1,0,0,0,3312,3314,
		5,280,0,0,3313,3312,1,0,0,0,3313,3314,1,0,0,0,3314,3315,1,0,0,0,3315,3317,
		3,1386,693,0,3316,3318,3,1320,660,0,3317,3316,1,0,0,0,3317,3318,1,0,0,
		0,3318,3323,1,0,0,0,3319,3324,3,252,126,0,3320,3321,5,520,0,0,3321,3324,
		3,1260,630,0,3322,3324,3,258,129,0,3323,3319,1,0,0,0,3323,3320,1,0,0,0,
		3323,3322,1,0,0,0,3324,297,1,0,0,0,3325,3327,3,302,151,0,3326,3328,3,378,
		189,0,3327,3326,1,0,0,0,3327,3328,1,0,0,0,3328,3331,1,0,0,0,3329,3331,
		3,300,150,0,3330,3325,1,0,0,0,3330,3329,1,0,0,0,3331,299,1,0,0,0,3332,
		3333,5,32,0,0,3333,3334,3,300,150,0,3334,3335,5,33,0,0,3335,3350,1,0,0,
		0,3336,3337,3,302,151,0,3337,3339,3,324,162,0,3338,3340,3,378,189,0,3339,
		3338,1,0,0,0,3339,3340,1,0,0,0,3340,3350,1,0,0,0,3341,3342,3,302,151,0,
		3342,3343,3,378,189,0,3343,3344,3,324,162,0,3344,3350,1,0,0,0,3345,3346,
		4,150,30,0,3346,3347,3,306,153,0,3347,3348,3,324,162,0,3348,3350,1,0,0,
		0,3349,3332,1,0,0,0,3349,3336,1,0,0,0,3349,3341,1,0,0,0,3349,3345,1,0,
		0,0,3350,301,1,0,0,0,3351,3353,3,354,177,0,3352,3351,1,0,0,0,3352,3353,
		1,0,0,0,3353,3354,1,0,0,0,3354,3356,3,304,152,0,3355,3357,3,362,181,0,
		3356,3355,1,0,0,0,3356,3357,1,0,0,0,3357,3359,1,0,0,0,3358,3360,3,316,
		158,0,3359,3358,1,0,0,0,3359,3360,1,0,0,0,3360,303,1,0,0,0,3361,3364,3,
		308,154,0,3362,3364,3,306,153,0,3363,3361,1,0,0,0,3363,3362,1,0,0,0,3364,
		3376,1,0,0,0,3365,3369,5,618,0,0,3366,3367,4,152,31,0,3367,3369,7,29,0,
		0,3368,3365,1,0,0,0,3368,3366,1,0,0,0,3369,3371,1,0,0,0,3370,3372,3,432,
		216,0,3371,3370,1,0,0,0,3371,3372,1,0,0,0,3372,3373,1,0,0,0,3373,3375,
		3,304,152,0,3374,3368,1,0,0,0,3375,3378,1,0,0,0,3376,3374,1,0,0,0,3376,
		3377,1,0,0,0,3377,305,1,0,0,0,3378,3376,1,0,0,0,3379,3382,5,32,0,0,3380,
		3383,3,306,153,0,3381,3383,3,100,50,0,3382,3380,1,0,0,0,3382,3381,1,0,
		0,0,3383,3384,1,0,0,0,3384,3385,5,33,0,0,3385,307,1,0,0,0,3386,3392,3,
		310,155,0,3387,3388,4,154,32,0,3388,3392,3,370,185,0,3389,3390,4,154,33,
		0,3390,3392,3,372,186,0,3391,3386,1,0,0,0,3391,3387,1,0,0,0,3391,3389,
		1,0,0,0,3392,309,1,0,0,0,3393,3397,5,512,0,0,3394,3396,3,376,188,0,3395,
		3394,1,0,0,0,3396,3399,1,0,0,0,3397,3395,1,0,0,0,3397,3398,1,0,0,0,3398,
		3400,1,0,0,0,3399,3397,1,0,0,0,3400,3402,3,386,193,0,3401,3403,3,324,162,
		0,3402,3401,1,0,0,0,3402,3403,1,0,0,0,3403,3405,1,0,0,0,3404,3406,3,366,
		183,0,3405,3404,1,0,0,0,3405,3406,1,0,0,0,3406,3408,1,0,0,0,3407,3409,
		3,392,196,0,3408,3407,1,0,0,0,3408,3409,1,0,0,0,3409,3411,1,0,0,0,3410,
		3412,3,358,179,0,3411,3410,1,0,0,0,3411,3412,1,0,0,0,3412,3414,1,0,0,0,
		3413,3415,3,328,164,0,3414,3413,1,0,0,0,3414,3415,1,0,0,0,3415,3417,1,
		0,0,0,3416,3418,3,332,166,0,3417,3416,1,0,0,0,3417,3418,1,0,0,0,3418,3420,
		1,0,0,0,3419,3421,3,330,165,0,3420,3419,1,0,0,0,3420,3421,1,0,0,0,3421,
		311,1,0,0,0,3422,3423,3,306,153,0,3423,313,1,0,0,0,3424,3425,7,30,0,0,
		3425,315,1,0,0,0,3426,3427,5,307,0,0,3427,3428,3,320,160,0,3428,317,1,
		0,0,0,3429,3430,5,307,0,0,3430,3431,3,322,161,0,3431,319,1,0,0,0,3432,
		3435,3,322,161,0,3433,3434,7,31,0,0,3434,3436,3,322,161,0,3435,3433,1,
		0,0,0,3435,3436,1,0,0,0,3436,321,1,0,0,0,3437,3440,3,1410,705,0,3438,3440,
		7,32,0,0,3439,3437,1,0,0,0,3439,3438,1,0,0,0,3440,323,1,0,0,0,3441,3469,
		5,280,0,0,3442,3443,5,415,0,0,3443,3445,3,1442,721,0,3444,3446,3,1264,
		632,0,3445,3444,1,0,0,0,3445,3446,1,0,0,0,3446,3448,1,0,0,0,3447,3449,
		3,1266,633,0,3448,3447,1,0,0,0,3448,3449,1,0,0,0,3449,3451,1,0,0,0,3450,
		3452,3,1270,635,0,3451,3450,1,0,0,0,3451,3452,1,0,0,0,3452,3470,1,0,0,
		0,3453,3454,5,187,0,0,3454,3470,3,1442,721,0,3455,3458,3,1470,735,0,3456,
		3458,3,986,493,0,3457,3455,1,0,0,0,3457,3456,1,0,0,0,3458,3466,1,0,0,0,
		3459,3462,5,29,0,0,3460,3463,3,1470,735,0,3461,3463,3,986,493,0,3462,3460,
		1,0,0,0,3462,3461,1,0,0,0,3463,3465,1,0,0,0,3464,3459,1,0,0,0,3465,3468,
		1,0,0,0,3466,3464,1,0,0,0,3466,3467,1,0,0,0,3467,3470,1,0,0,0,3468,3466,
		1,0,0,0,3469,3442,1,0,0,0,3469,3453,1,0,0,0,3469,3457,1,0,0,0,3470,325,
		1,0,0,0,3471,3472,5,441,0,0,3472,3478,5,32,0,0,3473,3476,5,3,0,0,3474,
		3475,5,29,0,0,3475,3477,5,3,0,0,3476,3474,1,0,0,0,3476,3477,1,0,0,0,3477,
		3479,1,0,0,0,3478,3473,1,0,0,0,3478,3479,1,0,0,0,3479,3480,1,0,0,0,3480,
		3481,5,33,0,0,3481,327,1,0,0,0,3482,3483,5,254,0,0,3483,3484,3,910,455,
		0,3484,329,1,0,0,0,3485,3486,4,165,34,0,3486,3487,5,813,0,0,3487,3488,
		3,910,455,0,3488,331,1,0,0,0,3489,3490,5,708,0,0,3490,3495,3,334,167,0,
		3491,3492,5,29,0,0,3492,3494,3,334,167,0,3493,3491,1,0,0,0,3494,3497,1,
		0,0,0,3495,3493,1,0,0,0,3495,3496,1,0,0,0,3496,333,1,0,0,0,3497,3495,1,
		0,0,0,3498,3499,3,1406,703,0,3499,3500,5,64,0,0,3500,3501,3,336,168,0,
		3501,335,1,0,0,0,3502,3503,5,32,0,0,3503,3504,3,338,169,0,3504,3505,5,
		33,0,0,3505,337,1,0,0,0,3506,3508,3,1406,703,0,3507,3506,1,0,0,0,3507,
		3508,1,0,0,0,3508,3512,1,0,0,0,3509,3510,5,424,0,0,3510,3511,5,90,0,0,
		3511,3513,3,1026,513,0,3512,3509,1,0,0,0,3512,3513,1,0,0,0,3513,3515,1,
		0,0,0,3514,3516,3,362,181,0,3515,3514,1,0,0,0,3515,3516,1,0,0,0,3516,3518,
		1,0,0,0,3517,3519,3,340,170,0,3518,3517,1,0,0,0,3518,3519,1,0,0,0,3519,
		339,1,0,0,0,3520,3521,3,342,171,0,3521,3523,3,344,172,0,3522,3524,3,352,
		176,0,3523,3522,1,0,0,0,3523,3524,1,0,0,0,3524,341,1,0,0,0,3525,3526,7,
		33,0,0,3526,343,1,0,0,0,3527,3530,3,346,173,0,3528,3530,3,348,174,0,3529,
		3527,1,0,0,0,3529,3528,1,0,0,0,3530,345,1,0,0,0,3531,3532,5,707,0,0,3532,
		3546,5,702,0,0,3533,3534,3,1426,713,0,3534,3535,5,702,0,0,3535,3546,1,
		0,0,0,3536,3537,5,44,0,0,3537,3546,5,702,0,0,3538,3539,5,279,0,0,3539,
		3540,3,910,455,0,3540,3541,3,1016,508,0,3541,3542,5,702,0,0,3542,3546,
		1,0,0,0,3543,3544,5,144,0,0,3544,3546,5,504,0,0,3545,3531,1,0,0,0,3545,
		3533,1,0,0,0,3545,3536,1,0,0,0,3545,3538,1,0,0,0,3545,3543,1,0,0,0,3546,
		347,1,0,0,0,3547,3548,5,76,0,0,3548,3549,3,350,175,0,3549,3550,5,62,0,
		0,3550,3551,3,350,175,0,3551,349,1,0,0,0,3552,3566,3,346,173,0,3553,3554,
		5,707,0,0,3554,3566,5,691,0,0,3555,3556,3,1426,713,0,3556,3557,5,691,0,
		0,3557,3566,1,0,0,0,3558,3559,5,44,0,0,3559,3566,5,691,0,0,3560,3561,5,
		279,0,0,3561,3562,3,910,455,0,3562,3563,3,1016,508,0,3563,3564,5,691,0,
		0,3564,3566,1,0,0,0,3565,3552,1,0,0,0,3565,3553,1,0,0,0,3565,3555,1,0,
		0,0,3565,3558,1,0,0,0,3565,3560,1,0,0,0,3566,351,1,0,0,0,3567,3574,5,689,
		0,0,3568,3569,5,144,0,0,3569,3575,5,504,0,0,3570,3575,5,250,0,0,3571,3575,
		5,706,0,0,3572,3573,5,393,0,0,3573,3575,5,699,0,0,3574,3568,1,0,0,0,3574,
		3570,1,0,0,0,3574,3571,1,0,0,0,3574,3572,1,0,0,0,3575,353,1,0,0,0,3576,
		3578,5,654,0,0,3577,3579,5,674,0,0,3578,3577,1,0,0,0,3578,3579,1,0,0,0,
		3579,3580,1,0,0,0,3580,3585,3,356,178,0,3581,3582,5,29,0,0,3582,3584,3,
		356,178,0,3583,3581,1,0,0,0,3584,3587,1,0,0,0,3585,3583,1,0,0,0,3585,3586,
		1,0,0,0,3586,355,1,0,0,0,3587,3585,1,0,0,0,3588,3590,3,1410,705,0,3589,
		3591,3,1328,664,0,3590,3589,1,0,0,0,3590,3591,1,0,0,0,3591,3592,1,0,0,
		0,3592,3593,5,64,0,0,3593,3594,3,312,156,0,3594,357,1,0,0,0,3595,3596,
		5,250,0,0,3596,3597,5,90,0,0,3597,3599,3,1026,513,0,3598,3600,3,360,180,
		0,3599,3598,1,0,0,0,3599,3600,1,0,0,0,3600,3610,1,0,0,0,3601,3602,4,179,
		35,0,3602,3603,5,250,0,0,3603,3604,5,90,0,0,3604,3605,7,34,0,0,3605,3606,
		5,32,0,0,3606,3607,3,1030,515,0,3607,3608,5,33,0,0,3608,3610,1,0,0,0,3609,
		3595,1,0,0,0,3609,3601,1,0,0,0,3610,359,1,0,0,0,3611,3612,5,654,0,0,3612,
		3613,5,498,0,0,3613,361,1,0,0,0,3614,3615,5,412,0,0,3615,3616,5,90,0,0,
		3616,3617,3,1026,513,0,3617,363,1,0,0,0,3618,3619,7,35,0,0,3619,365,1,
		0,0,0,3620,3623,5,236,0,0,3621,3624,5,186,0,0,3622,3624,3,368,184,0,3623,
		3621,1,0,0,0,3623,3622,1,0,0,0,3624,367,1,0,0,0,3625,3630,3,394,197,0,
		3626,3627,5,29,0,0,3627,3629,3,394,197,0,3628,3626,1,0,0,0,3629,3632,1,
		0,0,0,3630,3628,1,0,0,0,3630,3631,1,0,0,0,3631,369,1,0,0,0,3632,3630,1,
		0,0,0,3633,3634,5,636,0,0,3634,3639,3,374,187,0,3635,3636,5,29,0,0,3636,
		3638,3,374,187,0,3637,3635,1,0,0,0,3638,3641,1,0,0,0,3639,3637,1,0,0,0,
		3639,3640,1,0,0,0,3640,371,1,0,0,0,3641,3639,1,0,0,0,3642,3643,5,584,0,
		0,3643,3644,3,1386,693,0,3644,373,1,0,0,0,3645,3646,5,504,0,0,3646,3648,
		5,32,0,0,3647,3649,3,262,131,0,3648,3647,1,0,0,0,3648,3649,1,0,0,0,3649,
		3650,1,0,0,0,3650,3651,5,33,0,0,3651,375,1,0,0,0,3652,3655,3,314,157,0,
		3653,3655,5,546,0,0,3654,3652,1,0,0,0,3654,3653,1,0,0,0,3655,377,1,0,0,
		0,3656,3658,4,189,36,0,3657,3659,3,380,190,0,3658,3657,1,0,0,0,3659,3660,
		1,0,0,0,3660,3658,1,0,0,0,3660,3661,1,0,0,0,3661,379,1,0,0,0,3662,3663,
		5,233,0,0,3663,3666,3,382,191,0,3664,3665,5,677,0,0,3665,3667,3,1390,695,
		0,3666,3664,1,0,0,0,3666,3667,1,0,0,0,3667,3669,1,0,0,0,3668,3670,3,384,
		192,0,3669,3668,1,0,0,0,3669,3670,1,0,0,0,3670,3676,1,0,0,0,3671,3672,
		5,315,0,0,3672,3673,5,283,0,0,3673,3674,5,521,0,0,3674,3676,5,370,0,0,
		3675,3662,1,0,0,0,3675,3671,1,0,0,0,3676,381,1,0,0,0,3677,3678,7,36,0,
		0,3678,383,1,0,0,0,3679,3680,5,678,0,0,3680,3683,5,679,0,0,3681,3683,5,
		680,0,0,3682,3679,1,0,0,0,3682,3681,1,0,0,0,3683,385,1,0,0,0,3684,3687,
		3,388,194,0,3685,3687,5,16,0,0,3686,3684,1,0,0,0,3686,3685,1,0,0,0,3687,
		3692,1,0,0,0,3688,3689,5,29,0,0,3689,3691,3,388,194,0,3690,3688,1,0,0,
		0,3691,3694,1,0,0,0,3692,3690,1,0,0,0,3692,3693,1,0,0,0,3693,387,1,0,0,
		0,3694,3692,1,0,0,0,3695,3701,3,1338,669,0,3696,3698,3,910,455,0,3697,
		3699,3,390,195,0,3698,3697,1,0,0,0,3698,3699,1,0,0,0,3699,3701,1,0,0,0,
		3700,3695,1,0,0,0,3700,3696,1,0,0,0,3701,389,1,0,0,0,3702,3704,5,64,0,
		0,3703,3702,1,0,0,0,3703,3704,1,0,0,0,3704,3707,1,0,0,0,3705,3708,3,1410,
		705,0,3706,3708,3,1442,721,0,3707,3705,1,0,0,0,3707,3706,1,0,0,0,3708,
		391,1,0,0,0,3709,3710,5,652,0,0,3710,3711,3,910,455,0,3711,393,1,0,0,0,
		3712,3723,3,406,203,0,3713,3717,5,34,0,0,3714,3715,4,197,37,0,3715,3718,
		3,1410,705,0,3716,3718,5,741,0,0,3717,3714,1,0,0,0,3717,3716,1,0,0,0,3718,
		3719,1,0,0,0,3719,3720,3,396,198,0,3720,3721,5,35,0,0,3721,3723,1,0,0,
		0,3722,3712,1,0,0,0,3722,3713,1,0,0,0,3723,3727,1,0,0,0,3724,3726,3,398,
		199,0,3725,3724,1,0,0,0,3726,3729,1,0,0,0,3727,3725,1,0,0,0,3727,3728,
		1,0,0,0,3728,395,1,0,0,0,3729,3727,1,0,0,0,3730,3734,3,406,203,0,3731,
		3733,3,398,199,0,3732,3731,1,0,0,0,3733,3736,1,0,0,0,3734,3732,1,0,0,0,
		3734,3735,1,0,0,0,3735,397,1,0,0,0,3736,3734,1,0,0,0,3737,3738,3,402,201,
		0,3738,3743,3,394,197,0,3739,3740,5,402,0,0,3740,3744,3,910,455,0,3741,
		3742,5,631,0,0,3742,3744,3,1414,707,0,3743,3739,1,0,0,0,3743,3741,1,0,
		0,0,3743,3744,1,0,0,0,3744,3757,1,0,0,0,3745,3746,3,404,202,0,3746,3751,
		3,394,197,0,3747,3748,5,402,0,0,3748,3752,3,910,455,0,3749,3750,5,631,
		0,0,3750,3752,3,1414,707,0,3751,3747,1,0,0,0,3751,3749,1,0,0,0,3752,3757,
		1,0,0,0,3753,3754,3,400,200,0,3754,3755,3,406,203,0,3755,3757,1,0,0,0,
		3756,3737,1,0,0,0,3756,3745,1,0,0,0,3756,3753,1,0,0,0,3757,399,1,0,0,0,
		3758,3760,5,383,0,0,3759,3761,5,272,0,0,3760,3759,1,0,0,0,3760,3761,1,
		0,0,0,3761,3762,1,0,0,0,3762,3770,5,292,0,0,3763,3764,5,383,0,0,3764,3766,
		7,37,0,0,3765,3767,5,414,0,0,3766,3765,1,0,0,0,3766,3767,1,0,0,0,3767,
		3768,1,0,0,0,3768,3770,5,292,0,0,3769,3758,1,0,0,0,3769,3763,1,0,0,0,3770,
		401,1,0,0,0,3771,3773,7,38,0,0,3772,3771,1,0,0,0,3772,3773,1,0,0,0,3773,
		3774,1,0,0,0,3774,3777,5,292,0,0,3775,3777,5,566,0,0,3776,3772,1,0,0,0,
		3776,3775,1,0,0,0,3777,403,1,0,0,0,3778,3780,7,37,0,0,3779,3781,5,414,
		0,0,3780,3779,1,0,0,0,3780,3781,1,0,0,0,3781,3782,1,0,0,0,3782,3783,5,
		292,0,0,3783,405,1,0,0,0,3784,3791,3,408,204,0,3785,3791,3,410,205,0,3786,
		3791,3,412,206,0,3787,3791,3,414,207,0,3788,3789,4,203,38,0,3789,3791,
		3,416,208,0,3790,3784,1,0,0,0,3790,3785,1,0,0,0,3790,3786,1,0,0,0,3790,
		3787,1,0,0,0,3790,3788,1,0,0,0,3791,407,1,0,0,0,3792,3794,3,1386,693,0,
		3793,3795,3,1320,660,0,3794,3793,1,0,0,0,3794,3795,1,0,0,0,3795,3797,1,
		0,0,0,3796,3798,3,434,217,0,3797,3796,1,0,0,0,3797,3798,1,0,0,0,3798,3800,
		1,0,0,0,3799,3801,3,436,218,0,3800,3799,1,0,0,0,3800,3801,1,0,0,0,3801,
		3803,1,0,0,0,3802,3804,3,938,469,0,3803,3802,1,0,0,0,3803,3804,1,0,0,0,
		3804,409,1,0,0,0,3805,3808,5,32,0,0,3806,3809,3,408,204,0,3807,3809,3,
		410,205,0,3808,3806,1,0,0,0,3808,3807,1,0,0,0,3809,3810,1,0,0,0,3810,3811,
		5,33,0,0,3811,411,1,0,0,0,3812,3814,3,312,156,0,3813,3815,3,434,217,0,
		3814,3813,1,0,0,0,3814,3815,1,0,0,0,3815,3817,1,0,0,0,3816,3818,3,1328,
		664,0,3817,3816,1,0,0,0,3817,3818,1,0,0,0,3818,3829,1,0,0,0,3819,3820,
		4,206,39,0,3820,3821,5,735,0,0,3821,3823,3,312,156,0,3822,3824,3,434,217,
		0,3823,3822,1,0,0,0,3823,3824,1,0,0,0,3824,3826,1,0,0,0,3825,3827,3,1328,
		664,0,3826,3825,1,0,0,0,3826,3827,1,0,0,0,3827,3829,1,0,0,0,3828,3812,
		1,0,0,0,3828,3819,1,0,0,0,3829,413,1,0,0,0,3830,3833,5,32,0,0,3831,3834,
		3,368,184,0,3832,3834,3,414,207,0,3833,3831,1,0,0,0,3833,3832,1,0,0,0,
		3834,3835,1,0,0,0,3835,3836,5,33,0,0,3836,415,1,0,0,0,3837,3838,5,710,
		0,0,3838,3839,5,32,0,0,3839,3840,3,910,455,0,3840,3841,5,29,0,0,3841,3842,
		3,1442,721,0,3842,3843,3,418,209,0,3843,3845,5,33,0,0,3844,3846,3,434,
		217,0,3845,3844,1,0,0,0,3845,3846,1,0,0,0,3846,417,1,0,0,0,3847,3848,5,
		115,0,0,3848,3849,5,32,0,0,3849,3854,3,420,210,0,3850,3851,5,29,0,0,3851,
		3853,3,420,210,0,3852,3850,1,0,0,0,3853,3856,1,0,0,0,3854,3852,1,0,0,0,
		3854,3855,1,0,0,0,3855,3857,1,0,0,0,3856,3854,1,0,0,0,3857,3858,5,33,0,
		0,3858,419,1,0,0,0,3859,3860,3,1410,705,0,3860,3861,5,233,0,0,3861,3862,
		5,712,0,0,3862,3883,1,0,0,0,3863,3864,3,1410,705,0,3864,3867,3,1170,585,
		0,3865,3866,4,210,40,0,3866,3868,3,1252,626,0,3867,3865,1,0,0,0,3867,3868,
		1,0,0,0,3868,3870,1,0,0,0,3869,3871,5,210,0,0,3870,3869,1,0,0,0,3870,3871,
		1,0,0,0,3871,3872,1,0,0,0,3872,3873,5,713,0,0,3873,3875,3,1442,721,0,3874,
		3876,3,424,212,0,3875,3874,1,0,0,0,3875,3876,1,0,0,0,3876,3883,1,0,0,0,
		3877,3878,5,711,0,0,3878,3879,5,713,0,0,3879,3880,3,1442,721,0,3880,3881,
		3,418,209,0,3881,3883,1,0,0,0,3882,3859,1,0,0,0,3882,3863,1,0,0,0,3882,
		3877,1,0,0,0,3883,421,1,0,0,0,3884,3886,3,426,213,0,3885,3887,3,428,214,
		0,3886,3885,1,0,0,0,3886,3887,1,0,0,0,3887,3890,1,0,0,0,3888,3890,3,428,
		214,0,3889,3884,1,0,0,0,3889,3888,1,0,0,0,3890,423,1,0,0,0,3891,3896,3,
		422,211,0,3892,3893,3,428,214,0,3893,3894,3,426,213,0,3894,3896,1,0,0,
		0,3895,3891,1,0,0,0,3895,3892,1,0,0,0,3896,425,1,0,0,0,3897,3898,3,430,
		215,0,3898,3899,5,402,0,0,3899,3900,5,709,0,0,3900,427,1,0,0,0,3901,3902,
		3,430,215,0,3902,3903,5,402,0,0,3903,3904,5,201,0,0,3904,429,1,0,0,0,3905,
		3910,5,201,0,0,3906,3910,5,396,0,0,3907,3908,5,167,0,0,3908,3910,3,1442,
		721,0,3909,3905,1,0,0,0,3909,3906,1,0,0,0,3909,3907,1,0,0,0,3910,431,1,
		0,0,0,3911,3912,7,39,0,0,3912,433,1,0,0,0,3913,3917,5,64,0,0,3914,3915,
		4,217,41,0,3915,3917,5,6,0,0,3916,3913,1,0,0,0,3916,3914,1,0,0,0,3916,
		3917,1,0,0,0,3917,3918,1,0,0,0,3918,3919,3,1410,705,0,3919,435,1,0,0,0,
		3920,3925,3,438,219,0,3921,3922,5,29,0,0,3922,3924,3,438,219,0,3923,3921,
		1,0,0,0,3924,3927,1,0,0,0,3925,3923,1,0,0,0,3925,3926,1,0,0,0,3926,437,
		1,0,0,0,3927,3925,1,0,0,0,3928,3929,3,440,220,0,3929,3931,3,442,221,0,
		3930,3932,3,446,223,0,3931,3930,1,0,0,0,3931,3932,1,0,0,0,3932,3933,1,
		0,0,0,3933,3934,5,32,0,0,3934,3935,3,448,224,0,3935,3936,5,33,0,0,3936,
		3949,1,0,0,0,3937,3938,5,630,0,0,3938,3940,3,442,221,0,3939,3941,3,446,
		223,0,3940,3939,1,0,0,0,3940,3941,1,0,0,0,3941,3942,1,0,0,0,3942,3944,
		5,32,0,0,3943,3945,3,448,224,0,3944,3943,1,0,0,0,3944,3945,1,0,0,0,3945,
		3946,1,0,0,0,3946,3947,5,33,0,0,3947,3949,1,0,0,0,3948,3928,1,0,0,0,3948,
		3937,1,0,0,0,3949,439,1,0,0,0,3950,3951,7,40,0,0,3951,441,1,0,0,0,3952,
		3953,7,41,0,0,3953,443,1,0,0,0,3954,3955,5,439,0,0,3955,3961,5,296,0,0,
		3956,3958,5,619,0,0,3957,3959,3,442,221,0,3958,3957,1,0,0,0,3958,3959,
		1,0,0,0,3959,3961,1,0,0,0,3960,3954,1,0,0,0,3960,3956,1,0,0,0,3961,445,
		1,0,0,0,3962,3968,5,233,0,0,3963,3969,5,292,0,0,3964,3965,5,412,0,0,3965,
		3969,5,90,0,0,3966,3967,5,250,0,0,3967,3969,5,90,0,0,3968,3963,1,0,0,0,
		3968,3964,1,0,0,0,3968,3966,1,0,0,0,3969,447,1,0,0,0,3970,3975,3,450,225,
		0,3971,3972,5,29,0,0,3972,3974,3,450,225,0,3973,3971,1,0,0,0,3974,3977,
		1,0,0,0,3975,3973,1,0,0,0,3975,3976,1,0,0,0,3976,449,1,0,0,0,3977,3975,
		1,0,0,0,3978,3981,3,1410,705,0,3979,3981,5,439,0,0,3980,3978,1,0,0,0,3980,
		3979,1,0,0,0,3981,451,1,0,0,0,3982,3984,3,354,177,0,3983,3982,1,0,0,0,
		3983,3984,1,0,0,0,3984,3985,1,0,0,0,3985,3987,5,624,0,0,3986,3988,5,322,
		0,0,3987,3986,1,0,0,0,3987,3988,1,0,0,0,3988,3990,1,0,0,0,3989,3991,5,
		265,0,0,3990,3989,1,0,0,0,3990,3991,1,0,0,0,3991,3992,1,0,0,0,3992,3993,
		3,368,184,0,3993,3994,5,520,0,0,3994,3996,3,1260,630,0,3995,3997,3,392,
		196,0,3996,3995,1,0,0,0,3996,3997,1,0,0,0,3997,3999,1,0,0,0,3998,4000,
		3,362,181,0,3999,3998,1,0,0,0,3999,4000,1,0,0,0,4000,4002,1,0,0,0,4001,
		4003,3,318,159,0,4002,4001,1,0,0,0,4002,4003,1,0,0,0,4003,453,1,0,0,0,
		4004,4009,3,456,228,0,4005,4009,3,462,231,0,4006,4009,3,464,232,0,4007,
		4009,3,470,235,0,4008,4004,1,0,0,0,4008,4005,1,0,0,0,4008,4006,1,0,0,0,
		4008,4007,1,0,0,0,4009,455,1,0,0,0,4010,4011,5,554,0,0,4011,4015,5,602,
		0,0,4012,4014,3,460,230,0,4013,4012,1,0,0,0,4014,4017,1,0,0,0,4015,4013,
		1,0,0,0,4015,4016,1,0,0,0,4016,4036,1,0,0,0,4017,4015,1,0,0,0,4018,4020,
		5,121,0,0,4019,4021,5,656,0,0,4020,4019,1,0,0,0,4020,4021,1,0,0,0,4021,
		4027,1,0,0,0,4022,4024,5,62,0,0,4023,4025,5,393,0,0,4024,4023,1,0,0,0,
		4024,4025,1,0,0,0,4025,4026,1,0,0,0,4026,4028,5,99,0,0,4027,4022,1,0,0,
		0,4027,4028,1,0,0,0,4028,4033,1,0,0,0,4029,4031,5,393,0,0,4030,4029,1,
		0,0,0,4030,4031,1,0,0,0,4031,4032,1,0,0,0,4032,4034,5,468,0,0,4033,4030,
		1,0,0,0,4033,4034,1,0,0,0,4034,4036,1,0,0,0,4035,4010,1,0,0,0,4035,4018,
		1,0,0,0,4036,457,1,0,0,0,4037,4039,5,75,0,0,4038,4040,5,656,0,0,4039,4038,
		1,0,0,0,4039,4040,1,0,0,0,4040,459,1,0,0,0,4041,4042,5,654,0,0,4042,4043,
		5,129,0,0,4043,4047,5,530,0,0,4044,4045,5,454,0,0,4045,4047,7,42,0,0,4046,
		4041,1,0,0,0,4046,4044,1,0,0,0,4047,461,1,0,0,0,4048,4049,5,506,0,0,4049,
		4078,3,1410,705,0,4050,4052,5,497,0,0,4051,4053,5,656,0,0,4052,4051,1,
		0,0,0,4052,4053,1,0,0,0,4053,4072,1,0,0,0,4054,4056,5,600,0,0,4055,4057,
		5,506,0,0,4056,4055,1,0,0,0,4056,4057,1,0,0,0,4057,4058,1,0,0,0,4058,4073,
		3,1410,705,0,4059,4061,5,62,0,0,4060,4062,5,393,0,0,4061,4060,1,0,0,0,
		4061,4062,1,0,0,0,4062,4063,1,0,0,0,4063,4065,5,99,0,0,4064,4059,1,0,0,
		0,4064,4065,1,0,0,0,4065,4070,1,0,0,0,4066,4068,5,393,0,0,4067,4066,1,
		0,0,0,4067,4068,1,0,0,0,4068,4069,1,0,0,0,4069,4071,5,468,0,0,4070,4067,
		1,0,0,0,4070,4071,1,0,0,0,4071,4073,1,0,0,0,4072,4054,1,0,0,0,4072,4064,
		1,0,0,0,4073,4078,1,0,0,0,4074,4075,5,468,0,0,4075,4076,5,506,0,0,4076,
		4078,3,1410,705,0,4077,4048,1,0,0,0,4077,4050,1,0,0,0,4077,4074,1,0,0,
		0,4078,463,1,0,0,0,4079,4080,5,315,0,0,4080,4081,7,17,0,0,4081,4086,3,
		466,233,0,4082,4083,5,29,0,0,4083,4085,3,466,233,0,4084,4082,1,0,0,0,4085,
		4088,1,0,0,0,4086,4084,1,0,0,0,4086,4087,1,0,0,0,4087,4096,1,0,0,0,4088,
		4086,1,0,0,0,4089,4090,5,315,0,0,4090,4091,5,277,0,0,4091,4092,5,233,0,
		0,4092,4096,5,73,0,0,4093,4094,5,621,0,0,4094,4096,7,43,0,0,4095,4079,
		1,0,0,0,4095,4089,1,0,0,0,4095,4093,1,0,0,0,4096,465,1,0,0,0,4097,4099,
		3,1386,693,0,4098,4100,3,434,217,0,4099,4098,1,0,0,0,4099,4100,1,0,0,0,
		4100,4101,1,0,0,0,4101,4102,3,468,234,0,4102,467,1,0,0,0,4103,4105,5,454,
		0,0,4104,4106,5,313,0,0,4105,4104,1,0,0,0,4105,4106,1,0,0,0,4106,4112,
		1,0,0,0,4107,4109,5,322,0,0,4108,4107,1,0,0,0,4108,4109,1,0,0,0,4109,4110,
		1,0,0,0,4110,4112,5,658,0,0,4111,4103,1,0,0,0,4111,4108,1,0,0,0,4112,469,
		1,0,0,0,4113,4142,5,660,0,0,4114,4115,7,44,0,0,4115,4117,3,474,237,0,4116,
		4118,7,45,0,0,4117,4116,1,0,0,0,4117,4118,1,0,0,0,4118,4143,1,0,0,0,4119,
		4120,5,196,0,0,4120,4126,3,474,237,0,4121,4124,5,577,0,0,4122,4123,5,233,
		0,0,4123,4125,5,364,0,0,4124,4122,1,0,0,0,4124,4125,1,0,0,0,4125,4127,
		1,0,0,0,4126,4121,1,0,0,0,4126,4127,1,0,0,0,4127,4143,1,0,0,0,4128,4129,
		5,436,0,0,4129,4143,3,474,237,0,4130,4131,5,121,0,0,4131,4134,3,474,237,
		0,4132,4133,5,403,0,0,4133,4135,5,426,0,0,4134,4132,1,0,0,0,4134,4135,
		1,0,0,0,4135,4143,1,0,0,0,4136,4137,5,497,0,0,4137,4143,3,474,237,0,4138,
		4140,5,458,0,0,4139,4141,3,472,236,0,4140,4139,1,0,0,0,4140,4141,1,0,0,
		0,4141,4143,1,0,0,0,4142,4114,1,0,0,0,4142,4119,1,0,0,0,4142,4128,1,0,
		0,0,4142,4130,1,0,0,0,4142,4136,1,0,0,0,4142,4138,1,0,0,0,4143,471,1,0,
		0,0,4144,4145,5,137,0,0,4145,4146,5,661,0,0,4146,473,1,0,0,0,4147,4154,
		3,1444,722,0,4148,4149,5,29,0,0,4149,4152,3,1444,722,0,4150,4151,5,29,
		0,0,4151,4153,3,1422,711,0,4152,4150,1,0,0,0,4152,4153,1,0,0,0,4153,4155,
		1,0,0,0,4154,4148,1,0,0,0,4154,4155,1,0,0,0,4155,475,1,0,0,0,4156,4157,
		5,447,0,0,4157,4179,3,478,239,0,4158,4179,3,490,245,0,4159,4160,5,486,
		0,0,4160,4165,3,480,240,0,4161,4162,5,29,0,0,4162,4164,3,480,240,0,4163,
		4161,1,0,0,0,4164,4167,1,0,0,0,4165,4163,1,0,0,0,4165,4166,1,0,0,0,4166,
		4179,1,0,0,0,4167,4165,1,0,0,0,4168,4169,5,486,0,0,4169,4171,5,667,0,0,
		4170,4172,3,1240,620,0,4171,4170,1,0,0,0,4171,4172,1,0,0,0,4172,4179,1,
		0,0,0,4173,4179,3,576,288,0,4174,4179,3,578,289,0,4175,4179,3,562,281,
		0,4176,4179,3,486,243,0,4177,4179,3,594,297,0,4178,4156,1,0,0,0,4178,4158,
		1,0,0,0,4178,4159,1,0,0,0,4178,4168,1,0,0,0,4178,4173,1,0,0,0,4178,4174,
		1,0,0,0,4178,4175,1,0,0,0,4178,4176,1,0,0,0,4178,4177,1,0,0,0,4179,477,
		1,0,0,0,4180,4181,7,46,0,0,4181,4186,5,317,0,0,4182,4183,5,600,0,0,4183,
		4187,3,1448,724,0,4184,4185,5,74,0,0,4185,4187,3,910,455,0,4186,4182,1,
		0,0,0,4186,4184,1,0,0,0,4187,479,1,0,0,0,4188,4190,3,482,241,0,4189,4191,
		3,484,242,0,4190,4189,1,0,0,0,4190,4191,1,0,0,0,4191,4200,1,0,0,0,4192,
		4194,3,606,303,0,4193,4195,5,58,0,0,4194,4193,1,0,0,0,4194,4195,1,0,0,
		0,4195,4197,1,0,0,0,4196,4198,3,1034,517,0,4197,4196,1,0,0,0,4197,4198,
		1,0,0,0,4198,4200,1,0,0,0,4199,4188,1,0,0,0,4199,4192,1,0,0,0,4200,481,
		1,0,0,0,4201,4208,5,342,0,0,4202,4203,4,241,42,0,4203,4204,5,78,0,0,4204,
		4205,5,317,0,0,4205,4206,5,62,0,0,4206,4208,5,810,0,0,4207,4201,1,0,0,
		0,4207,4202,1,0,0,0,4208,483,1,0,0,0,4209,4210,5,600,0,0,4210,4211,3,1428,
		714,0,4211,485,1,0,0,0,4212,4216,5,312,0,0,4213,4217,5,154,0,0,4214,4215,
		5,584,0,0,4215,4217,3,1386,693,0,4216,4213,1,0,0,0,4216,4214,1,0,0,0,4217,
		4218,1,0,0,0,4218,4219,5,236,0,0,4219,4220,5,342,0,0,4220,487,1,0,0,0,
		4221,4226,5,342,0,0,4222,4223,4,244,43,0,4223,4224,5,477,0,0,4224,4226,
		5,534,0,0,4225,4221,1,0,0,0,4225,4222,1,0,0,0,4226,489,1,0,0,0,4227,4228,
		5,100,0,0,4228,4229,3,488,244,0,4229,4230,5,600,0,0,4230,4232,3,492,246,
		0,4231,4233,3,1034,517,0,4232,4231,1,0,0,0,4232,4233,1,0,0,0,4233,491,
		1,0,0,0,4234,4239,3,494,247,0,4235,4236,5,29,0,0,4236,4238,3,494,247,0,
		4237,4235,1,0,0,0,4238,4241,1,0,0,0,4239,4237,1,0,0,0,4239,4240,1,0,0,
		0,4240,493,1,0,0,0,4241,4239,1,0,0,0,4242,4243,3,498,249,0,4243,4244,5,
		6,0,0,4244,4245,3,1450,725,0,4245,4371,1,0,0,0,4246,4247,5,738,0,0,4247,
		4248,5,6,0,0,4248,4371,3,1450,725,0,4249,4250,3,500,250,0,4250,4251,5,
		6,0,0,4251,4252,3,1450,725,0,4252,4371,1,0,0,0,4253,4254,3,502,251,0,4254,
		4255,5,6,0,0,4255,4256,3,1450,725,0,4256,4371,1,0,0,0,4257,4258,3,504,
		252,0,4258,4259,5,6,0,0,4259,4260,3,1450,725,0,4260,4371,1,0,0,0,4261,
		4262,3,506,253,0,4262,4263,5,6,0,0,4263,4264,3,1422,711,0,4264,4371,1,
		0,0,0,4265,4266,3,508,254,0,4266,4267,5,6,0,0,4267,4268,3,1422,711,0,4268,
		4371,1,0,0,0,4269,4270,3,510,255,0,4270,4271,5,6,0,0,4271,4272,3,1422,
		711,0,4272,4371,1,0,0,0,4273,4274,3,512,256,0,4274,4275,5,6,0,0,4275,4276,
		3,1422,711,0,4276,4371,1,0,0,0,4277,4278,3,514,257,0,4278,4279,5,6,0,0,
		4279,4280,3,1422,711,0,4280,4371,1,0,0,0,4281,4282,3,516,258,0,4282,4283,
		5,6,0,0,4283,4284,3,1450,725,0,4284,4371,1,0,0,0,4285,4286,3,518,259,0,
		4286,4287,5,6,0,0,4287,4288,3,1450,725,0,4288,4371,1,0,0,0,4289,4290,3,
		530,265,0,4290,4291,5,6,0,0,4291,4292,3,1450,725,0,4292,4371,1,0,0,0,4293,
		4294,3,534,267,0,4294,4295,5,6,0,0,4295,4296,3,1450,725,0,4296,4371,1,
		0,0,0,4297,4298,3,532,266,0,4298,4299,5,6,0,0,4299,4300,3,552,276,0,4300,
		4371,1,0,0,0,4301,4302,3,520,260,0,4302,4303,5,6,0,0,4303,4304,3,1450,
		725,0,4304,4371,1,0,0,0,4305,4306,3,526,263,0,4306,4307,5,6,0,0,4307,4308,
		3,1450,725,0,4308,4371,1,0,0,0,4309,4310,3,528,264,0,4310,4311,5,6,0,0,
		4311,4312,3,1422,711,0,4312,4371,1,0,0,0,4313,4314,3,522,261,0,4314,4315,
		5,6,0,0,4315,4316,3,1448,724,0,4316,4371,1,0,0,0,4317,4318,3,524,262,0,
		4318,4319,5,6,0,0,4319,4320,3,1450,725,0,4320,4371,1,0,0,0,4321,4322,3,
		536,268,0,4322,4323,5,6,0,0,4323,4324,3,1450,725,0,4324,4371,1,0,0,0,4325,
		4326,3,538,269,0,4326,4327,5,6,0,0,4327,4328,3,1422,711,0,4328,4371,1,
		0,0,0,4329,4330,3,540,270,0,4330,4331,5,6,0,0,4331,4332,3,1422,711,0,4332,
		4371,1,0,0,0,4333,4334,5,266,0,0,4334,4335,5,6,0,0,4335,4371,3,560,280,
		0,4336,4337,3,542,271,0,4337,4338,5,6,0,0,4338,4339,3,1442,721,0,4339,
		4371,1,0,0,0,4340,4341,3,544,272,0,4341,4342,5,6,0,0,4342,4343,3,1422,
		711,0,4343,4371,1,0,0,0,4344,4345,3,496,248,0,4345,4346,5,6,0,0,4346,4347,
		3,1422,711,0,4347,4371,1,0,0,0,4348,4349,5,746,0,0,4349,4350,5,6,0,0,4350,
		4371,3,546,273,0,4351,4352,5,748,0,0,4352,4353,5,6,0,0,4353,4371,3,1422,
		711,0,4354,4355,5,751,0,0,4355,4356,5,6,0,0,4356,4371,3,548,274,0,4357,
		4358,4,247,44,0,4358,4359,5,760,0,0,4359,4360,5,6,0,0,4360,4371,3,1424,
		712,0,4361,4362,4,247,45,0,4362,4363,5,765,0,0,4363,4364,5,6,0,0,4364,
		4371,3,550,275,0,4365,4366,4,247,46,0,4366,4367,5,803,0,0,4367,4368,5,
		6,0,0,4368,4371,3,1424,712,0,4369,4371,3,554,277,0,4370,4242,1,0,0,0,4370,
		4246,1,0,0,0,4370,4249,1,0,0,0,4370,4253,1,0,0,0,4370,4257,1,0,0,0,4370,
		4261,1,0,0,0,4370,4265,1,0,0,0,4370,4269,1,0,0,0,4370,4273,1,0,0,0,4370,
		4277,1,0,0,0,4370,4281,1,0,0,0,4370,4285,1,0,0,0,4370,4289,1,0,0,0,4370,
		4293,1,0,0,0,4370,4297,1,0,0,0,4370,4301,1,0,0,0,4370,4305,1,0,0,0,4370,
		4309,1,0,0,0,4370,4313,1,0,0,0,4370,4317,1,0,0,0,4370,4321,1,0,0,0,4370,
		4325,1,0,0,0,4370,4329,1,0,0,0,4370,4333,1,0,0,0,4370,4336,1,0,0,0,4370,
		4340,1,0,0,0,4370,4344,1,0,0,0,4370,4348,1,0,0,0,4370,4351,1,0,0,0,4370,
		4354,1,0,0,0,4370,4357,1,0,0,0,4370,4361,1,0,0,0,4370,4365,1,0,0,0,4370,
		4369,1,0,0,0,4371,495,1,0,0,0,4372,4373,7,47,0,0,4373,497,1,0,0,0,4374,
		4375,7,48,0,0,4375,499,1,0,0,0,4376,4377,7,49,0,0,4377,501,1,0,0,0,4378,
		4379,7,50,0,0,4379,503,1,0,0,0,4380,4381,7,51,0,0,4381,505,1,0,0,0,4382,
		4383,7,52,0,0,4383,507,1,0,0,0,4384,4385,7,53,0,0,4385,509,1,0,0,0,4386,
		4387,7,54,0,0,4387,511,1,0,0,0,4388,4389,7,55,0,0,4389,513,1,0,0,0,4390,
		4391,7,56,0,0,4391,515,1,0,0,0,4392,4393,7,57,0,0,4393,517,1,0,0,0,4394,
		4395,7,58,0,0,4395,519,1,0,0,0,4396,4397,7,59,0,0,4397,521,1,0,0,0,4398,
		4399,7,60,0,0,4399,523,1,0,0,0,4400,4401,7,61,0,0,4401,525,1,0,0,0,4402,
		4403,7,62,0,0,4403,527,1,0,0,0,4404,4405,7,63,0,0,4405,529,1,0,0,0,4406,
		4407,7,64,0,0,4407,531,1,0,0,0,4408,4409,7,65,0,0,4409,533,1,0,0,0,4410,
		4411,7,66,0,0,4411,535,1,0,0,0,4412,4413,7,67,0,0,4413,537,1,0,0,0,4414,
		4415,7,68,0,0,4415,539,1,0,0,0,4416,4417,7,69,0,0,4417,541,1,0,0,0,4418,
		4419,7,70,0,0,4419,543,1,0,0,0,4420,4421,7,71,0,0,4421,545,1,0,0,0,4422,
		4425,3,1308,654,0,4423,4425,5,396,0,0,4424,4422,1,0,0,0,4424,4423,1,0,
		0,0,4425,547,1,0,0,0,4426,4427,7,72,0,0,4427,549,1,0,0,0,4428,4432,5,753,
		0,0,4429,4432,5,313,0,0,4430,4432,3,1442,721,0,4431,4428,1,0,0,0,4431,
		4429,1,0,0,0,4431,4430,1,0,0,0,4432,551,1,0,0,0,4433,4436,3,1450,725,0,
		4434,4436,5,396,0,0,4435,4433,1,0,0,0,4435,4434,1,0,0,0,4436,553,1,0,0,
		0,4437,4438,3,556,278,0,4438,4439,5,6,0,0,4439,4440,3,1450,725,0,4440,
		4452,1,0,0,0,4441,4442,3,558,279,0,4442,4443,5,6,0,0,4443,4444,3,1426,
		713,0,4444,4452,1,0,0,0,4445,4446,5,465,0,0,4446,4447,5,6,0,0,4447,4452,
		3,1450,725,0,4448,4449,5,466,0,0,4449,4450,5,6,0,0,4450,4452,3,1422,711,
		0,4451,4437,1,0,0,0,4451,4441,1,0,0,0,4451,4445,1,0,0,0,4451,4448,1,0,
		0,0,4452,555,1,0,0,0,4453,4454,7,73,0,0,4454,557,1,0,0,0,4455,4456,7,74,
		0,0,4456,559,1,0,0,0,4457,4466,5,32,0,0,4458,4463,3,1422,711,0,4459,4460,
		5,29,0,0,4460,4462,3,1422,711,0,4461,4459,1,0,0,0,4462,4465,1,0,0,0,4463,
		4461,1,0,0,0,4463,4464,1,0,0,0,4464,4467,1,0,0,0,4465,4463,1,0,0,0,4466,
		4458,1,0,0,0,4466,4467,1,0,0,0,4467,4468,1,0,0,0,4468,4469,5,33,0,0,4469,
		561,1,0,0,0,4470,4471,5,100,0,0,4471,4472,5,477,0,0,4472,4473,5,225,0,
		0,4473,4478,3,564,282,0,4474,4475,5,29,0,0,4475,4477,3,564,282,0,4476,
		4474,1,0,0,0,4477,4480,1,0,0,0,4478,4476,1,0,0,0,4478,4479,1,0,0,0,4479,
		4482,1,0,0,0,4480,4478,1,0,0,0,4481,4483,3,1034,517,0,4482,4481,1,0,0,
		0,4482,4483,1,0,0,0,4483,563,1,0,0,0,4484,4485,5,478,0,0,4485,4486,5,6,
		0,0,4486,4488,5,32,0,0,4487,4489,3,566,283,0,4488,4487,1,0,0,0,4488,4489,
		1,0,0,0,4489,4490,1,0,0,0,4490,4534,5,33,0,0,4491,4492,5,479,0,0,4492,
		4493,5,6,0,0,4493,4495,5,32,0,0,4494,4496,3,566,283,0,4495,4494,1,0,0,
		0,4495,4496,1,0,0,0,4496,4497,1,0,0,0,4497,4534,5,33,0,0,4498,4499,5,480,
		0,0,4499,4500,5,6,0,0,4500,4502,5,32,0,0,4501,4503,3,568,284,0,4502,4501,
		1,0,0,0,4502,4503,1,0,0,0,4503,4504,1,0,0,0,4504,4534,5,33,0,0,4505,4506,
		5,481,0,0,4506,4507,5,6,0,0,4507,4509,5,32,0,0,4508,4510,3,568,284,0,4509,
		4508,1,0,0,0,4509,4510,1,0,0,0,4510,4511,1,0,0,0,4511,4534,5,33,0,0,4512,
		4513,5,482,0,0,4513,4514,5,6,0,0,4514,4516,5,32,0,0,4515,4517,3,570,285,
		0,4516,4515,1,0,0,0,4516,4517,1,0,0,0,4517,4518,1,0,0,0,4518,4534,5,33,
		0,0,4519,4520,5,483,0,0,4520,4521,5,6,0,0,4521,4523,5,32,0,0,4522,4524,
		3,570,285,0,4523,4522,1,0,0,0,4523,4524,1,0,0,0,4524,4525,1,0,0,0,4525,
		4534,5,33,0,0,4526,4527,5,484,0,0,4527,4528,5,6,0,0,4528,4530,5,32,0,0,
		4529,4531,3,574,287,0,4530,4529,1,0,0,0,4530,4531,1,0,0,0,4531,4532,1,
		0,0,0,4532,4534,5,33,0,0,4533,4484,1,0,0,0,4533,4491,1,0,0,0,4533,4498,
		1,0,0,0,4533,4505,1,0,0,0,4533,4512,1,0,0,0,4533,4519,1,0,0,0,4533,4526,
		1,0,0,0,4534,565,1,0,0,0,4535,4540,3,1342,671,0,4536,4537,5,29,0,0,4537,
		4539,3,1342,671,0,4538,4536,1,0,0,0,4539,4542,1,0,0,0,4540,4538,1,0,0,
		0,4540,4541,1,0,0,0,4541,567,1,0,0,0,4542,4540,1,0,0,0,4543,4548,3,1382,
		691,0,4544,4545,5,29,0,0,4545,4547,3,1382,691,0,4546,4544,1,0,0,0,4547,
		4550,1,0,0,0,4548,4546,1,0,0,0,4548,4549,1,0,0,0,4549,569,1,0,0,0,4550,
		4548,1,0,0,0,4551,4556,3,572,286,0,4552,4553,5,29,0,0,4553,4555,3,572,
		286,0,4554,4552,1,0,0,0,4555,4558,1,0,0,0,4556,4554,1,0,0,0,4556,4557,
		1,0,0,0,4557,571,1,0,0,0,4558,4556,1,0,0,0,4559,4560,3,1450,725,0,4560,
		573,1,0,0,0,4561,4566,3,1256,628,0,4562,4563,5,29,0,0,4563,4565,3,1256,
		628,0,4564,4562,1,0,0,0,4565,4568,1,0,0,0,4566,4564,1,0,0,0,4566,4567,
		1,0,0,0,4567,575,1,0,0,0,4568,4566,1,0,0,0,4569,4570,5,554,0,0,4570,4572,
		3,606,303,0,4571,4573,3,590,295,0,4572,4571,1,0,0,0,4572,4573,1,0,0,0,
		4573,4576,1,0,0,0,4574,4575,5,623,0,0,4575,4577,3,580,290,0,4576,4574,
		1,0,0,0,4576,4577,1,0,0,0,4577,4579,1,0,0,0,4578,4580,3,582,291,0,4579,
		4578,1,0,0,0,4579,4580,1,0,0,0,4580,4582,1,0,0,0,4581,4583,3,584,292,0,
		4582,4581,1,0,0,0,4582,4583,1,0,0,0,4583,4585,1,0,0,0,4584,4586,3,586,
		293,0,4585,4584,1,0,0,0,4585,4586,1,0,0,0,4586,4588,1,0,0,0,4587,4589,
		3,588,294,0,4588,4587,1,0,0,0,4588,4589,1,0,0,0,4589,4591,1,0,0,0,4590,
		4592,3,1034,517,0,4591,4590,1,0,0,0,4591,4592,1,0,0,0,4592,577,1,0,0,0,
		4593,4594,5,563,0,0,4594,4596,3,606,303,0,4595,4597,3,590,295,0,4596,4595,
		1,0,0,0,4596,4597,1,0,0,0,4597,4599,1,0,0,0,4598,4600,3,1034,517,0,4599,
		4598,1,0,0,0,4599,4600,1,0,0,0,4600,579,1,0,0,0,4601,4607,3,554,277,0,
		4602,4603,7,75,0,0,4603,4604,5,6,0,0,4604,4607,3,1444,722,0,4605,4607,
		5,541,0,0,4606,4601,1,0,0,0,4606,4602,1,0,0,0,4606,4605,1,0,0,0,4607,4612,
		1,0,0,0,4608,4609,5,29,0,0,4609,4611,3,554,277,0,4610,4608,1,0,0,0,4611,
		4614,1,0,0,0,4612,4610,1,0,0,0,4612,4613,1,0,0,0,4613,581,1,0,0,0,4614,
		4612,1,0,0,0,4615,4616,5,628,0,0,4616,4617,5,6,0,0,4617,4618,3,1444,722,
		0,4618,583,1,0,0,0,4619,4620,5,425,0,0,4620,4621,5,6,0,0,4621,4622,3,1444,
		722,0,4622,585,1,0,0,0,4623,4624,5,168,0,0,4624,4625,5,6,0,0,4625,4626,
		3,1444,722,0,4626,587,1,0,0,0,4627,4628,5,428,0,0,4628,4629,5,6,0,0,4629,
		4630,3,1444,722,0,4630,589,1,0,0,0,4631,4636,3,592,296,0,4632,4633,5,29,
		0,0,4633,4635,3,592,296,0,4634,4632,1,0,0,0,4635,4638,1,0,0,0,4636,4634,
		1,0,0,0,4636,4637,1,0,0,0,4637,591,1,0,0,0,4638,4636,1,0,0,0,4639,4640,
		7,76,0,0,4640,593,1,0,0,0,4641,4643,5,554,0,0,4642,4644,3,596,298,0,4643,
		4642,1,0,0,0,4643,4644,1,0,0,0,4644,4647,1,0,0,0,4645,4647,5,563,0,0,4646,
		4641,1,0,0,0,4646,4645,1,0,0,0,4647,4648,1,0,0,0,4648,4649,5,243,0,0,4649,
		595,1,0,0,0,4650,4655,3,598,299,0,4651,4652,5,29,0,0,4652,4654,3,598,299,
		0,4653,4651,1,0,0,0,4654,4657,1,0,0,0,4655,4653,1,0,0,0,4655,4656,1,0,
		0,0,4656,597,1,0,0,0,4657,4655,1,0,0,0,4658,4662,3,600,300,0,4659,4662,
		3,602,301,0,4660,4662,3,604,302,0,4661,4658,1,0,0,0,4661,4659,1,0,0,0,
		4661,4660,1,0,0,0,4662,599,1,0,0,0,4663,4664,5,628,0,0,4664,4665,5,6,0,
		0,4665,4666,3,1450,725,0,4666,601,1,0,0,0,4667,4668,5,425,0,0,4668,4669,
		5,6,0,0,4669,4670,3,1450,725,0,4670,603,1,0,0,0,4671,4672,5,168,0,0,4672,
		4673,5,6,0,0,4673,4674,3,1450,725,0,4674,605,1,0,0,0,4675,4676,7,77,0,
		0,4676,607,1,0,0,0,4677,4678,5,436,0,0,4678,4679,3,1410,705,0,4679,4682,
		5,236,0,0,4680,4683,3,1448,724,0,4681,4683,3,986,493,0,4682,4680,1,0,0,
		0,4682,4681,1,0,0,0,4683,4689,1,0,0,0,4684,4689,3,610,305,0,4685,4686,
		7,78,0,0,4686,4687,5,436,0,0,4687,4689,3,1410,705,0,4688,4677,1,0,0,0,
		4688,4684,1,0,0,0,4688,4685,1,0,0,0,4689,609,1,0,0,0,4690,4691,5,209,0,
		0,4691,4694,3,1410,705,0,4692,4693,5,631,0,0,4693,4695,3,612,306,0,4694,
		4692,1,0,0,0,4694,4695,1,0,0,0,4695,611,1,0,0,0,4696,4701,3,986,493,0,
		4697,4698,5,29,0,0,4698,4700,3,986,493,0,4699,4697,1,0,0,0,4700,4703,1,
		0,0,0,4701,4699,1,0,0,0,4701,4702,1,0,0,0,4702,613,1,0,0,0,4703,4701,1,
		0,0,0,4704,4729,5,686,0,0,4705,4706,5,313,0,0,4706,4707,5,154,0,0,4707,
		4709,5,177,0,0,4708,4710,3,1480,740,0,4709,4708,1,0,0,0,4709,4710,1,0,
		0,0,4710,4711,1,0,0,0,4711,4730,3,1442,721,0,4712,4715,5,685,0,0,4713,
		4714,5,233,0,0,4714,4716,5,477,0,0,4715,4713,1,0,0,0,4715,4716,1,0,0,0,
		4716,4730,1,0,0,0,4717,4718,4,307,47,0,4718,4719,5,277,0,0,4719,4720,5,
		236,0,0,4720,4721,3,1310,655,0,4721,4722,5,31,0,0,4722,4723,3,1422,711,
		0,4723,4724,5,263,0,0,4724,4725,5,90,0,0,4725,4727,3,1442,721,0,4726,4728,
		3,616,308,0,4727,4726,1,0,0,0,4727,4728,1,0,0,0,4728,4730,1,0,0,0,4729,
		4705,1,0,0,0,4729,4712,1,0,0,0,4729,4717,1,0,0,0,4730,615,1,0,0,0,4731,
		4742,3,618,309,0,4732,4733,5,154,0,0,4733,4735,5,177,0,0,4734,4736,3,1480,
		740,0,4735,4734,1,0,0,0,4735,4736,1,0,0,0,4736,4737,1,0,0,0,4737,4739,
		3,1442,721,0,4738,4740,3,618,309,0,4739,4738,1,0,0,0,4739,4740,1,0,0,0,
		4740,4742,1,0,0,0,4741,4731,1,0,0,0,4741,4732,1,0,0,0,4742,617,1,0,0,0,
		4743,4745,5,485,0,0,4744,4746,5,393,0,0,4745,4744,1,0,0,0,4745,4746,1,
		0,0,0,4746,4747,1,0,0,0,4747,4748,5,550,0,0,4748,619,1,0,0,0,4749,4757,
		3,622,311,0,4750,4757,3,632,316,0,4751,4757,3,648,324,0,4752,4757,3,650,
		325,0,4753,4757,3,664,332,0,4754,4757,3,666,333,0,4755,4757,3,682,341,
		0,4756,4749,1,0,0,0,4756,4750,1,0,0,0,4756,4751,1,0,0,0,4756,4752,1,0,
		0,0,4756,4753,1,0,0,0,4756,4754,1,0,0,0,4756,4755,1,0,0,0,4757,621,1,0,
		0,0,4758,4759,5,59,0,0,4759,4761,5,628,0,0,4760,4762,3,1238,619,0,4761,
		4760,1,0,0,0,4761,4762,1,0,0,0,4762,4803,1,0,0,0,4763,4764,4,311,48,0,
		4764,4768,3,1276,638,0,4765,4766,4,311,49,0,4766,4768,3,624,312,0,4767,
		4763,1,0,0,0,4767,4765,1,0,0,0,4768,4769,1,0,0,0,4769,4770,3,634,317,0,
		4770,4804,1,0,0,0,4771,4788,3,630,315,0,4772,4775,3,1286,643,0,4773,4775,
		3,1284,642,0,4774,4772,1,0,0,0,4774,4773,1,0,0,0,4775,4777,1,0,0,0,4776,
		4778,3,1306,653,0,4777,4776,1,0,0,0,4777,4778,1,0,0,0,4778,4780,1,0,0,
		0,4779,4781,3,1298,649,0,4780,4779,1,0,0,0,4780,4781,1,0,0,0,4781,4789,
		1,0,0,0,4782,4783,5,179,0,0,4783,4784,5,737,0,0,4784,4789,5,425,0,0,4785,
		4787,3,1302,651,0,4786,4785,1,0,0,0,4786,4787,1,0,0,0,4787,4789,1,0,0,
		0,4788,4774,1,0,0,0,4788,4782,1,0,0,0,4788,4786,1,0,0,0,4789,4804,1,0,
		0,0,4790,4801,3,1310,655,0,4791,4792,5,167,0,0,4792,4796,5,668,0,0,4793,
		4797,5,58,0,0,4794,4797,5,390,0,0,4795,4797,3,684,342,0,4796,4793,1,0,
		0,0,4796,4794,1,0,0,0,4796,4795,1,0,0,0,4797,4802,1,0,0,0,4798,4800,3,
		1302,651,0,4799,4798,1,0,0,0,4799,4800,1,0,0,0,4800,4802,1,0,0,0,4801,
		4791,1,0,0,0,4801,4799,1,0,0,0,4802,4804,1,0,0,0,4803,4767,1,0,0,0,4803,
		4771,1,0,0,0,4803,4790,1,0,0,0,4804,623,1,0,0,0,4805,4810,3,626,313,0,
		4806,4807,5,29,0,0,4807,4809,3,626,313,0,4808,4806,1,0,0,0,4809,4812,1,
		0,0,0,4810,4808,1,0,0,0,4810,4811,1,0,0,0,4811,625,1,0,0,0,4812,4810,1,
		0,0,0,4813,4814,4,313,50,0,4814,4889,3,628,314,0,4815,4816,4,313,51,0,
		4816,4886,3,1310,655,0,4817,4826,3,1284,642,0,4818,4819,5,476,0,0,4819,
		4821,3,1442,721,0,4820,4822,3,1298,649,0,4821,4820,1,0,0,0,4821,4822,1,
		0,0,0,4822,4827,1,0,0,0,4823,4825,3,1298,649,0,4824,4823,1,0,0,0,4824,
		4825,1,0,0,0,4825,4827,1,0,0,0,4826,4818,1,0,0,0,4826,4824,1,0,0,0,4827,
		4887,1,0,0,0,4828,4837,3,1286,643,0,4829,4831,3,1298,649,0,4830,4829,1,
		0,0,0,4830,4831,1,0,0,0,4831,4838,1,0,0,0,4832,4833,5,476,0,0,4833,4835,
		3,1442,721,0,4834,4836,3,1298,649,0,4835,4834,1,0,0,0,4835,4836,1,0,0,
		0,4836,4838,1,0,0,0,4837,4830,1,0,0,0,4837,4832,1,0,0,0,4838,4887,1,0,
		0,0,4839,4887,3,1288,644,0,4840,4842,3,1290,645,0,4841,4843,3,1298,649,
		0,4842,4841,1,0,0,0,4842,4843,1,0,0,0,4843,4887,1,0,0,0,4844,4853,3,1292,
		646,0,4845,4846,5,476,0,0,4846,4848,3,1442,721,0,4847,4849,3,1298,649,
		0,4848,4847,1,0,0,0,4848,4849,1,0,0,0,4849,4854,1,0,0,0,4850,4852,3,1298,
		649,0,4851,4850,1,0,0,0,4851,4852,1,0,0,0,4852,4854,1,0,0,0,4853,4845,
		1,0,0,0,4853,4851,1,0,0,0,4854,4887,1,0,0,0,4855,4857,3,1294,647,0,4856,
		4858,3,1298,649,0,4857,4856,1,0,0,0,4857,4858,1,0,0,0,4858,4887,1,0,0,
		0,4859,4861,3,1300,650,0,4860,4859,1,0,0,0,4860,4861,1,0,0,0,4861,4887,
		1,0,0,0,4862,4863,5,52,0,0,4863,4864,3,1304,652,0,4864,4869,3,1282,641,
		0,4865,4866,5,52,0,0,4866,4867,3,1304,652,0,4867,4868,3,1282,641,0,4868,
		4870,1,0,0,0,4869,4865,1,0,0,0,4869,4870,1,0,0,0,4870,4887,1,0,0,0,4871,
		4872,5,372,0,0,4872,4873,3,1304,652,0,4873,4878,3,1282,641,0,4874,4875,
		5,372,0,0,4875,4876,3,1304,652,0,4876,4877,3,1282,641,0,4877,4879,1,0,
		0,0,4878,4874,1,0,0,0,4878,4879,1,0,0,0,4879,4887,1,0,0,0,4880,4881,5,
		185,0,0,4881,4884,3,1304,652,0,4882,4883,5,185,0,0,4883,4885,3,1304,652,
		0,4884,4882,1,0,0,0,4884,4885,1,0,0,0,4885,4887,1,0,0,0,4886,4817,1,0,
		0,0,4886,4828,1,0,0,0,4886,4839,1,0,0,0,4886,4840,1,0,0,0,4886,4844,1,
		0,0,0,4886,4855,1,0,0,0,4886,4860,1,0,0,0,4886,4862,1,0,0,0,4886,4871,
		1,0,0,0,4886,4880,1,0,0,0,4887,4889,1,0,0,0,4888,4813,1,0,0,0,4888,4815,
		1,0,0,0,4889,627,1,0,0,0,4890,4891,3,1310,655,0,4891,4892,5,263,0,0,4892,
		4912,5,90,0,0,4893,4894,3,1444,722,0,4894,4895,5,476,0,0,4895,4897,3,1444,
		722,0,4896,4898,3,1298,649,0,4897,4896,1,0,0,0,4897,4898,1,0,0,0,4898,
		4913,1,0,0,0,4899,4901,3,1444,722,0,4900,4902,3,1298,649,0,4901,4900,1,
		0,0,0,4901,4902,1,0,0,0,4902,4913,1,0,0,0,4903,4904,5,743,0,0,4904,4907,
		5,425,0,0,4905,4906,5,476,0,0,4906,4908,3,1444,722,0,4907,4905,1,0,0,0,
		4907,4908,1,0,0,0,4908,4910,1,0,0,0,4909,4911,3,1298,649,0,4910,4909,1,
		0,0,0,4910,4911,1,0,0,0,4911,4913,1,0,0,0,4912,4893,1,0,0,0,4912,4899,
		1,0,0,0,4912,4903,1,0,0,0,4913,4948,1,0,0,0,4914,4915,3,1310,655,0,4915,
		4916,5,263,0,0,4916,4917,5,654,0,0,4917,4941,3,1470,735,0,4918,4919,5,
		90,0,0,4919,4920,3,1444,722,0,4920,4921,5,476,0,0,4921,4923,3,1444,722,
		0,4922,4924,3,1298,649,0,4923,4922,1,0,0,0,4923,4924,1,0,0,0,4924,4942,
		1,0,0,0,4925,4926,5,64,0,0,4926,4928,3,1446,723,0,4927,4929,3,1298,649,
		0,4928,4927,1,0,0,0,4928,4929,1,0,0,0,4929,4942,1,0,0,0,4930,4931,5,90,
		0,0,4931,4933,3,1444,722,0,4932,4934,3,1298,649,0,4933,4932,1,0,0,0,4933,
		4934,1,0,0,0,4934,4942,1,0,0,0,4935,4936,5,90,0,0,4936,4937,5,743,0,0,
		4937,4939,5,425,0,0,4938,4940,3,1298,649,0,4939,4938,1,0,0,0,4939,4940,
		1,0,0,0,4940,4942,1,0,0,0,4941,4918,1,0,0,0,4941,4925,1,0,0,0,4941,4930,
		1,0,0,0,4941,4935,1,0,0,0,4941,4942,1,0,0,0,4942,4948,1,0,0,0,4943,4945,
		3,1310,655,0,4944,4946,3,1300,650,0,4945,4944,1,0,0,0,4945,4946,1,0,0,
		0,4946,4948,1,0,0,0,4947,4890,1,0,0,0,4947,4914,1,0,0,0,4947,4943,1,0,
		0,0,4948,629,1,0,0,0,4949,4950,5,628,0,0,4950,4951,3,1478,739,0,4951,631,
		1,0,0,0,4952,4953,5,140,0,0,4953,4955,5,628,0,0,4954,4956,3,1244,622,0,
		4955,4954,1,0,0,0,4955,4956,1,0,0,0,4956,4957,1,0,0,0,4957,4959,3,1276,
		638,0,4958,4960,3,638,319,0,4959,4958,1,0,0,0,4959,4960,1,0,0,0,4960,4961,
		1,0,0,0,4961,4962,3,634,317,0,4962,633,1,0,0,0,4963,4965,3,640,320,0,4964,
		4963,1,0,0,0,4964,4965,1,0,0,0,4965,4967,1,0,0,0,4966,4968,3,642,321,0,
		4967,4966,1,0,0,0,4967,4968,1,0,0,0,4968,4972,1,0,0,0,4969,4971,3,644,
		322,0,4970,4969,1,0,0,0,4971,4974,1,0,0,0,4972,4970,1,0,0,0,4972,4973,
		1,0,0,0,4973,4977,1,0,0,0,4974,4972,1,0,0,0,4975,4976,4,317,52,0,4976,
		4978,3,636,318,0,4977,4975,1,0,0,0,4977,4978,1,0,0,0,4978,635,1,0,0,0,
		4979,4980,5,757,0,0,4980,4984,3,1442,721,0,4981,4982,5,119,0,0,4982,4984,
		3,1442,721,0,4983,4979,1,0,0,0,4983,4981,1,0,0,0,4984,637,1,0,0,0,4985,
		4986,5,167,0,0,4986,4987,5,668,0,0,4987,4988,3,684,342,0,4988,639,1,0,
		0,0,4989,4992,5,485,0,0,4990,4993,3,676,338,0,4991,4993,7,79,0,0,4992,
		4990,1,0,0,0,4992,4991,1,0,0,0,4993,641,1,0,0,0,4994,5003,5,654,0,0,4995,
		4996,5,348,0,0,4996,5004,3,1422,711,0,4997,4998,5,352,0,0,4998,5004,3,
		1422,711,0,4999,5000,5,347,0,0,5000,5004,3,1422,711,0,5001,5002,5,353,
		0,0,5002,5004,3,1422,711,0,5003,4995,1,0,0,0,5003,4997,1,0,0,0,5003,4999,
		1,0,0,0,5003,5001,1,0,0,0,5004,5005,1,0,0,0,5005,5003,1,0,0,0,5005,5006,
		1,0,0,0,5006,643,1,0,0,0,5007,5008,5,50,0,0,5008,5048,7,80,0,0,5009,5038,
		5,425,0,0,5010,5017,5,213,0,0,5011,5012,5,279,0,0,5012,5013,3,1424,712,
		0,5013,5014,5,163,0,0,5014,5018,1,0,0,0,5015,5018,5,386,0,0,5016,5018,
		5,167,0,0,5017,5011,1,0,0,0,5017,5015,1,0,0,0,5017,5016,1,0,0,0,5017,5018,
		1,0,0,0,5018,5039,1,0,0,0,5019,5022,5,714,0,0,5020,5023,3,1424,712,0,5021,
		5023,5,167,0,0,5022,5020,1,0,0,0,5022,5021,1,0,0,0,5023,5039,1,0,0,0,5024,
		5025,5,715,0,0,5025,5030,5,279,0,0,5026,5027,3,1424,712,0,5027,5028,5,
		163,0,0,5028,5031,1,0,0,0,5029,5031,5,167,0,0,5030,5026,1,0,0,0,5030,5029,
		1,0,0,0,5031,5039,1,0,0,0,5032,5033,4,322,53,0,5033,5034,5,485,0,0,5034,
		5036,5,144,0,0,5035,5037,7,81,0,0,5036,5035,1,0,0,0,5036,5037,1,0,0,0,
		5037,5039,1,0,0,0,5038,5010,1,0,0,0,5038,5019,1,0,0,0,5038,5024,1,0,0,
		0,5038,5032,1,0,0,0,5039,5048,1,0,0,0,5040,5041,5,750,0,0,5041,5048,3,
		1424,712,0,5042,5045,5,749,0,0,5043,5046,3,1424,712,0,5044,5046,5,707,
		0,0,5045,5043,1,0,0,0,5045,5044,1,0,0,0,5046,5048,1,0,0,0,5047,5007,1,
		0,0,0,5047,5009,1,0,0,0,5047,5040,1,0,0,0,5047,5042,1,0,0,0,5048,645,1,
		0,0,0,5049,5055,1,0,0,0,5050,5051,5,757,0,0,5051,5055,3,1442,721,0,5052,
		5053,5,119,0,0,5053,5055,3,1442,721,0,5054,5049,1,0,0,0,5054,5050,1,0,
		0,0,5054,5052,1,0,0,0,5055,647,1,0,0,0,5056,5057,5,185,0,0,5057,5059,5,
		628,0,0,5058,5060,3,1238,619,0,5059,5058,1,0,0,0,5059,5060,1,0,0,0,5060,
		5061,1,0,0,0,5061,5062,3,1274,637,0,5062,649,1,0,0,0,5063,5105,5,248,0,
		0,5064,5065,3,670,335,0,5065,5066,5,600,0,0,5066,5070,3,1274,637,0,5067,
		5068,5,654,0,0,5068,5069,5,669,0,0,5069,5071,5,410,0,0,5070,5067,1,0,0,
		0,5070,5071,1,0,0,0,5071,5106,1,0,0,0,5072,5078,3,670,335,0,5073,5075,
		5,58,0,0,5074,5076,5,440,0,0,5075,5074,1,0,0,0,5075,5076,1,0,0,0,5076,
		5078,1,0,0,0,5077,5072,1,0,0,0,5077,5073,1,0,0,0,5078,5079,1,0,0,0,5079,
		5081,5,402,0,0,5080,5082,3,668,334,0,5081,5080,1,0,0,0,5081,5082,1,0,0,
		0,5082,5083,1,0,0,0,5083,5084,3,674,337,0,5084,5085,5,600,0,0,5085,5087,
		3,652,326,0,5086,5088,3,662,331,0,5087,5086,1,0,0,0,5087,5088,1,0,0,0,
		5088,5090,1,0,0,0,5089,5091,3,654,327,0,5090,5089,1,0,0,0,5090,5091,1,
		0,0,0,5091,5093,1,0,0,0,5092,5094,3,660,330,0,5093,5092,1,0,0,0,5093,5094,
		1,0,0,0,5094,5106,1,0,0,0,5095,5096,5,446,0,0,5096,5097,5,402,0,0,5097,
		5098,3,1310,655,0,5098,5099,5,600,0,0,5099,5103,3,652,326,0,5100,5101,
		5,654,0,0,5101,5102,5,248,0,0,5102,5104,5,410,0,0,5103,5100,1,0,0,0,5103,
		5104,1,0,0,0,5104,5106,1,0,0,0,5105,5064,1,0,0,0,5105,5077,1,0,0,0,5105,
		5095,1,0,0,0,5106,651,1,0,0,0,5107,5108,4,326,54,0,5108,5112,3,1276,638,
		0,5109,5110,4,326,55,0,5110,5112,3,1274,637,0,5111,5107,1,0,0,0,5111,5109,
		1,0,0,0,5112,653,1,0,0,0,5113,5114,5,654,0,0,5114,5115,3,680,340,0,5115,
		655,1,0,0,0,5116,5117,5,672,0,0,5117,5118,3,684,342,0,5118,657,1,0,0,0,
		5119,5120,5,654,0,0,5120,5128,5,668,0,0,5121,5129,3,684,342,0,5122,5124,
		5,58,0,0,5123,5125,3,656,328,0,5124,5123,1,0,0,0,5124,5125,1,0,0,0,5125,
		5129,1,0,0,0,5126,5129,5,390,0,0,5127,5129,5,167,0,0,5128,5121,1,0,0,0,
		5128,5122,1,0,0,0,5128,5126,1,0,0,0,5128,5127,1,0,0,0,5129,659,1,0,0,0,
		5130,5131,5,64,0,0,5131,5133,5,628,0,0,5132,5134,3,658,329,0,5133,5132,
		1,0,0,0,5133,5134,1,0,0,0,5134,661,1,0,0,0,5135,5136,4,331,56,0,5136,5137,
		3,640,320,0,5137,663,1,0,0,0,5138,5139,5,471,0,0,5139,5140,5,628,0,0,5140,
		5141,3,1310,655,0,5141,5142,5,600,0,0,5142,5150,3,1310,655,0,5143,5144,
		5,29,0,0,5144,5145,3,1310,655,0,5145,5146,5,600,0,0,5146,5147,3,1310,655,
		0,5147,5149,1,0,0,0,5148,5143,1,0,0,0,5149,5152,1,0,0,0,5150,5148,1,0,
		0,0,5150,5151,1,0,0,0,5151,665,1,0,0,0,5152,5150,1,0,0,0,5153,5156,5,495,
		0,0,5154,5155,4,333,57,0,5155,5157,3,1238,619,0,5156,5154,1,0,0,0,5156,
		5157,1,0,0,0,5157,5193,1,0,0,0,5158,5159,3,670,335,0,5159,5160,5,236,0,
		0,5160,5161,3,1274,637,0,5161,5194,1,0,0,0,5162,5163,3,670,335,0,5163,
		5165,5,402,0,0,5164,5166,3,668,334,0,5165,5164,1,0,0,0,5165,5166,1,0,0,
		0,5166,5167,1,0,0,0,5167,5168,3,674,337,0,5168,5169,5,236,0,0,5169,5170,
		3,1274,637,0,5170,5194,1,0,0,0,5171,5173,5,58,0,0,5172,5174,5,440,0,0,
		5173,5172,1,0,0,0,5173,5174,1,0,0,0,5174,5183,1,0,0,0,5175,5177,5,402,
		0,0,5176,5178,3,668,334,0,5177,5176,1,0,0,0,5177,5178,1,0,0,0,5178,5179,
		1,0,0,0,5179,5184,3,674,337,0,5180,5181,5,29,0,0,5181,5182,5,248,0,0,5182,
		5184,5,410,0,0,5183,5175,1,0,0,0,5183,5180,1,0,0,0,5184,5185,1,0,0,0,5185,
		5186,5,236,0,0,5186,5194,3,1274,637,0,5187,5188,5,446,0,0,5188,5189,5,
		402,0,0,5189,5190,3,1310,655,0,5190,5191,5,236,0,0,5191,5192,3,1274,637,
		0,5192,5194,1,0,0,0,5193,5158,1,0,0,0,5193,5162,1,0,0,0,5193,5171,1,0,
		0,0,5193,5187,1,0,0,0,5194,5197,1,0,0,0,5195,5196,4,333,58,0,5196,5198,
		3,1246,623,0,5197,5195,1,0,0,0,5197,5198,1,0,0,0,5198,667,1,0,0,0,5199,
		5200,7,82,0,0,5200,669,1,0,0,0,5201,5206,3,672,336,0,5202,5203,5,29,0,
		0,5203,5205,3,672,336,0,5204,5202,1,0,0,0,5205,5208,1,0,0,0,5206,5204,
		1,0,0,0,5206,5207,1,0,0,0,5207,671,1,0,0,0,5208,5206,1,0,0,0,5209,5211,
		3,1474,737,0,5210,5212,3,1328,664,0,5211,5210,1,0,0,0,5211,5212,1,0,0,
		0,5212,5223,1,0,0,0,5213,5220,3,1474,737,0,5214,5221,5,40,0,0,5215,5216,
		5,39,0,0,5216,5221,3,1470,735,0,5217,5221,5,42,0,0,5218,5219,5,41,0,0,
		5219,5221,3,1470,735,0,5220,5214,1,0,0,0,5220,5215,1,0,0,0,5220,5217,1,
		0,0,0,5220,5218,1,0,0,0,5221,5223,1,0,0,0,5222,5209,1,0,0,0,5222,5213,
		1,0,0,0,5223,5255,1,0,0,0,5224,5226,7,83,0,0,5225,5227,3,1328,664,0,5226,
		5225,1,0,0,0,5226,5227,1,0,0,0,5227,5255,1,0,0,0,5228,5255,7,84,0,0,5229,
		5230,5,248,0,0,5230,5255,5,410,0,0,5231,5232,5,522,0,0,5232,5255,5,152,
		0,0,5233,5237,5,140,0,0,5234,5235,5,587,0,0,5235,5238,5,582,0,0,5236,5238,
		7,85,0,0,5237,5234,1,0,0,0,5237,5236,1,0,0,0,5237,5238,1,0,0,0,5238,5255,
		1,0,0,0,5239,5240,5,315,0,0,5240,5255,5,582,0,0,5241,5244,5,477,0,0,5242,
		5245,5,109,0,0,5243,5245,3,606,303,0,5244,5242,1,0,0,0,5244,5243,1,0,0,
		0,5245,5255,1,0,0,0,5246,5247,5,522,0,0,5247,5255,5,645,0,0,5248,5250,
		5,59,0,0,5249,5251,5,500,0,0,5250,5249,1,0,0,0,5250,5251,1,0,0,0,5251,
		5255,1,0,0,0,5252,5253,7,86,0,0,5253,5255,5,668,0,0,5254,5222,1,0,0,0,
		5254,5224,1,0,0,0,5254,5228,1,0,0,0,5254,5229,1,0,0,0,5254,5231,1,0,0,
		0,5254,5233,1,0,0,0,5254,5239,1,0,0,0,5254,5241,1,0,0,0,5254,5246,1,0,
		0,0,5254,5248,1,0,0,0,5254,5252,1,0,0,0,5255,673,1,0,0,0,5256,5259,5,16,
		0,0,5257,5258,5,28,0,0,5258,5260,5,16,0,0,5259,5257,1,0,0,0,5259,5260,
		1,0,0,0,5260,5273,1,0,0,0,5261,5264,3,1342,671,0,5262,5263,5,28,0,0,5263,
		5265,5,16,0,0,5264,5262,1,0,0,0,5264,5265,1,0,0,0,5265,5273,1,0,0,0,5266,
		5273,3,1386,693,0,5267,5268,4,337,59,0,5268,5269,3,1342,671,0,5269,5270,
		5,28,0,0,5270,5271,3,1386,693,0,5271,5273,1,0,0,0,5272,5256,1,0,0,0,5272,
		5261,1,0,0,0,5272,5266,1,0,0,0,5272,5267,1,0,0,0,5273,675,1,0,0,0,5274,
		5281,3,678,339,0,5275,5277,5,62,0,0,5276,5275,1,0,0,0,5276,5277,1,0,0,
		0,5277,5278,1,0,0,0,5278,5280,3,678,339,0,5279,5276,1,0,0,0,5280,5283,
		1,0,0,0,5281,5279,1,0,0,0,5281,5282,1,0,0,0,5282,677,1,0,0,0,5283,5281,
		1,0,0,0,5284,5285,5,107,0,0,5285,5291,3,1444,722,0,5286,5287,5,290,0,0,
		5287,5291,3,1444,722,0,5288,5289,5,570,0,0,5289,5291,3,1444,722,0,5290,
		5284,1,0,0,0,5290,5286,1,0,0,0,5290,5288,1,0,0,0,5291,679,1,0,0,0,5292,
		5293,5,248,0,0,5293,5306,5,410,0,0,5294,5303,4,340,60,0,5295,5296,5,348,
		0,0,5296,5304,3,1422,711,0,5297,5298,5,352,0,0,5298,5304,3,1422,711,0,
		5299,5300,5,347,0,0,5300,5304,3,1422,711,0,5301,5302,5,353,0,0,5302,5304,
		3,1422,711,0,5303,5295,1,0,0,0,5303,5297,1,0,0,0,5303,5299,1,0,0,0,5303,
		5301,1,0,0,0,5304,5306,1,0,0,0,5305,5292,1,0,0,0,5305,5294,1,0,0,0,5306,
		681,1,0,0,0,5307,5308,5,520,0,0,5308,5309,5,668,0,0,5309,5331,3,684,342,
		0,5310,5311,5,520,0,0,5311,5312,5,668,0,0,5312,5331,7,87,0,0,5313,5314,
		5,520,0,0,5314,5315,5,167,0,0,5315,5319,5,668,0,0,5316,5320,3,684,342,
		0,5317,5320,5,390,0,0,5318,5320,5,58,0,0,5319,5316,1,0,0,0,5319,5317,1,
		0,0,0,5319,5318,1,0,0,0,5320,5321,1,0,0,0,5321,5322,5,600,0,0,5322,5331,
		3,684,342,0,5323,5324,5,520,0,0,5324,5325,5,668,0,0,5325,5328,5,58,0,0,
		5326,5327,5,672,0,0,5327,5329,3,684,342,0,5328,5326,1,0,0,0,5328,5329,
		1,0,0,0,5329,5331,1,0,0,0,5330,5307,1,0,0,0,5330,5310,1,0,0,0,5330,5313,
		1,0,0,0,5330,5323,1,0,0,0,5331,683,1,0,0,0,5332,5337,3,686,343,0,5333,
		5334,5,29,0,0,5334,5336,3,686,343,0,5335,5333,1,0,0,0,5336,5339,1,0,0,
		0,5337,5335,1,0,0,0,5337,5338,1,0,0,0,5338,685,1,0,0,0,5339,5337,1,0,0,
		0,5340,5342,3,1474,737,0,5341,5343,3,986,493,0,5342,5341,1,0,0,0,5342,
		5343,1,0,0,0,5343,687,1,0,0,0,5344,5346,5,61,0,0,5345,5347,3,1318,659,
		0,5346,5345,1,0,0,0,5346,5347,1,0,0,0,5347,5348,1,0,0,0,5348,5349,5,584,
		0,0,5349,5351,3,1388,694,0,5350,5352,3,696,348,0,5351,5350,1,0,0,0,5351,
		5352,1,0,0,0,5352,5387,1,0,0,0,5353,5354,5,106,0,0,5354,5355,5,584,0,0,
		5355,5359,3,1388,694,0,5356,5358,3,698,349,0,5357,5356,1,0,0,0,5358,5361,
		1,0,0,0,5359,5357,1,0,0,0,5359,5360,1,0,0,0,5360,5387,1,0,0,0,5361,5359,
		1,0,0,0,5362,5363,5,105,0,0,5363,5364,5,584,0,0,5364,5366,3,1388,694,0,
		5365,5367,7,88,0,0,5366,5365,1,0,0,0,5366,5367,1,0,0,0,5367,5387,1,0,0,
		0,5368,5370,5,407,0,0,5369,5371,3,1318,659,0,5370,5369,1,0,0,0,5370,5371,
		1,0,0,0,5371,5372,1,0,0,0,5372,5373,5,584,0,0,5373,5387,3,1388,694,0,5374,
		5376,5,473,0,0,5375,5377,3,1318,659,0,5376,5375,1,0,0,0,5376,5377,1,0,
		0,0,5377,5378,1,0,0,0,5378,5379,5,584,0,0,5379,5383,3,1388,694,0,5380,
		5382,3,700,350,0,5381,5380,1,0,0,0,5382,5385,1,0,0,0,5383,5381,1,0,0,0,
		5383,5384,1,0,0,0,5384,5387,1,0,0,0,5385,5383,1,0,0,0,5386,5344,1,0,0,
		0,5386,5353,1,0,0,0,5386,5362,1,0,0,0,5386,5368,1,0,0,0,5386,5374,1,0,
		0,0,5387,689,1,0,0,0,5388,5389,4,345,61,0,5389,5390,7,89,0,0,5390,5391,
		5,624,0,0,5391,691,1,0,0,0,5392,5394,3,694,347,0,5393,5392,1,0,0,0,5393,
		5394,1,0,0,0,5394,5396,1,0,0,0,5395,5397,3,690,345,0,5396,5395,1,0,0,0,
		5396,5397,1,0,0,0,5397,5403,1,0,0,0,5398,5399,4,346,62,0,5399,5400,5,631,
		0,0,5400,5401,5,154,0,0,5401,5403,3,1442,721,0,5402,5393,1,0,0,0,5402,
		5398,1,0,0,0,5403,693,1,0,0,0,5404,5405,4,347,63,0,5405,5406,5,654,0,0,
		5406,5407,5,3,0,0,5407,5408,5,684,0,0,5408,695,1,0,0,0,5409,5410,5,624,
		0,0,5410,5411,5,683,0,0,5411,5412,5,402,0,0,5412,5413,3,1412,706,0,5413,
		5414,3,692,346,0,5414,5420,1,0,0,0,5415,5416,5,185,0,0,5416,5417,5,683,
		0,0,5417,5418,5,402,0,0,5418,5420,3,1412,706,0,5419,5409,1,0,0,0,5419,
		5415,1,0,0,0,5420,697,1,0,0,0,5421,5422,5,233,0,0,5422,5425,5,625,0,0,
		5423,5425,7,90,0,0,5424,5421,1,0,0,0,5424,5423,1,0,0,0,5425,699,1,0,0,
		0,5426,5427,7,91,0,0,5427,701,1,0,0,0,5428,5440,5,617,0,0,5429,5430,5,
		429,0,0,5430,5441,3,1400,700,0,5431,5432,5,673,0,0,5432,5437,3,1402,701,
		0,5433,5434,5,29,0,0,5434,5436,3,1402,701,0,5435,5433,1,0,0,0,5436,5439,
		1,0,0,0,5437,5435,1,0,0,0,5437,5438,1,0,0,0,5438,5441,1,0,0,0,5439,5437,
		1,0,0,0,5440,5429,1,0,0,0,5440,5431,1,0,0,0,5441,703,1,0,0,0,5442,5453,
		5,278,0,0,5443,5444,5,429,0,0,5444,5445,3,1410,705,0,5445,5446,5,532,0,
		0,5446,5447,3,1442,721,0,5447,5454,1,0,0,0,5448,5449,5,673,0,0,5449,5451,
		3,1452,726,0,5450,5452,3,712,356,0,5451,5450,1,0,0,0,5451,5452,1,0,0,0,
		5452,5454,1,0,0,0,5453,5443,1,0,0,0,5453,5448,1,0,0,0,5454,705,1,0,0,0,
		5455,5456,7,92,0,0,5456,707,1,0,0,0,5457,5460,3,910,455,0,5458,5460,5,
		402,0,0,5459,5457,1,0,0,0,5459,5458,1,0,0,0,5460,709,1,0,0,0,5461,5462,
		3,706,353,0,5462,5463,3,996,498,0,5463,5464,3,1480,740,0,5464,5465,3,708,
		354,0,5465,711,1,0,0,0,5466,5467,4,356,64,0,5467,5468,5,520,0,0,5468,5473,
		3,710,355,0,5469,5470,5,29,0,0,5470,5472,3,710,355,0,5471,5469,1,0,0,0,
		5472,5475,1,0,0,0,5473,5471,1,0,0,0,5473,5474,1,0,0,0,5474,713,1,0,0,0,
		5475,5473,1,0,0,0,5476,5477,5,520,0,0,5477,5478,3,716,358,0,5478,715,1,
		0,0,0,5479,5480,3,726,363,0,5480,5481,3,724,362,0,5481,5530,1,0,0,0,5482,
		5483,5,602,0,0,5483,5530,3,718,359,0,5484,5485,3,1482,741,0,5485,5486,
		3,730,365,0,5486,5530,1,0,0,0,5487,5490,5,425,0,0,5488,5489,5,233,0,0,
		5489,5491,3,1310,655,0,5490,5488,1,0,0,0,5490,5491,1,0,0,0,5491,5492,1,
		0,0,0,5492,5513,3,1480,740,0,5493,5495,3,1444,722,0,5494,5496,3,1306,653,
		0,5495,5494,1,0,0,0,5495,5496,1,0,0,0,5496,5498,1,0,0,0,5497,5499,3,1298,
		649,0,5498,5497,1,0,0,0,5498,5499,1,0,0,0,5499,5514,1,0,0,0,5500,5502,
		3,1444,722,0,5501,5503,3,1306,653,0,5502,5501,1,0,0,0,5502,5503,1,0,0,
		0,5503,5505,1,0,0,0,5504,5506,3,1298,649,0,5505,5504,1,0,0,0,5505,5506,
		1,0,0,0,5506,5514,1,0,0,0,5507,5508,4,358,65,0,5508,5509,5,425,0,0,5509,
		5510,5,32,0,0,5510,5511,3,1444,722,0,5511,5512,5,33,0,0,5512,5514,1,0,
		0,0,5513,5493,1,0,0,0,5513,5500,1,0,0,0,5513,5507,1,0,0,0,5514,5530,1,
		0,0,0,5515,5516,4,358,66,0,5516,5519,5,425,0,0,5517,5518,5,233,0,0,5518,
		5520,3,1310,655,0,5519,5517,1,0,0,0,5519,5520,1,0,0,0,5520,5521,1,0,0,
		0,5521,5522,5,600,0,0,5522,5524,5,743,0,0,5523,5525,3,1306,653,0,5524,
		5523,1,0,0,0,5524,5525,1,0,0,0,5525,5527,1,0,0,0,5526,5528,3,1298,649,
		0,5527,5526,1,0,0,0,5527,5528,1,0,0,0,5528,5530,1,0,0,0,5529,5479,1,0,
		0,0,5529,5482,1,0,0,0,5529,5484,1,0,0,0,5529,5487,1,0,0,0,5529,5515,1,
		0,0,0,5530,717,1,0,0,0,5531,5533,3,720,360,0,5532,5534,3,722,361,0,5533,
		5532,1,0,0,0,5533,5534,1,0,0,0,5534,5541,1,0,0,0,5535,5538,3,722,361,0,
		5536,5537,5,29,0,0,5537,5539,3,720,360,0,5538,5536,1,0,0,0,5538,5539,1,
		0,0,0,5539,5541,1,0,0,0,5540,5531,1,0,0,0,5540,5535,1,0,0,0,5541,719,1,
		0,0,0,5542,5543,5,454,0,0,5543,5544,7,42,0,0,5544,721,1,0,0,0,5545,5546,
		5,289,0,0,5546,5552,5,305,0,0,5547,5548,5,474,0,0,5548,5553,5,454,0,0,
		5549,5550,5,454,0,0,5550,5553,7,93,0,0,5551,5553,5,515,0,0,5552,5547,1,
		0,0,0,5552,5549,1,0,0,0,5552,5551,1,0,0,0,5553,723,1,0,0,0,5554,5555,5,
		29,0,0,5555,5557,3,728,364,0,5556,5554,1,0,0,0,5557,5560,1,0,0,0,5558,
		5556,1,0,0,0,5558,5559,1,0,0,0,5559,725,1,0,0,0,5560,5558,1,0,0,0,5561,
		5562,3,996,498,0,5562,5563,3,1480,740,0,5563,5564,3,734,367,0,5564,5583,
		1,0,0,0,5565,5583,3,1264,632,0,5566,5567,3,986,493,0,5567,5568,3,1480,
		740,0,5568,5569,3,910,455,0,5569,5583,1,0,0,0,5570,5580,5,380,0,0,5571,
		5572,3,1480,740,0,5572,5573,3,910,455,0,5573,5581,1,0,0,0,5574,5576,3,
		1192,596,0,5575,5577,3,1252,626,0,5576,5575,1,0,0,0,5576,5577,1,0,0,0,
		5577,5581,1,0,0,0,5578,5579,4,363,67,0,5579,5581,5,167,0,0,5580,5571,1,
		0,0,0,5580,5574,1,0,0,0,5580,5578,1,0,0,0,5581,5583,1,0,0,0,5582,5561,
		1,0,0,0,5582,5565,1,0,0,0,5582,5566,1,0,0,0,5582,5570,1,0,0,0,5583,727,
		1,0,0,0,5584,5585,3,1482,741,0,5585,5586,3,996,498,0,5586,5587,3,1480,
		740,0,5587,5588,3,734,367,0,5588,5591,1,0,0,0,5589,5591,3,726,363,0,5590,
		5584,1,0,0,0,5590,5589,1,0,0,0,5591,729,1,0,0,0,5592,5593,3,732,366,0,
		5593,5594,3,724,362,0,5594,5598,1,0,0,0,5595,5596,5,602,0,0,5596,5598,
		3,718,359,0,5597,5592,1,0,0,0,5597,5595,1,0,0,0,5598,731,1,0,0,0,5599,
		5600,3,996,498,0,5600,5601,3,1480,740,0,5601,5602,3,734,367,0,5602,733,
		1,0,0,0,5603,5611,3,910,455,0,5604,5611,5,167,0,0,5605,5611,5,402,0,0,
		5606,5611,5,58,0,0,5607,5611,5,78,0,0,5608,5611,5,504,0,0,5609,5611,5,
		719,0,0,5610,5603,1,0,0,0,5610,5604,1,0,0,0,5610,5605,1,0,0,0,5610,5606,
		1,0,0,0,5610,5607,1,0,0,0,5610,5608,1,0,0,0,5610,5609,1,0,0,0,5611,735,
		1,0,0,0,5612,5613,5,522,0,0,5613,5615,5,152,0,0,5614,5616,3,1314,657,0,
		5615,5614,1,0,0,0,5615,5616,1,0,0,0,5616,737,1,0,0,0,5617,5619,5,522,0,
		0,5618,5620,3,828,414,0,5619,5618,1,0,0,0,5619,5620,1,0,0,0,5620,5621,
		1,0,0,0,5621,5623,5,582,0,0,5622,5624,3,834,417,0,5623,5622,1,0,0,0,5623,
		5624,1,0,0,0,5624,5626,1,0,0,0,5625,5627,3,1314,657,0,5626,5625,1,0,0,
		0,5626,5627,1,0,0,0,5627,739,1,0,0,0,5628,5630,5,522,0,0,5629,5631,5,237,
		0,0,5630,5629,1,0,0,0,5630,5631,1,0,0,0,5631,5632,1,0,0,0,5632,5634,5,
		603,0,0,5633,5635,3,834,417,0,5634,5633,1,0,0,0,5634,5635,1,0,0,0,5635,
		5637,1,0,0,0,5636,5638,3,1314,657,0,5637,5636,1,0,0,0,5637,5638,1,0,0,
		0,5638,741,1,0,0,0,5639,5640,5,522,0,0,5640,5642,5,205,0,0,5641,5643,3,
		834,417,0,5642,5641,1,0,0,0,5642,5643,1,0,0,0,5643,5645,1,0,0,0,5644,5646,
		3,1314,657,0,5645,5644,1,0,0,0,5645,5646,1,0,0,0,5646,743,1,0,0,0,5647,
		5648,5,522,0,0,5648,5649,5,584,0,0,5649,5651,5,558,0,0,5650,5652,3,834,
		417,0,5651,5650,1,0,0,0,5651,5652,1,0,0,0,5652,5654,1,0,0,0,5653,5655,
		3,1314,657,0,5654,5653,1,0,0,0,5654,5655,1,0,0,0,5655,745,1,0,0,0,5656,
		5657,5,522,0,0,5657,5658,5,406,0,0,5658,5660,5,582,0,0,5659,5661,3,834,
		417,0,5660,5659,1,0,0,0,5660,5661,1,0,0,0,5661,5663,1,0,0,0,5662,5664,
		3,1314,657,0,5663,5662,1,0,0,0,5663,5664,1,0,0,0,5664,747,1,0,0,0,5665,
		5666,4,374,68,0,5666,5667,5,522,0,0,5667,5668,5,808,0,0,5668,5669,3,4,
		2,0,5669,749,1,0,0,0,5670,5671,5,522,0,0,5671,5672,5,427,0,0,5672,751,
		1,0,0,0,5673,5674,5,522,0,0,5674,5675,5,199,0,0,5675,5676,3,830,415,0,
		5676,5677,5,317,0,0,5677,753,1,0,0,0,5678,5679,5,522,0,0,5679,5680,5,199,
		0,0,5680,5681,3,830,415,0,5681,5682,5,378,0,0,5682,755,1,0,0,0,5683,5684,
		5,522,0,0,5684,5685,5,199,0,0,5685,5686,3,830,415,0,5686,5687,5,558,0,
		0,5687,757,1,0,0,0,5688,5690,5,522,0,0,5689,5691,3,828,414,0,5690,5689,
		1,0,0,0,5690,5691,1,0,0,0,5691,5692,1,0,0,0,5692,5693,5,115,0,0,5693,5694,
		7,94,0,0,5694,5696,3,1386,693,0,5695,5697,3,834,417,0,5696,5695,1,0,0,
		0,5696,5697,1,0,0,0,5697,5699,1,0,0,0,5698,5700,3,1314,657,0,5699,5698,
		1,0,0,0,5699,5700,1,0,0,0,5700,759,1,0,0,0,5701,5702,5,522,0,0,5702,5703,
		7,46,0,0,5703,5704,5,317,0,0,5704,761,1,0,0,0,5705,5706,5,522,0,0,5706,
		5707,5,78,0,0,5707,5708,5,809,0,0,5708,5709,5,558,0,0,5709,763,1,0,0,0,
		5710,5715,5,522,0,0,5711,5712,3,606,303,0,5712,5713,5,258,0,0,5713,5716,
		1,0,0,0,5714,5716,5,764,0,0,5715,5711,1,0,0,0,5715,5714,1,0,0,0,5716,765,
		1,0,0,0,5717,5718,5,522,0,0,5718,5719,5,79,0,0,5719,5722,5,205,0,0,5720,
		5721,5,283,0,0,5721,5723,3,1444,722,0,5722,5720,1,0,0,0,5722,5723,1,0,
		0,0,5723,5726,1,0,0,0,5724,5725,5,236,0,0,5725,5727,3,1426,713,0,5726,
		5724,1,0,0,0,5726,5727,1,0,0,0,5727,5729,1,0,0,0,5728,5730,3,316,158,0,
		5729,5728,1,0,0,0,5729,5730,1,0,0,0,5730,5732,1,0,0,0,5731,5733,3,1034,
		517,0,5732,5731,1,0,0,0,5732,5733,1,0,0,0,5733,767,1,0,0,0,5734,5735,5,
		522,0,0,5735,5736,5,464,0,0,5736,5739,5,205,0,0,5737,5738,5,283,0,0,5738,
		5740,3,1444,722,0,5739,5737,1,0,0,0,5739,5740,1,0,0,0,5740,5743,1,0,0,
		0,5741,5742,5,236,0,0,5742,5744,3,1426,713,0,5743,5741,1,0,0,0,5743,5744,
		1,0,0,0,5744,5746,1,0,0,0,5745,5747,3,316,158,0,5746,5745,1,0,0,0,5746,
		5747,1,0,0,0,5747,5749,1,0,0,0,5748,5750,3,1034,517,0,5749,5748,1,0,0,
		0,5749,5750,1,0,0,0,5750,769,1,0,0,0,5751,5753,5,522,0,0,5752,5754,5,216,
		0,0,5753,5752,1,0,0,0,5753,5754,1,0,0,0,5754,5755,1,0,0,0,5755,5756,7,
		95,0,0,5756,5757,3,832,416,0,5757,5759,3,1386,693,0,5758,5760,3,834,417,
		0,5759,5758,1,0,0,0,5759,5760,1,0,0,0,5760,5762,1,0,0,0,5761,5763,3,392,
		196,0,5762,5761,1,0,0,0,5762,5763,1,0,0,0,5763,771,1,0,0,0,5764,5766,5,
		522,0,0,5765,5767,5,564,0,0,5766,5765,1,0,0,0,5766,5767,1,0,0,0,5767,5768,
		1,0,0,0,5768,5769,5,198,0,0,5769,773,1,0,0,0,5770,5771,5,522,0,0,5771,
		5772,5,138,0,0,5772,5773,5,32,0,0,5773,5774,5,16,0,0,5774,5775,5,33,0,
		0,5775,5776,5,648,0,0,5776,775,1,0,0,0,5777,5778,5,522,0,0,5778,5779,5,
		138,0,0,5779,5780,5,32,0,0,5780,5781,5,16,0,0,5781,5782,5,33,0,0,5782,
		5783,5,202,0,0,5783,777,1,0,0,0,5784,5785,5,522,0,0,5785,5787,5,648,0,
		0,5786,5788,3,316,158,0,5787,5786,1,0,0,0,5787,5788,1,0,0,0,5788,779,1,
		0,0,0,5789,5790,5,522,0,0,5790,5792,5,202,0,0,5791,5793,3,316,158,0,5792,
		5791,1,0,0,0,5792,5793,1,0,0,0,5793,781,1,0,0,0,5794,5795,5,522,0,0,5795,
		5796,5,445,0,0,5796,783,1,0,0,0,5797,5798,5,522,0,0,5798,5800,5,444,0,
		0,5799,5801,3,836,418,0,5800,5799,1,0,0,0,5800,5801,1,0,0,0,5801,5805,
		1,0,0,0,5802,5803,5,233,0,0,5803,5804,5,449,0,0,5804,5806,5,3,0,0,5805,
		5802,1,0,0,0,5805,5806,1,0,0,0,5806,5808,1,0,0,0,5807,5809,3,316,158,0,
		5808,5807,1,0,0,0,5808,5809,1,0,0,0,5809,785,1,0,0,0,5810,5812,5,522,0,
		0,5811,5813,3,1482,741,0,5812,5811,1,0,0,0,5812,5813,1,0,0,0,5813,5814,
		1,0,0,0,5814,5816,5,558,0,0,5815,5817,3,1314,657,0,5816,5815,1,0,0,0,5816,
		5817,1,0,0,0,5817,787,1,0,0,0,5818,5820,5,522,0,0,5819,5821,5,237,0,0,
		5820,5819,1,0,0,0,5820,5821,1,0,0,0,5821,5822,1,0,0,0,5822,5823,5,443,
		0,0,5823,789,1,0,0,0,5824,5826,5,522,0,0,5825,5827,3,1482,741,0,5826,5825,
		1,0,0,0,5826,5827,1,0,0,0,5827,5828,1,0,0,0,5828,5830,5,640,0,0,5829,5831,
		3,1314,657,0,5830,5829,1,0,0,0,5830,5831,1,0,0,0,5831,791,1,0,0,0,5832,
		5833,5,522,0,0,5833,5835,3,1010,505,0,5834,5836,3,1314,657,0,5835,5834,
		1,0,0,0,5835,5836,1,0,0,0,5836,793,1,0,0,0,5837,5838,5,522,0,0,5838,5840,
		5,114,0,0,5839,5841,3,1314,657,0,5840,5839,1,0,0,0,5840,5841,1,0,0,0,5841,
		795,1,0,0,0,5842,5843,5,522,0,0,5843,5844,5,440,0,0,5844,797,1,0,0,0,5845,
		5846,5,522,0,0,5846,5853,5,249,0,0,5847,5848,5,233,0,0,5848,5851,3,1310,
		655,0,5849,5850,5,631,0,0,5850,5852,3,1274,637,0,5851,5849,1,0,0,0,5851,
		5852,1,0,0,0,5852,5854,1,0,0,0,5853,5847,1,0,0,0,5853,5854,1,0,0,0,5854,
		799,1,0,0,0,5855,5856,5,522,0,0,5856,5857,5,140,0,0,5857,5859,5,151,0,
		0,5858,5860,3,1244,622,0,5859,5858,1,0,0,0,5859,5860,1,0,0,0,5860,5861,
		1,0,0,0,5861,5862,3,1342,671,0,5862,801,1,0,0,0,5863,5864,5,522,0,0,5864,
		5865,5,140,0,0,5865,5866,5,584,0,0,5866,5867,3,1386,693,0,5867,803,1,0,
		0,0,5868,5869,5,522,0,0,5869,5870,5,140,0,0,5870,5871,5,645,0,0,5871,5872,
		3,1358,679,0,5872,805,1,0,0,0,5873,5874,5,522,0,0,5874,5875,5,342,0,0,
		5875,5876,5,558,0,0,5876,807,1,0,0,0,5877,5878,5,522,0,0,5878,5879,3,606,
		303,0,5879,5881,5,558,0,0,5880,5882,3,1034,517,0,5881,5880,1,0,0,0,5881,
		5882,1,0,0,0,5882,809,1,0,0,0,5883,5884,5,522,0,0,5884,5885,5,140,0,0,
		5885,5886,5,441,0,0,5886,5887,3,1346,673,0,5887,811,1,0,0,0,5888,5889,
		5,522,0,0,5889,5890,5,140,0,0,5890,5891,5,239,0,0,5891,5892,3,1350,675,
		0,5892,813,1,0,0,0,5893,5894,5,522,0,0,5894,5895,5,140,0,0,5895,5896,5,
		604,0,0,5896,5897,3,1354,677,0,5897,815,1,0,0,0,5898,5899,5,522,0,0,5899,
		5900,5,140,0,0,5900,5901,5,441,0,0,5901,5903,5,558,0,0,5902,5904,3,1314,
		657,0,5903,5902,1,0,0,0,5903,5904,1,0,0,0,5904,817,1,0,0,0,5905,5906,5,
		522,0,0,5906,5907,5,140,0,0,5907,5908,5,239,0,0,5908,5910,5,558,0,0,5909,
		5911,3,1314,657,0,5910,5909,1,0,0,0,5910,5911,1,0,0,0,5911,819,1,0,0,0,
		5912,5913,5,522,0,0,5913,5914,5,140,0,0,5914,5915,5,441,0,0,5915,5916,
		5,112,0,0,5916,5917,3,1346,673,0,5917,821,1,0,0,0,5918,5919,5,522,0,0,
		5919,5920,5,140,0,0,5920,5921,5,239,0,0,5921,5922,5,112,0,0,5922,5923,
		3,1350,675,0,5923,823,1,0,0,0,5924,5925,5,522,0,0,5925,5926,5,140,0,0,
		5926,5927,5,206,0,0,5927,5928,3,1370,685,0,5928,825,1,0,0,0,5929,5930,
		5,522,0,0,5930,5931,5,140,0,0,5931,5932,5,628,0,0,5932,5933,3,1310,655,
		0,5933,827,1,0,0,0,5934,5940,5,237,0,0,5935,5937,5,216,0,0,5936,5938,5,
		237,0,0,5937,5936,1,0,0,0,5937,5938,1,0,0,0,5938,5940,1,0,0,0,5939,5934,
		1,0,0,0,5939,5935,1,0,0,0,5940,829,1,0,0,0,5941,5944,3,1378,689,0,5942,
		5944,5,58,0,0,5943,5941,1,0,0,0,5943,5942,1,0,0,0,5944,831,1,0,0,0,5945,
		5946,7,94,0,0,5946,833,1,0,0,0,5947,5948,3,832,416,0,5948,5949,3,1410,
		705,0,5949,835,1,0,0,0,5950,5955,3,838,419,0,5951,5952,5,29,0,0,5952,5954,
		3,838,419,0,5953,5951,1,0,0,0,5954,5957,1,0,0,0,5955,5953,1,0,0,0,5955,
		5956,1,0,0,0,5956,837,1,0,0,0,5957,5955,1,0,0,0,5958,5959,5,85,0,0,5959,
		5966,5,286,0,0,5960,5961,5,135,0,0,5961,5966,5,579,0,0,5962,5963,5,419,
		0,0,5963,5966,5,221,0,0,5964,5966,7,96,0,0,5965,5958,1,0,0,0,5965,5960,
		1,0,0,0,5965,5962,1,0,0,0,5965,5964,1,0,0,0,5966,839,1,0,0,0,5967,5968,
		5,79,0,0,5968,6004,3,1448,724,0,5969,5970,5,92,0,0,5970,5971,5,269,0,0,
		5971,5972,3,842,421,0,5972,5975,5,283,0,0,5973,5976,3,1410,705,0,5974,
		5976,5,167,0,0,5975,5973,1,0,0,0,5975,5974,1,0,0,0,5976,6004,1,0,0,0,5977,
		5979,5,229,0,0,5978,5980,3,1318,659,0,5979,5978,1,0,0,0,5979,5980,1,0,
		0,0,5980,5990,1,0,0,0,5981,5991,3,860,430,0,5982,5987,3,856,428,0,5983,
		5984,5,29,0,0,5984,5986,3,856,428,0,5985,5983,1,0,0,0,5986,5989,1,0,0,
		0,5987,5985,1,0,0,0,5987,5988,1,0,0,0,5988,5991,1,0,0,0,5989,5987,1,0,
		0,0,5990,5981,1,0,0,0,5990,5982,1,0,0,0,5991,6004,1,0,0,0,5992,5994,5,
		297,0,0,5993,5995,7,97,0,0,5994,5993,1,0,0,0,5994,5995,1,0,0,0,5995,5996,
		1,0,0,0,5996,6004,3,910,455,0,5997,5998,5,312,0,0,5998,5999,5,269,0,0,
		5999,6000,5,280,0,0,6000,6001,5,92,0,0,6001,6004,3,864,432,0,6002,6004,
		5,523,0,0,6003,5967,1,0,0,0,6003,5969,1,0,0,0,6003,5977,1,0,0,0,6003,5992,
		1,0,0,0,6003,5997,1,0,0,0,6003,6002,1,0,0,0,6004,841,1,0,0,0,6005,6008,
		3,844,422,0,6006,6008,3,848,424,0,6007,6005,1,0,0,0,6007,6006,1,0,0,0,
		6008,843,1,0,0,0,6009,6014,3,846,423,0,6010,6011,5,29,0,0,6011,6013,3,
		846,423,0,6012,6010,1,0,0,0,6013,6016,1,0,0,0,6014,6012,1,0,0,0,6014,6015,
		1,0,0,0,6015,845,1,0,0,0,6016,6014,1,0,0,0,6017,6019,3,1386,693,0,6018,
		6020,3,850,425,0,6019,6018,1,0,0,0,6019,6020,1,0,0,0,6020,847,1,0,0,0,
		6021,6022,3,1386,693,0,6022,6023,5,424,0,0,6023,6024,5,32,0,0,6024,6025,
		3,56,28,0,6025,6027,5,33,0,0,6026,6028,3,850,425,0,6027,6026,1,0,0,0,6027,
		6028,1,0,0,0,6028,849,1,0,0,0,6029,6030,3,442,221,0,6030,6032,5,32,0,0,
		6031,6033,3,854,427,0,6032,6031,1,0,0,0,6032,6033,1,0,0,0,6033,6034,1,
		0,0,0,6034,6035,5,33,0,0,6035,851,1,0,0,0,6036,6039,3,1410,705,0,6037,
		6039,5,439,0,0,6038,6036,1,0,0,0,6038,6037,1,0,0,0,6039,853,1,0,0,0,6040,
		6045,3,852,426,0,6041,6042,5,29,0,0,6042,6044,3,852,426,0,6043,6041,1,
		0,0,0,6044,6047,1,0,0,0,6045,6043,1,0,0,0,6045,6046,1,0,0,0,6046,855,1,
		0,0,0,6047,6045,1,0,0,0,6048,6060,7,98,0,0,6049,6051,3,858,429,0,6050,
		6049,1,0,0,0,6050,6051,1,0,0,0,6051,6052,1,0,0,0,6052,6060,5,317,0,0,6053,
		6054,5,463,0,0,6054,6056,5,317,0,0,6055,6057,3,1034,517,0,6056,6055,1,
		0,0,0,6056,6057,1,0,0,0,6057,6060,1,0,0,0,6058,6060,5,408,0,0,6059,6048,
		1,0,0,0,6059,6050,1,0,0,0,6059,6053,1,0,0,0,6059,6058,1,0,0,0,6060,857,
		1,0,0,0,6061,6062,7,99,0,0,6062,859,1,0,0,0,6063,6071,7,17,0,0,6064,6065,
		5,654,0,0,6065,6066,5,454,0,0,6066,6072,5,315,0,0,6067,6069,3,1412,706,
		0,6068,6070,3,862,431,0,6069,6068,1,0,0,0,6069,6070,1,0,0,0,6070,6072,
		1,0,0,0,6071,6064,1,0,0,0,6071,6067,1,0,0,0,6071,6072,1,0,0,0,6072,861,
		1,0,0,0,6073,6074,5,233,0,0,6074,6079,5,215,0,0,6075,6076,5,654,0,0,6076,
		6077,5,454,0,0,6077,6079,5,315,0,0,6078,6073,1,0,0,0,6078,6075,1,0,0,0,
		6079,863,1,0,0,0,6080,6081,3,1386,693,0,6081,6083,3,870,435,0,6082,6084,
		3,850,425,0,6083,6082,1,0,0,0,6083,6084,1,0,0,0,6084,6087,1,0,0,0,6085,
		6086,5,265,0,0,6086,6088,5,301,0,0,6087,6085,1,0,0,0,6087,6088,1,0,0,0,
		6088,6091,1,0,0,0,6089,6091,3,866,433,0,6090,6080,1,0,0,0,6090,6089,1,
		0,0,0,6091,865,1,0,0,0,6092,6097,3,868,434,0,6093,6094,5,29,0,0,6094,6096,
		3,868,434,0,6095,6093,1,0,0,0,6096,6099,1,0,0,0,6097,6095,1,0,0,0,6097,
		6098,1,0,0,0,6098,867,1,0,0,0,6099,6097,1,0,0,0,6100,6102,3,1386,693,0,
		6101,6103,3,850,425,0,6102,6101,1,0,0,0,6102,6103,1,0,0,0,6103,6106,1,
		0,0,0,6104,6105,5,265,0,0,6105,6107,5,301,0,0,6106,6104,1,0,0,0,6106,6107,
		1,0,0,0,6107,869,1,0,0,0,6108,6109,5,424,0,0,6109,6110,5,32,0,0,6110,6111,
		3,56,28,0,6111,6112,5,33,0,0,6112,871,1,0,0,0,6113,6118,3,874,437,0,6114,
		6118,3,884,442,0,6115,6118,3,886,443,0,6116,6118,3,890,445,0,6117,6113,
		1,0,0,0,6117,6114,1,0,0,0,6117,6115,1,0,0,0,6117,6116,1,0,0,0,6118,873,
		1,0,0,0,6119,6120,5,140,0,0,6120,6121,5,718,0,0,6121,6122,5,250,0,0,6122,
		6123,3,1410,705,0,6123,6125,5,609,0,0,6124,6126,3,1480,740,0,6125,6124,
		1,0,0,0,6125,6126,1,0,0,0,6126,6127,1,0,0,0,6127,6129,7,100,0,0,6128,6130,
		3,876,438,0,6129,6128,1,0,0,0,6129,6130,1,0,0,0,6130,6132,1,0,0,0,6131,
		6133,3,880,440,0,6132,6131,1,0,0,0,6132,6133,1,0,0,0,6133,6135,1,0,0,0,
		6134,6136,3,882,441,0,6135,6134,1,0,0,0,6135,6136,1,0,0,0,6136,875,1,0,
		0,0,6137,6139,5,720,0,0,6138,6140,3,1480,740,0,6139,6138,1,0,0,0,6139,
		6140,1,0,0,0,6140,6141,1,0,0,0,6141,6148,3,878,439,0,6142,6144,5,29,0,
		0,6143,6142,1,0,0,0,6143,6144,1,0,0,0,6144,6145,1,0,0,0,6145,6147,3,878,
		439,0,6146,6143,1,0,0,0,6147,6150,1,0,0,0,6148,6146,1,0,0,0,6148,6149,
		1,0,0,0,6149,877,1,0,0,0,6150,6148,1,0,0,0,6151,6154,5,3,0,0,6152,6153,
		5,15,0,0,6153,6155,5,3,0,0,6154,6152,1,0,0,0,6154,6155,1,0,0,0,6155,879,
		1,0,0,0,6156,6158,5,717,0,0,6157,6159,3,1480,740,0,6158,6157,1,0,0,0,6158,
		6159,1,0,0,0,6159,6160,1,0,0,0,6160,6161,5,3,0,0,6161,881,1,0,0,0,6162,
		6163,7,7,0,0,6163,883,1,0,0,0,6164,6165,5,59,0,0,6165,6166,5,718,0,0,6166,
		6167,5,250,0,0,6167,6169,3,1404,702,0,6168,6170,3,876,438,0,6169,6168,
		1,0,0,0,6169,6170,1,0,0,0,6170,6172,1,0,0,0,6171,6173,3,880,440,0,6172,
		6171,1,0,0,0,6172,6173,1,0,0,0,6173,6175,1,0,0,0,6174,6176,3,882,441,0,
		6175,6174,1,0,0,0,6175,6176,1,0,0,0,6176,6178,1,0,0,0,6177,6179,5,231,
		0,0,6178,6177,1,0,0,0,6178,6179,1,0,0,0,6179,885,1,0,0,0,6180,6181,5,520,
		0,0,6181,6182,5,718,0,0,6182,6183,5,250,0,0,6183,6186,3,1410,705,0,6184,
		6185,5,233,0,0,6185,6187,3,888,444,0,6186,6184,1,0,0,0,6186,6187,1,0,0,
		0,6187,887,1,0,0,0,6188,6195,3,1424,712,0,6189,6191,5,29,0,0,6190,6189,
		1,0,0,0,6190,6191,1,0,0,0,6191,6192,1,0,0,0,6192,6194,3,1424,712,0,6193,
		6190,1,0,0,0,6194,6197,1,0,0,0,6195,6193,1,0,0,0,6195,6196,1,0,0,0,6196,
		889,1,0,0,0,6197,6195,1,0,0,0,6198,6199,5,185,0,0,6199,6200,5,718,0,0,
		6200,6201,5,250,0,0,6201,6203,3,1404,702,0,6202,6204,5,231,0,0,6203,6202,
		1,0,0,0,6203,6204,1,0,0,0,6204,891,1,0,0,0,6205,6212,3,894,447,0,6206,
		6212,3,896,448,0,6207,6212,3,904,452,0,6208,6212,3,906,453,0,6209,6210,
		4,446,69,0,6210,6212,3,908,454,0,6211,6205,1,0,0,0,6211,6206,1,0,0,0,6211,
		6207,1,0,0,0,6211,6208,1,0,0,0,6211,6209,1,0,0,0,6212,893,1,0,0,0,6213,
		6214,7,101,0,0,6214,6217,3,1386,693,0,6215,6218,3,1444,722,0,6216,6218,
		3,1330,665,0,6217,6215,1,0,0,0,6217,6216,1,0,0,0,6217,6218,1,0,0,0,6218,
		895,1,0,0,0,6219,6221,7,101,0,0,6220,6222,3,898,449,0,6221,6220,1,0,0,
		0,6221,6222,1,0,0,0,6222,6227,1,0,0,0,6223,6224,4,448,70,0,6224,6225,5,
		233,0,0,6225,6226,5,151,0,0,6226,6228,3,1470,735,0,6227,6223,1,0,0,0,6227,
		6228,1,0,0,0,6228,6229,1,0,0,0,6229,6230,3,900,450,0,6230,897,1,0,0,0,
		6231,6232,5,234,0,0,6232,6233,5,6,0,0,6233,6236,3,1470,735,0,6234,6235,
		4,449,71,0,6235,6237,3,902,451,0,6236,6234,1,0,0,0,6236,6237,1,0,0,0,6237,
		6248,1,0,0,0,6238,6239,4,449,72,0,6239,6248,5,216,0,0,6240,6241,4,449,
		73,0,6241,6248,5,61,0,0,6242,6243,4,449,74,0,6243,6244,5,61,0,0,6244,6245,
		5,234,0,0,6245,6246,5,6,0,0,6246,6248,3,1470,735,0,6247,6231,1,0,0,0,6247,
		6238,1,0,0,0,6247,6240,1,0,0,0,6247,6242,1,0,0,0,6248,899,1,0,0,0,6249,
		6258,3,298,149,0,6250,6258,3,236,118,0,6251,6258,3,248,124,0,6252,6258,
		3,296,148,0,6253,6258,3,452,226,0,6254,6255,5,233,0,0,6255,6256,5,128,
		0,0,6256,6258,3,1424,712,0,6257,6249,1,0,0,0,6257,6250,1,0,0,0,6257,6251,
		1,0,0,0,6257,6252,1,0,0,0,6257,6253,1,0,0,0,6257,6254,1,0,0,0,6258,901,
		1,0,0,0,6259,6260,5,280,0,0,6260,6261,5,39,0,0,6261,6266,3,1470,735,0,
		6262,6263,5,280,0,0,6263,6264,5,41,0,0,6264,6266,3,1470,735,0,6265,6259,
		1,0,0,0,6265,6262,1,0,0,0,6266,903,1,0,0,0,6267,6268,5,255,0,0,6268,6269,
		3,1470,735,0,6269,905,1,0,0,0,6270,6271,5,630,0,0,6271,6272,3,1342,671,
		0,6272,907,1,0,0,0,6273,6274,5,723,0,0,6274,909,1,0,0,0,6275,6276,6,455,
		-1,0,6276,6282,3,912,456,0,6277,6279,5,288,0,0,6278,6280,3,1012,506,0,
		6279,6278,1,0,0,0,6279,6280,1,0,0,0,6280,6281,1,0,0,0,6281,6283,7,102,
		0,0,6282,6277,1,0,0,0,6282,6283,1,0,0,0,6283,6287,1,0,0,0,6284,6285,5,
		391,0,0,6285,6287,3,910,455,4,6286,6275,1,0,0,0,6286,6284,1,0,0,0,6287,
		6299,1,0,0,0,6288,6289,10,3,0,0,6289,6290,7,103,0,0,6290,6298,3,910,455,
		4,6291,6292,10,2,0,0,6292,6293,5,663,0,0,6293,6298,3,910,455,3,6294,6295,
		10,1,0,0,6295,6296,7,104,0,0,6296,6298,3,910,455,2,6297,6288,1,0,0,0,6297,
		6291,1,0,0,0,6297,6294,1,0,0,0,6298,6301,1,0,0,0,6299,6297,1,0,0,0,6299,
		6300,1,0,0,0,6300,911,1,0,0,0,6301,6299,1,0,0,0,6302,6303,6,456,-1,0,6303,
		6304,3,916,458,0,6304,6322,1,0,0,0,6305,6306,10,3,0,0,6306,6308,5,288,
		0,0,6307,6309,3,1012,506,0,6308,6307,1,0,0,0,6308,6309,1,0,0,0,6309,6310,
		1,0,0,0,6310,6321,5,396,0,0,6311,6312,10,2,0,0,6312,6313,3,914,457,0,6313,
		6314,3,916,458,0,6314,6321,1,0,0,0,6315,6316,10,1,0,0,6316,6317,3,914,
		457,0,6317,6318,7,105,0,0,6318,6319,3,312,156,0,6319,6321,1,0,0,0,6320,
		6305,1,0,0,0,6320,6311,1,0,0,0,6320,6315,1,0,0,0,6321,6324,1,0,0,0,6322,
		6320,1,0,0,0,6322,6323,1,0,0,0,6323,913,1,0,0,0,6324,6322,1,0,0,0,6325,
		6326,7,106,0,0,6326,915,1,0,0,0,6327,6341,3,920,460,0,6328,6330,3,1012,
		506,0,6329,6328,1,0,0,0,6329,6330,1,0,0,0,6330,6331,1,0,0,0,6331,6342,
		3,918,459,0,6332,6333,4,458,81,0,6333,6335,5,742,0,0,6334,6336,5,677,0,
		0,6335,6334,1,0,0,0,6335,6336,1,0,0,0,6336,6337,1,0,0,0,6337,6342,3,1024,
		512,0,6338,6339,5,533,0,0,6339,6340,5,306,0,0,6340,6342,3,920,460,0,6341,
		6329,1,0,0,0,6341,6332,1,0,0,0,6341,6338,1,0,0,0,6341,6342,1,0,0,0,6342,
		917,1,0,0,0,6343,6350,5,283,0,0,6344,6351,3,312,156,0,6345,6351,3,986,
		493,0,6346,6347,5,32,0,0,6347,6348,3,1008,504,0,6348,6349,5,33,0,0,6349,
		6351,1,0,0,0,6350,6344,1,0,0,0,6350,6345,1,0,0,0,6350,6346,1,0,0,0,6351,
		6366,1,0,0,0,6352,6353,5,76,0,0,6353,6354,3,920,460,0,6354,6355,5,62,0,
		0,6355,6356,3,916,458,0,6356,6366,1,0,0,0,6357,6358,5,306,0,0,6358,6361,
		3,922,461,0,6359,6360,5,204,0,0,6360,6362,3,922,461,0,6361,6359,1,0,0,
		0,6361,6362,1,0,0,0,6362,6366,1,0,0,0,6363,6364,5,462,0,0,6364,6366,3,
		920,460,0,6365,6343,1,0,0,0,6365,6352,1,0,0,0,6365,6357,1,0,0,0,6365,6363,
		1,0,0,0,6366,919,1,0,0,0,6367,6368,6,460,-1,0,6368,6369,3,922,461,0,6369,
		6396,1,0,0,0,6370,6371,10,7,0,0,6371,6372,5,25,0,0,6372,6395,3,920,460,
		8,6373,6374,10,6,0,0,6374,6375,7,107,0,0,6375,6395,3,920,460,7,6376,6377,
		10,5,0,0,6377,6378,7,108,0,0,6378,6395,3,920,460,6,6379,6380,10,3,0,0,
		6380,6381,7,109,0,0,6381,6395,3,920,460,4,6382,6383,10,2,0,0,6383,6384,
		5,24,0,0,6384,6395,3,920,460,3,6385,6386,10,1,0,0,6386,6387,5,27,0,0,6387,
		6395,3,920,460,2,6388,6389,10,4,0,0,6389,6390,7,108,0,0,6390,6391,5,279,
		0,0,6391,6392,3,910,455,0,6392,6393,3,1016,508,0,6393,6395,1,0,0,0,6394,
		6370,1,0,0,0,6394,6373,1,0,0,0,6394,6376,1,0,0,0,6394,6379,1,0,0,0,6394,
		6382,1,0,0,0,6394,6385,1,0,0,0,6394,6388,1,0,0,0,6395,6398,1,0,0,0,6396,
		6394,1,0,0,0,6396,6397,1,0,0,0,6397,921,1,0,0,0,6398,6396,1,0,0,0,6399,
		6400,6,461,-1,0,6400,6402,3,1330,665,0,6401,6403,3,926,463,0,6402,6401,
		1,0,0,0,6402,6403,1,0,0,0,6403,6522,1,0,0,0,6404,6522,3,960,480,0,6405,
		6522,3,980,490,0,6406,6522,3,1436,718,0,6407,6522,5,44,0,0,6408,6522,3,
		994,497,0,6409,6522,3,992,496,0,6410,6522,3,928,464,0,6411,6522,3,930,
		465,0,6412,6522,3,932,466,0,6413,6414,7,110,0,0,6414,6522,3,922,461,15,
		6415,6416,3,1014,507,0,6416,6417,3,922,461,14,6417,6522,1,0,0,0,6418,6420,
		5,504,0,0,6419,6418,1,0,0,0,6419,6420,1,0,0,0,6420,6421,1,0,0,0,6421,6422,
		5,32,0,0,6422,6423,3,1008,504,0,6423,6424,5,33,0,0,6424,6522,1,0,0,0,6425,
		6427,5,210,0,0,6426,6425,1,0,0,0,6426,6427,1,0,0,0,6427,6428,1,0,0,0,6428,
		6522,3,312,156,0,6429,6430,5,34,0,0,6430,6431,3,1410,705,0,6431,6432,3,
		910,455,0,6432,6433,5,35,0,0,6433,6522,1,0,0,0,6434,6435,5,346,0,0,6435,
		6436,3,954,477,0,6436,6437,5,55,0,0,6437,6438,5,32,0,0,6438,6440,3,920,
		460,0,6439,6441,3,958,479,0,6440,6439,1,0,0,0,6440,6441,1,0,0,0,6441,6442,
		1,0,0,0,6442,6443,5,33,0,0,6443,6522,1,0,0,0,6444,6445,5,78,0,0,6445,6522,
		3,922,461,9,6446,6447,5,97,0,0,6447,6448,5,32,0,0,6448,6451,3,910,455,
		0,6449,6450,5,68,0,0,6450,6452,5,313,0,0,6451,6449,1,0,0,0,6451,6452,1,
		0,0,0,6452,6453,1,0,0,0,6453,6454,5,64,0,0,6454,6456,3,1006,503,0,6455,
		6457,3,924,462,0,6456,6455,1,0,0,0,6456,6457,1,0,0,0,6457,6458,1,0,0,0,
		6458,6459,5,33,0,0,6459,6522,1,0,0,0,6460,6461,5,97,0,0,6461,6462,5,32,
		0,0,6462,6463,3,910,455,0,6463,6464,5,68,0,0,6464,6465,5,596,0,0,6465,
		6467,5,761,0,0,6466,6468,5,279,0,0,6467,6466,1,0,0,0,6467,6468,1,0,0,0,
		6468,6469,1,0,0,0,6469,6470,3,1442,721,0,6470,6471,5,64,0,0,6471,6472,
		5,155,0,0,6472,6473,3,1188,594,0,6473,6474,5,33,0,0,6474,6522,1,0,0,0,
		6475,6477,5,96,0,0,6476,6478,3,910,455,0,6477,6476,1,0,0,0,6477,6478,1,
		0,0,0,6478,6482,1,0,0,0,6479,6480,3,1000,500,0,6480,6481,3,1002,501,0,
		6481,6483,1,0,0,0,6482,6479,1,0,0,0,6483,6484,1,0,0,0,6484,6482,1,0,0,
		0,6484,6485,1,0,0,0,6485,6487,1,0,0,0,6486,6488,3,1004,502,0,6487,6486,
		1,0,0,0,6487,6488,1,0,0,0,6488,6489,1,0,0,0,6489,6490,5,196,0,0,6490,6522,
		1,0,0,0,6491,6492,5,137,0,0,6492,6493,5,32,0,0,6493,6494,3,910,455,0,6494,
		6495,5,29,0,0,6495,6496,3,1006,503,0,6496,6497,5,33,0,0,6497,6522,1,0,
		0,0,6498,6499,5,137,0,0,6499,6500,5,32,0,0,6500,6501,3,910,455,0,6501,
		6502,5,631,0,0,6502,6503,3,1192,596,0,6503,6504,5,33,0,0,6504,6522,1,0,
		0,0,6505,6506,5,167,0,0,6506,6507,5,32,0,0,6507,6508,3,1418,709,0,6508,
		6509,5,33,0,0,6509,6522,1,0,0,0,6510,6511,5,636,0,0,6511,6512,5,32,0,0,
		6512,6513,3,1418,709,0,6513,6514,5,33,0,0,6514,6522,1,0,0,0,6515,6516,
		5,279,0,0,6516,6517,3,910,455,0,6517,6518,3,1016,508,0,6518,6519,5,14,
		0,0,6519,6520,3,910,455,0,6520,6522,1,0,0,0,6521,6399,1,0,0,0,6521,6404,
		1,0,0,0,6521,6405,1,0,0,0,6521,6406,1,0,0,0,6521,6407,1,0,0,0,6521,6408,
		1,0,0,0,6521,6409,1,0,0,0,6521,6410,1,0,0,0,6521,6411,1,0,0,0,6521,6412,
		1,0,0,0,6521,6413,1,0,0,0,6521,6415,1,0,0,0,6521,6419,1,0,0,0,6521,6426,
		1,0,0,0,6521,6429,1,0,0,0,6521,6434,1,0,0,0,6521,6444,1,0,0,0,6521,6446,
		1,0,0,0,6521,6460,1,0,0,0,6521,6475,1,0,0,0,6521,6491,1,0,0,0,6521,6498,
		1,0,0,0,6521,6505,1,0,0,0,6521,6510,1,0,0,0,6521,6515,1,0,0,0,6522,6531,
		1,0,0,0,6523,6524,10,16,0,0,6524,6525,5,2,0,0,6525,6530,3,922,461,17,6526,
		6527,10,24,0,0,6527,6528,5,113,0,0,6528,6530,3,1470,735,0,6529,6523,1,
		0,0,0,6529,6526,1,0,0,0,6530,6533,1,0,0,0,6531,6529,1,0,0,0,6531,6532,
		1,0,0,0,6532,923,1,0,0,0,6533,6531,1,0,0,0,6534,6535,4,462,91,0,6535,6536,
		5,740,0,0,6536,925,1,0,0,0,6537,6538,5,37,0,0,6538,6542,3,1442,721,0,6539,
		6540,5,38,0,0,6540,6542,3,1442,721,0,6541,6537,1,0,0,0,6541,6539,1,0,0,
		0,6542,927,1,0,0,0,6543,6544,5,72,0,0,6544,6546,5,32,0,0,6545,6547,5,181,
		0,0,6546,6545,1,0,0,0,6546,6547,1,0,0,0,6547,6548,1,0,0,0,6548,6549,3,
		952,476,0,6549,6551,5,33,0,0,6550,6552,3,940,470,0,6551,6550,1,0,0,0,6551,
		6552,1,0,0,0,6552,6629,1,0,0,0,6553,6554,7,111,0,0,6554,6555,5,32,0,0,
		6555,6556,3,952,476,0,6556,6558,5,33,0,0,6557,6559,3,940,470,0,6558,6557,
		1,0,0,0,6558,6559,1,0,0,0,6559,6629,1,0,0,0,6560,6629,3,950,475,0,6561,
		6562,5,793,0,0,6562,6564,5,32,0,0,6563,6565,5,181,0,0,6564,6563,1,0,0,
		0,6564,6565,1,0,0,0,6565,6566,1,0,0,0,6566,6567,3,952,476,0,6567,6569,
		5,33,0,0,6568,6570,3,940,470,0,6569,6568,1,0,0,0,6569,6570,1,0,0,0,6570,
		6629,1,0,0,0,6571,6572,5,138,0,0,6572,6580,5,32,0,0,6573,6575,5,58,0,0,
		6574,6573,1,0,0,0,6574,6575,1,0,0,0,6575,6576,1,0,0,0,6576,6581,5,16,0,
		0,6577,6581,3,952,476,0,6578,6579,5,181,0,0,6579,6581,3,1008,504,0,6580,
		6574,1,0,0,0,6580,6577,1,0,0,0,6580,6578,1,0,0,0,6581,6582,1,0,0,0,6582,
		6584,5,33,0,0,6583,6585,3,940,470,0,6584,6583,1,0,0,0,6584,6585,1,0,0,
		0,6585,6629,1,0,0,0,6586,6587,7,112,0,0,6587,6589,5,32,0,0,6588,6590,5,
		181,0,0,6589,6588,1,0,0,0,6589,6590,1,0,0,0,6590,6591,1,0,0,0,6591,6592,
		3,952,476,0,6592,6594,5,33,0,0,6593,6595,3,940,470,0,6594,6593,1,0,0,0,
		6594,6595,1,0,0,0,6595,6629,1,0,0,0,6596,6597,7,113,0,0,6597,6598,5,32,
		0,0,6598,6599,3,952,476,0,6599,6601,5,33,0,0,6600,6602,3,940,470,0,6601,
		6600,1,0,0,0,6601,6602,1,0,0,0,6602,6629,1,0,0,0,6603,6604,5,575,0,0,6604,
		6605,5,32,0,0,6605,6606,5,181,0,0,6606,6607,3,952,476,0,6607,6609,5,33,
		0,0,6608,6610,3,940,470,0,6609,6608,1,0,0,0,6609,6610,1,0,0,0,6610,6629,
		1,0,0,0,6611,6612,5,251,0,0,6612,6614,5,32,0,0,6613,6615,5,181,0,0,6614,
		6613,1,0,0,0,6614,6615,1,0,0,0,6615,6616,1,0,0,0,6616,6618,3,1008,504,
		0,6617,6619,3,362,181,0,6618,6617,1,0,0,0,6618,6619,1,0,0,0,6619,6622,
		1,0,0,0,6620,6621,5,514,0,0,6621,6623,3,1444,722,0,6622,6620,1,0,0,0,6622,
		6623,1,0,0,0,6623,6624,1,0,0,0,6624,6626,5,33,0,0,6625,6627,3,940,470,
		0,6626,6625,1,0,0,0,6626,6627,1,0,0,0,6627,6629,1,0,0,0,6628,6543,1,0,
		0,0,6628,6553,1,0,0,0,6628,6560,1,0,0,0,6628,6561,1,0,0,0,6628,6571,1,
		0,0,0,6628,6586,1,0,0,0,6628,6596,1,0,0,0,6628,6603,1,0,0,0,6628,6611,
		1,0,0,0,6629,929,1,0,0,0,6630,6631,5,681,0,0,6631,6632,5,32,0,0,6632,6633,
		3,1008,504,0,6633,6634,5,33,0,0,6634,931,1,0,0,0,6635,6636,7,114,0,0,6636,
		6637,3,1478,739,0,6637,6638,3,940,470,0,6638,6685,1,0,0,0,6639,6646,5,
		697,0,0,6640,6641,5,32,0,0,6641,6642,3,944,472,0,6642,6643,5,33,0,0,6643,
		6647,1,0,0,0,6644,6645,4,466,92,0,6645,6647,3,1024,512,0,6646,6640,1,0,
		0,0,6646,6644,1,0,0,0,6647,6648,1,0,0,0,6648,6649,3,940,470,0,6649,6685,
		1,0,0,0,6650,6651,7,115,0,0,6651,6652,5,32,0,0,6652,6654,3,910,455,0,6653,
		6655,3,942,471,0,6654,6653,1,0,0,0,6654,6655,1,0,0,0,6655,6656,1,0,0,0,
		6656,6658,5,33,0,0,6657,6659,3,948,474,0,6658,6657,1,0,0,0,6658,6659,1,
		0,0,0,6659,6660,1,0,0,0,6660,6661,3,940,470,0,6661,6685,1,0,0,0,6662,6663,
		7,116,0,0,6663,6665,3,1022,511,0,6664,6666,3,948,474,0,6665,6664,1,0,0,
		0,6665,6666,1,0,0,0,6666,6667,1,0,0,0,6667,6668,3,940,470,0,6668,6685,
		1,0,0,0,6669,6670,5,696,0,0,6670,6671,5,32,0,0,6671,6672,3,910,455,0,6672,
		6673,5,29,0,0,6673,6674,3,922,461,0,6674,6677,5,33,0,0,6675,6676,5,236,
		0,0,6676,6678,7,117,0,0,6677,6675,1,0,0,0,6677,6678,1,0,0,0,6678,6680,
		1,0,0,0,6679,6681,3,948,474,0,6680,6679,1,0,0,0,6680,6681,1,0,0,0,6681,
		6682,1,0,0,0,6682,6683,3,940,470,0,6683,6685,1,0,0,0,6684,6635,1,0,0,0,
		6684,6639,1,0,0,0,6684,6650,1,0,0,0,6684,6662,1,0,0,0,6684,6669,1,0,0,
		0,6685,933,1,0,0,0,6686,6687,7,118,0,0,6687,935,1,0,0,0,6688,6695,3,1426,
		713,0,6689,6690,5,39,0,0,6690,6695,3,1470,735,0,6691,6692,5,41,0,0,6692,
		6695,3,1470,735,0,6693,6695,5,44,0,0,6694,6688,1,0,0,0,6694,6689,1,0,0,
		0,6694,6691,1,0,0,0,6694,6693,1,0,0,0,6695,937,1,0,0,0,6696,6697,4,469,
		93,0,6697,6698,5,817,0,0,6698,6699,3,934,467,0,6699,6700,5,32,0,0,6700,
		6701,3,936,468,0,6701,6702,5,33,0,0,6702,939,1,0,0,0,6703,6706,5,700,0,
		0,6704,6707,3,1406,703,0,6705,6707,3,336,168,0,6706,6704,1,0,0,0,6706,
		6705,1,0,0,0,6707,941,1,0,0,0,6708,6713,5,29,0,0,6709,6714,3,1426,713,
		0,6710,6714,5,44,0,0,6711,6712,4,471,94,0,6712,6714,3,944,472,0,6713,6709,
		1,0,0,0,6713,6710,1,0,0,0,6713,6711,1,0,0,0,6714,6717,1,0,0,0,6715,6716,
		5,29,0,0,6716,6718,3,910,455,0,6717,6715,1,0,0,0,6717,6718,1,0,0,0,6718,
		943,1,0,0,0,6719,6722,3,1460,730,0,6720,6722,3,946,473,0,6721,6719,1,0,
		0,0,6721,6720,1,0,0,0,6722,945,1,0,0,0,6723,6730,5,44,0,0,6724,6730,3,
		1410,705,0,6725,6726,5,39,0,0,6726,6730,3,1470,735,0,6727,6728,5,41,0,
		0,6728,6730,3,1470,735,0,6729,6723,1,0,0,0,6729,6724,1,0,0,0,6729,6725,
		1,0,0,0,6729,6727,1,0,0,0,6730,947,1,0,0,0,6731,6732,7,119,0,0,6732,6733,
		5,698,0,0,6733,949,1,0,0,0,6734,6735,5,676,0,0,6735,6736,5,32,0,0,6736,
		6737,3,952,476,0,6737,6739,5,33,0,0,6738,6740,3,940,470,0,6739,6738,1,
		0,0,0,6739,6740,1,0,0,0,6740,6751,1,0,0,0,6741,6742,5,675,0,0,6742,6743,
		5,32,0,0,6743,6744,3,952,476,0,6744,6745,5,29,0,0,6745,6746,3,952,476,
		0,6746,6748,5,33,0,0,6747,6749,3,940,470,0,6748,6747,1,0,0,0,6748,6749,
		1,0,0,0,6749,6751,1,0,0,0,6750,6734,1,0,0,0,6750,6741,1,0,0,0,6751,951,
		1,0,0,0,6752,6754,5,58,0,0,6753,6752,1,0,0,0,6753,6754,1,0,0,0,6754,6755,
		1,0,0,0,6755,6756,3,910,455,0,6756,953,1,0,0,0,6757,6763,3,956,478,0,6758,
		6759,5,32,0,0,6759,6760,3,956,478,0,6760,6761,5,33,0,0,6761,6763,1,0,0,
		0,6762,6757,1,0,0,0,6762,6758,1,0,0,0,6763,955,1,0,0,0,6764,6769,3,1418,
		709,0,6765,6766,5,29,0,0,6766,6768,3,1418,709,0,6767,6765,1,0,0,0,6768,
		6771,1,0,0,0,6769,6767,1,0,0,0,6769,6770,1,0,0,0,6770,957,1,0,0,0,6771,
		6769,1,0,0,0,6772,6773,5,283,0,0,6773,6774,5,86,0,0,6774,6788,5,370,0,
		0,6775,6776,5,283,0,0,6776,6777,5,383,0,0,6777,6778,5,298,0,0,6778,6782,
		5,370,0,0,6779,6780,5,654,0,0,6780,6781,5,449,0,0,6781,6783,5,212,0,0,
		6782,6779,1,0,0,0,6782,6783,1,0,0,0,6783,6788,1,0,0,0,6784,6785,5,654,
		0,0,6785,6786,5,449,0,0,6786,6788,5,212,0,0,6787,6772,1,0,0,0,6787,6775,
		1,0,0,0,6787,6784,1,0,0,0,6788,959,1,0,0,0,6789,6790,5,104,0,0,6790,6791,
		5,32,0,0,6791,6794,3,1008,504,0,6792,6793,5,631,0,0,6793,6795,3,1192,596,
		0,6794,6792,1,0,0,0,6794,6795,1,0,0,0,6795,6796,1,0,0,0,6796,6797,5,33,
		0,0,6797,7073,1,0,0,0,6798,6800,5,147,0,0,6799,6801,3,1478,739,0,6800,
		6799,1,0,0,0,6800,6801,1,0,0,0,6801,7073,1,0,0,0,6802,6803,5,158,0,0,6803,
		7073,3,1022,511,0,6804,6805,5,163,0,0,6805,7073,3,1022,511,0,6806,6807,
		5,262,0,0,6807,7073,3,1022,511,0,6808,6809,5,275,0,0,6809,6810,5,32,0,
		0,6810,6811,3,910,455,0,6811,6812,5,29,0,0,6812,6813,3,910,455,0,6813,
		6814,5,29,0,0,6814,6815,3,910,455,0,6815,6816,5,29,0,0,6816,6817,3,910,
		455,0,6817,6818,5,33,0,0,6818,7073,1,0,0,0,6819,6820,5,279,0,0,6820,6821,
		5,32,0,0,6821,6824,3,910,455,0,6822,6823,5,29,0,0,6823,6825,3,910,455,
		0,6824,6822,1,0,0,0,6825,6826,1,0,0,0,6826,6824,1,0,0,0,6826,6827,1,0,
		0,0,6827,6828,1,0,0,0,6828,6829,5,33,0,0,6829,7073,1,0,0,0,6830,6831,5,
		755,0,0,6831,6832,5,32,0,0,6832,6833,3,922,461,0,6833,6834,5,29,0,0,6834,
		6836,3,1448,724,0,6835,6837,3,962,481,0,6836,6835,1,0,0,0,6836,6837,1,
		0,0,0,6837,6838,1,0,0,0,6838,6839,3,422,211,0,6839,6840,5,33,0,0,6840,
		7073,1,0,0,0,6841,6842,5,303,0,0,6842,6843,5,32,0,0,6843,6844,3,910,455,
		0,6844,6845,5,29,0,0,6845,6846,3,910,455,0,6846,6847,5,33,0,0,6847,7073,
		1,0,0,0,6848,6849,5,367,0,0,6849,7073,3,1022,511,0,6850,6851,5,374,0,0,
		6851,7073,3,1022,511,0,6852,6853,5,496,0,0,6853,6854,5,32,0,0,6854,6855,
		3,910,455,0,6855,6856,5,29,0,0,6856,6857,3,910,455,0,6857,6858,5,33,0,
		0,6858,7073,1,0,0,0,6859,6860,5,510,0,0,6860,7073,3,1022,511,0,6861,6862,
		5,596,0,0,6862,7073,3,1022,511,0,6863,6864,5,593,0,0,6864,6865,5,32,0,
		0,6865,6868,3,910,455,0,6866,6867,5,29,0,0,6867,6869,3,910,455,0,6868,
		6866,1,0,0,0,6868,6869,1,0,0,0,6869,6870,1,0,0,0,6870,6871,5,33,0,0,6871,
		7073,1,0,0,0,6872,7073,3,976,488,0,6873,7073,3,630,315,0,6874,6875,5,636,
		0,0,6875,7073,3,1022,511,0,6876,6877,5,665,0,0,6877,7073,3,1022,511,0,
		6878,6879,7,120,0,0,6879,6880,5,32,0,0,6880,6881,3,910,455,0,6881,6887,
		5,29,0,0,6882,6888,3,910,455,0,6883,6884,5,279,0,0,6884,6885,3,910,455,
		0,6885,6886,3,1016,508,0,6886,6888,1,0,0,0,6887,6882,1,0,0,0,6887,6883,
		1,0,0,0,6888,6889,1,0,0,0,6889,6890,5,33,0,0,6890,7073,1,0,0,0,6891,6893,
		5,143,0,0,6892,6894,3,1478,739,0,6893,6892,1,0,0,0,6893,6894,1,0,0,0,6894,
		7073,1,0,0,0,6895,6897,5,150,0,0,6896,6898,3,966,483,0,6897,6896,1,0,0,
		0,6897,6898,1,0,0,0,6898,7073,1,0,0,0,6899,6900,7,121,0,0,6900,6901,5,
		32,0,0,6901,6902,3,910,455,0,6902,6903,5,29,0,0,6903,6904,5,279,0,0,6904,
		6905,3,910,455,0,6905,6906,3,1016,508,0,6906,6907,5,33,0,0,6907,7073,1,
		0,0,0,6908,6909,5,218,0,0,6909,6910,5,32,0,0,6910,6911,3,1016,508,0,6911,
		6912,5,236,0,0,6912,6913,3,910,455,0,6913,6914,5,33,0,0,6914,7073,1,0,
		0,0,6915,6916,5,246,0,0,6916,6917,5,32,0,0,6917,6918,3,974,487,0,6918,
		6919,5,29,0,0,6919,6920,3,910,455,0,6920,6921,5,33,0,0,6921,7073,1,0,0,
		0,6922,6923,4,480,95,0,6923,6924,5,809,0,0,6924,6925,5,32,0,0,6925,6928,
		3,910,455,0,6926,6927,5,29,0,0,6927,6929,3,910,455,0,6928,6926,1,0,0,0,
		6928,6929,1,0,0,0,6929,6930,1,0,0,0,6930,6931,5,33,0,0,6931,7073,1,0,0,
		0,6932,6934,5,392,0,0,6933,6935,3,966,483,0,6934,6933,1,0,0,0,6934,6935,
		1,0,0,0,6935,7073,1,0,0,0,6936,6937,5,433,0,0,6937,6938,5,32,0,0,6938,
		6939,3,920,460,0,6939,6940,5,283,0,0,6940,6941,3,910,455,0,6941,6942,5,
		33,0,0,6942,7073,1,0,0,0,6943,7073,3,978,489,0,6944,6946,5,580,0,0,6945,
		6947,3,966,483,0,6946,6945,1,0,0,0,6946,6947,1,0,0,0,6947,7073,1,0,0,0,
		6948,6949,7,122,0,0,6949,6950,5,32,0,0,6950,6951,3,1018,509,0,6951,6952,
		5,29,0,0,6952,6953,3,910,455,0,6953,6954,5,29,0,0,6954,6955,3,910,455,
		0,6955,6956,5,33,0,0,6956,7073,1,0,0,0,6957,6959,5,632,0,0,6958,6960,3,
		1478,739,0,6959,6958,1,0,0,0,6959,6960,1,0,0,0,6960,7073,1,0,0,0,6961,
		6963,5,634,0,0,6962,6964,3,966,483,0,6963,6962,1,0,0,0,6963,6964,1,0,0,
		0,6964,7073,1,0,0,0,6965,6967,5,633,0,0,6966,6968,3,966,483,0,6967,6966,
		1,0,0,0,6967,6968,1,0,0,0,6968,7073,1,0,0,0,6969,6970,5,66,0,0,6970,7073,
		3,1022,511,0,6971,6972,5,103,0,0,6972,7073,3,1022,511,0,6973,6974,5,111,
		0,0,6974,7073,3,1020,510,0,6975,6976,5,114,0,0,6976,7073,3,1022,511,0,
		6977,6978,5,151,0,0,6978,7073,3,1478,739,0,6979,6980,5,264,0,0,6980,6981,
		5,32,0,0,6981,6982,3,910,455,0,6982,6983,5,29,0,0,6983,6984,3,910,455,
		0,6984,6985,5,29,0,0,6985,6986,3,910,455,0,6986,6987,5,33,0,0,6987,7073,
		1,0,0,0,6988,6989,5,234,0,0,6989,6990,5,32,0,0,6990,6991,3,910,455,0,6991,
		6992,5,29,0,0,6992,6995,3,910,455,0,6993,6994,5,29,0,0,6994,6996,3,910,
		455,0,6995,6993,1,0,0,0,6995,6996,1,0,0,0,6996,6997,1,0,0,0,6997,6998,
		5,33,0,0,6998,7073,1,0,0,0,6999,7000,5,362,0,0,7000,7073,3,1022,511,0,
		7001,7002,5,373,0,0,7002,7003,5,32,0,0,7003,7004,3,910,455,0,7004,7005,
		5,29,0,0,7005,7006,3,910,455,0,7006,7007,5,33,0,0,7007,7073,1,0,0,0,7008,
		7009,4,480,96,0,7009,7010,5,425,0,0,7010,7073,3,1022,511,0,7011,7012,5,
		448,0,0,7012,7073,3,1022,511,0,7013,7014,5,475,0,0,7014,7015,5,32,0,0,
		7015,7016,3,910,455,0,7016,7017,5,29,0,0,7017,7018,3,910,455,0,7018,7019,
		5,33,0,0,7019,7073,1,0,0,0,7020,7021,5,476,0,0,7021,7022,5,32,0,0,7022,
		7023,3,910,455,0,7023,7024,5,29,0,0,7024,7025,3,910,455,0,7025,7026,5,
		29,0,0,7026,7027,3,910,455,0,7027,7028,5,33,0,0,7028,7073,1,0,0,0,7029,
		7030,5,494,0,0,7030,7073,3,1022,511,0,7031,7032,5,502,0,0,7032,7073,3,
		1478,739,0,7033,7034,5,607,0,0,7034,7035,5,32,0,0,7035,7036,3,910,455,
		0,7036,7037,5,29,0,0,7037,7038,3,910,455,0,7038,7039,5,33,0,0,7039,7073,
		1,0,0,0,7040,7041,5,649,0,0,7041,7042,5,32,0,0,7042,7045,3,910,455,0,7043,
		7044,5,29,0,0,7044,7046,3,910,455,0,7045,7043,1,0,0,0,7045,7046,1,0,0,
		0,7046,7047,1,0,0,0,7047,7048,5,33,0,0,7048,7073,1,0,0,0,7049,7050,5,650,
		0,0,7050,7051,5,32,0,0,7051,7067,3,910,455,0,7052,7053,5,64,0,0,7053,7054,
		5,104,0,0,7054,7056,3,1186,593,0,7055,7052,1,0,0,0,7055,7056,1,0,0,0,7056,
		7068,1,0,0,0,7057,7058,5,64,0,0,7058,7059,5,78,0,0,7059,7068,3,1186,593,
		0,7060,7061,5,29,0,0,7061,7062,3,1422,711,0,7062,7063,5,29,0,0,7063,7064,
		3,1422,711,0,7064,7065,5,29,0,0,7065,7066,3,1422,711,0,7066,7068,1,0,0,
		0,7067,7055,1,0,0,0,7067,7057,1,0,0,0,7067,7060,1,0,0,0,7068,7069,1,0,
		0,0,7069,7070,5,33,0,0,7070,7073,1,0,0,0,7071,7073,3,964,482,0,7072,6789,
		1,0,0,0,7072,6798,1,0,0,0,7072,6802,1,0,0,0,7072,6804,1,0,0,0,7072,6806,
		1,0,0,0,7072,6808,1,0,0,0,7072,6819,1,0,0,0,7072,6830,1,0,0,0,7072,6841,
		1,0,0,0,7072,6848,1,0,0,0,7072,6850,1,0,0,0,7072,6852,1,0,0,0,7072,6859,
		1,0,0,0,7072,6861,1,0,0,0,7072,6863,1,0,0,0,7072,6872,1,0,0,0,7072,6873,
		1,0,0,0,7072,6874,1,0,0,0,7072,6876,1,0,0,0,7072,6878,1,0,0,0,7072,6891,
		1,0,0,0,7072,6895,1,0,0,0,7072,6899,1,0,0,0,7072,6908,1,0,0,0,7072,6915,
		1,0,0,0,7072,6922,1,0,0,0,7072,6932,1,0,0,0,7072,6936,1,0,0,0,7072,6943,
		1,0,0,0,7072,6944,1,0,0,0,7072,6948,1,0,0,0,7072,6957,1,0,0,0,7072,6961,
		1,0,0,0,7072,6965,1,0,0,0,7072,6969,1,0,0,0,7072,6971,1,0,0,0,7072,6973,
		1,0,0,0,7072,6975,1,0,0,0,7072,6977,1,0,0,0,7072,6979,1,0,0,0,7072,6988,
		1,0,0,0,7072,6999,1,0,0,0,7072,7001,1,0,0,0,7072,7008,1,0,0,0,7072,7011,
		1,0,0,0,7072,7013,1,0,0,0,7072,7020,1,0,0,0,7072,7029,1,0,0,0,7072,7031,
		1,0,0,0,7072,7033,1,0,0,0,7072,7040,1,0,0,0,7072,7049,1,0,0,0,7072,7071,
		1,0,0,0,7073,961,1,0,0,0,7074,7075,5,754,0,0,7075,7076,3,1006,503,0,7076,
		963,1,0,0,0,7077,7078,5,244,0,0,7078,7080,5,32,0,0,7079,7081,3,1008,504,
		0,7080,7079,1,0,0,0,7080,7081,1,0,0,0,7081,7082,1,0,0,0,7082,7101,5,33,
		0,0,7083,7084,5,310,0,0,7084,7101,3,1020,510,0,7085,7086,5,375,0,0,7086,
		7101,3,1020,510,0,7087,7088,5,376,0,0,7088,7101,3,1020,510,0,7089,7090,
		5,377,0,0,7090,7101,3,1020,510,0,7091,7092,5,430,0,0,7092,7093,5,32,0,
		0,7093,7094,3,910,455,0,7094,7095,5,29,0,0,7095,7096,3,910,455,0,7096,
		7097,5,33,0,0,7097,7101,1,0,0,0,7098,7099,5,431,0,0,7099,7101,3,1020,510,
		0,7100,7077,1,0,0,0,7100,7083,1,0,0,0,7100,7085,1,0,0,0,7100,7087,1,0,
		0,0,7100,7089,1,0,0,0,7100,7091,1,0,0,0,7100,7098,1,0,0,0,7101,965,1,0,
		0,0,7102,7104,5,32,0,0,7103,7105,3,968,484,0,7104,7103,1,0,0,0,7104,7105,
		1,0,0,0,7105,7106,1,0,0,0,7106,7107,5,33,0,0,7107,967,1,0,0,0,7108,7109,
		5,3,0,0,7109,969,1,0,0,0,7110,7123,5,305,0,0,7111,7112,3,1424,712,0,7112,
		7113,5,15,0,0,7113,7114,3,1424,712,0,7114,7124,1,0,0,0,7115,7120,3,972,
		486,0,7116,7117,5,29,0,0,7117,7119,3,972,486,0,7118,7116,1,0,0,0,7119,
		7122,1,0,0,0,7120,7118,1,0,0,0,7120,7121,1,0,0,0,7121,7124,1,0,0,0,7122,
		7120,1,0,0,0,7123,7111,1,0,0,0,7123,7115,1,0,0,0,7124,971,1,0,0,0,7125,
		7131,3,1424,712,0,7126,7128,7,35,0,0,7127,7129,5,494,0,0,7128,7127,1,0,
		0,0,7128,7129,1,0,0,0,7129,7132,1,0,0,0,7130,7132,5,494,0,0,7131,7126,
		1,0,0,0,7131,7130,1,0,0,0,7131,7132,1,0,0,0,7132,973,1,0,0,0,7133,7134,
		7,123,0,0,7134,975,1,0,0,0,7135,7136,5,605,0,0,7136,7160,5,32,0,0,7137,
		7140,3,910,455,0,7138,7139,5,236,0,0,7139,7141,3,910,455,0,7140,7138,1,
		0,0,0,7140,7141,1,0,0,0,7141,7161,1,0,0,0,7142,7144,5,300,0,0,7143,7145,
		3,910,455,0,7144,7143,1,0,0,0,7144,7145,1,0,0,0,7145,7146,1,0,0,0,7146,
		7147,5,236,0,0,7147,7161,3,910,455,0,7148,7150,5,601,0,0,7149,7151,3,910,
		455,0,7150,7149,1,0,0,0,7150,7151,1,0,0,0,7151,7152,1,0,0,0,7152,7153,
		5,236,0,0,7153,7161,3,910,455,0,7154,7156,5,88,0,0,7155,7157,3,910,455,
		0,7156,7155,1,0,0,0,7156,7157,1,0,0,0,7157,7158,1,0,0,0,7158,7159,5,236,
		0,0,7159,7161,3,910,455,0,7160,7137,1,0,0,0,7160,7142,1,0,0,0,7160,7148,
		1,0,0,0,7160,7154,1,0,0,0,7161,7162,1,0,0,0,7162,7163,5,33,0,0,7163,977,
		1,0,0,0,7164,7165,5,574,0,0,7165,7166,5,32,0,0,7166,7179,3,910,455,0,7167,
		7168,5,29,0,0,7168,7171,3,910,455,0,7169,7170,5,29,0,0,7170,7172,3,910,
		455,0,7171,7169,1,0,0,0,7171,7172,1,0,0,0,7172,7180,1,0,0,0,7173,7174,
		5,236,0,0,7174,7177,3,910,455,0,7175,7176,5,233,0,0,7176,7178,3,910,455,
		0,7177,7175,1,0,0,0,7177,7178,1,0,0,0,7178,7180,1,0,0,0,7179,7167,1,0,
		0,0,7179,7173,1,0,0,0,7180,7181,1,0,0,0,7181,7182,5,33,0,0,7182,979,1,
		0,0,0,7183,7184,3,1408,704,0,7184,7186,5,32,0,0,7185,7187,3,982,491,0,
		7186,7185,1,0,0,0,7186,7187,1,0,0,0,7187,7188,1,0,0,0,7188,7189,5,33,0,
		0,7189,7198,1,0,0,0,7190,7191,3,1416,708,0,7191,7193,5,32,0,0,7192,7194,
		3,1008,504,0,7193,7192,1,0,0,0,7193,7194,1,0,0,0,7194,7195,1,0,0,0,7195,
		7196,5,33,0,0,7196,7198,1,0,0,0,7197,7183,1,0,0,0,7197,7190,1,0,0,0,7198,
		981,1,0,0,0,7199,7204,3,984,492,0,7200,7201,5,29,0,0,7201,7203,3,984,492,
		0,7202,7200,1,0,0,0,7203,7206,1,0,0,0,7204,7202,1,0,0,0,7204,7205,1,0,
		0,0,7205,983,1,0,0,0,7206,7204,1,0,0,0,7207,7209,3,910,455,0,7208,7210,
		3,390,195,0,7209,7208,1,0,0,0,7209,7210,1,0,0,0,7210,985,1,0,0,0,7211,
		7214,3,988,494,0,7212,7214,3,990,495,0,7213,7211,1,0,0,0,7213,7212,1,0,
		0,0,7214,987,1,0,0,0,7215,7216,5,39,0,0,7216,7219,3,1470,735,0,7217,7219,
		5,40,0,0,7218,7215,1,0,0,0,7218,7217,1,0,0,0,7219,989,1,0,0,0,7220,7221,
		5,41,0,0,7221,7224,3,1470,735,0,7222,7224,5,42,0,0,7223,7220,1,0,0,0,7223,
		7222,1,0,0,0,7224,991,1,0,0,0,7225,7226,3,986,493,0,7226,7227,5,7,0,0,
		7227,7228,3,910,455,0,7228,993,1,0,0,0,7229,7230,3,986,493,0,7230,995,
		1,0,0,0,7231,7233,3,1410,705,0,7232,7234,3,1420,710,0,7233,7232,1,0,0,
		0,7233,7234,1,0,0,0,7234,7241,1,0,0,0,7235,7236,4,498,97,0,7236,7238,3,
		1472,736,0,7237,7239,3,1420,710,0,7238,7237,1,0,0,0,7238,7239,1,0,0,0,
		7239,7241,1,0,0,0,7240,7231,1,0,0,0,7240,7235,1,0,0,0,7241,7245,1,0,0,
		0,7242,7243,5,167,0,0,7243,7245,3,1420,710,0,7244,7240,1,0,0,0,7244,7242,
		1,0,0,0,7245,997,1,0,0,0,7246,7248,3,1470,735,0,7247,7249,3,1420,710,0,
		7248,7247,1,0,0,0,7248,7249,1,0,0,0,7249,999,1,0,0,0,7250,7251,5,651,0,
		0,7251,7252,3,910,455,0,7252,1001,1,0,0,0,7253,7254,5,592,0,0,7254,7255,
		3,910,455,0,7255,1003,1,0,0,0,7256,7257,5,191,0,0,7257,7258,3,910,455,
		0,7258,1005,1,0,0,0,7259,7261,5,78,0,0,7260,7262,3,1176,588,0,7261,7260,
		1,0,0,0,7261,7262,1,0,0,0,7262,7308,1,0,0,0,7263,7265,5,104,0,0,7264,7266,
		3,1176,588,0,7265,7264,1,0,0,0,7265,7266,1,0,0,0,7266,7268,1,0,0,0,7267,
		7269,3,1180,590,0,7268,7267,1,0,0,0,7268,7269,1,0,0,0,7269,7308,1,0,0,
		0,7270,7272,3,1172,586,0,7271,7273,3,1176,588,0,7272,7271,1,0,0,0,7272,
		7273,1,0,0,0,7273,7308,1,0,0,0,7274,7276,5,525,0,0,7275,7277,5,281,0,0,
		7276,7275,1,0,0,0,7276,7277,1,0,0,0,7277,7308,1,0,0,0,7278,7280,5,622,
		0,0,7279,7281,5,281,0,0,7280,7279,1,0,0,0,7280,7281,1,0,0,0,7281,7308,
		1,0,0,0,7282,7308,5,158,0,0,7283,7284,4,503,98,0,7284,7308,5,665,0,0,7285,
		7287,5,596,0,0,7286,7288,3,1188,594,0,7287,7286,1,0,0,0,7287,7288,1,0,
		0,0,7288,7308,1,0,0,0,7289,7291,5,155,0,0,7290,7292,3,1188,594,0,7291,
		7290,1,0,0,0,7291,7292,1,0,0,0,7292,7308,1,0,0,0,7293,7295,5,165,0,0,7294,
		7296,3,1464,732,0,7295,7294,1,0,0,0,7295,7296,1,0,0,0,7296,7308,1,0,0,
		0,7297,7308,5,293,0,0,7298,7299,4,503,99,0,7299,7308,3,1174,587,0,7300,
		7301,4,503,100,0,7301,7303,5,228,0,0,7302,7304,3,1466,733,0,7303,7302,
		1,0,0,0,7303,7304,1,0,0,0,7304,7308,1,0,0,0,7305,7306,4,503,101,0,7306,
		7308,7,124,0,0,7307,7259,1,0,0,0,7307,7263,1,0,0,0,7307,7270,1,0,0,0,7307,
		7274,1,0,0,0,7307,7278,1,0,0,0,7307,7282,1,0,0,0,7307,7283,1,0,0,0,7307,
		7285,1,0,0,0,7307,7289,1,0,0,0,7307,7293,1,0,0,0,7307,7297,1,0,0,0,7307,
		7298,1,0,0,0,7307,7300,1,0,0,0,7307,7305,1,0,0,0,7308,1007,1,0,0,0,7309,
		7314,3,910,455,0,7310,7311,5,29,0,0,7311,7313,3,910,455,0,7312,7310,1,
		0,0,0,7313,7316,1,0,0,0,7314,7312,1,0,0,0,7314,7315,1,0,0,0,7315,1009,
		1,0,0,0,7316,7314,1,0,0,0,7317,7318,5,104,0,0,7318,7321,5,520,0,0,7319,
		7321,5,103,0,0,7320,7317,1,0,0,0,7320,7319,1,0,0,0,7321,1011,1,0,0,0,7322,
		7323,7,125,0,0,7323,1013,1,0,0,0,7324,7325,7,126,0,0,7325,1015,1,0,0,0,
		7326,7329,3,1018,509,0,7327,7329,7,127,0,0,7328,7326,1,0,0,0,7328,7327,
		1,0,0,0,7329,1017,1,0,0,0,7330,7331,7,128,0,0,7331,1019,1,0,0,0,7332,7333,
		5,32,0,0,7333,7334,3,1008,504,0,7334,7335,5,33,0,0,7335,1021,1,0,0,0,7336,
		7337,5,32,0,0,7337,7338,3,910,455,0,7338,7339,5,33,0,0,7339,1023,1,0,0,
		0,7340,7341,5,32,0,0,7341,7342,3,922,461,0,7342,7343,5,33,0,0,7343,1025,
		1,0,0,0,7344,7349,3,1028,514,0,7345,7346,5,29,0,0,7346,7348,3,1028,514,
		0,7347,7345,1,0,0,0,7348,7351,1,0,0,0,7349,7347,1,0,0,0,7349,7350,1,0,
		0,0,7350,1027,1,0,0,0,7351,7349,1,0,0,0,7352,7354,3,910,455,0,7353,7355,
		3,364,182,0,7354,7353,1,0,0,0,7354,7355,1,0,0,0,7355,1029,1,0,0,0,7356,
		7361,3,1032,516,0,7357,7358,5,29,0,0,7358,7360,3,1032,516,0,7359,7357,
		1,0,0,0,7360,7363,1,0,0,0,7361,7359,1,0,0,0,7361,7362,1,0,0,0,7362,1031,
		1,0,0,0,7363,7361,1,0,0,0,7364,7365,3,910,455,0,7365,1033,1,0,0,0,7366,
		7367,5,233,0,0,7367,7368,5,102,0,0,7368,7369,3,1450,725,0,7369,1035,1,
		0,0,0,7370,7384,3,4,2,0,7371,7384,3,1038,519,0,7372,7384,3,1040,520,0,
		7373,7384,3,1048,524,0,7374,7384,3,1052,526,0,7375,7384,3,1054,527,0,7376,
		7384,3,1060,530,0,7377,7384,3,1062,531,0,7378,7384,3,1090,545,0,7379,7384,
		3,1088,544,0,7380,7384,3,1108,554,0,7381,7384,3,1112,556,0,7382,7384,3,
		1110,555,0,7383,7370,1,0,0,0,7383,7371,1,0,0,0,7383,7372,1,0,0,0,7383,
		7373,1,0,0,0,7383,7374,1,0,0,0,7383,7375,1,0,0,0,7383,7376,1,0,0,0,7383,
		7377,1,0,0,0,7383,7378,1,0,0,0,7383,7379,1,0,0,0,7383,7380,1,0,0,0,7383,
		7381,1,0,0,0,7383,7382,1,0,0,0,7384,1037,1,0,0,0,7385,7386,5,493,0,0,7386,
		7387,3,910,455,0,7387,1039,1,0,0,0,7388,7389,5,264,0,0,7389,7390,3,1042,
		521,0,7390,7391,5,196,0,0,7391,7392,5,264,0,0,7392,1041,1,0,0,0,7393,7394,
		3,910,455,0,7394,7399,3,1044,522,0,7395,7396,5,192,0,0,7396,7400,3,1042,
		521,0,7397,7398,5,191,0,0,7398,7400,3,1046,523,0,7399,7395,1,0,0,0,7399,
		7397,1,0,0,0,7399,7400,1,0,0,0,7400,1043,1,0,0,0,7401,7402,5,592,0,0,7402,
		7403,3,1046,523,0,7403,1045,1,0,0,0,7404,7405,3,1036,518,0,7405,7406,5,
		30,0,0,7406,7408,1,0,0,0,7407,7404,1,0,0,0,7408,7409,1,0,0,0,7409,7407,
		1,0,0,0,7409,7410,1,0,0,0,7410,1047,1,0,0,0,7411,7413,5,96,0,0,7412,7414,
		3,910,455,0,7413,7412,1,0,0,0,7413,7414,1,0,0,0,7414,7418,1,0,0,0,7415,
		7416,3,1000,500,0,7416,7417,3,1044,522,0,7417,7419,1,0,0,0,7418,7415,1,
		0,0,0,7419,7420,1,0,0,0,7420,7418,1,0,0,0,7420,7421,1,0,0,0,7421,7423,
		1,0,0,0,7422,7424,3,1050,525,0,7423,7422,1,0,0,0,7423,7424,1,0,0,0,7424,
		7425,1,0,0,0,7425,7426,5,196,0,0,7426,7427,5,96,0,0,7427,1049,1,0,0,0,
		7428,7429,5,191,0,0,7429,7430,3,1046,523,0,7430,1051,1,0,0,0,7431,7432,
		3,1056,528,0,7432,7434,3,1058,529,0,7433,7435,3,1396,698,0,7434,7433,1,
		0,0,0,7434,7435,1,0,0,0,7435,1053,1,0,0,0,7436,7437,3,1058,529,0,7437,
		1055,1,0,0,0,7438,7439,3,1394,697,0,7439,7440,5,31,0,0,7440,1057,1,0,0,
		0,7441,7443,5,75,0,0,7442,7444,3,1070,535,0,7443,7442,1,0,0,0,7443,7444,
		1,0,0,0,7444,7446,1,0,0,0,7445,7447,3,1046,523,0,7446,7445,1,0,0,0,7446,
		7447,1,0,0,0,7447,7448,1,0,0,0,7448,7449,5,196,0,0,7449,1059,1,0,0,0,7450,
		7451,3,1056,528,0,7451,7453,3,1062,531,0,7452,7454,3,1396,698,0,7453,7452,
		1,0,0,0,7453,7454,1,0,0,0,7454,1061,1,0,0,0,7455,7459,3,1064,532,0,7456,
		7459,3,1066,533,0,7457,7459,3,1068,534,0,7458,7455,1,0,0,0,7458,7456,1,
		0,0,0,7458,7457,1,0,0,0,7459,1063,1,0,0,0,7460,7461,5,321,0,0,7461,7462,
		3,1046,523,0,7462,7463,5,196,0,0,7463,7464,5,321,0,0,7464,1065,1,0,0,0,
		7465,7466,5,653,0,0,7466,7467,3,910,455,0,7467,7468,5,184,0,0,7468,7469,
		3,1046,523,0,7469,7470,5,196,0,0,7470,7471,5,653,0,0,7471,1067,1,0,0,0,
		7472,7473,5,475,0,0,7473,7474,3,1046,523,0,7474,7475,5,623,0,0,7475,7476,
		3,910,455,0,7476,7477,5,196,0,0,7477,7478,5,475,0,0,7478,1069,1,0,0,0,
		7479,7480,3,1072,536,0,7480,7481,5,30,0,0,7481,7483,1,0,0,0,7482,7479,
		1,0,0,0,7483,7484,1,0,0,0,7484,7482,1,0,0,0,7484,7485,1,0,0,0,7485,1071,
		1,0,0,0,7486,7491,3,1074,537,0,7487,7491,3,1076,538,0,7488,7491,3,1082,
		541,0,7489,7491,3,1086,543,0,7490,7486,1,0,0,0,7490,7487,1,0,0,0,7490,
		7488,1,0,0,0,7490,7489,1,0,0,0,7491,1073,1,0,0,0,7492,7493,5,166,0,0,7493,
		7494,3,1412,706,0,7494,7496,3,1170,585,0,7495,7497,3,1252,626,0,7496,7495,
		1,0,0,0,7496,7497,1,0,0,0,7497,7500,1,0,0,0,7498,7499,5,167,0,0,7499,7501,
		3,910,455,0,7500,7498,1,0,0,0,7500,7501,1,0,0,0,7501,1075,1,0,0,0,7502,
		7503,5,166,0,0,7503,7504,3,1410,705,0,7504,7505,5,127,0,0,7505,7506,5,
		233,0,0,7506,7507,3,1078,539,0,7507,1077,1,0,0,0,7508,7511,3,1422,711,
		0,7509,7511,3,1080,540,0,7510,7508,1,0,0,0,7510,7509,1,0,0,0,7511,1079,
		1,0,0,0,7512,7514,5,538,0,0,7513,7515,5,637,0,0,7514,7513,1,0,0,0,7514,
		7515,1,0,0,0,7515,7516,1,0,0,0,7516,7517,3,1448,724,0,7517,1081,1,0,0,
		0,7518,7519,5,166,0,0,7519,7520,7,129,0,0,7520,7521,5,252,0,0,7521,7522,
		5,233,0,0,7522,7527,3,1084,542,0,7523,7524,5,29,0,0,7524,7526,3,1084,542,
		0,7525,7523,1,0,0,0,7526,7529,1,0,0,0,7527,7525,1,0,0,0,7527,7528,1,0,
		0,0,7528,7530,1,0,0,0,7529,7527,1,0,0,0,7530,7531,3,1036,518,0,7531,1083,
		1,0,0,0,7532,7540,3,1078,539,0,7533,7540,3,1410,705,0,7534,7540,5,539,
		0,0,7535,7536,3,1012,506,0,7536,7537,5,235,0,0,7537,7540,1,0,0,0,7538,
		7540,5,537,0,0,7539,7532,1,0,0,0,7539,7533,1,0,0,0,7539,7534,1,0,0,0,7539,
		7535,1,0,0,0,7539,7538,1,0,0,0,7540,1085,1,0,0,0,7541,7542,5,166,0,0,7542,
		7543,3,1410,705,0,7543,7544,5,148,0,0,7544,7545,5,233,0,0,7545,7546,3,
		298,149,0,7546,1087,1,0,0,0,7547,7548,5,291,0,0,7548,7549,3,1396,698,0,
		7549,1089,1,0,0,0,7550,7551,5,302,0,0,7551,7552,3,1396,698,0,7552,1091,
		1,0,0,0,7553,7555,5,240,0,0,7554,7556,7,130,0,0,7555,7554,1,0,0,0,7555,
		7556,1,0,0,0,7556,7557,1,0,0,0,7557,7576,5,176,0,0,7558,7563,3,1096,548,
		0,7559,7560,5,29,0,0,7560,7562,3,1096,548,0,7561,7559,1,0,0,0,7562,7565,
		1,0,0,0,7563,7561,1,0,0,0,7563,7564,1,0,0,0,7564,7577,1,0,0,0,7565,7563,
		1,0,0,0,7566,7567,5,127,0,0,7567,7568,3,1094,547,0,7568,7573,3,1098,549,
		0,7569,7570,5,29,0,0,7570,7572,3,1098,549,0,7571,7569,1,0,0,0,7572,7575,
		1,0,0,0,7573,7571,1,0,0,0,7573,7574,1,0,0,0,7574,7577,1,0,0,0,7575,7573,
		1,0,0,0,7576,7558,1,0,0,0,7576,7566,1,0,0,0,7577,1093,1,0,0,0,7578,7582,
		3,1434,717,0,7579,7582,3,994,497,0,7580,7582,3,1416,708,0,7581,7578,1,
		0,0,0,7581,7579,1,0,0,0,7581,7580,1,0,0,0,7582,1095,1,0,0,0,7583,7586,
		3,986,493,0,7584,7586,3,1410,705,0,7585,7583,1,0,0,0,7585,7584,1,0,0,0,
		7586,7587,1,0,0,0,7587,7588,5,6,0,0,7588,7589,7,131,0,0,7589,1097,1,0,
		0,0,7590,7593,3,986,493,0,7591,7593,3,1410,705,0,7592,7590,1,0,0,0,7592,
		7591,1,0,0,0,7593,7594,1,0,0,0,7594,7597,5,6,0,0,7595,7598,3,1100,550,
		0,7596,7598,5,491,0,0,7597,7595,1,0,0,0,7597,7596,1,0,0,0,7598,1099,1,
		0,0,0,7599,7600,7,132,0,0,7600,1101,1,0,0,0,7601,7604,5,524,0,0,7602,7605,
		3,1410,705,0,7603,7605,3,1080,540,0,7604,7602,1,0,0,0,7604,7603,1,0,0,
		0,7605,7615,1,0,0,0,7606,7607,5,520,0,0,7607,7612,3,1106,553,0,7608,7609,
		5,29,0,0,7609,7611,3,1106,553,0,7610,7608,1,0,0,0,7611,7614,1,0,0,0,7612,
		7610,1,0,0,0,7612,7613,1,0,0,0,7613,7616,1,0,0,0,7614,7612,1,0,0,0,7615,
		7606,1,0,0,0,7615,7616,1,0,0,0,7616,1103,1,0,0,0,7617,7620,5,487,0,0,7618,
		7621,3,1410,705,0,7619,7621,3,1080,540,0,7620,7618,1,0,0,0,7620,7619,1,
		0,0,0,7620,7621,1,0,0,0,7621,7631,1,0,0,0,7622,7623,5,520,0,0,7623,7628,
		3,1106,553,0,7624,7625,5,29,0,0,7625,7627,3,1106,553,0,7626,7624,1,0,0,
		0,7627,7630,1,0,0,0,7628,7626,1,0,0,0,7628,7629,1,0,0,0,7629,7632,1,0,
		0,0,7630,7628,1,0,0,0,7631,7622,1,0,0,0,7631,7632,1,0,0,0,7632,1105,1,
		0,0,0,7633,7634,3,1100,550,0,7634,7635,5,6,0,0,7635,7636,3,1094,547,0,
		7636,1107,1,0,0,0,7637,7638,5,406,0,0,7638,7639,3,1410,705,0,7639,1109,
		1,0,0,0,7640,7641,5,110,0,0,7641,7642,3,1410,705,0,7642,1111,1,0,0,0,7643,
		7648,5,222,0,0,7644,7646,5,388,0,0,7645,7644,1,0,0,0,7645,7646,1,0,0,0,
		7646,7647,1,0,0,0,7647,7649,5,236,0,0,7648,7645,1,0,0,0,7648,7649,1,0,
		0,0,7649,7650,1,0,0,0,7650,7651,3,1410,705,0,7651,7652,5,280,0,0,7652,
		7653,3,1412,706,0,7653,1113,1,0,0,0,7654,7655,5,68,0,0,7655,7668,3,910,
		455,0,7656,7657,5,207,0,0,7657,7658,3,910,455,0,7658,7661,3,1016,508,0,
		7659,7660,5,553,0,0,7660,7662,3,910,455,0,7661,7659,1,0,0,0,7661,7662,
		1,0,0,0,7662,7665,1,0,0,0,7663,7664,5,197,0,0,7664,7666,3,910,455,0,7665,
		7663,1,0,0,0,7665,7666,1,0,0,0,7666,7668,1,0,0,0,7667,7654,1,0,0,0,7667,
		7656,1,0,0,0,7668,1115,1,0,0,0,7669,7670,3,1324,662,0,7670,7672,3,1128,
		564,0,7671,7673,3,1118,559,0,7672,7671,1,0,0,0,7672,7673,1,0,0,0,7673,
		1117,1,0,0,0,7674,7675,4,559,102,0,7675,7678,3,1120,560,0,7676,7678,3,
		1142,571,0,7677,7674,1,0,0,0,7677,7676,1,0,0,0,7678,1119,1,0,0,0,7679,
		7680,5,106,0,0,7680,7681,3,1022,511,0,7681,1121,1,0,0,0,7682,7684,4,561,
		103,0,7683,7685,5,391,0,0,7684,7683,1,0,0,0,7684,7685,1,0,0,0,7685,7686,
		1,0,0,0,7686,7687,5,739,0,0,7687,1123,1,0,0,0,7688,7690,7,41,0,0,7689,
		7691,3,122,61,0,7690,7689,1,0,0,0,7690,7691,1,0,0,0,7691,7692,1,0,0,0,
		7692,7696,3,1150,575,0,7693,7695,3,1156,578,0,7694,7693,1,0,0,0,7695,7698,
		1,0,0,0,7696,7694,1,0,0,0,7696,7697,1,0,0,0,7697,7763,1,0,0,0,7698,7696,
		1,0,0,0,7699,7701,5,238,0,0,7700,7702,3,442,221,0,7701,7700,1,0,0,0,7701,
		7702,1,0,0,0,7702,7704,1,0,0,0,7703,7705,3,1334,667,0,7704,7703,1,0,0,
		0,7704,7705,1,0,0,0,7705,7706,1,0,0,0,7706,7710,3,1150,575,0,7707,7709,
		3,1164,582,0,7708,7707,1,0,0,0,7709,7712,1,0,0,0,7710,7708,1,0,0,0,7710,
		7711,1,0,0,0,7711,7763,1,0,0,0,7712,7710,1,0,0,0,7713,7715,5,535,0,0,7714,
		7716,3,442,221,0,7715,7714,1,0,0,0,7715,7716,1,0,0,0,7716,7718,1,0,0,0,
		7717,7719,3,1334,667,0,7718,7717,1,0,0,0,7718,7719,1,0,0,0,7719,7720,1,
		0,0,0,7720,7724,3,1150,575,0,7721,7723,3,1166,583,0,7722,7721,1,0,0,0,
		7723,7726,1,0,0,0,7724,7722,1,0,0,0,7724,7725,1,0,0,0,7725,7763,1,0,0,
		0,7726,7724,1,0,0,0,7727,7729,3,1126,563,0,7728,7727,1,0,0,0,7728,7729,
		1,0,0,0,7729,7760,1,0,0,0,7730,7731,5,439,0,0,7731,7737,5,296,0,0,7732,
		7734,5,619,0,0,7733,7735,3,442,221,0,7734,7733,1,0,0,0,7734,7735,1,0,0,
		0,7735,7737,1,0,0,0,7736,7730,1,0,0,0,7736,7732,1,0,0,0,7737,7739,1,0,
		0,0,7738,7740,3,122,61,0,7739,7738,1,0,0,0,7739,7740,1,0,0,0,7740,7741,
		1,0,0,0,7741,7745,3,1150,575,0,7742,7744,3,1156,578,0,7743,7742,1,0,0,
		0,7744,7747,1,0,0,0,7745,7743,1,0,0,0,7745,7746,1,0,0,0,7746,7761,1,0,
		0,0,7747,7745,1,0,0,0,7748,7749,5,232,0,0,7749,7751,5,296,0,0,7750,7752,
		3,1334,667,0,7751,7750,1,0,0,0,7751,7752,1,0,0,0,7752,7753,1,0,0,0,7753,
		7754,3,1146,573,0,7754,7755,3,1142,571,0,7755,7761,1,0,0,0,7756,7758,3,
		1120,560,0,7757,7759,3,1122,561,0,7758,7757,1,0,0,0,7758,7759,1,0,0,0,
		7759,7761,1,0,0,0,7760,7736,1,0,0,0,7760,7748,1,0,0,0,7760,7756,1,0,0,
		0,7761,7763,1,0,0,0,7762,7688,1,0,0,0,7762,7699,1,0,0,0,7762,7713,1,0,
		0,0,7762,7728,1,0,0,0,7763,1125,1,0,0,0,7764,7766,5,130,0,0,7765,7767,
		3,1410,705,0,7766,7765,1,0,0,0,7766,7767,1,0,0,0,7767,1127,1,0,0,0,7768,
		7793,3,1170,585,0,7769,7771,3,1130,565,0,7770,7769,1,0,0,0,7771,7774,1,
		0,0,0,7772,7770,1,0,0,0,7772,7773,1,0,0,0,7773,7794,1,0,0,0,7774,7772,
		1,0,0,0,7775,7777,3,1252,626,0,7776,7775,1,0,0,0,7776,7777,1,0,0,0,7777,
		7780,1,0,0,0,7778,7779,5,242,0,0,7779,7781,5,60,0,0,7780,7778,1,0,0,0,
		7780,7781,1,0,0,0,7781,7782,1,0,0,0,7782,7783,5,64,0,0,7783,7785,3,1022,
		511,0,7784,7786,7,133,0,0,7785,7784,1,0,0,0,7785,7786,1,0,0,0,7786,7790,
		1,0,0,0,7787,7789,3,1130,565,0,7788,7787,1,0,0,0,7789,7792,1,0,0,0,7790,
		7788,1,0,0,0,7790,7791,1,0,0,0,7791,7794,1,0,0,0,7792,7790,1,0,0,0,7793,
		7772,1,0,0,0,7793,7776,1,0,0,0,7794,1129,1,0,0,0,7795,7797,5,391,0,0,7796,
		7795,1,0,0,0,7796,7797,1,0,0,0,7797,7798,1,0,0,0,7798,7857,3,1458,729,
		0,7799,7800,4,565,104,0,7800,7801,5,391,0,0,7801,7857,5,729,0,0,7802,7806,
		5,167,0,0,7803,7807,3,1138,569,0,7804,7805,4,565,105,0,7805,7807,3,1022,
		511,0,7806,7803,1,0,0,0,7806,7804,1,0,0,0,7807,7857,1,0,0,0,7808,7809,
		5,402,0,0,7809,7810,5,624,0,0,7810,7812,5,392,0,0,7811,7813,3,966,483,
		0,7812,7811,1,0,0,0,7812,7813,1,0,0,0,7813,7857,1,0,0,0,7814,7857,5,70,
		0,0,7815,7816,5,516,0,0,7816,7817,5,167,0,0,7817,7857,5,637,0,0,7818,7820,
		5,439,0,0,7819,7818,1,0,0,0,7819,7820,1,0,0,0,7820,7821,1,0,0,0,7821,7857,
		5,296,0,0,7822,7824,5,619,0,0,7823,7825,5,296,0,0,7824,7823,1,0,0,0,7824,
		7825,1,0,0,0,7825,7857,1,0,0,0,7826,7827,5,119,0,0,7827,7857,3,1448,724,
		0,7828,7857,3,1252,626,0,7829,7830,5,118,0,0,7830,7857,3,1132,566,0,7831,
		7832,5,564,0,0,7832,7857,3,1134,567,0,7833,7834,5,716,0,0,7834,7857,3,
		1428,714,0,7835,7837,4,565,106,0,7836,7838,3,1126,563,0,7837,7836,1,0,
		0,0,7837,7838,1,0,0,0,7838,7839,1,0,0,0,7839,7857,3,1120,560,0,7840,7841,
		4,565,107,0,7841,7857,3,1122,561,0,7842,7843,4,565,108,0,7843,7845,5,758,
		0,0,7844,7846,5,6,0,0,7845,7844,1,0,0,0,7845,7846,1,0,0,0,7846,7847,1,
		0,0,0,7847,7857,3,1488,744,0,7848,7849,4,565,109,0,7849,7851,5,759,0,0,
		7850,7852,5,6,0,0,7851,7850,1,0,0,0,7851,7852,1,0,0,0,7852,7853,1,0,0,
		0,7853,7857,3,1488,744,0,7854,7855,4,565,110,0,7855,7857,3,1160,580,0,
		7856,7796,1,0,0,0,7856,7799,1,0,0,0,7856,7802,1,0,0,0,7856,7808,1,0,0,
		0,7856,7814,1,0,0,0,7856,7815,1,0,0,0,7856,7819,1,0,0,0,7856,7822,1,0,
		0,0,7856,7826,1,0,0,0,7856,7828,1,0,0,0,7856,7829,1,0,0,0,7856,7831,1,
		0,0,0,7856,7833,1,0,0,0,7856,7835,1,0,0,0,7856,7840,1,0,0,0,7856,7842,
		1,0,0,0,7856,7848,1,0,0,0,7856,7854,1,0,0,0,7857,1131,1,0,0,0,7858,7859,
		7,134,0,0,7859,1133,1,0,0,0,7860,7861,7,135,0,0,7861,1135,1,0,0,0,7862,
		7863,5,392,0,0,7863,7864,3,1190,595,0,7864,1137,1,0,0,0,7865,7868,3,1136,
		568,0,7866,7868,3,1432,716,0,7867,7865,1,0,0,0,7867,7866,1,0,0,0,7868,
		1139,1,0,0,0,7869,7871,5,619,0,0,7870,7872,5,296,0,0,7871,7870,1,0,0,0,
		7871,7872,1,0,0,0,7872,7884,1,0,0,0,7873,7874,5,119,0,0,7874,7884,3,1444,
		722,0,7875,7877,3,1012,506,0,7876,7875,1,0,0,0,7876,7877,1,0,0,0,7877,
		7878,1,0,0,0,7878,7884,5,396,0,0,7879,7881,5,439,0,0,7880,7879,1,0,0,0,
		7880,7881,1,0,0,0,7881,7882,1,0,0,0,7882,7884,5,296,0,0,7883,7869,1,0,
		0,0,7883,7873,1,0,0,0,7883,7876,1,0,0,0,7883,7880,1,0,0,0,7884,1141,1,
		0,0,0,7885,7886,5,461,0,0,7886,7888,3,1386,693,0,7887,7889,3,1414,707,
		0,7888,7887,1,0,0,0,7888,7889,1,0,0,0,7889,7892,1,0,0,0,7890,7891,5,346,
		0,0,7891,7893,7,136,0,0,7892,7890,1,0,0,0,7892,7893,1,0,0,0,7893,7910,
		1,0,0,0,7894,7895,5,402,0,0,7895,7896,5,624,0,0,7896,7900,3,1144,572,0,
		7897,7898,5,402,0,0,7898,7899,5,172,0,0,7899,7901,3,1144,572,0,7900,7897,
		1,0,0,0,7900,7901,1,0,0,0,7901,7911,1,0,0,0,7902,7903,5,402,0,0,7903,7904,
		5,172,0,0,7904,7908,3,1144,572,0,7905,7906,5,402,0,0,7906,7907,5,624,0,
		0,7907,7909,3,1144,572,0,7908,7905,1,0,0,0,7908,7909,1,0,0,0,7909,7911,
		1,0,0,0,7910,7894,1,0,0,0,7910,7902,1,0,0,0,7910,7911,1,0,0,0,7911,1143,
		1,0,0,0,7912,7920,7,2,0,0,7913,7914,5,520,0,0,7914,7920,3,1458,729,0,7915,
		7916,5,520,0,0,7916,7920,5,167,0,0,7917,7918,5,393,0,0,7918,7920,5,51,
		0,0,7919,7912,1,0,0,0,7919,7913,1,0,0,0,7919,7915,1,0,0,0,7919,7917,1,
		0,0,0,7920,1145,1,0,0,0,7921,7922,5,32,0,0,7922,7927,3,1148,574,0,7923,
		7924,5,29,0,0,7924,7926,3,1148,574,0,7925,7923,1,0,0,0,7926,7929,1,0,0,
		0,7927,7925,1,0,0,0,7927,7928,1,0,0,0,7928,7930,1,0,0,0,7929,7927,1,0,
		0,0,7930,7931,5,33,0,0,7931,1147,1,0,0,0,7932,7934,3,1410,705,0,7933,7935,
		3,1176,588,0,7934,7933,1,0,0,0,7934,7935,1,0,0,0,7935,7937,1,0,0,0,7936,
		7938,3,364,182,0,7937,7936,1,0,0,0,7937,7938,1,0,0,0,7938,1149,1,0,0,0,
		7939,7940,5,32,0,0,7940,7945,3,1152,576,0,7941,7942,5,29,0,0,7942,7944,
		3,1152,576,0,7943,7941,1,0,0,0,7944,7947,1,0,0,0,7945,7943,1,0,0,0,7945,
		7946,1,0,0,0,7946,7948,1,0,0,0,7947,7945,1,0,0,0,7948,7949,5,33,0,0,7949,
		1151,1,0,0,0,7950,7957,3,1148,574,0,7951,7952,4,576,111,0,7952,7954,3,
		1022,511,0,7953,7955,3,364,182,0,7954,7953,1,0,0,0,7954,7955,1,0,0,0,7955,
		7957,1,0,0,0,7956,7950,1,0,0,0,7956,7951,1,0,0,0,7957,1153,1,0,0,0,7958,
		7959,7,137,0,0,7959,1155,1,0,0,0,7960,7963,3,1158,579,0,7961,7963,3,1162,
		581,0,7962,7960,1,0,0,0,7962,7961,1,0,0,0,7963,1157,1,0,0,0,7964,7966,
		5,295,0,0,7965,7967,5,6,0,0,7966,7965,1,0,0,0,7966,7967,1,0,0,0,7967,7968,
		1,0,0,0,7968,7985,3,1422,711,0,7969,7970,5,119,0,0,7970,7985,3,1448,724,
		0,7971,7985,3,1160,580,0,7972,7973,4,579,112,0,7973,7975,5,758,0,0,7974,
		7976,5,6,0,0,7975,7974,1,0,0,0,7975,7976,1,0,0,0,7976,7977,1,0,0,0,7977,
		7985,3,1488,744,0,7978,7979,4,579,113,0,7979,7981,5,759,0,0,7980,7982,
		5,6,0,0,7981,7980,1,0,0,0,7981,7982,1,0,0,0,7982,7983,1,0,0,0,7983,7985,
		3,1488,744,0,7984,7964,1,0,0,0,7984,7969,1,0,0,0,7984,7971,1,0,0,0,7984,
		7972,1,0,0,0,7984,7978,1,0,0,0,7985,1159,1,0,0,0,7986,7987,7,138,0,0,7987,
		1161,1,0,0,0,7988,7989,7,139,0,0,7989,7990,3,1154,577,0,7990,1163,1,0,
		0,0,7991,7996,3,1158,579,0,7992,7993,5,654,0,0,7993,7994,5,420,0,0,7994,
		7996,3,1410,705,0,7995,7991,1,0,0,0,7995,7992,1,0,0,0,7996,1165,1,0,0,
		0,7997,7998,3,1158,579,0,7998,1167,1,0,0,0,7999,8000,3,1170,585,0,8000,
		8001,5,0,0,1,8001,1169,1,0,0,0,8002,8004,7,140,0,0,8003,8005,3,1176,588,
		0,8004,8003,1,0,0,0,8004,8005,1,0,0,0,8005,8007,1,0,0,0,8006,8008,3,1178,
		589,0,8007,8006,1,0,0,0,8007,8008,1,0,0,0,8008,8149,1,0,0,0,8009,8015,
		5,456,0,0,8010,8012,5,183,0,0,8011,8013,5,435,0,0,8012,8011,1,0,0,0,8012,
		8013,1,0,0,0,8013,8015,1,0,0,0,8014,8009,1,0,0,0,8014,8010,1,0,0,0,8015,
		8017,1,0,0,0,8016,8018,3,1468,734,0,8017,8016,1,0,0,0,8017,8018,1,0,0,
		0,8018,8020,1,0,0,0,8019,8021,3,1178,589,0,8020,8019,1,0,0,0,8020,8021,
		1,0,0,0,8021,8149,1,0,0,0,8022,8024,7,141,0,0,8023,8025,3,1464,732,0,8024,
		8023,1,0,0,0,8024,8025,1,0,0,0,8025,8027,1,0,0,0,8026,8028,3,1178,589,
		0,8027,8026,1,0,0,0,8027,8028,1,0,0,0,8028,8149,1,0,0,0,8029,8031,5,82,
		0,0,8030,8032,3,1176,588,0,8031,8030,1,0,0,0,8031,8032,1,0,0,0,8032,8149,
		1,0,0,0,8033,8149,7,142,0,0,8034,8036,5,104,0,0,8035,8037,3,1176,588,0,
		8036,8035,1,0,0,0,8036,8037,1,0,0,0,8037,8039,1,0,0,0,8038,8040,3,1180,
		590,0,8039,8038,1,0,0,0,8039,8040,1,0,0,0,8040,8149,1,0,0,0,8041,8043,
		3,1172,586,0,8042,8044,3,1176,588,0,8043,8042,1,0,0,0,8043,8044,1,0,0,
		0,8044,8046,1,0,0,0,8045,8047,5,78,0,0,8046,8045,1,0,0,0,8046,8047,1,0,
		0,0,8047,8149,1,0,0,0,8048,8050,5,78,0,0,8049,8051,3,1176,588,0,8050,8049,
		1,0,0,0,8050,8051,1,0,0,0,8051,8149,1,0,0,0,8052,8053,5,104,0,0,8053,8056,
		5,642,0,0,8054,8056,5,639,0,0,8055,8052,1,0,0,0,8055,8054,1,0,0,0,8056,
		8057,1,0,0,0,8057,8059,3,1176,588,0,8058,8060,3,1180,590,0,8059,8058,1,
		0,0,0,8059,8060,1,0,0,0,8060,8149,1,0,0,0,8061,8062,5,382,0,0,8062,8072,
		5,639,0,0,8063,8072,5,399,0,0,8064,8065,5,384,0,0,8065,8072,5,639,0,0,
		8066,8067,5,382,0,0,8067,8068,5,104,0,0,8068,8072,5,642,0,0,8069,8070,
		5,384,0,0,8070,8072,5,642,0,0,8071,8061,1,0,0,0,8071,8063,1,0,0,0,8071,
		8064,1,0,0,0,8071,8066,1,0,0,0,8071,8069,1,0,0,0,8072,8073,1,0,0,0,8073,
		8075,3,1176,588,0,8074,8076,5,78,0,0,8075,8074,1,0,0,0,8075,8076,1,0,0,
		0,8076,8149,1,0,0,0,8077,8078,5,638,0,0,8078,8149,3,1176,588,0,8079,8081,
		5,665,0,0,8080,8082,3,1176,588,0,8081,8080,1,0,0,0,8081,8082,1,0,0,0,8082,
		8084,1,0,0,0,8083,8085,3,1178,589,0,8084,8083,1,0,0,0,8084,8085,1,0,0,
		0,8085,8149,1,0,0,0,8086,8149,5,158,0,0,8087,8089,5,596,0,0,8088,8090,
		3,1188,594,0,8089,8088,1,0,0,0,8089,8090,1,0,0,0,8090,8149,1,0,0,0,8091,
		8093,5,593,0,0,8092,8094,3,1188,594,0,8093,8092,1,0,0,0,8093,8094,1,0,
		0,0,8094,8149,1,0,0,0,8095,8097,5,155,0,0,8096,8098,3,1188,594,0,8097,
		8096,1,0,0,0,8097,8098,1,0,0,0,8098,8149,1,0,0,0,8099,8149,5,597,0,0,8100,
		8102,5,84,0,0,8101,8103,3,1176,588,0,8102,8101,1,0,0,0,8102,8103,1,0,0,
		0,8103,8149,1,0,0,0,8104,8149,7,143,0,0,8105,8106,5,320,0,0,8106,8149,
		5,638,0,0,8107,8111,5,320,0,0,8108,8109,5,104,0,0,8109,8112,5,642,0,0,
		8110,8112,5,639,0,0,8111,8108,1,0,0,0,8111,8110,1,0,0,0,8111,8112,1,0,
		0,0,8112,8114,1,0,0,0,8113,8115,3,1180,590,0,8114,8113,1,0,0,0,8114,8115,
		1,0,0,0,8115,8149,1,0,0,0,8116,8118,5,599,0,0,8117,8119,3,1180,590,0,8118,
		8117,1,0,0,0,8118,8119,1,0,0,0,8119,8149,1,0,0,0,8120,8122,5,590,0,0,8121,
		8123,3,1176,588,0,8122,8121,1,0,0,0,8122,8123,1,0,0,0,8123,8125,1,0,0,
		0,8124,8126,3,1180,590,0,8125,8124,1,0,0,0,8125,8126,1,0,0,0,8126,8149,
		1,0,0,0,8127,8129,5,357,0,0,8128,8130,3,1180,590,0,8129,8128,1,0,0,0,8129,
		8130,1,0,0,0,8130,8149,1,0,0,0,8131,8133,5,319,0,0,8132,8134,3,1180,590,
		0,8133,8132,1,0,0,0,8133,8134,1,0,0,0,8134,8149,1,0,0,0,8135,8136,5,200,
		0,0,8136,8138,3,1440,720,0,8137,8139,3,1180,590,0,8138,8137,1,0,0,0,8138,
		8139,1,0,0,0,8139,8149,1,0,0,0,8140,8141,5,520,0,0,8141,8143,3,1440,720,
		0,8142,8144,3,1180,590,0,8143,8142,1,0,0,0,8143,8144,1,0,0,0,8144,8149,
		1,0,0,0,8145,8149,5,516,0,0,8146,8149,5,293,0,0,8147,8149,7,144,0,0,8148,
		8002,1,0,0,0,8148,8014,1,0,0,0,8148,8022,1,0,0,0,8148,8029,1,0,0,0,8148,
		8033,1,0,0,0,8148,8034,1,0,0,0,8148,8041,1,0,0,0,8148,8048,1,0,0,0,8148,
		8055,1,0,0,0,8148,8071,1,0,0,0,8148,8077,1,0,0,0,8148,8079,1,0,0,0,8148,
		8086,1,0,0,0,8148,8087,1,0,0,0,8148,8091,1,0,0,0,8148,8095,1,0,0,0,8148,
		8099,1,0,0,0,8148,8100,1,0,0,0,8148,8104,1,0,0,0,8148,8105,1,0,0,0,8148,
		8107,1,0,0,0,8148,8116,1,0,0,0,8148,8120,1,0,0,0,8148,8127,1,0,0,0,8148,
		8131,1,0,0,0,8148,8135,1,0,0,0,8148,8140,1,0,0,0,8148,8145,1,0,0,0,8148,
		8146,1,0,0,0,8148,8147,1,0,0,0,8149,1171,1,0,0,0,8150,8154,5,384,0,0,8151,
		8152,5,382,0,0,8152,8154,5,104,0,0,8153,8150,1,0,0,0,8153,8151,1,0,0,0,
		8154,1173,1,0,0,0,8155,8161,5,456,0,0,8156,8158,5,183,0,0,8157,8159,5,
		435,0,0,8158,8157,1,0,0,0,8158,8159,1,0,0,0,8159,8161,1,0,0,0,8160,8155,
		1,0,0,0,8160,8156,1,0,0,0,8161,1175,1,0,0,0,8162,8165,5,32,0,0,8163,8166,
		3,1428,714,0,8164,8166,5,47,0,0,8165,8163,1,0,0,0,8165,8164,1,0,0,0,8166,
		8167,1,0,0,0,8167,8168,5,33,0,0,8168,1177,1,0,0,0,8169,8171,7,145,0,0,
		8170,8169,1,0,0,0,8171,8172,1,0,0,0,8172,8170,1,0,0,0,8172,8173,1,0,0,
		0,8173,1179,1,0,0,0,8174,8189,3,1182,591,0,8175,8189,3,1184,592,0,8176,
		8189,5,91,0,0,8177,8178,3,1010,505,0,8178,8180,3,1192,596,0,8179,8181,
		5,78,0,0,8180,8179,1,0,0,0,8180,8181,1,0,0,0,8181,8189,1,0,0,0,8182,8186,
		5,78,0,0,8183,8184,3,1010,505,0,8184,8185,3,1192,596,0,8185,8187,1,0,0,
		0,8186,8183,1,0,0,0,8186,8187,1,0,0,0,8187,8189,1,0,0,0,8188,8174,1,0,
		0,0,8188,8175,1,0,0,0,8188,8176,1,0,0,0,8188,8177,1,0,0,0,8188,8182,1,
		0,0,0,8189,1181,1,0,0,0,8190,8192,5,66,0,0,8191,8193,5,78,0,0,8192,8191,
		1,0,0,0,8192,8193,1,0,0,0,8193,8197,1,0,0,0,8194,8195,5,78,0,0,8195,8197,
		5,66,0,0,8196,8190,1,0,0,0,8196,8194,1,0,0,0,8197,1183,1,0,0,0,8198,8200,
		5,616,0,0,8199,8201,5,78,0,0,8200,8199,1,0,0,0,8200,8201,1,0,0,0,8201,
		8205,1,0,0,0,8202,8203,5,78,0,0,8203,8205,5,616,0,0,8204,8198,1,0,0,0,
		8204,8202,1,0,0,0,8205,1185,1,0,0,0,8206,8207,5,32,0,0,8207,8208,3,1424,
		712,0,8208,8209,5,33,0,0,8209,1187,1,0,0,0,8210,8211,5,32,0,0,8211,8212,
		5,3,0,0,8212,8213,5,33,0,0,8213,1189,1,0,0,0,8214,8220,1,0,0,0,8215,8220,
		3,1478,739,0,8216,8217,5,32,0,0,8217,8218,5,3,0,0,8218,8220,5,33,0,0,8219,
		8214,1,0,0,0,8219,8215,1,0,0,0,8219,8216,1,0,0,0,8220,1191,1,0,0,0,8221,
		8226,3,1470,735,0,8222,8226,5,78,0,0,8223,8224,4,596,114,0,8224,8226,5,
		167,0,0,8225,8221,1,0,0,0,8225,8222,1,0,0,0,8225,8223,1,0,0,0,8226,1193,
		1,0,0,0,8227,8233,3,1470,735,0,8228,8229,4,597,115,0,8229,8233,5,167,0,
		0,8230,8231,4,597,116,0,8231,8233,5,78,0,0,8232,8227,1,0,0,0,8232,8228,
		1,0,0,0,8232,8230,1,0,0,0,8233,1195,1,0,0,0,8234,8241,3,1204,602,0,8235,
		8237,5,29,0,0,8236,8235,1,0,0,0,8236,8237,1,0,0,0,8237,8238,1,0,0,0,8238,
		8240,3,1204,602,0,8239,8236,1,0,0,0,8240,8243,1,0,0,0,8241,8239,1,0,0,
		0,8241,8242,1,0,0,0,8242,1197,1,0,0,0,8243,8241,1,0,0,0,8244,8246,3,1196,
		598,0,8245,8247,3,1200,600,0,8246,8245,1,0,0,0,8246,8247,1,0,0,0,8247,
		8250,1,0,0,0,8248,8250,3,1200,600,0,8249,8244,1,0,0,0,8249,8248,1,0,0,
		0,8250,1199,1,0,0,0,8251,8253,3,1214,607,0,8252,8254,3,94,47,0,8253,8252,
		1,0,0,0,8253,8254,1,0,0,0,8254,8257,1,0,0,0,8255,8257,3,94,47,0,8256,8251,
		1,0,0,0,8256,8255,1,0,0,0,8257,1201,1,0,0,0,8258,8260,3,1204,602,0,8259,
		8258,1,0,0,0,8260,8261,1,0,0,0,8261,8259,1,0,0,0,8261,8262,1,0,0,0,8262,
		1203,1,0,0,0,8263,8265,5,199,0,0,8264,8266,5,6,0,0,8265,8264,1,0,0,0,8265,
		8266,1,0,0,0,8266,8267,1,0,0,0,8267,8404,3,1378,689,0,8268,8269,4,602,
		117,0,8269,8271,5,730,0,0,8270,8272,3,1480,740,0,8271,8270,1,0,0,0,8271,
		8272,1,0,0,0,8272,8275,1,0,0,0,8273,8276,5,396,0,0,8274,8276,3,1470,735,
		0,8275,8273,1,0,0,0,8275,8274,1,0,0,0,8276,8404,1,0,0,0,8277,8279,5,349,
		0,0,8278,8280,5,6,0,0,8279,8278,1,0,0,0,8279,8280,1,0,0,0,8280,8281,1,
		0,0,0,8281,8404,3,1426,713,0,8282,8284,5,368,0,0,8283,8285,5,6,0,0,8284,
		8283,1,0,0,0,8284,8285,1,0,0,0,8285,8286,1,0,0,0,8286,8404,3,1426,713,
		0,8287,8289,5,71,0,0,8288,8290,5,6,0,0,8289,8288,1,0,0,0,8289,8290,1,0,
		0,0,8290,8291,1,0,0,0,8291,8404,3,1426,713,0,8292,8294,5,425,0,0,8293,
		8295,5,6,0,0,8294,8293,1,0,0,0,8294,8295,1,0,0,0,8295,8296,1,0,0,0,8296,
		8404,3,1442,721,0,8297,8299,5,119,0,0,8298,8300,5,6,0,0,8299,8298,1,0,
		0,0,8299,8300,1,0,0,0,8300,8301,1,0,0,0,8301,8404,3,1442,721,0,8302,8304,
		5,125,0,0,8303,8305,5,6,0,0,8304,8303,1,0,0,0,8304,8305,1,0,0,0,8305,8306,
		1,0,0,0,8306,8404,3,1444,722,0,8307,8309,5,195,0,0,8308,8310,5,6,0,0,8309,
		8308,1,0,0,0,8309,8310,1,0,0,0,8310,8311,1,0,0,0,8311,8404,3,1444,722,
		0,8312,8314,5,70,0,0,8313,8315,5,6,0,0,8314,8313,1,0,0,0,8314,8315,1,0,
		0,0,8315,8316,1,0,0,0,8316,8404,3,1426,713,0,8317,8319,5,418,0,0,8318,
		8320,5,6,0,0,8319,8318,1,0,0,0,8319,8320,1,0,0,0,8320,8321,1,0,0,0,8321,
		8404,3,1206,603,0,8322,8324,7,146,0,0,8323,8325,5,6,0,0,8324,8323,1,0,
		0,0,8324,8325,1,0,0,0,8325,8326,1,0,0,0,8326,8404,3,1206,603,0,8327,8329,
		7,147,0,0,8328,8330,5,6,0,0,8329,8328,1,0,0,0,8329,8330,1,0,0,0,8330,8331,
		1,0,0,0,8331,8404,3,1422,711,0,8332,8334,5,171,0,0,8333,8335,5,6,0,0,8334,
		8333,1,0,0,0,8334,8335,1,0,0,0,8335,8336,1,0,0,0,8336,8404,3,1422,711,
		0,8337,8339,5,503,0,0,8338,8340,5,6,0,0,8339,8338,1,0,0,0,8339,8340,1,
		0,0,0,8340,8341,1,0,0,0,8341,8404,7,148,0,0,8342,8344,5,618,0,0,8343,8345,
		5,6,0,0,8344,8343,1,0,0,0,8344,8345,1,0,0,0,8345,8346,1,0,0,0,8346,8347,
		5,32,0,0,8347,8348,3,1388,694,0,8348,8349,5,33,0,0,8349,8404,1,0,0,0,8350,
		8404,3,1212,606,0,8351,8404,3,1208,604,0,8352,8354,5,276,0,0,8353,8355,
		5,6,0,0,8354,8353,1,0,0,0,8354,8355,1,0,0,0,8355,8356,1,0,0,0,8356,8404,
		7,149,0,0,8357,8358,5,154,0,0,8358,8360,5,177,0,0,8359,8361,5,6,0,0,8360,
		8359,1,0,0,0,8360,8361,1,0,0,0,8361,8362,1,0,0,0,8362,8404,3,1444,722,
		0,8363,8364,5,269,0,0,8364,8366,5,177,0,0,8365,8367,5,6,0,0,8366,8365,
		1,0,0,0,8366,8367,1,0,0,0,8367,8368,1,0,0,0,8368,8404,3,1444,722,0,8369,
		8371,5,583,0,0,8370,8372,5,6,0,0,8371,8370,1,0,0,0,8371,8372,1,0,0,0,8372,
		8373,1,0,0,0,8373,8404,3,1410,705,0,8374,8375,5,564,0,0,8375,8404,7,150,
		0,0,8376,8378,5,128,0,0,8377,8379,5,6,0,0,8378,8377,1,0,0,0,8378,8379,
		1,0,0,0,8379,8380,1,0,0,0,8380,8404,3,1444,722,0,8381,8383,5,295,0,0,8382,
		8384,5,6,0,0,8383,8382,1,0,0,0,8383,8384,1,0,0,0,8384,8385,1,0,0,0,8385,
		8404,3,1426,713,0,8386,8387,4,602,118,0,8387,8388,5,554,0,0,8388,8404,
		5,602,0,0,8389,8390,4,602,119,0,8390,8392,5,758,0,0,8391,8393,5,6,0,0,
		8392,8391,1,0,0,0,8392,8393,1,0,0,0,8393,8394,1,0,0,0,8394,8404,3,1488,
		744,0,8395,8396,4,602,120,0,8396,8398,5,759,0,0,8397,8399,5,6,0,0,8398,
		8397,1,0,0,0,8398,8399,1,0,0,0,8399,8400,1,0,0,0,8400,8404,3,1488,744,
		0,8401,8402,4,602,121,0,8402,8404,3,154,77,0,8403,8263,1,0,0,0,8403,8268,
		1,0,0,0,8403,8277,1,0,0,0,8403,8282,1,0,0,0,8403,8287,1,0,0,0,8403,8292,
		1,0,0,0,8403,8297,1,0,0,0,8403,8302,1,0,0,0,8403,8307,1,0,0,0,8403,8312,
		1,0,0,0,8403,8317,1,0,0,0,8403,8322,1,0,0,0,8403,8327,1,0,0,0,8403,8332,
		1,0,0,0,8403,8337,1,0,0,0,8403,8342,1,0,0,0,8403,8350,1,0,0,0,8403,8351,
		1,0,0,0,8403,8352,1,0,0,0,8403,8357,1,0,0,0,8403,8363,1,0,0,0,8403,8369,
		1,0,0,0,8403,8374,1,0,0,0,8403,8376,1,0,0,0,8403,8381,1,0,0,0,8403,8386,
		1,0,0,0,8403,8389,1,0,0,0,8403,8395,1,0,0,0,8403,8401,1,0,0,0,8404,1205,
		1,0,0,0,8405,8408,3,1422,711,0,8406,8408,5,167,0,0,8407,8405,1,0,0,0,8407,
		8406,1,0,0,0,8408,1207,1,0,0,0,8409,8411,5,167,0,0,8410,8409,1,0,0,0,8410,
		8411,1,0,0,0,8411,8412,1,0,0,0,8412,8414,5,113,0,0,8413,8415,5,6,0,0,8414,
		8413,1,0,0,0,8414,8415,1,0,0,0,8415,8416,1,0,0,0,8416,8417,3,1194,597,
		0,8417,1209,1,0,0,0,8418,8420,5,167,0,0,8419,8418,1,0,0,0,8419,8420,1,
		0,0,0,8420,8421,1,0,0,0,8421,8423,5,195,0,0,8422,8424,5,6,0,0,8423,8422,
		1,0,0,0,8423,8424,1,0,0,0,8424,8425,1,0,0,0,8425,8426,3,1442,721,0,8426,
		1211,1,0,0,0,8427,8429,5,167,0,0,8428,8427,1,0,0,0,8428,8429,1,0,0,0,8429,
		8430,1,0,0,0,8430,8432,3,1010,505,0,8431,8433,5,6,0,0,8432,8431,1,0,0,
		0,8432,8433,1,0,0,0,8433,8434,1,0,0,0,8434,8435,3,1192,596,0,8435,1213,
		1,0,0,0,8436,8437,5,424,0,0,8437,8438,5,90,0,0,8438,8441,3,1216,608,0,
		8439,8440,5,423,0,0,8440,8442,3,1424,712,0,8441,8439,1,0,0,0,8441,8442,
		1,0,0,0,8442,8444,1,0,0,0,8443,8445,3,1218,609,0,8444,8443,1,0,0,0,8444,
		8445,1,0,0,0,8445,8447,1,0,0,0,8446,8448,3,1222,611,0,8447,8446,1,0,0,
		0,8447,8448,1,0,0,0,8448,1215,1,0,0,0,8449,8451,5,308,0,0,8450,8449,1,
		0,0,0,8450,8451,1,0,0,0,8451,8452,1,0,0,0,8452,8454,5,296,0,0,8453,8455,
		3,1220,610,0,8454,8453,1,0,0,0,8454,8455,1,0,0,0,8455,8456,1,0,0,0,8456,
		8458,5,32,0,0,8457,8459,3,1412,706,0,8458,8457,1,0,0,0,8458,8459,1,0,0,
		0,8459,8460,1,0,0,0,8460,8483,5,33,0,0,8461,8463,5,308,0,0,8462,8461,1,
		0,0,0,8462,8463,1,0,0,0,8463,8464,1,0,0,0,8464,8465,5,253,0,0,8465,8466,
		5,32,0,0,8466,8467,3,920,460,0,8467,8468,5,33,0,0,8468,8483,1,0,0,0,8469,
		8480,7,151,0,0,8470,8471,5,32,0,0,8471,8472,3,920,460,0,8472,8473,5,33,
		0,0,8473,8481,1,0,0,0,8474,8475,5,115,0,0,8475,8477,5,32,0,0,8476,8478,
		3,1412,706,0,8477,8476,1,0,0,0,8477,8478,1,0,0,0,8478,8479,1,0,0,0,8479,
		8481,5,33,0,0,8480,8470,1,0,0,0,8480,8474,1,0,0,0,8481,8483,1,0,0,0,8482,
		8450,1,0,0,0,8482,8462,1,0,0,0,8482,8469,1,0,0,0,8483,1217,1,0,0,0,8484,
		8485,5,572,0,0,8485,8487,5,90,0,0,8486,8488,5,308,0,0,8487,8486,1,0,0,
		0,8487,8488,1,0,0,0,8488,8499,1,0,0,0,8489,8490,5,253,0,0,8490,8491,5,
		32,0,0,8491,8492,3,920,460,0,8492,8493,5,33,0,0,8493,8500,1,0,0,0,8494,
		8496,5,296,0,0,8495,8497,3,1220,610,0,8496,8495,1,0,0,0,8496,8497,1,0,
		0,0,8497,8498,1,0,0,0,8498,8500,3,1414,707,0,8499,8489,1,0,0,0,8499,8494,
		1,0,0,0,8500,8503,1,0,0,0,8501,8502,5,571,0,0,8502,8504,3,1424,712,0,8503,
		8501,1,0,0,0,8503,8504,1,0,0,0,8504,1219,1,0,0,0,8505,8506,5,57,0,0,8506,
		8507,5,6,0,0,8507,8508,3,1424,712,0,8508,1221,1,0,0,0,8509,8510,5,32,0,
		0,8510,8515,3,1224,612,0,8511,8512,5,29,0,0,8512,8514,3,1224,612,0,8513,
		8511,1,0,0,0,8514,8517,1,0,0,0,8515,8513,1,0,0,0,8515,8516,1,0,0,0,8516,
		8518,1,0,0,0,8517,8515,1,0,0,0,8518,8519,5,33,0,0,8519,1223,1,0,0,0,8520,
		8521,5,424,0,0,8521,8532,3,1410,705,0,8522,8523,5,636,0,0,8523,8524,5,
		304,0,0,8524,8527,5,591,0,0,8525,8528,3,1232,616,0,8526,8528,5,354,0,0,
		8527,8525,1,0,0,0,8527,8526,1,0,0,0,8528,8533,1,0,0,0,8529,8530,5,636,
		0,0,8530,8531,5,283,0,0,8531,8533,3,1226,613,0,8532,8522,1,0,0,0,8532,
		8529,1,0,0,0,8532,8533,1,0,0,0,8533,8537,1,0,0,0,8534,8536,3,1228,614,
		0,8535,8534,1,0,0,0,8536,8539,1,0,0,0,8537,8535,1,0,0,0,8537,8538,1,0,
		0,0,8538,8551,1,0,0,0,8539,8537,1,0,0,0,8540,8541,5,32,0,0,8541,8546,3,
		1230,615,0,8542,8543,5,29,0,0,8543,8545,3,1230,615,0,8544,8542,1,0,0,0,
		8545,8548,1,0,0,0,8546,8544,1,0,0,0,8546,8547,1,0,0,0,8547,8549,1,0,0,
		0,8548,8546,1,0,0,0,8549,8550,5,33,0,0,8550,8552,1,0,0,0,8551,8540,1,0,
		0,0,8551,8552,1,0,0,0,8552,1225,1,0,0,0,8553,8566,3,1232,616,0,8554,8555,
		5,32,0,0,8555,8560,3,1232,616,0,8556,8557,5,29,0,0,8557,8559,3,1232,616,
		0,8558,8556,1,0,0,0,8559,8562,1,0,0,0,8560,8558,1,0,0,0,8560,8561,1,0,
		0,0,8561,8563,1,0,0,0,8562,8560,1,0,0,0,8563,8564,5,33,0,0,8564,8566,1,
		0,0,0,8565,8553,1,0,0,0,8565,8554,1,0,0,0,8566,1227,1,0,0,0,8567,8569,
		5,583,0,0,8568,8570,5,6,0,0,8569,8568,1,0,0,0,8569,8570,1,0,0,0,8570,8571,
		1,0,0,0,8571,8602,3,1410,705,0,8572,8574,5,564,0,0,8573,8572,1,0,0,0,8573,
		8574,1,0,0,0,8574,8575,1,0,0,0,8575,8577,5,199,0,0,8576,8578,5,6,0,0,8577,
		8576,1,0,0,0,8577,8578,1,0,0,0,8578,8579,1,0,0,0,8579,8602,3,1378,689,
		0,8580,8582,5,389,0,0,8581,8583,5,6,0,0,8582,8581,1,0,0,0,8582,8583,1,
		0,0,0,8583,8584,1,0,0,0,8584,8602,3,1424,712,0,8585,8587,7,152,0,0,8586,
		8588,5,6,0,0,8587,8586,1,0,0,0,8587,8588,1,0,0,0,8588,8589,1,0,0,0,8589,
		8602,3,1424,712,0,8590,8591,7,153,0,0,8591,8593,5,177,0,0,8592,8594,5,
		6,0,0,8593,8592,1,0,0,0,8593,8594,1,0,0,0,8594,8595,1,0,0,0,8595,8602,
		3,1448,724,0,8596,8598,5,119,0,0,8597,8599,5,6,0,0,8598,8597,1,0,0,0,8598,
		8599,1,0,0,0,8599,8600,1,0,0,0,8600,8602,3,1448,724,0,8601,8567,1,0,0,
		0,8601,8573,1,0,0,0,8601,8580,1,0,0,0,8601,8585,1,0,0,0,8601,8590,1,0,
		0,0,8601,8596,1,0,0,0,8602,1229,1,0,0,0,8603,8604,5,572,0,0,8604,8608,
		3,1470,735,0,8605,8607,3,1228,614,0,8606,8605,1,0,0,0,8607,8610,1,0,0,
		0,8608,8606,1,0,0,0,8608,8609,1,0,0,0,8609,1231,1,0,0,0,8610,8608,1,0,
		0,0,8611,8612,5,32,0,0,8612,8617,3,1234,617,0,8613,8614,5,29,0,0,8614,
		8616,3,1234,617,0,8615,8613,1,0,0,0,8616,8619,1,0,0,0,8617,8615,1,0,0,
		0,8617,8618,1,0,0,0,8618,8620,1,0,0,0,8619,8617,1,0,0,0,8620,8621,5,33,
		0,0,8621,1233,1,0,0,0,8622,8625,3,920,460,0,8623,8625,5,354,0,0,8624,8622,
		1,0,0,0,8624,8623,1,0,0,0,8625,1235,1,0,0,0,8626,8627,5,169,0,0,8627,8628,
		5,6,0,0,8628,8629,3,1310,655,0,8629,1237,1,0,0,0,8630,8631,5,264,0,0,8631,
		8632,5,210,0,0,8632,1239,1,0,0,0,8633,8634,3,1238,619,0,8634,8635,3,1242,
		621,0,8635,1241,1,0,0,0,8636,8644,3,1410,705,0,8637,8641,4,621,122,0,8638,
		8642,3,1416,708,0,8639,8640,5,167,0,0,8640,8642,3,1420,710,0,8641,8638,
		1,0,0,0,8641,8639,1,0,0,0,8642,8644,1,0,0,0,8643,8636,1,0,0,0,8643,8637,
		1,0,0,0,8644,1243,1,0,0,0,8645,8646,5,264,0,0,8646,8647,3,1012,506,0,8647,
		8648,5,210,0,0,8648,1245,1,0,0,0,8649,8650,5,265,0,0,8650,8651,5,620,0,
		0,8651,8652,5,628,0,0,8652,1247,1,0,0,0,8653,8655,7,154,0,0,8654,8653,
		1,0,0,0,8654,8655,1,0,0,0,8655,8656,1,0,0,0,8656,8657,3,1250,625,0,8657,
		1249,1,0,0,0,8658,8659,3,1392,696,0,8659,8660,3,1254,627,0,8660,1251,1,
		0,0,0,8661,8662,5,113,0,0,8662,8663,3,1194,597,0,8663,1253,1,0,0,0,8664,
		8666,3,1170,585,0,8665,8667,3,1252,626,0,8666,8665,1,0,0,0,8666,8667,1,
		0,0,0,8667,1255,1,0,0,0,8668,8669,5,32,0,0,8669,8670,3,1342,671,0,8670,
		8671,5,29,0,0,8671,8672,3,1342,671,0,8672,8673,5,33,0,0,8673,1257,1,0,
		0,0,8674,8679,3,1358,679,0,8675,8676,5,29,0,0,8676,8678,3,1358,679,0,8677,
		8675,1,0,0,0,8678,8681,1,0,0,0,8679,8677,1,0,0,0,8679,8680,1,0,0,0,8680,
		1259,1,0,0,0,8681,8679,1,0,0,0,8682,8687,3,1262,631,0,8683,8684,5,29,0,
		0,8684,8686,3,1262,631,0,8685,8683,1,0,0,0,8686,8689,1,0,0,0,8687,8685,
		1,0,0,0,8687,8688,1,0,0,0,8688,1261,1,0,0,0,8689,8687,1,0,0,0,8690,8691,
		3,1330,665,0,8691,8694,5,6,0,0,8692,8695,3,910,455,0,8693,8695,5,167,0,
		0,8694,8692,1,0,0,0,8694,8693,1,0,0,0,8695,1263,1,0,0,0,8696,8697,3,1010,
		505,0,8697,8698,3,1192,596,0,8698,1265,1,0,0,0,8699,8701,5,115,0,0,8700,
		8702,3,1268,634,0,8701,8700,1,0,0,0,8702,8703,1,0,0,0,8703,8701,1,0,0,
		0,8703,8704,1,0,0,0,8704,1267,1,0,0,0,8705,8706,5,589,0,0,8706,8707,5,
		90,0,0,8707,8718,3,1444,722,0,8708,8710,5,411,0,0,8709,8708,1,0,0,0,8709,
		8710,1,0,0,0,8710,8711,1,0,0,0,8711,8712,5,194,0,0,8712,8713,5,90,0,0,
		8713,8718,3,1444,722,0,8714,8715,5,203,0,0,8715,8716,5,90,0,0,8716,8718,
		3,1444,722,0,8717,8705,1,0,0,0,8717,8709,1,0,0,0,8717,8714,1,0,0,0,8718,
		1269,1,0,0,0,8719,8721,5,309,0,0,8720,8722,3,1272,636,0,8721,8720,1,0,
		0,0,8722,8723,1,0,0,0,8723,8721,1,0,0,0,8723,8724,1,0,0,0,8724,1271,1,
		0,0,0,8725,8726,7,155,0,0,8726,8727,5,90,0,0,8727,8728,3,1444,722,0,8728,
		1273,1,0,0,0,8729,8734,3,1310,655,0,8730,8731,5,29,0,0,8731,8733,3,1310,
		655,0,8732,8730,1,0,0,0,8733,8736,1,0,0,0,8734,8732,1,0,0,0,8734,8735,
		1,0,0,0,8735,1275,1,0,0,0,8736,8734,1,0,0,0,8737,8742,3,1278,639,0,8738,
		8739,5,29,0,0,8739,8741,3,1278,639,0,8740,8738,1,0,0,0,8741,8744,1,0,0,
		0,8742,8740,1,0,0,0,8742,8743,1,0,0,0,8743,1277,1,0,0,0,8744,8742,1,0,
		0,0,8745,8755,3,1310,655,0,8746,8748,3,1282,641,0,8747,8749,3,1280,640,
		0,8748,8747,1,0,0,0,8748,8749,1,0,0,0,8749,8756,1,0,0,0,8750,8752,3,1288,
		644,0,8751,8753,3,1296,648,0,8752,8751,1,0,0,0,8752,8753,1,0,0,0,8753,
		8756,1,0,0,0,8754,8756,3,1280,640,0,8755,8746,1,0,0,0,8755,8750,1,0,0,
		0,8755,8754,1,0,0,0,8755,8756,1,0,0,0,8756,1279,1,0,0,0,8757,8758,5,62,
		0,0,8758,8761,3,1282,641,0,8759,8760,5,62,0,0,8760,8762,3,1282,641,0,8761,
		8759,1,0,0,0,8761,8762,1,0,0,0,8762,1281,1,0,0,0,8763,8770,3,1284,642,
		0,8764,8770,3,1286,643,0,8765,8770,3,1288,644,0,8766,8770,3,1290,645,0,
		8767,8770,3,1292,646,0,8768,8770,3,1294,647,0,8769,8763,1,0,0,0,8769,8764,
		1,0,0,0,8769,8765,1,0,0,0,8769,8766,1,0,0,0,8769,8767,1,0,0,0,8769,8768,
		1,0,0,0,8770,1283,1,0,0,0,8771,8772,5,263,0,0,8772,8773,5,90,0,0,8773,
		8774,3,1442,721,0,8774,1285,1,0,0,0,8775,8776,5,263,0,0,8776,8777,5,90,
		0,0,8777,8778,5,743,0,0,8778,8779,5,425,0,0,8779,1287,1,0,0,0,8780,8781,
		5,263,0,0,8781,8782,5,654,0,0,8782,8783,3,1470,735,0,8783,1289,1,0,0,0,
		8784,8785,5,263,0,0,8785,8786,5,654,0,0,8786,8787,3,1470,735,0,8787,8788,
		5,64,0,0,8788,8789,3,1446,723,0,8789,1291,1,0,0,0,8790,8791,5,263,0,0,
		8791,8792,5,654,0,0,8792,8793,3,1470,735,0,8793,8794,5,90,0,0,8794,8795,
		3,1442,721,0,8795,1293,1,0,0,0,8796,8797,5,263,0,0,8797,8798,5,654,0,0,
		8798,8799,3,1470,735,0,8799,8800,5,90,0,0,8800,8801,5,743,0,0,8801,8802,
		5,425,0,0,8802,1295,1,0,0,0,8803,8804,5,801,0,0,8804,8808,5,795,0,0,8805,
		8809,3,1286,643,0,8806,8809,3,1290,645,0,8807,8809,3,1284,642,0,8808,8805,
		1,0,0,0,8808,8806,1,0,0,0,8808,8807,1,0,0,0,8809,1297,1,0,0,0,8810,8811,
		5,736,0,0,8811,8812,5,144,0,0,8812,8813,5,425,0,0,8813,1299,1,0,0,0,8814,
		8815,5,179,0,0,8815,8816,5,737,0,0,8816,8817,5,425,0,0,8817,1301,1,0,0,
		0,8818,8819,3,1304,652,0,8819,8820,5,798,0,0,8820,8821,5,799,0,0,8821,
		8834,1,0,0,0,8822,8823,3,1304,652,0,8823,8824,5,800,0,0,8824,8834,1,0,
		0,0,8825,8826,3,1304,652,0,8826,8827,5,797,0,0,8827,8828,5,799,0,0,8828,
		8829,5,520,0,0,8829,8830,5,802,0,0,8830,8831,5,64,0,0,8831,8832,3,1446,
		723,0,8832,8834,1,0,0,0,8833,8818,1,0,0,0,8833,8822,1,0,0,0,8833,8825,
		1,0,0,0,8834,1303,1,0,0,0,8835,8836,3,1454,727,0,8836,8837,5,796,0,0,8837,
		1305,1,0,0,0,8838,8839,5,476,0,0,8839,8840,3,1444,722,0,8840,1307,1,0,
		0,0,8841,8843,3,1470,735,0,8842,8844,3,986,493,0,8843,8842,1,0,0,0,8843,
		8844,1,0,0,0,8844,1309,1,0,0,0,8845,8851,3,1308,654,0,8846,8848,5,147,
		0,0,8847,8849,3,1478,739,0,8848,8847,1,0,0,0,8848,8849,1,0,0,0,8849,8851,
		1,0,0,0,8850,8845,1,0,0,0,8850,8846,1,0,0,0,8851,1311,1,0,0,0,8852,8853,
		5,306,0,0,8853,8854,3,1442,721,0,8854,1313,1,0,0,0,8855,8858,3,1312,656,
		0,8856,8858,3,392,196,0,8857,8855,1,0,0,0,8857,8856,1,0,0,0,8858,1315,
		1,0,0,0,8859,8860,7,156,0,0,8860,1317,1,0,0,0,8861,8862,7,157,0,0,8862,
		1319,1,0,0,0,8863,8864,5,424,0,0,8864,8865,3,1414,707,0,8865,1321,1,0,
		0,0,8866,8872,3,1420,710,0,8867,8869,3,1416,708,0,8868,8870,3,1420,710,
		0,8869,8868,1,0,0,0,8869,8870,1,0,0,0,8870,8872,1,0,0,0,8871,8866,1,0,
		0,0,8871,8867,1,0,0,0,8872,1323,1,0,0,0,8873,8874,3,1410,705,0,8874,1325,
		1,0,0,0,8875,8876,3,1410,705,0,8876,1327,1,0,0,0,8877,8878,5,32,0,0,8878,
		8883,3,1326,663,0,8879,8880,5,29,0,0,8880,8882,3,1326,663,0,8881,8879,
		1,0,0,0,8882,8885,1,0,0,0,8883,8881,1,0,0,0,8883,8884,1,0,0,0,8884,8886,
		1,0,0,0,8885,8883,1,0,0,0,8886,8887,5,33,0,0,8887,1329,1,0,0,0,8888,8889,
		3,1322,661,0,8889,1331,1,0,0,0,8890,8893,3,1330,665,0,8891,8893,3,1338,
		669,0,8892,8890,1,0,0,0,8892,8891,1,0,0,0,8893,1333,1,0,0,0,8894,8895,
		3,1410,705,0,8895,1335,1,0,0,0,8896,8897,3,1322,661,0,8897,1337,1,0,0,
		0,8898,8899,3,1410,705,0,8899,8903,5,28,0,0,8900,8901,3,1410,705,0,8901,
		8902,5,28,0,0,8902,8904,1,0,0,0,8903,8900,1,0,0,0,8903,8904,1,0,0,0,8904,
		8905,1,0,0,0,8905,8906,5,16,0,0,8906,1339,1,0,0,0,8907,8908,3,1410,705,
		0,8908,1341,1,0,0,0,8909,8910,3,1410,705,0,8910,1343,1,0,0,0,8911,8912,
		3,1416,708,0,8912,1345,1,0,0,0,8913,8914,3,1416,708,0,8914,1347,1,0,0,
		0,8915,8916,3,1416,708,0,8916,1349,1,0,0,0,8917,8918,3,1416,708,0,8918,
		1351,1,0,0,0,8919,8920,3,1416,708,0,8920,1353,1,0,0,0,8921,8922,3,1416,
		708,0,8922,1355,1,0,0,0,8923,8926,3,1416,708,0,8924,8926,3,1420,710,0,
		8925,8923,1,0,0,0,8925,8924,1,0,0,0,8926,1357,1,0,0,0,8927,8930,3,1416,
		708,0,8928,8930,3,1420,710,0,8929,8927,1,0,0,0,8929,8928,1,0,0,0,8930,
		1359,1,0,0,0,8931,8932,3,1410,705,0,8932,1361,1,0,0,0,8933,8934,3,1410,
		705,0,8934,1363,1,0,0,0,8935,8936,3,1410,705,0,8936,1365,1,0,0,0,8937,
		8938,3,1410,705,0,8938,1367,1,0,0,0,8939,8940,3,1416,708,0,8940,1369,1,
		0,0,0,8941,8942,3,1416,708,0,8942,1371,1,0,0,0,8943,8944,3,1410,705,0,
		8944,1373,1,0,0,0,8945,8946,3,1470,735,0,8946,1375,1,0,0,0,8947,8948,3,
		1470,735,0,8948,1377,1,0,0,0,8949,8950,3,1470,735,0,8950,1379,1,0,0,0,
		8951,8954,3,1416,708,0,8952,8954,3,1420,710,0,8953,8951,1,0,0,0,8953,8952,
		1,0,0,0,8954,1381,1,0,0,0,8955,8956,3,1342,671,0,8956,8957,3,1420,710,
		0,8957,1383,1,0,0,0,8958,8966,3,1410,705,0,8959,8960,5,28,0,0,8960,8967,
		5,16,0,0,8961,8964,3,1420,710,0,8962,8963,5,28,0,0,8963,8965,5,16,0,0,
		8964,8962,1,0,0,0,8964,8965,1,0,0,0,8965,8967,1,0,0,0,8966,8959,1,0,0,
		0,8966,8961,1,0,0,0,8966,8967,1,0,0,0,8967,1385,1,0,0,0,8968,8971,3,1416,
		708,0,8969,8971,3,1420,710,0,8970,8968,1,0,0,0,8970,8969,1,0,0,0,8971,
		1387,1,0,0,0,8972,8977,3,1386,693,0,8973,8974,5,29,0,0,8974,8976,3,1386,
		693,0,8975,8973,1,0,0,0,8976,8979,1,0,0,0,8977,8975,1,0,0,0,8977,8978,
		1,0,0,0,8978,1389,1,0,0,0,8979,8977,1,0,0,0,8980,8985,3,1384,692,0,8981,
		8982,5,29,0,0,8982,8984,3,1384,692,0,8983,8981,1,0,0,0,8984,8987,1,0,0,
		0,8985,8983,1,0,0,0,8985,8986,1,0,0,0,8986,1391,1,0,0,0,8987,8985,1,0,
		0,0,8988,8989,3,1410,705,0,8989,1393,1,0,0,0,8990,8993,3,1408,704,0,8991,
		8993,3,1496,748,0,8992,8990,1,0,0,0,8992,8991,1,0,0,0,8993,1395,1,0,0,
		0,8994,8995,3,1394,697,0,8995,1397,1,0,0,0,8996,8999,3,1408,704,0,8997,
		8999,3,1502,751,0,8998,8996,1,0,0,0,8998,8997,1,0,0,0,8999,1399,1,0,0,
		0,9000,9001,3,1410,705,0,9001,1401,1,0,0,0,9002,9003,3,1442,721,0,9003,
		1403,1,0,0,0,9004,9005,3,1410,705,0,9005,1405,1,0,0,0,9006,9007,3,1410,
		705,0,9007,1407,1,0,0,0,9008,9012,7,158,0,0,9009,9010,4,704,123,0,9010,
		9012,5,824,0,0,9011,9008,1,0,0,0,9011,9009,1,0,0,0,9012,1409,1,0,0,0,9013,
		9016,3,1408,704,0,9014,9016,3,1490,745,0,9015,9013,1,0,0,0,9015,9014,1,
		0,0,0,9016,1411,1,0,0,0,9017,9022,3,1410,705,0,9018,9019,5,29,0,0,9019,
		9021,3,1410,705,0,9020,9018,1,0,0,0,9021,9024,1,0,0,0,9022,9020,1,0,0,
		0,9022,9023,1,0,0,0,9023,1413,1,0,0,0,9024,9022,1,0,0,0,9025,9026,5,32,
		0,0,9026,9027,3,1412,706,0,9027,9028,5,33,0,0,9028,1415,1,0,0,0,9029,9031,
		3,1410,705,0,9030,9032,3,1420,710,0,9031,9030,1,0,0,0,9031,9032,1,0,0,
		0,9032,1417,1,0,0,0,9033,9038,3,1410,705,0,9034,9036,3,1420,710,0,9035,
		9037,3,1420,710,0,9036,9035,1,0,0,0,9036,9037,1,0,0,0,9037,9039,1,0,0,
		0,9038,9034,1,0,0,0,9038,9039,1,0,0,0,9039,1419,1,0,0,0,9040,9041,5,28,
		0,0,9041,9042,3,1410,705,0,9042,1421,1,0,0,0,9043,9044,7,159,0,0,9044,
		1423,1,0,0,0,9045,9046,7,160,0,0,9046,1425,1,0,0,0,9047,9048,7,161,0,0,
		9048,1427,1,0,0,0,9049,9055,5,3,0,0,9050,9051,4,714,124,0,9051,9055,5,
		45,0,0,9052,9055,5,5,0,0,9053,9055,5,4,0,0,9054,9049,1,0,0,0,9054,9050,
		1,0,0,0,9054,9052,1,0,0,0,9054,9053,1,0,0,0,9055,1429,1,0,0,0,9056,9062,
		3,1434,717,0,9057,9058,5,14,0,0,9058,9062,3,1422,711,0,9059,9060,5,15,
		0,0,9060,9062,3,1422,711,0,9061,9056,1,0,0,0,9061,9057,1,0,0,0,9061,9059,
		1,0,0,0,9062,1431,1,0,0,0,9063,9067,3,1430,715,0,9064,9065,4,716,125,0,
		9065,9067,3,1438,719,0,9066,9063,1,0,0,0,9066,9064,1,0,0,0,9067,1433,1,
		0,0,0,9068,9078,3,1448,724,0,9069,9078,3,1454,727,0,9070,9078,3,1462,731,
		0,9071,9078,3,1458,729,0,9072,9078,3,1456,728,0,9073,9075,5,820,0,0,9074,
		9073,1,0,0,0,9074,9075,1,0,0,0,9075,9076,1,0,0,0,9076,9078,7,162,0,0,9077,
		9068,1,0,0,0,9077,9069,1,0,0,0,9077,9070,1,0,0,0,9077,9071,1,0,0,0,9077,
		9072,1,0,0,0,9077,9074,1,0,0,0,9078,1435,1,0,0,0,9079,9083,3,1434,717,
		0,9080,9081,4,718,126,0,9081,9083,3,1438,719,0,9082,9079,1,0,0,0,9082,
		9080,1,0,0,0,9083,1437,1,0,0,0,9084,9085,5,396,0,0,9085,1439,1,0,0,0,9086,
		9087,5,32,0,0,9087,9092,3,1444,722,0,9088,9089,5,29,0,0,9089,9091,3,1444,
		722,0,9090,9088,1,0,0,0,9091,9094,1,0,0,0,9092,9090,1,0,0,0,9092,9093,
		1,0,0,0,9093,9095,1,0,0,0,9094,9092,1,0,0,0,9095,9096,5,33,0,0,9096,1441,
		1,0,0,0,9097,9101,5,825,0,0,9098,9099,4,721,127,0,9099,9101,5,824,0,0,
		9100,9097,1,0,0,0,9100,9098,1,0,0,0,9101,1443,1,0,0,0,9102,9106,3,1442,
		721,0,9103,9106,5,45,0,0,9104,9106,5,46,0,0,9105,9102,1,0,0,0,9105,9103,
		1,0,0,0,9105,9104,1,0,0,0,9106,1445,1,0,0,0,9107,9111,3,1442,721,0,9108,
		9109,4,723,128,0,9109,9111,5,45,0,0,9110,9107,1,0,0,0,9110,9108,1,0,0,
		0,9111,1447,1,0,0,0,9112,9114,5,820,0,0,9113,9112,1,0,0,0,9113,9114,1,
		0,0,0,9114,9115,1,0,0,0,9115,9118,3,1442,721,0,9116,9118,5,822,0,0,9117,
		9113,1,0,0,0,9117,9116,1,0,0,0,9118,9122,1,0,0,0,9119,9121,3,1442,721,
		0,9120,9119,1,0,0,0,9121,9124,1,0,0,0,9122,9120,1,0,0,0,9122,9123,1,0,
		0,0,9123,1449,1,0,0,0,9124,9122,1,0,0,0,9125,9126,3,1442,721,0,9126,1451,
		1,0,0,0,9127,9132,3,1442,721,0,9128,9129,5,29,0,0,9129,9131,3,1442,721,
		0,9130,9128,1,0,0,0,9131,9134,1,0,0,0,9132,9130,1,0,0,0,9132,9133,1,0,
		0,0,9133,1453,1,0,0,0,9134,9132,1,0,0,0,9135,9139,3,1460,730,0,9136,9139,
		5,47,0,0,9137,9139,5,48,0,0,9138,9135,1,0,0,0,9138,9136,1,0,0,0,9138,9137,
		1,0,0,0,9139,1455,1,0,0,0,9140,9141,7,163,0,0,9141,1457,1,0,0,0,9142,9143,
		7,164,0,0,9143,1459,1,0,0,0,9144,9145,7,165,0,0,9145,1461,1,0,0,0,9146,
		9147,5,158,0,0,9147,9153,5,825,0,0,9148,9149,5,596,0,0,9149,9153,5,825,
		0,0,9150,9151,5,593,0,0,9151,9153,5,825,0,0,9152,9146,1,0,0,0,9152,9148,
		1,0,0,0,9152,9150,1,0,0,0,9153,1463,1,0,0,0,9154,9157,3,1176,588,0,9155,
		9157,3,1468,734,0,9156,9154,1,0,0,0,9156,9155,1,0,0,0,9157,1465,1,0,0,
		0,9158,9159,3,1468,734,0,9159,1467,1,0,0,0,9160,9161,5,32,0,0,9161,9162,
		5,3,0,0,9162,9163,5,29,0,0,9163,9164,5,3,0,0,9164,9165,5,33,0,0,9165,1469,
		1,0,0,0,9166,9169,3,1410,705,0,9167,9169,3,1442,721,0,9168,9166,1,0,0,
		0,9168,9167,1,0,0,0,9169,1471,1,0,0,0,9170,9173,3,1408,704,0,9171,9173,
		3,1504,752,0,9172,9170,1,0,0,0,9172,9171,1,0,0,0,9173,1473,1,0,0,0,9174,
		9177,3,1398,699,0,9175,9177,3,1442,721,0,9176,9174,1,0,0,0,9176,9175,1,
		0,0,0,9177,1475,1,0,0,0,9178,9181,3,1428,714,0,9179,9181,3,1408,704,0,
		9180,9178,1,0,0,0,9180,9179,1,0,0,0,9181,1477,1,0,0,0,9182,9183,5,32,0,
		0,9183,9184,5,33,0,0,9184,1479,1,0,0,0,9185,9186,7,166,0,0,9186,1481,1,
		0,0,0,9187,9188,7,167,0,0,9188,1483,1,0,0,0,9189,9190,5,247,0,0,9190,9196,
		5,28,0,0,9191,9192,5,313,0,0,9192,9196,5,28,0,0,9193,9194,5,517,0,0,9194,
		9196,5,28,0,0,9195,9189,1,0,0,0,9195,9191,1,0,0,0,9195,9193,1,0,0,0,9196,
		1485,1,0,0,0,9197,9198,7,167,0,0,9198,9199,5,28,0,0,9199,1487,1,0,0,0,
		9200,9201,3,1442,721,0,9201,1489,1,0,0,0,9202,9209,4,745,129,0,9203,9210,
		3,1496,748,0,9204,9210,3,1508,754,0,9205,9210,5,209,0,0,9206,9210,5,523,
		0,0,9207,9208,4,745,130,0,9208,9210,5,723,0,0,9209,9203,1,0,0,0,9209,9204,
		1,0,0,0,9209,9205,1,0,0,0,9209,9206,1,0,0,0,9209,9207,1,0,0,0,9210,9219,
		1,0,0,0,9211,9217,3,1500,750,0,9212,9217,3,1492,746,0,9213,9217,3,1494,
		747,0,9214,9217,3,1498,749,0,9215,9217,3,1506,753,0,9216,9211,1,0,0,0,
		9216,9212,1,0,0,0,9216,9213,1,0,0,0,9216,9214,1,0,0,0,9216,9215,1,0,0,
		0,9217,9219,1,0,0,0,9218,9202,1,0,0,0,9218,9216,1,0,0,0,9219,1491,1,0,
		0,0,9220,9221,7,168,0,0,9221,1493,1,0,0,0,9222,9223,7,169,0,0,9223,1495,
		1,0,0,0,9224,9235,4,748,131,0,9225,9236,3,1510,755,0,9226,9236,5,206,0,
		0,9227,9236,5,223,0,0,9228,9236,5,390,0,0,9229,9236,5,442,0,0,9230,9236,
		5,446,0,0,9231,9236,5,469,0,0,9232,9236,5,477,0,0,9233,9236,5,718,0,0,
		9234,9236,5,576,0,0,9235,9225,1,0,0,0,9235,9226,1,0,0,0,9235,9227,1,0,
		0,0,9235,9228,1,0,0,0,9235,9229,1,0,0,0,9235,9230,1,0,0,0,9235,9231,1,
		0,0,0,9235,9232,1,0,0,0,9235,9233,1,0,0,0,9235,9234,1,0,0,0,9236,9243,
		1,0,0,0,9237,9241,3,1500,750,0,9238,9241,3,1498,749,0,9239,9241,3,1506,
		753,0,9240,9237,1,0,0,0,9240,9238,1,0,0,0,9240,9239,1,0,0,0,9241,9243,
		1,0,0,0,9242,9224,1,0,0,0,9242,9240,1,0,0,0,9243,1497,1,0,0,0,9244,9245,
		7,170,0,0,9245,1499,1,0,0,0,9246,9252,7,171,0,0,9247,9248,4,750,132,0,
		9248,9252,7,172,0,0,9249,9250,4,750,133,0,9250,9252,7,173,0,0,9251,9246,
		1,0,0,0,9251,9247,1,0,0,0,9251,9249,1,0,0,0,9252,1501,1,0,0,0,9253,9256,
		4,751,134,0,9254,9257,3,1510,755,0,9255,9257,3,1508,754,0,9256,9254,1,
		0,0,0,9256,9255,1,0,0,0,9257,9264,1,0,0,0,9258,9262,3,1500,750,0,9259,
		9262,3,1494,747,0,9260,9262,3,1506,753,0,9261,9258,1,0,0,0,9261,9259,1,
		0,0,0,9261,9260,1,0,0,0,9262,9264,1,0,0,0,9263,9253,1,0,0,0,9263,9261,
		1,0,0,0,9264,1503,1,0,0,0,9265,9270,3,1500,750,0,9266,9270,3,1492,746,
		0,9267,9270,3,1494,747,0,9268,9270,3,1498,749,0,9269,9265,1,0,0,0,9269,
		9266,1,0,0,0,9269,9267,1,0,0,0,9269,9268,1,0,0,0,9270,1505,1,0,0,0,9271,
		9272,7,167,0,0,9272,1507,1,0,0,0,9273,9274,7,174,0,0,9274,1509,1,0,0,0,
		9275,9279,7,175,0,0,9276,9277,4,755,135,0,9277,9279,5,669,0,0,9278,9275,
		1,0,0,0,9278,9276,1,0,0,0,9279,1511,1,0,0,0,1175,1515,1522,1602,1610,1615,
		1625,1632,1638,1641,1644,1651,1656,1659,1664,1670,1672,1676,1680,1689,
		1693,1698,1704,1711,1716,1721,1728,1731,1737,1740,1747,1757,1762,1767,
		1775,1781,1785,1790,1799,1805,1811,1817,1826,1832,1841,1853,1857,1863,
		1867,1873,1877,1882,1885,1891,1897,1903,1907,1912,1916,1920,1936,1944,
		1952,1959,1986,2001,2004,2010,2015,2021,2026,2030,2035,2039,2043,2047,
		2051,2055,2057,2067,2075,2082,2090,2094,2099,2106,2111,2116,2126,2130,
		2135,2138,2141,2144,2151,2158,2162,2187,2189,2197,2199,2219,2223,2229,
		2236,2239,2243,2250,2253,2262,2269,2274,2277,2282,2288,2291,2295,2301,
		2304,2309,2313,2322,2325,2331,2338,2344,2347,2351,2360,2363,2371,2377,
		2381,2391,2394,2399,2407,2422,2425,2428,2433,2439,2449,2459,2462,2465,
		2469,2477,2490,2494,2499,2508,2525,2544,2553,2556,2564,2571,2573,2580,
		2585,2599,2603,2609,2615,2621,2627,2633,2638,2642,2650,2656,2662,2668,
		2673,2676,2679,2688,2691,2702,2706,2717,2725,2729,2738,2741,2747,2749,
		2753,2760,2773,2780,2786,2789,2806,2825,2829,2835,2841,2847,2852,2859,
		2866,2871,2874,2878,2882,2887,2891,2895,2901,2906,2909,2913,2919,2923,
		2927,2935,2943,2952,2961,2974,2977,2980,2986,2994,2999,3002,3005,3008,
		3011,3013,3019,3021,3037,3044,3047,3049,3051,3061,3063,3067,3070,3073,
		3077,3081,3086,3089,3092,3098,3101,3110,3120,3123,3126,3130,3136,3141,
		3146,3151,3155,3162,3173,3176,3179,3182,3186,3189,3192,3198,3201,3204,
		3207,3210,3214,3217,3220,3232,3240,3256,3259,3263,3267,3276,3286,3290,
		3310,3313,3317,3323,3327,3330,3339,3349,3352,3356,3359,3363,3368,3371,
		3376,3382,3391,3397,3402,3405,3408,3411,3414,3417,3420,3435,3439,3445,
		3448,3451,3457,3462,3466,3469,3476,3478,3495,3507,3512,3515,3518,3523,
		3529,3545,3565,3574,3578,3585,3590,3599,3609,3623,3630,3639,3648,3654,
		3660,3666,3669,3675,3682,3686,3692,3698,3700,3703,3707,3717,3722,3727,
		3734,3743,3751,3756,3760,3766,3769,3772,3776,3780,3790,3794,3797,3800,
		3803,3808,3814,3817,3823,3826,3828,3833,3845,3854,3867,3870,3875,3882,
		3886,3889,3895,3909,3916,3925,3931,3940,3944,3948,3958,3960,3968,3975,
		3980,3983,3987,3990,3996,3999,4002,4008,4015,4020,4024,4027,4030,4033,
		4035,4039,4046,4052,4056,4061,4064,4067,4070,4072,4077,4086,4095,4099,
		4105,4108,4111,4117,4124,4126,4134,4140,4142,4152,4154,4165,4171,4178,
		4186,4190,4194,4197,4199,4207,4216,4225,4232,4239,4370,4424,4431,4435,
		4451,4463,4466,4478,4482,4488,4495,4502,4509,4516,4523,4530,4533,4540,
		4548,4556,4566,4572,4576,4579,4582,4585,4588,4591,4596,4599,4606,4612,
		4636,4643,4646,4655,4661,4682,4688,4694,4701,4709,4715,4727,4729,4735,
		4739,4741,4745,4756,4761,4767,4774,4777,4780,4786,4788,4796,4799,4801,
		4803,4810,4821,4824,4826,4830,4835,4837,4842,4848,4851,4853,4857,4860,
		4869,4878,4884,4886,4888,4897,4901,4907,4910,4912,4923,4928,4933,4939,
		4941,4945,4947,4955,4959,4964,4967,4972,4977,4983,4992,5003,5005,5017,
		5022,5030,5036,5038,5045,5047,5054,5059,5070,5075,5077,5081,5087,5090,
		5093,5103,5105,5111,5124,5128,5133,5150,5156,5165,5173,5177,5183,5193,
		5197,5206,5211,5220,5222,5226,5237,5244,5250,5254,5259,5264,5272,5276,
		5281,5290,5303,5305,5319,5328,5330,5337,5342,5346,5351,5359,5366,5370,
		5376,5383,5386,5393,5396,5402,5419,5424,5437,5440,5451,5453,5459,5473,
		5490,5495,5498,5502,5505,5513,5519,5524,5527,5529,5533,5538,5540,5552,
		5558,5576,5580,5582,5590,5597,5610,5615,5619,5623,5626,5630,5634,5637,
		5642,5645,5651,5654,5660,5663,5690,5696,5699,5715,5722,5726,5729,5732,
		5739,5743,5746,5749,5753,5759,5762,5766,5787,5792,5800,5805,5808,5812,
		5816,5820,5826,5830,5835,5840,5851,5853,5859,5881,5903,5910,5937,5939,
		5943,5955,5965,5975,5979,5987,5990,5994,6003,6007,6014,6019,6027,6032,
		6038,6045,6050,6056,6059,6069,6071,6078,6083,6087,6090,6097,6102,6106,
		6117,6125,6129,6132,6135,6139,6143,6148,6154,6158,6169,6172,6175,6178,
		6186,6190,6195,6203,6211,6217,6221,6227,6236,6247,6257,6265,6279,6282,
		6286,6297,6299,6308,6320,6322,6329,6335,6341,6350,6361,6365,6394,6396,
		6402,6419,6426,6440,6451,6456,6467,6477,6484,6487,6521,6529,6531,6541,
		6546,6551,6558,6564,6569,6574,6580,6584,6589,6594,6601,6609,6614,6618,
		6622,6626,6628,6646,6654,6658,6665,6677,6680,6684,6694,6706,6713,6717,
		6721,6729,6739,6748,6750,6753,6762,6769,6782,6787,6794,6800,6826,6836,
		6868,6887,6893,6897,6928,6934,6946,6959,6963,6967,6995,7045,7055,7067,
		7072,7080,7100,7104,7120,7123,7128,7131,7140,7144,7150,7156,7160,7171,
		7177,7179,7186,7193,7197,7204,7209,7213,7218,7223,7233,7238,7240,7244,
		7248,7261,7265,7268,7272,7276,7280,7287,7291,7295,7303,7307,7314,7320,
		7328,7349,7354,7361,7383,7399,7409,7413,7420,7423,7434,7443,7446,7453,
		7458,7484,7490,7496,7500,7510,7514,7527,7539,7555,7563,7573,7576,7581,
		7585,7592,7597,7604,7612,7615,7620,7628,7631,7645,7648,7661,7665,7667,
		7672,7677,7684,7690,7696,7701,7704,7710,7715,7718,7724,7728,7734,7736,
		7739,7745,7751,7758,7760,7762,7766,7772,7776,7780,7785,7790,7793,7796,
		7806,7812,7819,7824,7837,7845,7851,7856,7867,7871,7876,7880,7883,7888,
		7892,7900,7908,7910,7919,7927,7934,7937,7945,7954,7956,7962,7966,7975,
		7981,7984,7995,8004,8007,8012,8014,8017,8020,8024,8027,8031,8036,8039,
		8043,8046,8050,8055,8059,8071,8075,8081,8084,8089,8093,8097,8102,8111,
		8114,8118,8122,8125,8129,8133,8138,8143,8148,8153,8158,8160,8165,8172,
		8180,8186,8188,8192,8196,8200,8204,8219,8225,8232,8236,8241,8246,8249,
		8253,8256,8261,8265,8271,8275,8279,8284,8289,8294,8299,8304,8309,8314,
		8319,8324,8329,8334,8339,8344,8354,8360,8366,8371,8378,8383,8392,8398,
		8403,8407,8410,8414,8419,8423,8428,8432,8441,8444,8447,8450,8454,8458,
		8462,8477,8480,8482,8487,8496,8499,8503,8515,8527,8532,8537,8546,8551,
		8560,8565,8569,8573,8577,8582,8587,8593,8598,8601,8608,8617,8624,8641,
		8643,8654,8666,8679,8687,8694,8703,8709,8717,8723,8734,8742,8748,8752,
		8755,8761,8769,8808,8833,8843,8848,8850,8857,8869,8871,8883,8892,8903,
		8925,8929,8953,8964,8966,8970,8977,8985,8992,8998,9011,9015,9022,9031,
		9036,9038,9054,9061,9066,9074,9077,9082,9092,9100,9105,9110,9113,9117,
		9122,9132,9138,9152,9156,9168,9172,9176,9180,9195,9209,9216,9218,9235,
		9240,9242,9251,9256,9261,9263,9269,9278
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
