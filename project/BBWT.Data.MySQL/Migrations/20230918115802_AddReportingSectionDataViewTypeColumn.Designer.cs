// <auto-generated />
using System;
using BBWT.Data.MySQL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BBWT.Data.MySQL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230918115802_AddReportingSectionDataViewTypeColumn")]
    partial class AddReportingSectionDataViewTypeColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4", DelegationModes.ApplyToDatabases);

            modelBuilder.Entity("BBWM.AWS.EventBridge.Model.EventBridgeJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("LastExecutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NextExecutionTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Parameters")
                        .HasColumnType("longtext");

                    b.Property<string>("RuleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("RuleId")
                        .IsUnique();

                    b.ToTable("EventBridgeJobs", (string)null);
                });

            modelBuilder.Entity("BBWM.AWS.EventBridge.Model.EventBridgeJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CompletionStatus")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Parameters")
                        .HasColumnType("longtext");

                    b.Property<string>("RuleId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FinishTime");

                    b.HasIndex("JobId");

                    b.HasIndex("RuleId");

                    b.HasIndex("StartTime");

                    b.ToTable("EventBridgeJobsHistory", (string)null);
                });

            modelBuilder.Entity("BBWM.AWS.EventBridge.Model.EventBridgeRunningJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("CancelationId")
                        .HasColumnType("char(36)");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RuleId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CancelationId")
                        .IsUnique();

                    b.HasIndex("JobId");

                    b.HasIndex("RuleId");

                    b.HasIndex("StartTime");

                    b.ToTable("EventBridgeRunningJobs", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.ActivationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Token")
                        .HasMaxLength(450)
                        .HasColumnType("varchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address1")
                        .HasColumnType("longtext");

                    b.Property<string>("Address2")
                        .HasColumnType("longtext");

                    b.Property<string>("Address3")
                        .HasColumnType("longtext");

                    b.Property<string>("Address4")
                        .HasColumnType("longtext");

                    b.Property<string>("PostCode")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IpAddressFirst")
                        .HasColumnType("longtext");

                    b.Property<string>("IpAddressLast")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AllowedIp", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIpRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AllowedIpId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AllowedIpId");

                    b.HasIndex("RoleId");

                    b.ToTable("AllowedIpRoles", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIpUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AllowedIpId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AllowedIpId");

                    b.HasIndex("UserId");

                    b.ToTable("AllowedIpUsers", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AuthenticationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Challenge")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("KeyHandle")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuthenticationRequests", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Branding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Disabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("EmailBody")
                        .HasColumnType("longtext");

                    b.Property<int?>("LogoIconId")
                        .HasColumnType("int");

                    b.Property<int?>("LogoImageId")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LogoIconId")
                        .IsUnique();

                    b.HasIndex("LogoImageId")
                        .IsUnique();

                    b.ToTable("Brandings", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BrandingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("BrandingId")
                        .IsUnique();

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<byte[]>("AttestationCert")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsCompromised")
                        .HasColumnType("tinyint(1)");

                    b.Property<byte[]>("KeyHandle")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("longblob");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.LockedOutIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("LockedOutIp");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.LoginAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("Datetime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("longtext");

                    b.Property<string>("Ip")
                        .HasColumnType("longtext");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("Result")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Audits", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LockedByUserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("LockedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Password")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PasswordHistory", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("AuthenticatorRequired")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("CheckIp")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<string>("AuthSecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<int?>("AvatarImageId")
                        .HasColumnType("int");

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("EmailConfirmationTokenId")
                        .HasColumnType("int");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<DateTimeOffset?>("FirstPasswordFailureDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("GravatarEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("GravatarImage")
                        .HasColumnType("longtext");

                    b.Property<int?>("InvitationTokenId")
                        .HasColumnType("int");

                    b.Property<string>("LastLoginBrowserFingerprint")
                        .HasColumnType("longtext");

                    b.Property<string>("LastName")
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("PasswordResetTokenId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("PictureMode")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousAccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("RecoveryCode")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("SsoProvider")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("U2fEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarImageId")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmailConfirmationTokenId")
                        .IsUnique();

                    b.HasIndex("InvitationTokenId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("PasswordResetTokenId")
                        .IsUnique();

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserPasswordFailedHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .HasColumnType("longtext");

                    b.Property<string>("email")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("failedDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("UserPasswordFailedHistory", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AnonymizationRule")
                        .HasColumnType("int");

                    b.Property<string>("ColumnId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ColumnTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("Hidden")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.Property<int?>("ValidationMetadataId")
                        .HasColumnType("int");

                    b.Property<int?>("ViewMetadataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColumnTypeId");

                    b.HasIndex("TableId");

                    b.HasIndex("ValidationMetadataId")
                        .IsUnique();

                    b.HasIndex("ViewMetadataId")
                        .IsUnique();

                    b.ToTable("DbDocColumnMetadata", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("AnonymizationRule")
                        .HasColumnType("int");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ValidationMetadataId")
                        .HasColumnType("int");

                    b.Property<int?>("ViewMetadataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ValidationMetadataId")
                        .IsUnique();

                    b.HasIndex("ViewMetadataId")
                        .IsUnique();

                    b.ToTable("DbDocColumnType", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnValidationMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Rules")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DbDocColumnValidationMetadata", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnViewMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DbDocColumnViewMetadata", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.DatabaseSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("longtext");

                    b.Property<int?>("DatabaseType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SchemaCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SourceType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DbDocDatabaseSource", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("DatabaseSourceId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsSourceFolder")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Owners")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseSourceId");

                    b.ToTable("DbDocFolders", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.GridColumnView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ColumnViewMetadataId")
                        .HasColumnType("int");

                    b.Property<string>("Mask")
                        .HasColumnType("longtext");

                    b.Property<float?>("MaxWidth")
                        .HasColumnType("float");

                    b.Property<float?>("MinWidth")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ColumnViewMetadataId")
                        .IsUnique();

                    b.ToTable("DbDocGridColumnViews", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.TableMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("Anonymization")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Representation")
                        .HasColumnType("longtext");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("DbDocTableMetadata", (string)null);
                });

            modelBuilder.Entity("BBWM.FileStorage.FileDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Extension")
                        .HasColumnType("longtext");

                    b.Property<string>("FileName")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsImage")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Key")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OperationName")
                        .HasColumnType("longtext");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailKey")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("UploadTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserId")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FilesDetails", (string)null);
                });

            modelBuilder.Entity("BBWM.LoadingTime.LoadingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Account")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Route")
                        .HasColumnType("longtext");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LoadingTime");
                });

            modelBuilder.Entity("BBWM.Messages.Templates.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("BBWM.Messages.Templates.EmailTemplateParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplateParameters", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.FilterControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("AutoSubmitInput")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("ExtraSettings")
                        .HasColumnType("text");

                    b.Property<string>("HintText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<int?>("MasterControlId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("UserCanChangeOperator")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ViewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MasterControlId");

                    b.HasIndex("ViewId");

                    b.ToTable("ReportingFilterControls", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("DefaultSortColumnId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultSortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ShowVisibleColumnsSelector")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("SummaryFooterVisible")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ViewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultSortColumnId")
                        .IsUnique();

                    b.HasIndex("ViewId")
                        .IsUnique();

                    b.ToTable("ReportingGridViews", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridViewColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid?>("CustomColumnTypeId")
                        .HasColumnType("char(36)");

                    b.Property<string>("ExtraSettings")
                        .HasColumnType("text");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<int>("GridViewId")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("InheritHeader")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("QueryTableColumnId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Sortable")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("CustomColumnTypeId");

                    b.HasIndex("GridViewId");

                    b.HasIndex("QueryTableColumnId");

                    b.ToTable("ReportingGridViewColumns", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.NamedQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QueryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ReportingNamedQueries", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid?>("DbDocFolderId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ForEndUserOnly")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("ReportingQueries", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomSqlCodeTemplate")
                        .HasColumnType("longtext");

                    b.Property<int>("QueryFilterSetId")
                        .HasColumnType("int");

                    b.Property<int?>("QueryRuleId")
                        .HasColumnType("int");

                    b.Property<int?>("QueryTableColumnId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("Value2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QueryFilterSetId");

                    b.HasIndex("QueryRuleId");

                    b.HasIndex("QueryTableColumnId");

                    b.ToTable("ReportingQueryFilters", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterBinding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BindingType")
                        .HasColumnType("int");

                    b.Property<int?>("FilterControlId")
                        .HasColumnType("int");

                    b.Property<int?>("MasterDetailQueryTableColumnId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MasterDetailSectionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("QueryFilterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilterControlId");

                    b.HasIndex("MasterDetailQueryTableColumnId");

                    b.HasIndex("MasterDetailSectionId");

                    b.HasIndex("QueryFilterId");

                    b.ToTable("ReportingQueryFilterBindings", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConditionalOperator")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentQueryId")
                        .HasColumnType("int");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ParentQueryId")
                        .IsUnique();

                    b.HasIndex("QueryId");

                    b.ToTable("ReportingQueryFilterSets", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("MsSqlCodeTemplate")
                        .HasColumnType("text");

                    b.Property<string>("MySqlCodeTemplate")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ReportingQueryRules", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryRuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("QueryRuleId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueryRuleId");

                    b.ToTable("ReportingQueryRuleTypes", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alias")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("DbDocTableId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<string>("SelfJoinDbDocColumnId")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.ToTable("ReportingQueryTables", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTableColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DbDocColumnId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("QueryTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueryTableId");

                    b.ToTable("ReportingQueryTableColumns", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Access")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<Guid?>("PublishedReportId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("ShowTitle")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PublishedReportId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ReportingReports", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.ReportPermission", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("char(36)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("ReportId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ReportingPermissions", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.ReportRole", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("char(36)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ReportId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ReportingRoles", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<bool>("AutoCollapse")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<int>("DataViewType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("ExpandBehaviour")
                        .HasColumnType("int");

                    b.Property<Guid?>("NamedQueryId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("PublishedSectionId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("QueryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ReusedSectionId")
                        .HasColumnType("char(36)");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<bool>("ShowTitle")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Visible")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.HasIndex("NamedQueryId");

                    b.HasIndex("QueryId");

                    b.HasIndex("ReportId");

                    b.HasIndex("ReusedSectionId");

                    b.ToTable("ReportingSections", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.View", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<Guid>("SectionId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("SectionId")
                        .IsUnique();

                    b.ToTable("ReportingViews", (string)null);
                });

            modelBuilder.Entity("BBWM.StaticPages.StaticPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContentPreview")
                        .HasColumnType("longtext");

                    b.Property<string>("Contents")
                        .HasColumnType("longtext");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("StaticPages");
                });

            modelBuilder.Entity("BBWM.SystemSettings.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("EncryptedFields")
                        .HasColumnType("longtext");

                    b.Property<string>("Section")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIpRole", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.AllowedIp", "AllowedIp")
                        .WithMany("AllowedIpRoles")
                        .HasForeignKey("AllowedIpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Role", "Role")
                        .WithMany("AllowedIpRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AllowedIp");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIpUser", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.AllowedIp", "AllowedIp")
                        .WithMany("AllowedIpUsers")
                        .HasForeignKey("AllowedIpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("AllowedIpUser")
                        .HasForeignKey("UserId");

                    b.Navigation("AllowedIp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AuthenticationRequest", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany("AuthenticationRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Branding", b =>
                {
                    b.HasOne("BBWM.FileStorage.FileDetails", "LogoIcon")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.Branding", "LogoIconId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.FileStorage.FileDetails", "LogoImage")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.Branding", "LogoImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LogoIcon");

                    b.Navigation("LogoImage");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Company", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Address", "Address")
                        .WithOne("Company")
                        .HasForeignKey("BBWM.Core.Membership.Model.Company", "AddressId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.Core.Membership.Model.Branding", "Branding")
                        .WithOne("Company")
                        .HasForeignKey("BBWM.Core.Membership.Model.Company", "BrandingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("Branding");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Device", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany("DeviceRegistrations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Group", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Company", "Company")
                        .WithMany("Groups")
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Metadata", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("LockedByUserId");

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("LockedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.RolePermission", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.User", b =>
                {
                    b.HasOne("BBWM.FileStorage.FileDetails", "AvatarImage")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.User", "AvatarImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.Core.Membership.Model.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.Core.Membership.Model.ActivationToken", "EmailConfirmationToken")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.User", "EmailConfirmationTokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Core.Membership.Model.ActivationToken", "InvitationToken")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.User", "InvitationTokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Core.Membership.Model.ActivationToken", "PasswordResetToken")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.User", "PasswordResetTokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AvatarImage");

                    b.Navigation("Company");

                    b.Navigation("EmailConfirmationToken");

                    b.Navigation("InvitationToken");

                    b.Navigation("PasswordResetToken");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserGroup", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserPermission", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserRole", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnMetadata", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.ColumnType", "ColumnType")
                        .WithMany()
                        .HasForeignKey("ColumnTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.DbDoc.Model.TableMetadata", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.DbDoc.Model.ColumnValidationMetadata", "ValidationMetadata")
                        .WithOne()
                        .HasForeignKey("BBWM.DbDoc.Model.ColumnMetadata", "ValidationMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.DbDoc.Model.ColumnViewMetadata", "ViewMetadata")
                        .WithOne()
                        .HasForeignKey("BBWM.DbDoc.Model.ColumnMetadata", "ViewMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ColumnType");

                    b.Navigation("Table");

                    b.Navigation("ValidationMetadata");

                    b.Navigation("ViewMetadata");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnType", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.ColumnValidationMetadata", "ValidationMetadata")
                        .WithOne()
                        .HasForeignKey("BBWM.DbDoc.Model.ColumnType", "ValidationMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.DbDoc.Model.ColumnViewMetadata", "ViewMetadata")
                        .WithOne()
                        .HasForeignKey("BBWM.DbDoc.Model.ColumnType", "ViewMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ValidationMetadata");

                    b.Navigation("ViewMetadata");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.Folder", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.DatabaseSource", "DatabaseSource")
                        .WithMany("Folders")
                        .HasForeignKey("DatabaseSourceId");

                    b.Navigation("DatabaseSource");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.GridColumnView", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.ColumnViewMetadata", "ColumnViewMetadata")
                        .WithOne("GridColumnView")
                        .HasForeignKey("BBWM.DbDoc.Model.GridColumnView", "ColumnViewMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColumnViewMetadata");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.TableMetadata", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.Folder", "Folder")
                        .WithMany("Tables")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.FilterControl", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.FilterControl", "MasterControl")
                        .WithMany()
                        .HasForeignKey("MasterControlId");

                    b.HasOne("BBWM.Reporting.Model.View", "View")
                        .WithMany("Filters")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterControl");

                    b.Navigation("View");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridView", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "DefaultSortColumn")
                        .WithOne()
                        .HasForeignKey("BBWM.Reporting.Model.GridView", "DefaultSortColumnId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.Reporting.Model.View", "View")
                        .WithOne("GridView")
                        .HasForeignKey("BBWM.Reporting.Model.GridView", "ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultSortColumn");

                    b.Navigation("View");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridViewColumn", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.ColumnType", "CustomColumnType")
                        .WithMany()
                        .HasForeignKey("CustomColumnTypeId");

                    b.HasOne("BBWM.Reporting.Model.GridView", "GridView")
                        .WithMany("ViewColumns")
                        .HasForeignKey("GridViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "QueryTableColumn")
                        .WithMany()
                        .HasForeignKey("QueryTableColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomColumnType");

                    b.Navigation("GridView");

                    b.Navigation("QueryTableColumn");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.NamedQuery", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilter", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryFilterSet", "QueryFilterSet")
                        .WithMany("QueryFilters")
                        .HasForeignKey("QueryFilterSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.QueryRule", "QueryRule")
                        .WithMany()
                        .HasForeignKey("QueryRuleId");

                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "QueryTableColumn")
                        .WithMany()
                        .HasForeignKey("QueryTableColumnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("QueryFilterSet");

                    b.Navigation("QueryRule");

                    b.Navigation("QueryTableColumn");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterBinding", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.FilterControl", "FilterControl")
                        .WithMany("QueryFilterBindings")
                        .HasForeignKey("FilterControlId");

                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "MasterDetailQueryTableColumn")
                        .WithMany()
                        .HasForeignKey("MasterDetailQueryTableColumnId");

                    b.HasOne("BBWM.Reporting.Model.Section", "MasterDetailSection")
                        .WithMany("QueryFilterBindings")
                        .HasForeignKey("MasterDetailSectionId");

                    b.HasOne("BBWM.Reporting.Model.QueryFilter", "QueryFilter")
                        .WithMany("QueryFilterBindings")
                        .HasForeignKey("QueryFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterControl");

                    b.Navigation("MasterDetailQueryTableColumn");

                    b.Navigation("MasterDetailSection");

                    b.Navigation("QueryFilter");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterSet", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryFilterSet", "Parent")
                        .WithMany("ChildSets")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Reporting.Model.Query", "ParentQuery")
                        .WithOne("RootFilterSet")
                        .HasForeignKey("BBWM.Reporting.Model.QueryFilterSet", "ParentQueryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany("QueryFilterSets")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("ParentQuery");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryRuleType", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryRule", "QueryRule")
                        .WithMany("RuleTypes")
                        .HasForeignKey("QueryRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueryRule");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTable", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany("QueryTables")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTableColumn", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryTable", "QueryTable")
                        .WithMany("Columns")
                        .HasForeignKey("QueryTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueryTable");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Report", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("BBWM.Reporting.Model.Report", null)
                        .WithMany()
                        .HasForeignKey("PublishedReportId");

                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.ReportPermission", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.Report", "Report")
                        .WithMany("ReportPermissions")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.ReportRole", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.Report", "Report")
                        .WithMany("ReportRoles")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Section", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.NamedQuery", "NamedQuery")
                        .WithMany()
                        .HasForeignKey("NamedQueryId");

                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId");

                    b.HasOne("BBWM.Reporting.Model.Report", "Report")
                        .WithMany("Sections")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.Section", "ReusedSection")
                        .WithMany()
                        .HasForeignKey("ReusedSectionId");

                    b.Navigation("NamedQuery");

                    b.Navigation("Query");

                    b.Navigation("Report");

                    b.Navigation("ReusedSection");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.View", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.Section", "Section")
                        .WithOne("View")
                        .HasForeignKey("BBWM.Reporting.Model.View", "SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Address", b =>
                {
                    b.Navigation("Company");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIp", b =>
                {
                    b.Navigation("AllowedIpRoles");

                    b.Navigation("AllowedIpUsers");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Branding", b =>
                {
                    b.Navigation("Company");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Company", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Group", b =>
                {
                    b.Navigation("UserGroups");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Role", b =>
                {
                    b.Navigation("AllowedIpRoles");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.User", b =>
                {
                    b.Navigation("AllowedIpUser");

                    b.Navigation("AuthenticationRequests");

                    b.Navigation("DeviceRegistrations");

                    b.Navigation("UserGroups");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnViewMetadata", b =>
                {
                    b.Navigation("GridColumnView");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.DatabaseSource", b =>
                {
                    b.Navigation("Folders");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.Folder", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.TableMetadata", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.FilterControl", b =>
                {
                    b.Navigation("QueryFilterBindings");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridView", b =>
                {
                    b.Navigation("ViewColumns");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Query", b =>
                {
                    b.Navigation("QueryFilterSets");

                    b.Navigation("QueryTables");

                    b.Navigation("RootFilterSet");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilter", b =>
                {
                    b.Navigation("QueryFilterBindings");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterSet", b =>
                {
                    b.Navigation("ChildSets");

                    b.Navigation("QueryFilters");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryRule", b =>
                {
                    b.Navigation("RuleTypes");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTable", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Report", b =>
                {
                    b.Navigation("ReportPermissions");

                    b.Navigation("ReportRoles");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Section", b =>
                {
                    b.Navigation("QueryFilterBindings");

                    b.Navigation("View");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.View", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("GridView");
                });
#pragma warning restore 612, 618
        }
    }
}
