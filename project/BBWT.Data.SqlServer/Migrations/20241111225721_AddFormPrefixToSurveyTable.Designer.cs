// <auto-generated />
using System;
using BBWT.Data.SqlServer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BBWT.Data.SqlServer.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20241111225721_AddFormPrefixToSurveyTable")]
    partial class AddFormPrefixToSurveyTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BBF.Reporting.Core.DbModel.FilterRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Operand")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Operator")
                        .HasColumnType("int");

                    b.Property<string>("TableColumnId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RbFilterRule", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Core.DbModel.QuerySource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("FilterMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("QueryType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ReleaseQueryId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReleaseQueryId");

                    b.ToTable("RbQuerySource", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Core.DbModel.Variable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("RbVariable", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Core.DbModel.VariableRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Operand")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("Operator")
                        .HasColumnType("int");

                    b.Property<string>("VariableName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("Id");

                    b.ToTable("RbVariableRule", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Core.DbModel.WidgetSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<int?>("DisplayRuleId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid?>("ReleaseWidgetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("WidgetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DisplayRuleId");

                    b.HasIndex("OwnerId");

                    b.HasIndex("ReleaseWidgetId");

                    b.ToTable("RbWidgetSource", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Dashboard.DbModel.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValue(new DateTime(2024, 6, 27, 0, 0, 0, 0, DateTimeKind.Unspecified));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisplayName")
                        .HasColumnType("bit");

                    b.Property<int>("Layout")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("OwnerId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UrlSlug")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WidgetsMargin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(20);

                    b.Property<int>("WidgetsPadding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(15);

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("RbDashboard", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Dashboard.DbModel.DashboardWidget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<Guid>("WidgetSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DashboardId");

                    b.HasIndex("WidgetSourceId");

                    b.ToTable("RbDashboardWidget", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.QueryBuilder.DbModel.SqlQuery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("QuerySourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("SqlCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TableSetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuerySourceId");

                    b.HasIndex("TableSetId");

                    b.ToTable("RbSqlQuery", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.TableSet.DbModel.TableSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FolderId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FolderSourceCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("RbTableSet", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Chart.DbModel.WidgetChart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChartSettingsJson")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("QuerySourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WidgetSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuerySourceId");

                    b.HasIndex("WidgetSourceId");

                    b.ToTable("RbWidgetChart", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Chart.DbModel.WidgetChartColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ChartAlias")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("ChartId")
                        .HasColumnType("int");

                    b.Property<int>("ColumnPurpose")
                        .HasColumnType("int");

                    b.Property<string>("QueryAlias")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChartId");

                    b.ToTable("RbWidgetChartColumn", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Widget.ControlSet.DbModel.WidgetControlSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("WidgetSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WidgetSourceId");

                    b.ToTable("RbWidgetControlSet", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Widget.ControlSet.DbModel.WidgetControlSetItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ControlSetId")
                        .HasColumnType("int");

                    b.Property<int?>("DataType")
                        .HasColumnType("int");

                    b.Property<bool>("EmptyFilterIfFalse")
                        .HasColumnType("bit");

                    b.Property<string>("ExtraSettings")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("FilterRuleId")
                        .HasColumnType("int");

                    b.Property<string>("FolderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HintText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<string>("LabelColumnId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ParentTableId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("SourceCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("UserCanChangeOperator")
                        .HasColumnType("bit");

                    b.Property<string>("ValueColumnId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ValueEmitType")
                        .HasColumnType("int");

                    b.Property<int?>("VariableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ControlSetId");

                    b.HasIndex("FilterRuleId");

                    b.HasIndex("VariableId");

                    b.ToTable("RbWidgetControlSetItem", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Grid.DbModel.WidgetGrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultSortColumnAlias")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DefaultSortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsRowSelectable")
                        .HasColumnType("bit");

                    b.Property<Guid?>("QuerySourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowVisibleColumnsSelector")
                        .HasColumnType("bit");

                    b.Property<bool>("SummaryFooterVisible")
                        .HasColumnType("bit");

                    b.Property<Guid>("WidgetSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuerySourceId");

                    b.HasIndex("WidgetSourceId");

                    b.ToTable("RbWidgetGrid", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Grid.DbModel.WidgetGridColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CustomColumnTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DataType")
                        .HasColumnType("int");

                    b.Property<int>("DisplayMode")
                        .HasColumnType("int");

                    b.Property<string>("ExtraSettings")
                        .HasColumnType("text");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<int>("GridId")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("InheritHeader")
                        .HasColumnType("bit");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<string>("QueryAlias")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Sortable")
                        .HasColumnType("bit");

                    b.Property<int?>("VariableId")
                        .HasColumnType("int");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("GridId");

                    b.HasIndex("VariableId");

                    b.ToTable("RbWidgetGridColumn", (string)null);
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Html.DbModel.WidgetHtml", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InnerHtml")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("WidgetSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WidgetSourceId");

                    b.ToTable("RbWidgetHtml", (string)null);
                });

            modelBuilder.Entity("BBWM.AWS.EventBridge.Model.EventBridgeJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("LastExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("NextExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("TimeZone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("RuleId")
                        .IsUnique()
                        .HasFilter("[RuleId] IS NOT NULL");

                    b.ToTable("EventBridgeJobs", (string)null);
                });

            modelBuilder.Entity("BBWM.AWS.EventBridge.Model.EventBridgeJobHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CompletionStatus")
                        .HasColumnType("int");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RuleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FinishTime");

                    b.HasIndex("JobId");

                    b.HasIndex("RuleId");

                    b.HasIndex("StartTime");

                    b.ToTable("EventBridgeJobsHistory", (string)null);
                });

            modelBuilder.Entity("BBWM.AWS.EventBridge.Model.EventBridgeRunningJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("CancelationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("JobId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RuleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CancelationId")
                        .IsUnique();

                    b.HasIndex("JobId");

                    b.HasIndex("RuleId");

                    b.HasIndex("StartTime");

                    b.ToTable("EventBridgeRunningJobs", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.ActivationToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("ActivationTokens", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddressFirst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IpAddressLast")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AllowedIp", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIpRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowedIpId")
                        .HasColumnType("int");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AllowedIpId");

                    b.HasIndex("RoleId");

                    b.ToTable("AllowedIpRoles", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIpUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AllowedIpId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("AllowedIpId");

                    b.HasIndex("UserId");

                    b.ToTable("AllowedIpUsers", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AuthenticationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Challenge")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KeyHandle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AuthenticationRequests", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Branding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("EmailBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LogoIconId")
                        .HasColumnType("int");

                    b.Property<int?>("LogoImageId")
                        .HasColumnType("int");

                    b.Property<string>("Theme")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogoIconId")
                        .IsUnique()
                        .HasFilter("[LogoIconId] IS NOT NULL");

                    b.HasIndex("LogoImageId")
                        .IsUnique()
                        .HasFilter("[LogoImageId] IS NOT NULL");

                    b.ToTable("Brandings", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("AttestationCert")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompromised")
                        .HasColumnType("bit");

                    b.Property<byte[]>("KeyHandle")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PublicKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Devices", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Groups", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.LockedOutIp", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LockoutEnd")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LockedOutIp");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.LoginAudit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Browser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("Datetime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fingerprint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Result")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Audits", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Metadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("LockedByUserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LockedByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Metadata");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AddressId")
                        .HasColumnType("int");

                    b.Property<int?>("BrandingId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("BrandingId")
                        .IsUnique()
                        .HasFilter("[BrandingId] IS NOT NULL");

                    b.ToTable("Organizations", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.PasswordHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreateDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PasswordHistory", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Permissions", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("AuthenticatorRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckIp")
                        .HasColumnType("bit");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.RolePermission", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("RolePermissions", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AccountStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(4);

                    b.Property<string>("AuthSecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AvatarImageId")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("EmailConfirmationTokenId")
                        .HasColumnType("int");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<DateTimeOffset?>("FirstPasswordFailureDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("GravatarEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GravatarImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("InvitationTokenId")
                        .HasColumnType("int");

                    b.Property<string>("LastLoginBrowserFingerprint")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasMaxLength(35)
                        .HasColumnType("nvarchar(35)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("PasswordResetTokenId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("PictureMode")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousAccountStatus")
                        .HasColumnType("int");

                    b.Property<string>("RecoveryCode")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("SecurityStamp")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("SsoProvider")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<bool>("U2fEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserSignatureJson")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AvatarImageId")
                        .IsUnique()
                        .HasFilter("[AvatarImageId] IS NOT NULL");

                    b.HasIndex("EmailConfirmationTokenId")
                        .IsUnique()
                        .HasFilter("[EmailConfirmationTokenId] IS NOT NULL");

                    b.HasIndex("InvitationTokenId")
                        .IsUnique()
                        .HasFilter("[InvitationTokenId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("PasswordResetTokenId")
                        .IsUnique()
                        .HasFilter("[PasswordResetTokenId] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("AspNetUserGroups", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserOrganization", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OrganizationId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("UserOrganizations", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserOrganizationGroup", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("int");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "OrganizationId", "GroupId");

                    b.HasIndex("GroupId");

                    b.ToTable("UserOrganizationGroups", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserPasswordFailedHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("failedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserPasswordFailedHistory", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserPermission", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions", (string)null);
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AnonymizationRule")
                        .HasColumnType("int");

                    b.Property<string>("ColumnId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ColumnTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Hidden")
                        .HasColumnType("bit");

                    b.Property<int>("TableId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValidationMetadataId")
                        .HasColumnType("int");

                    b.Property<int?>("ViewMetadataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ColumnTypeId");

                    b.HasIndex("TableId");

                    b.HasIndex("ValidationMetadataId")
                        .IsUnique()
                        .HasFilter("[ValidationMetadataId] IS NOT NULL");

                    b.HasIndex("ViewMetadataId")
                        .IsUnique()
                        .HasFilter("[ViewMetadataId] IS NOT NULL");

                    b.ToTable("DbDocColumnMetadata", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AnonymizationRule")
                        .HasColumnType("int");

                    b.Property<int>("Group")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ValidationMetadataId")
                        .HasColumnType("int");

                    b.Property<int?>("ViewMetadataId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ValidationMetadataId")
                        .IsUnique()
                        .HasFilter("[ValidationMetadataId] IS NOT NULL");

                    b.HasIndex("ViewMetadataId")
                        .IsUnique()
                        .HasFilter("[ViewMetadataId] IS NOT NULL");

                    b.ToTable("DbDocColumnType", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnValidationMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Rules")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DbDocColumnValidationMetadata", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnViewMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("DbDocColumnViewMetadata", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.DatabaseSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContextId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DatabaseType")
                        .HasColumnType("int");

                    b.Property<string>("SchemaCode")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("DbDocDatabaseSource", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.Folder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ChangedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DatabaseSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSourceFolder")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Owners")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DatabaseSourceId")
                        .IsUnique()
                        .HasFilter("[DatabaseSourceId] IS NOT NULL");

                    b.ToTable("DbDocFolders", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.GridColumnView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ColumnViewMetadataId")
                        .HasColumnType("int");

                    b.Property<string>("Mask")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("MaxWidth")
                        .HasColumnType("real");

                    b.Property<float?>("MinWidth")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ColumnViewMetadataId")
                        .IsUnique();

                    b.ToTable("DbDocGridColumnViews", (string)null);
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.TableMetadata", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Anonymization")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Representation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FolderId");

                    b.ToTable("DbDocTableMetadata", (string)null);
                });

            modelBuilder.Entity("BBWM.FileStorage.FileDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsImage")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("LastUpdated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("OperationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SizeBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("ThumbnailKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("UploadTime")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FilesDetails", (string)null);
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormCategory");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FormRevisionId")
                        .HasColumnType("int");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OrganizationID")
                        .HasColumnType("int");

                    b.Property<int?>("SurveyId")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FormRevisionId");

                    b.HasIndex("OrganizationID");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserID");

                    b.ToTable("FormData");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormDataDraft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<int>("FormRevisionId")
                        .HasColumnType("int");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FormRevisionId");

                    b.HasIndex("UserID");

                    b.ToTable("FormDataDraft");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveRevisionId")
                        .HasColumnType("int");

                    b.Property<bool?>("ByRequestOnly")
                        .HasColumnType("bit");

                    b.Property<int?>("FormCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.HasIndex("FormCategoryId");

                    b.HasIndex("ManagerId");

                    b.ToTable("FormDefinition");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormDefinitionOrganization", b =>
                {
                    b.Property<int>("FormDefinitionID")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.HasKey("FormDefinitionID", "OrganizationID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("FormDefinitionOrganization");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormParameterList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("KeyField")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Position")
                        .HasColumnType("int");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FormParameterList");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormPrinting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormDataID")
                        .HasColumnType("int");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormDataID");

                    b.ToTable("FormPrinting");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset?>("CompletionDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FormDataId")
                        .HasColumnType("int");

                    b.Property<int>("FormRevisionId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("RequestDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("RequesterId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("FormDataId");

                    b.HasIndex("FormRevisionId");

                    b.HasIndex("RequesterId");

                    b.ToTable("FormRequest");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormRevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FormDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Json")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("MUFCapable")
                        .HasColumnType("bit");

                    b.Property<int>("MajorVersion")
                        .HasColumnType("int");

                    b.Property<int>("MinorVersion")
                        .HasColumnType("int");

                    b.Property<bool>("MobileFriendly")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FormDefinitionId");

                    b.ToTable("FormRevision");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormSurvey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("datetimeoffset");

                    b.Property<int?>("FormRevisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormRevisionId");

                    b.ToTable("FormSurvey");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormViewModels.FormDataGrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormDataId")
                        .HasColumnType("int");

                    b.Property<int?>("FormRevisionGridId")
                        .HasColumnType("int");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentRowIndex")
                        .HasColumnType("int");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormDataId");

                    b.HasIndex("FormRevisionGridId");

                    b.ToTable("FormDataGrid");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormViewModels.FormRevisionGrid", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FormDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentFormRevisionGridId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ViewName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormDefinitionId");

                    b.HasIndex("ParentFormRevisionGridId");

                    b.ToTable("FormRevisionGrid");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormAssociationLinks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Completed")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExternalUserEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFilled")
                        .HasColumnType("bit");

                    b.Property<int>("MultiUserFormAssociationsId")
                        .HasColumnType("int");

                    b.Property<int>("MultiUserFormStageId")
                        .HasColumnType("int");

                    b.Property<string>("SecurityCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("MultiUserFormAssociationsId");

                    b.HasIndex("MultiUserFormStageId");

                    b.HasIndex("UserId");

                    b.ToTable("MultiUserFormAssociationLinks");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormAssociations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveStepSequenceIndex")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FormDataId")
                        .HasColumnType("int");

                    b.Property<int>("MultiUserFormDefinitionId")
                        .HasColumnType("int");

                    b.Property<int>("TotalSequenceSteps")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FormDataId");

                    b.HasIndex("MultiUserFormDefinitionId");

                    b.ToTable("MultiUserFormAssociations");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CreatorId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CurrentStage")
                        .HasColumnType("int");

                    b.Property<int?>("FormRevisionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FormRevisionId");

                    b.ToTable("MultiUserFormDefinition");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormDefinitionOrganization", b =>
                {
                    b.Property<int>("MultiUserFormDefinitionID")
                        .HasColumnType("int");

                    b.Property<int>("OrganizationID")
                        .HasColumnType("int");

                    b.HasKey("MultiUserFormDefinitionID", "OrganizationID");

                    b.HasIndex("OrganizationID");

                    b.ToTable("MultiUserFormDefinitionOrganization");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("InnerTabKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MultiUserFormDefinitionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ReviewerStage")
                        .HasColumnType("bit");

                    b.Property<int>("SequenceStepIndex")
                        .HasColumnType("int");

                    b.Property<int>("StageTargetType")
                        .HasColumnType("int");

                    b.Property<string>("TabComponentKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultiUserFormDefinitionId");

                    b.ToTable("MultiUserFormStage");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormStagePermissions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("int");

                    b.Property<int>("MultiUserFormStageId")
                        .HasColumnType("int");

                    b.Property<string>("TabKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MultiUserFormStageId");

                    b.ToTable("MultiUserFormStagePermissions");
                });

            modelBuilder.Entity("BBWM.LoadingTime.LoadingTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Account")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Route")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LoadingTime");
                });

            modelBuilder.Entity("BBWM.Messages.Templates.EmailTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)");

                    b.Property<string>("From")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplates", (string)null);
                });

            modelBuilder.Entity("BBWM.Messages.Templates.EmailTemplateParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("EmailTemplateParameters", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.FilterControl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoSubmitInput")
                        .HasColumnType("bit");

                    b.Property<int?>("DataType")
                        .HasColumnType("int");

                    b.Property<string>("ExtraSettings")
                        .HasColumnType("text");

                    b.Property<string>("HintText")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("InputType")
                        .HasColumnType("int");

                    b.Property<int?>("MasterControlId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("UserCanChangeOperator")
                        .HasColumnType("bit");

                    b.Property<int>("ViewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MasterControlId");

                    b.HasIndex("ViewId");

                    b.ToTable("ReportingFilterControls", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridView", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DefaultSortColumnId")
                        .HasColumnType("int");

                    b.Property<int?>("DefaultSortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("ShowVisibleColumnsSelector")
                        .HasColumnType("bit");

                    b.Property<bool>("SummaryFooterVisible")
                        .HasColumnType("bit");

                    b.Property<int>("ViewId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DefaultSortColumnId")
                        .IsUnique()
                        .HasFilter("[DefaultSortColumnId] IS NOT NULL");

                    b.HasIndex("ViewId")
                        .IsUnique();

                    b.ToTable("ReportingGridViews", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridViewColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("CustomColumnTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ExtraSettings")
                        .HasColumnType("text");

                    b.Property<string>("Footer")
                        .HasColumnType("text");

                    b.Property<int>("GridViewId")
                        .HasColumnType("int");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("InheritHeader")
                        .HasColumnType("bit");

                    b.Property<int>("QueryTableColumnId")
                        .HasColumnType("int");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<bool>("Sortable")
                        .HasColumnType("bit");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CustomColumnTypeId");

                    b.HasIndex("GridViewId");

                    b.HasIndex("QueryTableColumnId");

                    b.ToTable("ReportingGridViewColumns", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.NamedQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("QueryId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ReportingNamedQueries", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid?>("DbDocFolderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ForEndUserOnly")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("ReportingQueries", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomSqlCodeTemplate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QueryFilterSetId")
                        .HasColumnType("int");

                    b.Property<int?>("QueryRuleId")
                        .HasColumnType("int");

                    b.Property<int?>("QueryTableColumnId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("Value2")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QueryFilterSetId");

                    b.HasIndex("QueryRuleId");

                    b.HasIndex("QueryTableColumnId");

                    b.ToTable("ReportingQueryFilters", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterBinding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BindingType")
                        .HasColumnType("int");

                    b.Property<int?>("FilterControlId")
                        .HasColumnType("int");

                    b.Property<int?>("MasterDetailQueryTableColumnId")
                        .HasColumnType("int");

                    b.Property<Guid?>("MasterDetailSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QueryFilterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilterControlId");

                    b.HasIndex("MasterDetailQueryTableColumnId");

                    b.HasIndex("MasterDetailSectionId");

                    b.HasIndex("QueryFilterId");

                    b.ToTable("ReportingQueryFilterBindings", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConditionalOperator")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentQueryId")
                        .HasColumnType("int");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("ParentQueryId")
                        .IsUnique()
                        .HasFilter("[ParentQueryId] IS NOT NULL");

                    b.HasIndex("QueryId");

                    b.ToTable("ReportingQueryFilterSets", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("MsSqlCodeTemplate")
                        .HasColumnType("text");

                    b.Property<string>("MySqlCodeTemplate")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("ReportingQueryRules", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryRuleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("QueryRuleId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QueryRuleId");

                    b.ToTable("ReportingQueryRuleTypes", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("OnlyForJoin")
                        .HasColumnType("bit");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<string>("SelfJoinDbDocColumnId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("SourceCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SourceTableId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.ToTable("ReportingQueryTables", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTableColumn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("OnlyForJoin")
                        .HasColumnType("bit");

                    b.Property<int>("QueryTableId")
                        .HasColumnType("int");

                    b.Property<string>("SourceColumnId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("QueryTableId");

                    b.ToTable("ReportingQueryTableColumns", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTableJoin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("FromQueryTableColumnId")
                        .HasColumnType("int");

                    b.Property<int?>("FromQueryTableId")
                        .HasColumnType("int");

                    b.Property<int>("JoinType")
                        .HasColumnType("int");

                    b.Property<int>("QueryId")
                        .HasColumnType("int");

                    b.Property<int?>("ToQueryTableColumnId")
                        .HasColumnType("int");

                    b.Property<int?>("ToQueryTableId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FromQueryTableColumnId");

                    b.HasIndex("FromQueryTableId");

                    b.HasIndex("QueryId");

                    b.HasIndex("ToQueryTableColumnId");

                    b.HasIndex("ToQueryTableId");

                    b.ToTable("ReportingQueryTableJoins", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Report", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Access")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("CreatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<bool>("IsDraft")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("PublishedReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShowTitle")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTimeOffset>("UpdatedOn")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("UrlSlug")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("PublishedReportId");

                    b.HasIndex("UpdatedBy");

                    b.ToTable("ReportingReports", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.ReportPermission", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("ReportId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("ReportingPermissions", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.ReportRole", b =>
                {
                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("ReportId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("ReportingRoles", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Section", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AutoCollapse")
                        .HasColumnType("bit");

                    b.Property<int>("ColumnIndex")
                        .HasColumnType("int");

                    b.Property<int>("DataViewType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExpandBehaviour")
                        .HasColumnType("int");

                    b.Property<Guid?>("NamedQueryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PublishedSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QueryId")
                        .HasColumnType("int");

                    b.Property<Guid>("ReportId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReusedSectionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RowIndex")
                        .HasColumnType("int");

                    b.Property<bool>("ShowTitle")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Visible")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("NamedQueryId");

                    b.HasIndex("QueryId");

                    b.HasIndex("ReportId");

                    b.HasIndex("ReusedSectionId");

                    b.ToTable("ReportingSections", (string)null);
                });

            modelBuilder.Entity("BBWM.Reporting.Model.View", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<Guid>("SectionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SectionId")
                        .IsUnique();

                    b.ToTable("ReportingViews", (string)null);
                });

            modelBuilder.Entity("BBWM.Scheduler.Model.JobRunDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AssemblyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cron")
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("Duration")
                        .HasColumnType("time");

                    b.Property<DateTime>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("JobGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("int");

                    b.Property<string>("ServerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Success")
                        .HasColumnType("bit");

                    b.Property<string>("TriggerGroup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TriggerType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SchedulerJobRunDetails", (string)null);
                });

            modelBuilder.Entity("BBWM.StaticPages.StaticPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ContentPreview")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Contents")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Heading")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("StaticPages");
                });

            modelBuilder.Entity("BBWM.SystemSettings.AppSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EncryptedFields")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Section")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");
                });

            modelBuilder.Entity("GroupMultiUserFormStage", b =>
                {
                    b.Property<int>("GroupsId")
                        .HasColumnType("int");

                    b.Property<int>("MultiUserFormStageId")
                        .HasColumnType("int");

                    b.HasKey("GroupsId", "MultiUserFormStageId");

                    b.HasIndex("MultiUserFormStageId");

                    b.ToTable("GroupMultiUserFormStage");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RbDashboardOrganization", b =>
                {
                    b.Property<Guid>("DashboardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrganizationsId")
                        .HasColumnType("int");

                    b.HasKey("DashboardId", "OrganizationsId");

                    b.HasIndex("OrganizationsId");

                    b.ToTable("RbDashboardOrganization");
                });

            modelBuilder.Entity("RbQuerySourceOrganization", b =>
                {
                    b.Property<int>("OrganizationsId")
                        .HasColumnType("int");

                    b.Property<Guid>("QuerySourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationsId", "QuerySourceId");

                    b.HasIndex("QuerySourceId");

                    b.ToTable("RbQuerySourceOrganization");
                });

            modelBuilder.Entity("RbWidgetSourceOrganization", b =>
                {
                    b.Property<int>("OrganizationsId")
                        .HasColumnType("int");

                    b.Property<Guid>("WidgetSourceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("OrganizationsId", "WidgetSourceId");

                    b.HasIndex("WidgetSourceId");

                    b.ToTable("RbWidgetSourceOrganization");
                });

            modelBuilder.Entity("BBF.Reporting.Core.DbModel.QuerySource", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("BBF.Reporting.Core.DbModel.QuerySource", "ReleaseQuery")
                        .WithMany()
                        .HasForeignKey("ReleaseQueryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Owner");

                    b.Navigation("ReleaseQuery");
                });

            modelBuilder.Entity("BBF.Reporting.Core.DbModel.WidgetSource", b =>
                {
                    b.HasOne("BBF.Reporting.Core.DbModel.VariableRule", "DisplayRule")
                        .WithMany()
                        .HasForeignKey("DisplayRuleId");

                    b.HasOne("BBWM.Core.Membership.Model.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.HasOne("BBF.Reporting.Core.DbModel.WidgetSource", "ReleaseWidget")
                        .WithMany()
                        .HasForeignKey("ReleaseWidgetId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("DisplayRule");

                    b.Navigation("Owner");

                    b.Navigation("ReleaseWidget");
                });

            modelBuilder.Entity("BBF.Reporting.Dashboard.DbModel.Dashboard", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("BBF.Reporting.Dashboard.DbModel.DashboardWidget", b =>
                {
                    b.HasOne("BBF.Reporting.Dashboard.DbModel.Dashboard", "Dashboard")
                        .WithMany("Widgets")
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBF.Reporting.Core.DbModel.WidgetSource", "WidgetSource")
                        .WithMany()
                        .HasForeignKey("WidgetSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dashboard");

                    b.Navigation("WidgetSource");
                });

            modelBuilder.Entity("BBF.Reporting.QueryBuilder.DbModel.SqlQuery", b =>
                {
                    b.HasOne("BBF.Reporting.Core.DbModel.QuerySource", "QuerySource")
                        .WithMany()
                        .HasForeignKey("QuerySourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBF.Reporting.TableSet.DbModel.TableSet", "TableSet")
                        .WithMany()
                        .HasForeignKey("TableSetId");

                    b.Navigation("QuerySource");

                    b.Navigation("TableSet");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Chart.DbModel.WidgetChart", b =>
                {
                    b.HasOne("BBF.Reporting.Core.DbModel.QuerySource", "QuerySource")
                        .WithMany()
                        .HasForeignKey("QuerySourceId");

                    b.HasOne("BBF.Reporting.Core.DbModel.WidgetSource", "WidgetSource")
                        .WithMany()
                        .HasForeignKey("WidgetSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuerySource");

                    b.Navigation("WidgetSource");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Chart.DbModel.WidgetChartColumn", b =>
                {
                    b.HasOne("BBF.Reporting.Widget.Chart.DbModel.WidgetChart", "Chart")
                        .WithMany("Columns")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chart");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.ControlSet.DbModel.WidgetControlSet", b =>
                {
                    b.HasOne("BBF.Reporting.Core.DbModel.WidgetSource", "WidgetSource")
                        .WithMany()
                        .HasForeignKey("WidgetSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WidgetSource");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.ControlSet.DbModel.WidgetControlSetItem", b =>
                {
                    b.HasOne("BBF.Reporting.Widget.ControlSet.DbModel.WidgetControlSet", "ControlSet")
                        .WithMany("Items")
                        .HasForeignKey("ControlSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBF.Reporting.Core.DbModel.FilterRule", "FilterRule")
                        .WithMany()
                        .HasForeignKey("FilterRuleId");

                    b.HasOne("BBF.Reporting.Core.DbModel.Variable", "Variable")
                        .WithMany()
                        .HasForeignKey("VariableId");

                    b.Navigation("ControlSet");

                    b.Navigation("FilterRule");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Grid.DbModel.WidgetGrid", b =>
                {
                    b.HasOne("BBF.Reporting.Core.DbModel.QuerySource", "QuerySource")
                        .WithMany()
                        .HasForeignKey("QuerySourceId");

                    b.HasOne("BBF.Reporting.Core.DbModel.WidgetSource", "WidgetSource")
                        .WithMany()
                        .HasForeignKey("WidgetSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuerySource");

                    b.Navigation("WidgetSource");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Grid.DbModel.WidgetGridColumn", b =>
                {
                    b.HasOne("BBF.Reporting.Widget.Grid.DbModel.WidgetGrid", "Grid")
                        .WithMany("Columns")
                        .HasForeignKey("GridId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBF.Reporting.Core.DbModel.Variable", "Variable")
                        .WithMany()
                        .HasForeignKey("VariableId");

                    b.Navigation("Grid");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Html.DbModel.WidgetHtml", b =>
                {
                    b.HasOne("BBF.Reporting.Core.DbModel.WidgetSource", "WidgetSource")
                        .WithMany()
                        .HasForeignKey("WidgetSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WidgetSource");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIpRole", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.AllowedIp", "AllowedIp")
                        .WithMany("AllowedIpRoles")
                        .HasForeignKey("AllowedIpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Role", "Role")
                        .WithMany("AllowedIpRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AllowedIp");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIpUser", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.AllowedIp", "AllowedIp")
                        .WithMany("AllowedIpUsers")
                        .HasForeignKey("AllowedIpId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("AllowedIpUser")
                        .HasForeignKey("UserId");

                    b.Navigation("AllowedIp");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AuthenticationRequest", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany("AuthenticationRequests")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Branding", b =>
                {
                    b.HasOne("BBWM.FileStorage.FileDetails", "LogoIcon")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.Branding", "LogoIconId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.FileStorage.FileDetails", "LogoImage")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.Branding", "LogoImageId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("LogoIcon");

                    b.Navigation("LogoImage");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Device", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany("DeviceRegistrations")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Metadata", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", "LockedByUser")
                        .WithMany()
                        .HasForeignKey("LockedByUserId");

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("LockedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Organization", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("BBWM.Core.Membership.Model.Branding", "Branding")
                        .WithOne("Organization")
                        .HasForeignKey("BBWM.Core.Membership.Model.Organization", "BrandingId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Address");

                    b.Navigation("Branding");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.RolePermission", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.User", b =>
                {
                    b.HasOne("BBWM.FileStorage.FileDetails", "AvatarImage")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.User", "AvatarImageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.Core.Membership.Model.ActivationToken", "EmailConfirmationToken")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.User", "EmailConfirmationTokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Core.Membership.Model.ActivationToken", "InvitationToken")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.User", "InvitationTokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Core.Membership.Model.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.Core.Membership.Model.ActivationToken", "PasswordResetToken")
                        .WithOne()
                        .HasForeignKey("BBWM.Core.Membership.Model.User", "PasswordResetTokenId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AvatarImage");

                    b.Navigation("EmailConfirmationToken");

                    b.Navigation("InvitationToken");

                    b.Navigation("Organization");

                    b.Navigation("PasswordResetToken");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserGroup", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Group", "Group")
                        .WithMany("UserGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("UserGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserOrganization", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Organization", "Organization")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("UserOrganizations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserOrganizationGroup", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Group", "Group")
                        .WithMany("UserOrganizationGroups")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.UserOrganization", "UserOrganization")
                        .WithMany("Groups")
                        .HasForeignKey("UserId", "OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("UserOrganization");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserPermission", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserRole", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnMetadata", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.ColumnType", "ColumnType")
                        .WithMany()
                        .HasForeignKey("ColumnTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.DbDoc.Model.TableMetadata", "Table")
                        .WithMany("Columns")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.DbDoc.Model.ColumnValidationMetadata", "ValidationMetadata")
                        .WithOne()
                        .HasForeignKey("BBWM.DbDoc.Model.ColumnMetadata", "ValidationMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.DbDoc.Model.ColumnViewMetadata", "ViewMetadata")
                        .WithOne()
                        .HasForeignKey("BBWM.DbDoc.Model.ColumnMetadata", "ViewMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ColumnType");

                    b.Navigation("Table");

                    b.Navigation("ValidationMetadata");

                    b.Navigation("ViewMetadata");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnType", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.ColumnValidationMetadata", "ValidationMetadata")
                        .WithOne()
                        .HasForeignKey("BBWM.DbDoc.Model.ColumnType", "ValidationMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.DbDoc.Model.ColumnViewMetadata", "ViewMetadata")
                        .WithOne()
                        .HasForeignKey("BBWM.DbDoc.Model.ColumnType", "ViewMetadataId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ValidationMetadata");

                    b.Navigation("ViewMetadata");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.Folder", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.DatabaseSource", "DatabaseSource")
                        .WithOne("Folder")
                        .HasForeignKey("BBWM.DbDoc.Model.Folder", "DatabaseSourceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DatabaseSource");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.GridColumnView", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.ColumnViewMetadata", "ColumnViewMetadata")
                        .WithOne("GridColumnView")
                        .HasForeignKey("BBWM.DbDoc.Model.GridColumnView", "ColumnViewMetadataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColumnViewMetadata");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.TableMetadata", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.Folder", "Folder")
                        .WithMany("Tables")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormData", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormRevision", "FormRevision")
                        .WithMany("FormDatas")
                        .HasForeignKey("FormRevisionId");

                    b.HasOne("BBWM.Core.Membership.Model.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID");

                    b.HasOne("BBWM.FormIO.Models.FormSurvey", "Survey")
                        .WithMany("SurveyFormDataInstances")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.Core.Membership.Model.User", "Createdby")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Createdby");

                    b.Navigation("FormRevision");

                    b.Navigation("Organization");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormDataDraft", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormRevision", "FormRevision")
                        .WithMany()
                        .HasForeignKey("FormRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "Createdby")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Createdby");

                    b.Navigation("FormRevision");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormDefinition", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormCategory", "FormCategory")
                        .WithMany()
                        .HasForeignKey("FormCategoryId");

                    b.HasOne("BBWM.Core.Membership.Model.User", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.Navigation("FormCategory");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormDefinitionOrganization", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormDefinition", "FormDefinition")
                        .WithMany("FormDefinitionOrganizations")
                        .HasForeignKey("FormDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormDefinition");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormPrinting", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormDefinition", "FormData")
                        .WithMany()
                        .HasForeignKey("FormDataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormData");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormRequest", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormData", "FormData")
                        .WithMany()
                        .HasForeignKey("FormDataId");

                    b.HasOne("BBWM.FormIO.Models.FormRevision", "FormRevision")
                        .WithMany()
                        .HasForeignKey("FormRevisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "Requester")
                        .WithMany()
                        .HasForeignKey("RequesterId");

                    b.Navigation("FormData");

                    b.Navigation("FormRevision");

                    b.Navigation("Requester");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormRevision", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BBWM.FormIO.Models.FormDefinition", "FormDefinition")
                        .WithMany("FormRevisions")
                        .HasForeignKey("FormDefinitionId");

                    b.Navigation("Creator");

                    b.Navigation("FormDefinition");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormSurvey", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormRevision", "FormRevision")
                        .WithMany("Surveys")
                        .HasForeignKey("FormRevisionId");

                    b.Navigation("FormRevision");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormViewModels.FormDataGrid", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormData", "FormData")
                        .WithMany()
                        .HasForeignKey("FormDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.FormIO.Models.FormViewModels.FormRevisionGrid", "FormRevisionGrid")
                        .WithMany()
                        .HasForeignKey("FormRevisionGridId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("FormData");

                    b.Navigation("FormRevisionGrid");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormViewModels.FormRevisionGrid", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormDefinition", "FormDefinition")
                        .WithMany()
                        .HasForeignKey("FormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.FormIO.Models.FormViewModels.FormRevisionGrid", "ParentFormRevisionGrid")
                        .WithMany()
                        .HasForeignKey("ParentFormRevisionGridId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("FormDefinition");

                    b.Navigation("ParentFormRevisionGrid");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormAssociationLinks", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.MultiUserFormAssociations", "MultiUserFormAssociations")
                        .WithMany("MultiUserFormAssociationLinks")
                        .HasForeignKey("MultiUserFormAssociationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.FormIO.Models.MultiUserFormStage", "MultiUserFormStage")
                        .WithMany()
                        .HasForeignKey("MultiUserFormStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("MultiUserFormAssociations");

                    b.Navigation("MultiUserFormStage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormAssociations", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.FormData", "FormData")
                        .WithMany()
                        .HasForeignKey("FormDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.FormIO.Models.MultiUserFormDefinition", "MultiUserFormDefinition")
                        .WithMany("MultiUserFormAssociations")
                        .HasForeignKey("MultiUserFormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FormData");

                    b.Navigation("MultiUserFormDefinition");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormDefinition", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId");

                    b.HasOne("BBWM.FormIO.Models.FormRevision", "FormRevision")
                        .WithMany()
                        .HasForeignKey("FormRevisionId");

                    b.Navigation("Creator");

                    b.Navigation("FormRevision");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormDefinitionOrganization", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.MultiUserFormDefinition", "MultiUserFormDefinition")
                        .WithMany("MultiUserFormDefinitionOrganizations")
                        .HasForeignKey("MultiUserFormDefinitionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultiUserFormDefinition");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormStage", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.MultiUserFormDefinition", "MultiUserFormDefinition")
                        .WithMany("MultiUserFormStages")
                        .HasForeignKey("MultiUserFormDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultiUserFormDefinition");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormStagePermissions", b =>
                {
                    b.HasOne("BBWM.FormIO.Models.MultiUserFormStage", "MultiUserFormStage")
                        .WithMany("MultiUserFormStagePermissions")
                        .HasForeignKey("MultiUserFormStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MultiUserFormStage");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.FilterControl", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.FilterControl", "MasterControl")
                        .WithMany()
                        .HasForeignKey("MasterControlId");

                    b.HasOne("BBWM.Reporting.Model.View", "View")
                        .WithMany("Filters")
                        .HasForeignKey("ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MasterControl");

                    b.Navigation("View");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridView", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "DefaultSortColumn")
                        .WithOne()
                        .HasForeignKey("BBWM.Reporting.Model.GridView", "DefaultSortColumnId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("BBWM.Reporting.Model.View", "View")
                        .WithOne("GridView")
                        .HasForeignKey("BBWM.Reporting.Model.GridView", "ViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultSortColumn");

                    b.Navigation("View");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridViewColumn", b =>
                {
                    b.HasOne("BBWM.DbDoc.Model.ColumnType", "CustomColumnType")
                        .WithMany()
                        .HasForeignKey("CustomColumnTypeId");

                    b.HasOne("BBWM.Reporting.Model.GridView", "GridView")
                        .WithMany("ViewColumns")
                        .HasForeignKey("GridViewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "QueryTableColumn")
                        .WithMany()
                        .HasForeignKey("QueryTableColumnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomColumnType");

                    b.Navigation("GridView");

                    b.Navigation("QueryTableColumn");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.NamedQuery", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilter", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryFilterSet", "QueryFilterSet")
                        .WithMany("QueryFilters")
                        .HasForeignKey("QueryFilterSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.QueryRule", "QueryRule")
                        .WithMany()
                        .HasForeignKey("QueryRuleId");

                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "QueryTableColumn")
                        .WithMany()
                        .HasForeignKey("QueryTableColumnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("QueryFilterSet");

                    b.Navigation("QueryRule");

                    b.Navigation("QueryTableColumn");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterBinding", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.FilterControl", "FilterControl")
                        .WithMany("QueryFilterBindings")
                        .HasForeignKey("FilterControlId");

                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "MasterDetailQueryTableColumn")
                        .WithMany()
                        .HasForeignKey("MasterDetailQueryTableColumnId");

                    b.HasOne("BBWM.Reporting.Model.Section", "MasterDetailSection")
                        .WithMany("QueryFilterBindings")
                        .HasForeignKey("MasterDetailSectionId");

                    b.HasOne("BBWM.Reporting.Model.QueryFilter", "QueryFilter")
                        .WithMany("QueryFilterBindings")
                        .HasForeignKey("QueryFilterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FilterControl");

                    b.Navigation("MasterDetailQueryTableColumn");

                    b.Navigation("MasterDetailSection");

                    b.Navigation("QueryFilter");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterSet", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryFilterSet", "Parent")
                        .WithMany("ChildSets")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Reporting.Model.Query", "ParentQuery")
                        .WithOne("RootFilterSet")
                        .HasForeignKey("BBWM.Reporting.Model.QueryFilterSet", "ParentQueryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany("QueryFilterSets")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("ParentQuery");

                    b.Navigation("Query");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryRuleType", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryRule", "QueryRule")
                        .WithMany("RuleTypes")
                        .HasForeignKey("QueryRuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueryRule");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTable", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany("QueryTables")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTableColumn", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryTable", "QueryTable")
                        .WithMany("Columns")
                        .HasForeignKey("QueryTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueryTable");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTableJoin", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "FromQueryTableColumn")
                        .WithMany()
                        .HasForeignKey("FromQueryTableColumnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Reporting.Model.QueryTable", "FromQueryTable")
                        .WithMany()
                        .HasForeignKey("FromQueryTableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany("QueryTableJoins")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.QueryTableColumn", "ToQueryTableColumn")
                        .WithMany()
                        .HasForeignKey("ToQueryTableColumnId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BBWM.Reporting.Model.QueryTable", "ToQueryTable")
                        .WithMany()
                        .HasForeignKey("ToQueryTableId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromQueryTable");

                    b.Navigation("FromQueryTableColumn");

                    b.Navigation("Query");

                    b.Navigation("ToQueryTable");

                    b.Navigation("ToQueryTableColumn");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Report", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("BBWM.Reporting.Model.Report", "PublishedReport")
                        .WithMany()
                        .HasForeignKey("PublishedReportId");

                    b.HasOne("BBWM.Core.Membership.Model.User", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy");

                    b.Navigation("PublishedReport");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.ReportPermission", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.Report", "Report")
                        .WithMany("ReportPermissions")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.ReportRole", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.Report", "Report")
                        .WithMany("ReportRoles")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Report");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Section", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.NamedQuery", "NamedQuery")
                        .WithMany()
                        .HasForeignKey("NamedQueryId");

                    b.HasOne("BBWM.Reporting.Model.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId");

                    b.HasOne("BBWM.Reporting.Model.Report", "Report")
                        .WithMany("Sections")
                        .HasForeignKey("ReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Reporting.Model.Section", "ReusedSection")
                        .WithMany()
                        .HasForeignKey("ReusedSectionId");

                    b.Navigation("NamedQuery");

                    b.Navigation("Query");

                    b.Navigation("Report");

                    b.Navigation("ReusedSection");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.View", b =>
                {
                    b.HasOne("BBWM.Reporting.Model.Section", "Section")
                        .WithOne("View")
                        .HasForeignKey("BBWM.Reporting.Model.View", "SectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Section");
                });

            modelBuilder.Entity("GroupMultiUserFormStage", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Group", null)
                        .WithMany()
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.FormIO.Models.MultiUserFormStage", null)
                        .WithMany()
                        .HasForeignKey("MultiUserFormStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RbDashboardOrganization", b =>
                {
                    b.HasOne("BBF.Reporting.Dashboard.DbModel.Dashboard", null)
                        .WithMany()
                        .HasForeignKey("DashboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBWM.Core.Membership.Model.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RbQuerySourceOrganization", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBF.Reporting.Core.DbModel.QuerySource", null)
                        .WithMany()
                        .HasForeignKey("QuerySourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RbWidgetSourceOrganization", b =>
                {
                    b.HasOne("BBWM.Core.Membership.Model.Organization", null)
                        .WithMany()
                        .HasForeignKey("OrganizationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BBF.Reporting.Core.DbModel.WidgetSource", null)
                        .WithMany()
                        .HasForeignKey("WidgetSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BBF.Reporting.Dashboard.DbModel.Dashboard", b =>
                {
                    b.Navigation("Widgets");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Chart.DbModel.WidgetChart", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.ControlSet.DbModel.WidgetControlSet", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("BBF.Reporting.Widget.Grid.DbModel.WidgetGrid", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.AllowedIp", b =>
                {
                    b.Navigation("AllowedIpRoles");

                    b.Navigation("AllowedIpUsers");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Branding", b =>
                {
                    b.Navigation("Organization");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Group", b =>
                {
                    b.Navigation("UserGroups");

                    b.Navigation("UserOrganizationGroups");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Organization", b =>
                {
                    b.Navigation("UserOrganizations");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Permission", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.Role", b =>
                {
                    b.Navigation("AllowedIpRoles");

                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.User", b =>
                {
                    b.Navigation("AllowedIpUser");

                    b.Navigation("AuthenticationRequests");

                    b.Navigation("DeviceRegistrations");

                    b.Navigation("UserGroups");

                    b.Navigation("UserOrganizations");

                    b.Navigation("UserPermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BBWM.Core.Membership.Model.UserOrganization", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.ColumnViewMetadata", b =>
                {
                    b.Navigation("GridColumnView");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.DatabaseSource", b =>
                {
                    b.Navigation("Folder");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.Folder", b =>
                {
                    b.Navigation("Tables");
                });

            modelBuilder.Entity("BBWM.DbDoc.Model.TableMetadata", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormDefinition", b =>
                {
                    b.Navigation("FormDefinitionOrganizations");

                    b.Navigation("FormRevisions");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormRevision", b =>
                {
                    b.Navigation("FormDatas");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.FormSurvey", b =>
                {
                    b.Navigation("SurveyFormDataInstances");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormAssociations", b =>
                {
                    b.Navigation("MultiUserFormAssociationLinks");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormDefinition", b =>
                {
                    b.Navigation("MultiUserFormAssociations");

                    b.Navigation("MultiUserFormDefinitionOrganizations");

                    b.Navigation("MultiUserFormStages");
                });

            modelBuilder.Entity("BBWM.FormIO.Models.MultiUserFormStage", b =>
                {
                    b.Navigation("MultiUserFormStagePermissions");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.FilterControl", b =>
                {
                    b.Navigation("QueryFilterBindings");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.GridView", b =>
                {
                    b.Navigation("ViewColumns");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Query", b =>
                {
                    b.Navigation("QueryFilterSets");

                    b.Navigation("QueryTableJoins");

                    b.Navigation("QueryTables");

                    b.Navigation("RootFilterSet");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilter", b =>
                {
                    b.Navigation("QueryFilterBindings");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryFilterSet", b =>
                {
                    b.Navigation("ChildSets");

                    b.Navigation("QueryFilters");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryRule", b =>
                {
                    b.Navigation("RuleTypes");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.QueryTable", b =>
                {
                    b.Navigation("Columns");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Report", b =>
                {
                    b.Navigation("ReportPermissions");

                    b.Navigation("ReportRoles");

                    b.Navigation("Sections");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.Section", b =>
                {
                    b.Navigation("QueryFilterBindings");

                    b.Navigation("View");
                });

            modelBuilder.Entity("BBWM.Reporting.Model.View", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("GridView");
                });
#pragma warning restore 612, 618
        }
    }
}
