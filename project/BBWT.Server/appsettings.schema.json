{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Blueberry Web Template 3 Settings",
    "type": "object",
    "properties": {
        "AggregatedLogsSettings": {
            "type": "object",
            "title": "Aggregated Logs Settings",
            "description": "Settings related to aggregated log storage based on Serilog",
            "properties": {
                "Enabled": {
                    "type": "boolean",
                    "title": "Enables/Disables aggregated logging",
                    "default": "false"
                },
                "DatabaseType": {
                    "type": "string",
                    "title": "Database type",
                    "description": "The type of the database to use",
                    "enum": [
                        "MsSql",
                        "PostgreSql",
                        "MySql"
                    ],
                    "default": "PostgreSql"
                },
                "LogEventLevel": {
                    "type": "string",
                    "title": "Log event level",
                    "description": "Level of logs detailing (Verbose/Debug/Information/Warning/Error/Fatal)",
                    "default": "Information"
                },
                "ConnectionString": {
                    "type": "string",
                    "title": "Database connection string",
                    "description": "Database connection string"
                },
                "ErrorNumbersToAdd": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "title": "Error numbers to add",
                    "description": "Additional SQL error numbers that should be considered transient"
                },
                "MaxRetryCount": {
                    "type": "integer",
                    "title": "Max retry count",
                    "description": "The maximum number of retry attempts to connect DB",
                    "default": 10
                },
                "MaxRetryDelay": {
                    "type": "integer",
                    "title": "Max retry delay",
                    "description": "The maximum delay between retries of DB connection",
                    "default": 30
                },
                "Period": {
                    "type": "integer",
                    "title": "Period",
                    "description": "Period to wait before checking for next batch (in seconds)",
                    "default": 30
                },
                "BatchLimit": {
                    "type": "integer",
                    "title": "Batch limit",
                    "description": "Maximum number of events written in batch",
                    "default": 50
                }
            }
        },
        "AwsSettings": {
            "type": "object",
            "properties": {
                "AccessKeyId": {
                    "type": "string",
                    "title": "Access Key ID",
                    "description": "AWS access key ID to use with storage."
                },
                "AwsRegion": {
                    "type": "string",
                    "title": "AWS Region",
                    "description": "Region used for connections.",
                    "enum": [
                        "eu-north-1",
                        "ap-south-1",
                        "eu-west-3",
                        "eu-west-2",
                        "eu-west-1",
                        "ap-northeast-2",
                        "ap-northeast-1",
                        "sa-east-1",
                        "ca-central-1",
                        "ap-southeast-1",
                        "ap-southeast-2",
                        "eu-central-1",
                        "us-east-1",
                        "us-east-2",
                        "us-west-1",
                        "us-west-2"
                    ],
                    "default": "eu-west-1"
                },
                "BucketName": {
                    "type": "string",
                    "title": "Bucket Name",
                    "description": "AWS S3 Bucket for files storage."
                },
                "ParametersPath": {
                    "type": "string",
                    "title": "Parameters Path",
                    "description": "Prefix that defines section related to the project."
                },
                "ParametersReloadingInterval": {
                    "type": "integer",
                    "title": "Parameters Reloading Interval",
                    "description": "An interval in seconds for the configuration reloading period. If not specified then the configuration won't be reloaded."
                },
                "SecretAccessKey": {
                    "type": "string",
                    "title": "Secret Access Key",
                    "description": "AWS secret access key to use with storage."
                },
                "DataProtectionEnabled": {
                    "type": "boolean",
                    "title": "AWS Data Protection Enabled",
                    "description": "Defines whether AWS data protection (e.g. for storing antiforgery encryption keys) is enabled"
                },
                "DataProtectionAppName": {
                    "type": "string",
                    "title": "AWS Data Protection App Name",
                    "description": "Sets the unique name of this application within the data protection system."
                }
            },
            "required": [
                "AwsRegion",
                "AccessKeyId",
                "SecretAccessKey",
                "BucketName",
                "ParametersPath"
            ]
        },
        "AwsEventBridgeSettings": {
            "type": "object",
            "properties": {
                "APIKey": {
                    "type": "string",
                    "title": "API Key",
                    "description": "Required. Contains the API Key value to use for authenticating the AWS Event Bridge requests."
                },
                "TargetRoleArn": {
                    "type": "string",
                    "title": "Target Role ARN",
                    "description": "Required. The RoleArn to use for the rule's target when it triggers."
                },
                "AuthHeader": {
                    "type": "string",
                    "title": "Authorization Header",
                    "description": "Optional. The authorization header to use when authenticating the incoming AWS Event Bridge requests. If not specified it defaults to: X-Aws-Event-Bridge-Api-Key."
                },
                "ApiConnectionName": {
                    "type": "string",
                    "title": "API Connection Name",
                    "description": "Required. Identifies the connection used by AWS Event Bridge to setup authentication info."
                },
                "ApiDestinationName": {
                    "type": "string",
                    "title": "API Destination Name",
                    "description": "Required. Identifies the ApiDestination used by AWS Event Bridge to setup endpoint info when a rule triggers."
                }
            },
            "required": [
                "APIKey",
                "TargetRoleArn",
                "ApiConnectionName",
                "ApiDestinationName"
            ]
        },
        "AzureSettings": {
            "type": "object",
            "properties": {
                "ConnectionString": {
                    "type": "string",
                    "title": "Connection String",
                    "description": "Connection string to access Azure server."
                },
                "ContainerName": {
                    "type": "string",
                    "title": "Container Name",
                    "description": "Container name that defines an area of the store and depends on application."
                }
            },
            "required": [
                "ConnectionString",
                "ContainerName"
            ]
        },
        "ConnectionStrings": {
            "type": "object",
            "properties": {
                "AuditConnection": {
                    "type": "string",
                    "title": "Audit Connection",
                    "description": "SQL Server audit database connection string."
                },
                "AuditMySqlConnection": {
                    "type": "string",
                    "title": "Audit MySql Connection",
                    "description": "MySql audit database connection string"
                },
                "DefaultConnection": {
                    "type": "string",
                    "title": "Default Connection",
                    "description": "SQL Server main database connection string."
                },
                "DemoConnection": {
                    "type": "string",
                    "title": "Default Connection",
                    "description": "SQL Server main database connection string."
                },
                "DemoMySqlConnection": {
                    "type": "string",
                    "title": "MySql Connection",
                    "description": "MySql Demo module's database connection string."
                },
                "MySqlConnection": {
                    "type": "string",
                    "title": "MySql Connection",
                    "description": "MySql main database connection string."
                }
            }
        },
        "ContentSecurityPolicy": {
            "type": "object",
            "properties": {
                "Enabled": {
                    "type": "boolean",
                    "title": "Enable Content Security Policy",
                    "description": "Determines whether Content Security Policy is enabled. Default is true. IMPORTANT! Please note that enabling Content Security Policy at the same time that PWA can make the latter to stop working. See https://pts.bbconsult.co.uk/issueEditor?id=258175 for details.",
                    "default": true
                },
                "SendViolationReport": {
                    "type": "boolean",
                    "title": "Send Violation Report",
                    "description": "Determines whether to generate a Report-Only Content Security Policy and whether to send the violation report to the specified endpoint. Default is false."
                },
                "ViolationSupportEmail": {
                    "type": "string",
                    "title": "Violation Support Email",
                    "description": "Email address where all Content Security Policy violation reports will be forwarded to."
                },
                "ViolationReportUri": {
                    "type": "string",
                    "title": "Violation Report Uri",
                    "description": "Endpoint where all violation reports will be sent before forwarding them to the specified support email. Default is /api/csp/violation-report."
                }
            }
        },
        "CookieAuthSettings": {
            "type": "object",
            "properties": {
                "ApiPath": {
                    "type": "string"
                },
                "CookieName": {
                    "type": "string"
                },
                "ExpireTime": {
                    "type": "integer"
                },
                "LoginPath": {
                    "type": "string"
                },
                "SecurityStampValidationInterval": {
                    "type": "number",
                    "title": "Security Stamp validation interval",
                    "description": "Amount of seconds after which the Security Stamps are re-validated. Defaults to 20 minutes."
                },
                "AuthSecurityStampValidationInterval": {
                    "type": "number",
                    "title": "Authentication Security Stamp validation interval",
                    "description": "Amount of seconds after which the Authentication Security Stamps are re-validated. Defaults to 90 seconds. Even though we instruct the client to delete a cookie at logout, if the cookie has been captured, it could continue to be used. This is called a ‘cookie replay attack’. We don’t want to be calling the database tables on user access every time we make any query, but we also don’t want to let the captured cookie be used for ever. AuthSecurityStampValidationInterval determines how long we wait before verifying again that the user has logged out. SecurityStampValidationInterval determines how long a user can be inactive before we ask them to re-authenticate (typically by login). Default settings below are overridden by variables at the GitLab page."
                }
            },
            "required": [
                "ApiPath",
                "LoginPath",
                "CookieName"
            ]
        },
        "DatabaseConnectionSettings": {
            "type": "object",
            "title": "Database connection settings",
            "description": "Settings that determine rules for the database connection.",
            "properties": {
                "DatabaseType": {
                    "type": "string",
                    "title": "Database type",
                    "description": "The type of the database to use.",
                    "enum": [
                        "MySql",
                        "MsSql"
                    ],
                    "default": "MySql",
                    "examples": [
                        "MySql"
                    ]
                },
                "ErrorNumbersToAdd": {
                    "type": "array",
                    "items": {
                        "type": "number"
                    },
                    "title": "Error numbers to add",
                    "description": "Additional SQL error numbers that should be considered transient."
                },
                "MaxRetryCount": {
                    "type": "integer",
                    "title": "Max retry count",
                    "description": "The maximum number of retry attempts to connect DB.",
                    "default": 10
                },
                "MaxRetryDelay": {
                    "type": "integer",
                    "title": "Max retry delay",
                    "description": "The maximum delay between retries of DB connection.",
                    "default": 30
                }
            },
            "required": [
                "DatabaseType",
                "MaxRetryCount",
                "MaxRetryDelay"
            ]
        },
        "DbDocSettings": {
            "type": "object",
            "title": "DB Documenter Settings",
            "description": "Settings related to the DB Documenter.",
            "properties": {
                "FilePath": {
                    "type": "string",
                    "title": "File Path",
                    "description": "Path to dbdoc.json.",
                    "default": "/data/dbdoc/dbdoc.json"
                },
                "ShowTableData": {
                    "type": "boolean",
                    "title": "Show Table Data",
                    "description": "Whether to show table data when selecting the Table Data tab.",
                    "default": false
                },
                "ReadOnlyTableData": {
                    "type": "boolean",
                    "title": "Read Only Table Data",
                    "description": "Determines whether table records are editable.",
                    "default": true
                }
            },
            "required": [
                "FilePath"
            ]
        },
        "EmailSettings": {
            "type": "object",
            "properties": {
                "AdminAddress": {
                    "type": "string",
                    "title": "Admin Address",
                    "description": "Email 'admin' address.",
                    "examples": [
                        "noreply@example.com"
                    ]
                },
                "EnableSsl": {
                    "type": "boolean",
                    "title": "Enable SSL",
                    "description": "Whether to use TLS (SSL) when connecting to the SMTP server.",
                    "default": true
                },
                "FromAddress": {
                    "type": "string",
                    "title": "From Address",
                    "description": "Email 'from' address.",
                    "examples": [
                        "noreply@example.com"
                    ]
                },
                "Password": {
                    "type": "string",
                    "title": "SMTP Password",
                    "description": "Password to use when connecting to the SMTP server"
                },
                "Port": {
                    "type": "integer",
                    "title": "SMTP Port",
                    "description": "Port to use when connecting to the SMTP server",
                    "enum": [
                        25,
                        465,
                        587
                    ],
                    "default": 465
                },
                "SMTP": {
                    "type": "string",
                    "title": "SMTP hostname",
                    "description": "Hostname of the SMTP server to use."
                },
                "UserName": {
                    "type": "string",
                    "title": "SMTP Username",
                    "description": "Username to use when connecting to the SMTP server"
                }
            },
            "required": [
                "SMTP",
                "Port",
                "FromAddress",
                "AdminAddress"
            ]
        },
        "FooterMenuSettings": {
            "type": "object",
            "title": "Footer Menu Settings",
            "properties": {
                "Path": {
                    "type": "string",
                    "title": "Footer Menu Settings Path",
                    "description": "Settings related to footer menu.",
                    "default": "/data/menu/footer-menu.json"
                }
            },
            "required": [
                "Path"
            ]
        },
        "GitLabSettings": {
            "type": "object",
            "properties": {
                "AwsApiToken": {
                    "type": "string",
                    "title": "GitLab AWS API Token",
                    "description": ""
                },
                "AwsApiUrl": {
                    "type": "string",
                    "title": "GitLab AWS API Url",
                    "description": "AWS API Gateway Url.",
                    "examples": [
                        "https://example.execute-api.eu-west-1.amazonaws.com/beta/gitpush"
                    ]
                },
                "Branch": {
                    "type": "string",
                    "title": "GitLab Branch",
                    "description": "Name of a GitLab branch where changes are applied to",
                    "examples": [
                        "develop"
                    ]
                },
                "ProjectId": {
                    "type": "string",
                    "title": "GitLab Project Id",
                    "description": "Name of the GitLab project changes are applied to",
                    "examples": [
                        "blueberry/bbwt3"
                    ]
                },
                "GitLabApiUrl": {
                    "type": "string",
                    "title": "GitLab API URL",
                    "description": "GitLab API URL",
                    "examples": [
                        "https://gitlab.bbconsult.co.uk/api/v4"
                    ]
                },
                "GitLabApiToken": {
                    "type": "string",
                    "title": "GitLab API token",
                    "description": "GitLab API token"
                }
            },
            "required": [
                "ProjectId",
                "AwsApiUrl",
                "AwsApiToken",
                "Branch"
            ]
        },
        "Graylog": {
            "type": "object",
            "title": "Graylog Settings",
            "description": "The application is connected to Graylog which is a provider for logs viewing and analyzing. In particular, with Graylog settings section we can turn on/off writing to the Graylog service.",
            "properties": {
                "Enabled": {
                    "type": "boolean",
                    "title": "Enables/disables writting to Graylog",
                    "default": "True"
                },
                "LogEventLevel": {
                    "type": "string",
                    "title": "Level of logs detailing (Verbose/Debug/Information/Warning/Error/Fatal)",
                    "default": "Warning"
                },
                "ProjectName": {
                    "type": "string",
                    "title": "Project name added as a property to a log record.",
                    "default": "BBWT3"
                }
            }
        },
        "Jwt": {
            "type": "object",
            "title": "JWT Settings",
            "description": "Settings to configure JWT authorization.",
            "properties": {
                "Key": {
                    "type": "string",
                    "title": "Secret Key",
                    "description": "Key for encryption. 32 characters minimum."
                },
                "Issuer": {
                    "type": "string",
                    "title": "Issuer",
                    "description": "Token publisher."
                },
                "Audience": {
                    "type": "string",
                    "title": "Audience",
                    "description": "Token consumer."
                }
            }
        },
        "LiveTypeEnvironments": {
            "type": "string",
            "title": "Live Type Application Environments",
            "description": "Determines a list of 'live type' environments (e.g. Production, UAT). The application may apply different logic and handle data depending on environment (for exampe, how the application seeds inital users). This setting helps to determine an environment of a 'live type' centrally.",
            "default": "production, uat"
        },
        "MembershipSettings": {
            "type": "object",
            "title": "Membership settings",
            "description": "Settings of the Core Membership module.",
            "properties": {
                "RolesFilePath": {
                    "type": "string",
                    "title": "Roles File Path",
                    "description": "Path to roles.json which contains BBWT roles and permissions",
                    "default": "/data/roles/roles.json"
                }
            },
            "required": [
                "RolesFilePath"
            ]
        },
        "MenuSettings": {
            "type": "object",
            "title": "Menu Settings",
            "description": "Settings related to the main menu.",
            "properties": {
                "Path": {
                    "type": "string",
                    "title": "Menu Settings Path",
                    "default": "/data/menu/main-menu.json"
                }
            },
            "required": [
                "Path"
            ]
        },
        "PwaEnabled": {
            "type": "boolean",
            "title": "PWA enabled",
            "description": "Determines whether PWA is enabled. Default is false. IMPORTANT! Please note that enabling Content Security Policy at the same time that PWA can make the latter to stop working. See https://pts.bbconsult.co.uk/issueEditor?id=258175 for details.",
            "default": false
        },
        "RayGunSettings": {
            "type": "object",
            "properties": {
                "ApiKey": {
                    "type": "string",
                    "title": "RayGun API Key",
                    "description": "API key for RayGun integration."
                },
                "ApplicationVersion": {
                    "type": "string",
                    "title": "RayGun application version",
                    "description": "Application version to link to in RayGun."
                }
            },
            "required": [
                "ApiKey",
                "ApplicationVersion"
            ]
        },
        "ReCaptchaSettings": {
            "type": "object",
            "properties": {
                "ApiLink": {
                    "type": "string",
                    "title": "API Link",
                    "description": "ReCAPTCHA API URL"
                },
                "SecretKey": {
                    "type": "string",
                    "title": "Secret Key",
                    "description": "ReCAPTCHA secret API key"
                },
                "SiteKey": {
                    "type": "string",
                    "title": "Site Key",
                    "description": "ReCAPTCHA site API key"
                },
                "AcceptableScore": {
                    "type": "number",
                    "title": "Acceptable score",
                    "description": "This parameter acceptable score is responsible for the minimum reCAPTCHA score at which the user will not be considered a bot. The score ranges from 0 - bot, to 1 - human, so the higher the limit, the harder it is for the bot to trick the system, but also the higher the likelihood that the real user will be identified as a bot."
                }
            }
        },
        "RunMigrationsOnStart": {
            "type": "boolean",
            "title": "Run migrations on start",
            "description": "Instruction to apply new migrations on application start. In most project cases we suppose it to be triggered as a part of CI/CD process. Instead, in rare cases some projects can do it only on application start.",
            "default": false
        },
        "RuntimeEditor": {
            "type": "object",
            "properties": {
                "DictionaryFilePath": {
                    "type": "string",
                    "title": "Phrases Dictionary File Path",
                    "description": "A path in the application's folder where a JSON file with the RTE phrases dictionary stored. This file is not placed in GitLab repository. It's generated by the RTE script running in CI/CD job and added to the files deployed on the server.",
                    "default": "/data/runtime-editor/dictionary.json"
                },
                "EditionFilePath": {
                    "type": "string",
                    "title": "Phrases Dictionary Edition File Path",
                    "description": "GitLab path where a JSON file with a current edition of RTE phrases dictionary stored. This file is placed in GitLab repository. It's generated and then updated by the RTE script running in CI/CD job and added to the files deployed on the server.",
                    "default": "/data/runtime-editor/edition.json"
                },
                "EditsGitBranch": {
                    "type": "string",
                    "title": "Edits GIT Branch",
                    "description": "GitLab branch where JSON files with edits come to from the running website. The expected possible reason to change the value is a situation when PM wants to review edits before they are applied to the main branch (develop). Note, if you customize this setting, you need to set the same value for a corresponding setting (RTE_EDITS_AUTO_RUN_BRANCH) of the Gitlab settings as well.",
                    "default": "develop"
                },
                "EditJsonFilesPath": {
                    "type": "string",
                    "title": "Edits JSON Files Path",
                    "description": "GitLab folder where JSON files with edits come to. When the website submits edits, it sends a commit with a JSON file containing edits data. The file is placed in this folder.",
                    "default": "scripts/RuntimeEditorData/Edits/"
                },
                "EditsCommitName": {
                    "type": "string",
                    "title": "Edits Commit Name",
                    "description": "Name of a commit with an edits JSON files.",
                    "default": "#nt Runtime Editor - website edit(s)"
                }
            }
        },
        "Serilog": {
            "type": "object",
            "title": "Serilog",
            "description": "Serilog settings. See https://procodeguide.com/programming/aspnet-core-logging-with-serilog/#Configure_Serilog_in_ASPNET_Core."
        },
        "StorageSettings": {
            "type": "object",
            "properties": {
                "ProviderName": {
                    "type": "string",
                    "title": "Provider Name",
                    "description": "Provider that used for files and configuration storing.",
                    "enum": [
                        "AWS",
                        "Azure",
                        "DiskSpace"
                    ]
                }
            },
            "required": [
                "ProviderName"
            ]
        },
        "SupportSettings": {
            "type": "object",
            "properties": {
                "EmailAddress1": {
                    "type": "string",
                    "title": "Support Email Address 1",
                    "description": "Email 1 to send problem reports to.",
                    "examples": [
                        "user1@example.com"
                    ]
                },
                "EmailAddress2": {
                    "type": "string",
                    "title": "Support Email Address 2",
                    "description": "Email 2 to send problem reports to.",
                    "examples": [
                        "user1@example.com"
                    ]
                },
                "EmailAddress3": {
                    "type": "string",
                    "title": "Support Email Address 3",
                    "description": "Email 3 to send problem reports to.",
                    "examples": [
                        "user1@example.com"
                    ]
                },
                "EmailAddress4": {
                    "type": "string",
                    "title": "Support Email Address 4",
                    "description": "Email 4 to send problem reports to.",
                    "examples": [
                        "user1@example.com"
                    ]
                }
            },
            "required": [
                "EmailAddress1"
            ]
        },
        "SustainsysSaml": {
            "type": "object",
            "properties": {
                "AppFederationMetadataUrl": {
                    "type": "string",
                    "title": "App Federation Metadata Url",
                    "description": "App Federation Metadata Url for Azure AD case",
                    "examples": [
                        "https://login.microsoftonline.com/1234569d-bf96-4582-8750-5e11a69bace9/federationmetadata/2007-06/federationmetadata.xml?appid=5b7e1234-672b-4856-9606-aa5c78055305"
                    ]
                },
                "Enabled": {
                    "type": "boolean"
                },
                "IdentifierUrl": {
                    "type": "string",
                    "title": "Identifier (Entity Id)",
                    "examples": [
                        "https://localhost:44367/Saml2"
                    ]
                },
                "ProviderIdentifierUrl": {
                    "type": "string",
                    "title": "SAML Provider Identifier",
                    "description": "Azure AD Identifier for Azure AD case",
                    "examples": [
                        "https://sts.windows.net/1234569d-bf96-4582-8750-5e11a69bace9/"
                    ]
                }
            },
            "required": [
                "IdentifierUrl",
                "ProviderIdentifierUrl",
                "AppFederationMetadataUrl"
            ]
        },
        "UserLoginSettings": {
            "type": "object",
            "properties": {
                "TwoFaAppName": {
                    "type": "string",
                    "title": "2FA Application Name",
                    "description": "Application name displayed in the authenticator."
                },
                "ShowNewBrowserLoginAlert": {
                    "type": "boolean",
                    "title": "Show new browser login alert",
                    "description": "If true, displays an information alert whenever the user logs in with a different browser."
                }
            }
        },
        "WebServerLogsSettings": {
            "type": "object",
            "properties": {
                "FolderPath": {
                    "type": "string",
                    "title": "Folder path",
                    "description": "Path to folder with NCSA logs to parse"
                },
                "SourceName": {
                    "type": "string",
                    "title": "Source name",
                    "description": "Source to specify for web server logs (IIS, nginx etc)"
                },
                "AppName": {
                    "type": "string",
                    "title": "App name",
                    "description": "App name to specify for web server logs"
                }
            },
            "required": [
                "FolderPath",
                "SourceName",
                "AppName"
            ]
        },
        "SpaDevelopmentServer": {
            "type": "string",
            "title": "SPA Proxy url",
            "description": "URL of the SPA development server if app is launched in development environment. In case it is launched in docker it should be http://bbwt3-ui:4200",
            "default": "http://localhost:4200"
        },
        "AllowedHosts": {
            "type": "string",
            "title": "AllowedHosts",
            "description": "The hosts headers that are allowed to access this site. At least one value is required.",
            "default": "localhost"
        }
    }
}
